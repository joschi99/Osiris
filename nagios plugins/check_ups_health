#! /usr/bin/perl -w
# nagios: +epn

package GLPlugin;
use strict;
use IO::File;
use File::Basename;
use Digest::MD5 qw(md5_hex);
use Errno;
#use AutoLoader;
our $AUTOLOAD;

use constant { OK => 0, WARNING => 1, CRITICAL => 2, UNKNOWN => 3 };

{
  our $mode = undef;
  our $plugin = undef;
  our $pluginname = basename($ENV{'NAGIOS_PLUGIN'} || $0);
  our $blacklist = undef;
  our $info = [];
  our $extendedinfo = [];
  our $summary = [];
  our $variables = {};
}

sub new {
  my $class = shift;
  my %params = @_;
  my $self = {};
  bless $self, $class;
  $GLPlugin::plugin = GLPlugin::Commandline->new(%params);
  return $self;
}

sub init {
  my $self = shift;
  if ($self->opts->can("blacklist") && $self->opts->blacklist &&
      -f $self->opts->blacklist) {
    $self->opts->blacklist = do {
        local (@ARGV, $/) = $self->opts->blacklist; <> };
  }
}

sub dumper {
  my $self = shift;
  my $object = shift;
  my $run = $object->{runtime};
  delete $object->{runtime};
  printf STDERR "%s\n", Data::Dumper::Dumper($object);
  $object->{runtime} = $run;
}

sub no_such_mode {
  my $self = shift;
  printf "Mode %s is not implemented for this type of device\n",
      $self->opts->mode;
  exit 3;
}

#########################################################
# framework-related. setup, options
#
sub add_default_args {
  my $self = shift;
  $self->add_arg(
      spec => 'regexp',
      help => "--regexp
     if this parameter is used, name will be interpreted as a
     regular expression",
      required => 0,);
  $self->add_arg(
      spec => 'warning=s',
      help => "--warning
     The warning threshold",
      required => 0,);
  $self->add_arg(
      spec => 'critical=s',
      help => "--critical
     The critical threshold",
      required => 0,);
  $self->add_arg(
      spec => 'warningx=s%',
      help => '--warningx
     The extended warning thresholds
     e.g. --warningx db_msdb_free_pct=6: to override the threshold for a
     specific item ',
      required => 0,
  );
  $self->add_arg(
      spec => 'criticalx=s%',
      help => '--criticalx
     The extended critical thresholds',
      required => 0,
  );
  $self->add_arg(
      spec => 'environment|e=s%',
      help => "--environment
     Add a variable to the plugin's environment",
      required => 0,
  );
  $self->add_arg(
      spec => 'negate=s%',
      help => "--negate
     Emulate the negate plugin. --negate warning=critical --negate unknown=critical",
      required => 0,
  );
  $self->add_arg(
      spec => 'with-mymodules-dyn-dir=s',
      help => "--with-mymodules-dyn-dir
     Add-on modules for the my-modes will be searched in this directory",
      required => 0,
  );
  $self->add_arg(
      spec => 'morphmessage=s%',
      help => '--morphmessage
     Modify the final output message',
      required => 0,
  );
  $self->add_arg(
      spec => 'morphperfdata=s%',
      help => "--morphperfdata
     The parameter allows you to change performance data labels.
     It's a perl regexp and a substitution.
     Example: --morphperfdata '(.*)ISATAP(.*)'='\$1patasi\$2'",
      required => 0,
  );
  $self->add_arg(
      spec => 'report=s',
      help => "--report
     Can be used to shorten the output",
      required => 0,
      default => 'long',
  );
  $self->add_arg(
      spec => 'multiline',
      help => '--multiline
     Multiline output',
      required => 0,
  );
  $self->add_arg(
      spec => 'isvalidtime=i',
      help => '--isvalidtime
     Signals the plugin to return OK if now is not a valid check time',
      required => 0,
      default => 1,
  );
  $self->add_arg(
      spec => 'drecksptkdb=s',
      help => "--drecksptkdb
     This parameter must be used instead of --name, because Devel::ptkdb is stealing the latter from the command line",
      aliasfor => "name",
      required => 0,
  );
}

sub add_modes {
  my $self = shift;
  my $modes = shift;
  my $modestring = "";
  my @modes = @{$modes};
  my $longest = length ((reverse sort {length $a <=> length $b} map { $_->[1] } @modes)[0]);
  my $format = "       %-".
      (length ((reverse sort {length $a <=> length $b} map { $_->[1] } @modes)[0])).
      "s\t(%s)\n";
  foreach (@modes) {
    $modestring .= sprintf $format, $_->[1], $_->[3];
  }
  $modestring .= sprintf "\n";
  $GLPlugin::plugin->{modestring} = $modestring;
}

sub add_arg {
  my $self = shift;
  my %args = @_;
  if ($args{help} =~ /^--mode/) {
    $args{help} .= "\n".$GLPlugin::plugin->{modestring};
  }
  $GLPlugin::plugin->{opts}->add_arg(%args);
}

sub add_mode {
  my $self = shift;
  my %args = @_;
  push(@{$GLPlugin::plugin->{modes}}, \%args);
  my $longest = length ((reverse sort {length $a <=> length $b} map { $_->{spec} } @{$GLPlugin::plugin->{modes}})[0]);
  my $format = "       %-".
      (length ((reverse sort {length $a <=> length $b} map { $_->{spec} } @{$GLPlugin::plugin->{modes}})[0])).
      "s\t(%s)\n";
  $GLPlugin::plugin->{modestring} = "";
  foreach (@{$GLPlugin::plugin->{modes}}) {
    $GLPlugin::plugin->{modestring} .= sprintf $format, $_->{spec}, $_->{help};
  }
  $GLPlugin::plugin->{modestring} .= "\n";
}

sub validate_args {
  my $self = shift;
  if ($self->opts->mode =~ /^my-([^\-.]+)/) {
    my $param = $self->opts->mode;
    $param =~ s/\-/::/g;
    $self->add_mode(
        internal => $param,
        spec => $self->opts->mode,
        alias => undef,
        help => 'my extension',
    );
  } elsif ($self->opts->mode eq 'encode') {
    my $input = <>;
    chomp $input;
    $input =~ s/([^A-Za-z0-9])/sprintf("%%%02X", ord($1))/seg;
    printf "%s\n", $input;
    exit 0;
  } elsif ((! grep { $self->opts->mode eq $_ } map { $_->{spec} } @{$GLPlugin::plugin->{modes}}) &&
      (! grep { $self->opts->mode eq $_ } map { defined $_->{alias} ? @{$_->{alias}} : () } @{$GLPlugin::plugin->{modes}})) {
    printf "UNKNOWN - mode %s\n", $self->opts->mode;
    $self->opts->print_help();
    exit 3;
  }
  if ($self->opts->name && $self->opts->name =~ /(%22)|(%27)/) {
    my $name = $self->opts->name;
    $name =~ s/\%([A-Fa-f0-9]{2})/pack('C', hex($1))/seg;
    $self->override_opt('name', $name);
  }
  $GLPlugin::mode = (
      map { $_->{internal} }
      grep {
         ($self->opts->mode eq $_->{spec}) ||
         ( defined $_->{alias} && grep { $self->opts->mode eq $_ } @{$_->{alias}})
      } @{$GLPlugin::plugin->{modes}}
  )[0];
  if ($self->opts->multiline) {
    $ENV{NRPE_MULTILINESUPPORT} = 1;
  } else {
    $ENV{NRPE_MULTILINESUPPORT} = 0;
  }
  if ($self->opts->can("statefilesdir") && ! $self->opts->statefilesdir) {
    if ($^O =~ /MSWin/) {
      if (defined $ENV{TEMP}) {
        $self->override_opt('statefilesdir', $ENV{TEMP}."/".$GLPlugin::plugin->{name});
      } elsif (defined $ENV{TMP}) {
        $self->override_opt('statefilesdir', $ENV{TMP}."/".$GLPlugin::plugin->{name});
      } elsif (defined $ENV{windir}) {
        $self->override_opt('statefilesdir', File::Spec->catfile($ENV{windir}, 'Temp')."/".$GLPlugin::plugin->{name});
      } else {
        $self->override_opt('statefilesdir', "C:/".$GLPlugin::plugin->{name});
      }
    } elsif (exists $ENV{OMD_ROOT}) {
      $self->override_opt('statefilesdir', $ENV{OMD_ROOT}."/var/tmp/".$GLPlugin::plugin->{name});
    } else {
      $self->override_opt('statefilesdir', "/var/tmp/".$GLPlugin::plugin->{name});
    }
  }
  $GLPlugin::plugin->{statefilesdir} = $self->opts->statefilesdir 
      if $self->opts->can("statefilesdir");
  if ($self->opts->can("warningx") && $self->opts->warningx) {
    foreach my $key (keys %{$self->opts->warningx}) {
      $self->set_thresholds(metric => $key, 
          warning => $self->opts->warningx->{$key});
    }
  }
  if ($self->opts->can("criticalx") && $self->opts->criticalx) {
    foreach my $key (keys %{$self->opts->criticalx}) {
      $self->set_thresholds(metric => $key, 
          critical => $self->opts->criticalx->{$key});
    }
  }
  $self->set_timeout_alarm() if ! $SIG{'ALRM'};
}

sub set_timeout_alarm {
  my $self = shift;
  $SIG{'ALRM'} = sub {
    printf "UNKNOWN - %s timed out after %d seconds\n",
        $GLPlugin::plugin->{name}, $self->opts->timeout;
    exit 3;
  };
  alarm($self->opts->timeout);
}

#########################################################
# global helpers
#
sub set_variable {
  my $self = shift;
  my $key = shift;
  my $value = shift;
  $GLPlugin::variables->{$key} = $value;
}

sub get_variable {
  my $self = shift;
  my $key = shift;
  my $fallback = shift;
  return exists $GLPlugin::variables->{$key} ?
      $GLPlugin::variables->{$key} : $fallback;
}

sub debug {
  my $self = shift;
  my $format = shift;
  my $tracefile = "/tmp/".$GLPlugin::pluginname.".trace";
  $self->{trace} = -f $tracefile ? 1 : 0;
  if ($self->get_variable("verbose") &&
      $self->get_variable("verbose") > $self->get_variable("verbosity", 10)) {
    printf("%s: ", scalar localtime);
    printf($format, @_);
    printf "\n";
  }
  if ($self->{trace}) {
    my $logfh = new IO::File;
    $logfh->autoflush(1);
    if ($logfh->open($tracefile, "a")) {
      $logfh->printf("%s: ", scalar localtime);
      $logfh->printf($format, @_);
      $logfh->printf("\n");
      $logfh->close();
    }
  }
}

sub filter_namex {
  my $self = shift;
  my $opt = shift;
  my $name = shift;
  if ($opt) {
    if ($self->opts->regexp) {
      if ($name =~ /$opt/i) {
        return 1;
      }
    } else {
      if (lc $opt eq lc $name) {
        return 1;
      }
    }
  } else {
    return 1;
  }
  return 0;
}

sub filter_name {
  my $self = shift;
  my $name = shift;
  return $self->filter_namex($self->opts->name, $name);
}

sub filter_name2 {
  my $self = shift;
  my $name = shift;
  return $self->filter_namex($self->opts->name2, $name);
}

sub filter_name3 {
  my $self = shift;
  my $name = shift;
  return $self->filter_namex($self->opts->name3, $name);
}

sub version_is_minimum {
  my $self = shift;
  my $version = shift;
  my $installed_version;
  my $newer = 1;
  if ($self->get_variable("version")) {
    $installed_version = $self->get_variable("version");
  } elsif (exists $self->{version}) {
    $installed_version = $self->{version};
  } else {
    return 0;
  }
  my @v1 = map { $_ eq "x" ? 0 : $_ } split(/\./, $version);
  my @v2 = split(/\./, $installed_version);
  if (scalar(@v1) > scalar(@v2)) {
    push(@v2, (0) x (scalar(@v1) - scalar(@v2)));
  } elsif (scalar(@v2) > scalar(@v1)) {
    push(@v1, (0) x (scalar(@v2) - scalar(@v1)));
  }
  foreach my $pos (0..$#v1) {
    if ($v2[$pos] > $v1[$pos]) {
      $newer = 1;
      last;
    } elsif ($v2[$pos] < $v1[$pos]) {
      $newer = 0;
      last;
    }
  }
  return $newer;
}

sub accentfree {
  my $self = shift;
  my $text = shift;
  # thanks mycoyne who posted this accent-remove-algorithm
  # http://www.experts-exchange.com/Programming/Languages/Scripting/Perl/Q_23275533.html#a21234612
  my @transformed;
  my %replace = (
    '9a' => 's', '9c' => 'oe', '9e' => 'z', '9f' => 'Y', 'c0' => 'A', 'c1' => 'A',
    'c2' => 'A', 'c3' => 'A', 'c4' => 'A', 'c5' => 'A', 'c6' => 'AE', 'c7' => 'C',
    'c8' => 'E', 'c9' => 'E', 'ca' => 'E', 'cb' => 'E', 'cc' => 'I', 'cd' => 'I',
    'ce' => 'I', 'cf' => 'I', 'd0' => 'D', 'd1' => 'N', 'd2' => 'O', 'd3' => 'O',
    'd4' => 'O', 'd5' => 'O', 'd6' => 'O', 'd8' => 'O', 'd9' => 'U', 'da' => 'U',
    'db' => 'U', 'dc' => 'U', 'dd' => 'Y', 'e0' => 'a', 'e1' => 'a', 'e2' => 'a',
    'e3' => 'a', 'e4' => 'a', 'e5' => 'a', 'e6' => 'ae', 'e7' => 'c', 'e8' => 'e',
    'e9' => 'e', 'ea' => 'e', 'eb' => 'e', 'ec' => 'i', 'ed' => 'i', 'ee' => 'i',
    'ef' => 'i', 'f0' => 'o', 'f1' => 'n', 'f2' => 'o', 'f3' => 'o', 'f4' => 'o',
    'f5' => 'o', 'f6' => 'o', 'f8' => 'o', 'f9' => 'u', 'fa' => 'u', 'fb' => 'u',
    'fc' => 'u', 'fd' => 'y', 'ff' => 'y',
  );
  my @letters = split //, $text;;
  for (my $i = 0; $i <= $#letters; $i++) {
    my $hex = sprintf "%x", ord($letters[$i]);
    $letters[$i] = $replace{$hex} if (exists $replace{$hex});
  }
  push @transformed, @letters;
  return join '', @transformed;
}

sub dump {
  my $self = shift;
  my $class = ref($self);
  $class =~ s/^.*:://;
  if (exists $self->{flat_indices}) {
    printf "[%s_%s]\n", uc $class, $self->{flat_indices};
  } else {
    printf "[%s]\n", uc $class;
  }
  foreach (grep !/^(info|trace|warning|critical|blacklisted|extendedinfo|flat_indices|indices)/, sort keys %{$self}) {
    printf "%s: %s\n", $_, $self->{$_} if defined $self->{$_} && ref($self->{$_}) ne "ARRAY";
  }
  if ($self->{info}) {
    printf "info: %s\n", $self->{info};
  }
  printf "\n";
  foreach (grep !/^(info|trace|warning|critical|blacklisted|extendedinfo|flat_indices|indices)/, sort keys %{$self}) {
    if (defined $self->{$_} && ref($self->{$_}) eq "ARRAY") {
      my $have_flat_indices = 1;
      foreach my $obj (@{$self->{$_}}) {
        $have_flat_indices = 0 if (! exists $obj->{flat_indices});
      }
      if ($have_flat_indices) {
        foreach my $obj (sort {
            join('', map { sprintf("%30d",$_) } split( /\./, $a->{flat_indices})) cmp
            join('', map { sprintf("%30d",$_) } split( /\./, $b->{flat_indices}))
        } @{$self->{$_}}) {
          $obj->dump();
        }
      } else {
        foreach my $obj (@{$self->{$_}}) {
          $obj->dump();
        }
      }
    }
  }
}

sub table_ascii {
  my $self = shift;
  my $table = shift;
  my $titles = shift;
  my $text = "";
  my $column_length = {};
  my $column = 0;
  foreach (@{$titles}) {
    $column_length->{$column++} = length($_);
  }
  foreach my $tr (@{$table}) {
    @{$tr} = map { ref($_) eq "ARRAY" ? $_->[0] : $_; } @{$tr};
    $column = 0;
    foreach my $td (@{$tr}) {
      if (length($td) > $column_length->{$column}) {
        $column_length->{$column} = length($td);
      }
      $column++;
    }
  }
  $column = 0;
  foreach (@{$titles}) {
    $column_length->{$column} = "%".($column_length->{$column} + 3)."s";
    $column++;
  }
  $column = 0;
  foreach (@{$titles}) {
    $text .= sprintf $column_length->{$column++}, $_;
  }
  $text .= "\n";
  foreach my $tr (@{$table}) {
    $column = 0;
    foreach my $td (@{$tr}) {
      $text .= sprintf $column_length->{$column++}, $td;
    }
    $text .= "\n";
  }
  return $text;
}

sub table_html {
  my $self = shift;
  my $table = shift;
  my $titles = shift;
  my $text = "";
  $text .= "<table style=\"border-collapse:collapse; border: 1px solid black;\">";
  $text .= "<tr>";
  foreach (@{$titles}) {
    $text .= sprintf "<th style=\"text-align: left; padding-left: 4px; padding-right: 6px;\">%s</th>", $_;
  }
  $text .= "</tr>";
  foreach my $tr (@{$table}) {
    $text .= "<tr>";
    foreach my $td (@{$tr}) {
      my $class = "statusOK";
      if (ref($td) eq "ARRAY") {
        $class = {
          0 => "statusOK",
          1 => "statusWARNING",
          2 => "statusCRITICAL",
          3 => "statusUNKNOWN",
        }->{$td->[1]};
        $td = $td->[0];
      }
      $text .= sprintf "<td style=\"text-align: left; padding-left: 4px; padding-right: 6px;\" class=\"%s\">%s</td>", $class, $td;
    }
    $text .= "</tr>";
  }
  $text .= "</table>";
  return $text;
}

sub load_my_extension {
  my $self = shift;
  if ($self->opts->mode =~ /^my-([^-.]+)/) {
    my $class = $1;
    my $loaderror = undef;
    substr($class, 0, 1) = uc substr($class, 0, 1);
    if (! $self->opts->get("with-mymodules-dyn-dir")) {
      $self->override_opt("with-mymodules-dyn-dir", "");
    }
    my $plugin_name = $GLPlugin::pluginname;
    $plugin_name =~ /check_(.*?)_health/;
    $plugin_name = "Check".uc(substr($1, 0, 1)).substr($1, 1)."Health";
    foreach my $libpath (split(":", $self->opts->get("with-mymodules-dyn-dir"))) {
      foreach my $extmod (glob $libpath."/".$plugin_name."*.pm") {
        my $stderrvar;
        *SAVEERR = *STDERR;
        open OUT ,'>',\$stderrvar;
        *STDERR = *OUT;
        eval {
          $self->debug(sprintf "loading module %s", $extmod);
          require $extmod;
        };
        *STDERR = *SAVEERR;
        if ($@) {
          $loaderror = $extmod;
          $self->debug(sprintf "failed loading module %s: %s", $extmod, $@);
        }
      }
    }
    my $original_class = ref($self);
    my $original_init = $self->can("init");
    bless $self, "My$class";
    if ($self->isa("GLPlugin")) {
      my $new_init = $self->can("init");
      if ($new_init == $original_init) {
          $self->add_unknown(
              sprintf "Class %s needs an init() method", ref($self));
      } else {
        # now go back to check_*_health.pl where init() will be called
      }
    } else {
      bless $self, $original_class;
      $self->add_unknown(
          sprintf "Class %s is not a subclass of GLPlugin%s",
              "My$class",
              $loaderror ? sprintf " (syntax error in %s?)", $loaderror : "" );
      my ($code, $message) = $self->check_messages(join => ', ', join_all => ', ');
      $self->nagios_exit($code, $message);
    }
  }
}

sub decode_password {
  my $self = shift;
  my $password = shift;
  if ($password && $password =~ /^rfc3986:\/\/(.*)/) {
    $password =~ s/\%([A-Fa-f0-9]{2})/pack('C', hex($1))/seg;
  }
  return $password;
}


#########################################################
# runtime methods
#
sub mode : lvalue {
  my $self = shift;
  $GLPlugin::mode;
}

sub statefilesdir {
  my $self = shift;
  return $GLPlugin::plugin->{statefilesdir};
}

sub opts { # die beiden _nicht_ in AUTOLOAD schieben, das kracht!
  my $self = shift;
  return $GLPlugin::plugin->opts();
}

sub getopts {
  my $self = shift;
  my $envparams = shift || [];
  $GLPlugin::plugin->getopts();
  # es kann sein, dass beim aufraeumen zum schluss als erstes objekt
  # das $GLPlugin::plugin geloescht wird. in anderen destruktoren
  # (insb. fuer dbi disconnect) steht dann $self->opts->verbose
  # nicht mehr zur verfuegung bzw. $GLPlugin::plugin->opts ist undef.
  $self->set_variable("verbose", $self->opts->verbose);
  #
  # die gueltigkeit von modes wird bereits hier geprueft und nicht danach
  # in validate_args. (zwischen getopts und validate_args wird
  # normalerweise classify aufgerufen, welches bereits eine verbindung
  # zum endgeraet herstellt. bei falschem mode waere das eine verschwendung
  # bzw. durch den exit3 ein evt. unsauberes beenden der verbindung.
  if ((! grep { $self->opts->mode eq $_ } map { $_->{spec} } @{$GLPlugin::plugin->{modes}}) &&
      (! grep { $self->opts->mode eq $_ } map { defined $_->{alias} ? @{$_->{alias}} : () } @{$GLPlugin::plugin->{modes}})) {
    if ($self->opts->mode !~ /^my-/) {
      printf "UNKNOWN - mode %s\n", $self->opts->mode;
      $self->opts->print_help();
      exit 3;
    }
  }
}

sub add_ok {
  my $self = shift;
  my $message = shift || $self->{info};
  $self->add_message(OK, $message);
}

sub add_warning {
  my $self = shift;
  my $message = shift || $self->{info};
  $self->add_message(WARNING, $message);
}

sub add_critical {
  my $self = shift;
  my $message = shift || $self->{info};
  $self->add_message(CRITICAL, $message);
}

sub add_unknown {
  my $self = shift;
  my $message = shift || $self->{info};
  $self->add_message(UNKNOWN, $message);
}

sub add_message {
  my $self = shift;
  my $level = shift;
  my $message = shift || $self->{info};
  $GLPlugin::plugin->add_message($level, $message)
      unless $self->is_blacklisted();
  if (exists $self->{failed}) {
    if ($level == UNKNOWN && $self->{failed} == OK) {
      $self->{failed} = $level;
    } elsif ($level > $self->{failed}) {
      $self->{failed} = $level;
    }
  }
}

sub clear_ok {
  my $self = shift;
  $self->clear_messages(OK);
}

sub clear_warning {
  my $self = shift;
  $self->clear_messages(WARNING);
}

sub clear_critical {
  my $self = shift;
  $self->clear_messages(CRITICAL);
}

sub clear_unknown {
  my $self = shift;
  $self->clear_messages(UNKNOWN);
}

sub clear_all { # deprecated, use clear_messages
  my $self = shift;
  $self->clear_ok();
  $self->clear_warning();
  $self->clear_critical();
  $self->clear_unknown();
}

sub set_level {
  my $self = shift;
  my $code = shift;
  $code = (qw(ok warning critical unknown))[$code] if $code =~ /^\d+$/;
  $code = lc $code;
  if (! exists $self->{tmp_level}) {
    $self->{tmp_level} = {
      ok => 0,
      warning => 0,
      critical => 0,
      unknown => 0,
    };
  }
  $self->{tmp_level}->{$code}++;
}

sub get_level {
  my $self = shift;
  return OK if ! exists $self->{tmp_level};
  my $code = OK;
  $code ||= CRITICAL if $self->{tmp_level}->{critical};
  $code ||= WARNING  if $self->{tmp_level}->{warning};
  $code ||= UNKNOWN  if $self->{tmp_level}->{unknown};
  return $code;
}

#########################################################
# blacklisting
#
sub blacklist {
  my $self = shift;
  $self->{blacklisted} = 1;
}

sub add_blacklist {
  my $self = shift;
  my $list = shift;
  $GLPlugin::blacklist = join('/',
      (split('/', $self->opts->blacklist), $list));
}

sub is_blacklisted {
  my $self = shift;
  if (! $self->opts->can("blacklist")) {
    return 0;
  }
  if (! exists $self->{blacklisted}) {
    $self->{blacklisted} = 0;
  }
  if (exists $self->{blacklisted} && $self->{blacklisted}) {
    return $self->{blacklisted};
  }
  # FAN:459,203/TEMP:102229/ENVSUBSYSTEM
  # FAN_459,FAN_203,TEMP_102229,ENVSUBSYSTEM
  if ($self->opts->blacklist =~ /_/) {
    foreach my $bl_item (split(/,/, $self->opts->blacklist)) {
      if ($bl_item eq $self->internal_name()) {
        $self->{blacklisted} = 1;
      }
    }
  } else {
    foreach my $bl_items (split(/\//, $self->opts->blacklist)) {
      if ($bl_items =~ /^(\w+):([\:\d\-,]+)$/) {
        my $bl_type = $1;
        my $bl_names = $2;
        foreach my $bl_name (split(/,/, $bl_names)) {
          if ($bl_type."_".$bl_name eq $self->internal_name()) {
            $self->{blacklisted} = 1;
          }
        }
      } elsif ($bl_items =~ /^(\w+)$/) {
        if ($bl_items eq $self->internal_name()) {
          $self->{blacklisted} = 1;
        }
      }
    }
  } 
  return $self->{blacklisted};
}

#########################################################
# additional info
#
sub add_info {
  my $self = shift;
  my $info = shift;
  $info = $self->is_blacklisted() ? $info.' (blacklisted)' : $info;
  $self->{info} = $info;
  push(@{$GLPlugin::info}, $info);
}

sub annotate_info {
  my $self = shift;
  my $annotation = shift;
  my $lastinfo = pop(@{$GLPlugin::info});
  $lastinfo .= sprintf ' (%s)', $annotation;
  $self->{info} = $lastinfo;
  push(@{$GLPlugin::info}, $lastinfo);
}

sub add_extendedinfo {  # deprecated
  my $self = shift;
  my $info = shift;
  $self->{extendedinfo} = $info;
  return if ! $self->opts->extendedinfo;
  push(@{$GLPlugin::extendedinfo}, $info);
}

sub get_info {
  my $self = shift;
  my $separator = shift || ' ';
  return join($separator , @{$GLPlugin::info});
}

sub get_last_info {
  my $self = shift;
  return pop(@{$GLPlugin::info});
}

sub get_extendedinfo {
  my $self = shift;
  my $separator = shift || ' ';
  return join($separator, @{$GLPlugin::extendedinfo});
}

sub add_summary {  # deprecated
  my $self = shift;
  my $summary = shift;
  push(@{$GLPlugin::summary}, $summary);
}

sub get_summary {
  my $self = shift;
  return join(', ', @{$GLPlugin::summary});
}

#########################################################
# persistency
#
sub valdiff {
  my $self = shift;
  my $pparams = shift;
  my %params = %{$pparams};
  my @keys = @_;
  my $now = time;
  my $newest_history_set = {};
  my $last_values = $self->load_state(%params) || eval {
    my $empty_events = {};
    foreach (@keys) {
      if (ref($self->{$_}) eq "ARRAY") {
        $empty_events->{$_} = [];
      } else {
        $empty_events->{$_} = 0;
      }
    }
    $empty_events->{timestamp} = 0;
    if ($self->opts->lookback) {
      $empty_events->{lookback_history} = {};
    }
    $empty_events;
  };
  $self->{'delta_timestamp'} = $now - $last_values->{timestamp};
  foreach (@keys) {
    if ($self->opts->lookback) {
      # find a last_value in the history which fits lookback best
      # and overwrite $last_values->{$_} with historic data
      if (exists $last_values->{lookback_history}->{$_}) {
        foreach my $date (sort {$a <=> $b} keys %{$last_values->{lookback_history}->{$_}}) {
            $newest_history_set->{$_} = $last_values->{lookback_history}->{$_}->{$date};
            $newest_history_set->{timestamp} = $date;
        }
        foreach my $date (sort {$a <=> $b} keys %{$last_values->{lookback_history}->{$_}}) {
          if ($date >= ($now - $self->opts->lookback)) {
            $last_values->{$_} = $last_values->{lookback_history}->{$_}->{$date};
            $last_values->{timestamp} = $date;
            last;
          } else {
            delete $last_values->{lookback_history}->{$_}->{$date};
          }
        }
      }
    }
    if ($self->{$_} =~ /^\d+$/) {
      $last_values->{$_} = 0 if ! exists $last_values->{$_};
      if ($self->{$_} >= $last_values->{$_}) {
        $self->{'delta_'.$_} = $self->{$_} - $last_values->{$_};
      } else {
        # vermutlich db restart und zaehler alle auf null
        $self->{'delta_'.$_} = $self->{$_};
      }
      $self->debug(sprintf "delta_%s %f", $_, $self->{'delta_'.$_});
      $self->{$_.'_per_sec'} = $self->{'delta_timestamp'} ?
          $self->{'delta_'.$_} / $self->{'delta_timestamp'} : 0;
    } elsif (ref($self->{$_}) eq "ARRAY") {
      if ((! exists $last_values->{$_} || ! defined $last_values->{$_}) && exists $params{lastarray}) {
        # innerhalb der lookback-zeit wurde nichts in der lookback_history
        # gefunden. allenfalls irgendwas aelteres. normalerweise
        # wuerde jetzt das array als [] initialisiert.
        # d.h. es wuerde ein delta geben, @found s.u.
        # wenn man das nicht will, sondern einfach aktuelles array mit
        # dem array des letzten laufs vergleichen will, setzt man lastarray
        $last_values->{$_} = %{$newest_history_set} ?
            $newest_history_set->{$_} : []
      } elsif ((! exists $last_values->{$_} || ! defined $last_values->{$_}) && ! exists $params{lastarray}) {
        $last_values->{$_} = [] if ! exists $last_values->{$_};
      } elsif (exists $last_values->{$_} && ! defined $last_values->{$_}) {
        # $_ kann es auch ausserhalb des lookback_history-keys als normalen
        # key geben. der zeigt normalerweise auf den entspr. letzten
        # lookback_history eintrag. wurde der wegen ueberalterung abgeschnitten
        # ist der hier auch undef.
        $last_values->{$_} = %{$newest_history_set} ?
            $newest_history_set->{$_} : []
      }
      my %saved = map { $_ => 1 } @{$last_values->{$_}};
      my %current = map { $_ => 1 } @{$self->{$_}};
      my @found = grep(!defined $saved{$_}, @{$self->{$_}});
      my @lost = grep(!defined $current{$_}, @{$last_values->{$_}});
      $self->{'delta_found_'.$_} = \@found;
      $self->{'delta_lost_'.$_} = \@lost;
    }
  }
  $params{save} = eval {
    my $empty_events = {};
    foreach (@keys) {
      $empty_events->{$_} = $self->{$_};
    }
    $empty_events->{timestamp} = $now;
    if ($self->opts->lookback) {
      $empty_events->{lookback_history} = $last_values->{lookback_history};
      foreach (@keys) {
        $empty_events->{lookback_history}->{$_}->{$now} = $self->{$_};
      }
    }
    $empty_events;
  };
  $self->save_state(%params);
}

sub create_statefilesdir {
  my $self = shift;
  if (! -d $self->statefilesdir()) {
    eval {
      use File::Path;
      mkpath $self->statefilesdir();
    };
    if ($@ || ! -w $self->statefilesdir()) {
      $self->add_message(UNKNOWN,
        sprintf "cannot create status dir %s! check your filesystem (permissions/usage/integrity) and disk devices", $self->statefilesdir());
    }
  } elsif (! -w $self->statefilesdir()) {
    $self->add_message(UNKNOWN,
        sprintf "cannot write status dir %s! check your filesystem (permissions/usage/integrity) and disk devices", $self->statefilesdir());
  }
}

sub create_statefile {
  my $self = shift;
  my %params = @_;
  my $extension = "";
  $extension .= $params{name} ? '_'.$params{name} : '';
  $extension =~ s/\//_/g;
  $extension =~ s/\(/_/g;
  $extension =~ s/\)/_/g;
  $extension =~ s/\*/_/g;
  $extension =~ s/\s/_/g;
  return sprintf "%s/%s%s", $self->statefilesdir(),
      $self->opts->mode, lc $extension;
}

sub schimpf {
  my $self = shift;
  printf "statefilesdir %s is not writable.\nYou didn't run this plugin as root, didn't you?\n", $self->statefilesdir();
}

# $self->protect_value('1.1-flat_index', 'cpu_busy', 'percent');
sub protect_value {
  my $self = shift;
  my $ident = shift;
  my $key = shift;
  my $validfunc = shift;
  if (ref($validfunc) ne "CODE" && $validfunc eq "percent") {
    $validfunc = sub {
      my $value = shift;
      return ($value < 0 || $value > 100) ? 0 : 1;
    };
  } elsif (ref($validfunc) ne "CODE" && $validfunc eq "positive") {
    $validfunc = sub {
      my $value = shift;
      return ($value < 0) ? 0 : 1;
    };
  }
  if (&$validfunc($self->{$key})) {
    $self->save_state(name => 'protect_'.$ident.'_'.$key, save => {
        $key => $self->{$key},
        exception => 0,
    });
  } else {
    # if the device gives us an clearly wrong value, simply use the last value.
    my $laststate = $self->load_state(name => 'protect_'.$ident.'_'.$key);
    $self->debug(sprintf "self->{%s} is %s and invalid for the %dth time",
        $key, $self->{$key}, $laststate->{exception} + 1);
    if ($laststate->{exception} <= 5) {
      # but only 5 times.
      # if the error persists, somebody has to check the device.
      $self->{$key} = $laststate->{$key};
    }
    $self->save_state(name => 'protect_'.$ident.'_'.$key, save => {
        $key => $laststate->{$key},
        exception => $laststate->{exception}++,
    });
  }
}

sub save_state {
  my $self = shift;
  my %params = @_;
  $self->create_statefilesdir();
  my $statefile = $self->create_statefile(%params);
  my $tmpfile = $self->statefilesdir().'/check__health_tmp_'.$$;
  if ((ref($params{save}) eq "HASH") && exists $params{save}->{timestamp}) {
    $params{save}->{localtime} = scalar localtime $params{save}->{timestamp};
  }
  my $seekfh = new IO::File;
  if ($seekfh->open($tmpfile, "w")) {
    $seekfh->printf("%s", Data::Dumper::Dumper($params{save}));
    $seekfh->flush();
    $seekfh->close();
    $self->debug(sprintf "saved %s to %s",
        Data::Dumper::Dumper($params{save}), $statefile);
  }
  if (! rename $tmpfile, $statefile) {
    $self->add_message(UNKNOWN,
        sprintf "cannot write status file %s! check your filesystem (permissions/usage/integrity) and disk devices", $statefile);
  }
}

sub load_state {
  my $self = shift;
  my %params = @_;
  my $statefile = $self->create_statefile(%params);
  if ( -f $statefile) {
    our $VAR1;
    eval {
      require $statefile;
    };
    if($@) {
      printf "rumms\n";
    }
    $self->debug(sprintf "load %s", Data::Dumper::Dumper($VAR1));
    return $VAR1;
  } else {
    return undef;
  }
}

#########################################################
# daemon mode
#
sub check_pidfile {
  my $self = shift;
  my $fh = new IO::File;
  if ($fh->open($self->{pidfile}, "r")) {
    my $pid = $fh->getline();
    $fh->close();
    if (! $pid) {
      $self->debug("Found pidfile %s with no valid pid. Exiting.",
          $self->{pidfile});
      return 0;
    } else {
      $self->debug("Found pidfile %s with pid %d", $self->{pidfile}, $pid);
      kill 0, $pid;
      if ($! == Errno::ESRCH) {
        $self->debug("This pidfile is stale. Writing a new one");
        $self->write_pidfile();
        return 1;
      } else {
        $self->debug("This pidfile is held by a running process. Exiting");
        return 0;
      }
    }
  } else {
    $self->debug("Found no pidfile. Writing a new one");
    $self->write_pidfile();
    return 1;
  }
}

sub write_pidfile {
  my $self = shift;
  if (! -d dirname($self->{pidfile})) {
    eval "require File::Path;";
    if (defined(&File::Path::mkpath)) {
      import File::Path;
      eval { mkpath(dirname($self->{pidfile})); };
    } else {
      my @dirs = ();
      map {
          push @dirs, $_;
          mkdir(join('/', @dirs))
              if join('/', @dirs) && ! -d join('/', @dirs);
      } split(/\//, dirname($self->{pidfile}));
    }
  }
  my $fh = new IO::File;
  $fh->autoflush(1);
  if ($fh->open($self->{pidfile}, "w")) {
    $fh->printf("%s", $$);
    $fh->close();
  } else {
    $self->debug("Could not write pidfile %s", $self->{pidfile});
    die "pid file could not be written";
  }
}

sub AUTOLOAD {
  my $self = shift;
  return if ($AUTOLOAD =~ /DESTROY/);
  $self->debug("AUTOLOAD %s\n", $AUTOLOAD)
        if $self->opts->verbose >= 2;
  if ($AUTOLOAD =~ /^(.*)::analyze_and_check_(.*)_subsystem$/) {
    my $class = $1;
    my $subsystem = $2;
    my $analyze = sprintf "analyze_%s_subsystem", $subsystem;
    my $check = sprintf "check_%s_subsystem", $subsystem;
    my @params = @_;
    if (@params) {
      # analyzer class
      my $subsystem_class = shift @params;
      $self->{components}->{$subsystem.'_subsystem'} = $subsystem_class->new();
      $self->debug(sprintf "\$self->{components}->{%s_subsystem} = %s->new()",
          $subsystem, $subsystem_class);
    } else {
      $self->$analyze();
      $self->debug("call %s()", $analyze);
    }
    $self->$check();
  } elsif ($AUTOLOAD =~ /^(.*)::check_(.*)_subsystem$/) {
    my $class = $1;
    my $subsystem = sprintf "%s_subsystem", $2;
    $self->{components}->{$subsystem}->check();
    $self->{components}->{$subsystem}->dump()
        if $self->opts->verbose >= 2;
  } elsif ($AUTOLOAD =~ /^.*::(status_code|check_messages|nagios_exit|html_string|perfdata_string|selected_perfdata|check_thresholds|get_thresholds|opts)$/) {
    return $GLPlugin::plugin->$1(@_);
  } elsif ($AUTOLOAD =~ /^.*::(clear_messages|suppress_messages|add_html|add_perfdata|override_opt|create_opt|set_thresholds|force_thresholds)$/) {
    $GLPlugin::plugin->$1(@_);
  } else {
    $self->debug("AUTOLOAD: class %s has no method %s\n",
        ref($self), $AUTOLOAD);
  }
}


package GLPlugin::Commandline;
use strict;
use constant { OK => 0, WARNING => 1, CRITICAL => 2, UNKNOWN => 3, DEPENDENT => 4 };
our %ERRORS = (
    'OK'        => OK,
    'WARNING'   => WARNING,
    'CRITICAL'  => CRITICAL,
    'UNKNOWN'   => UNKNOWN,
    'DEPENDENT' => DEPENDENT,
);

our %STATUS_TEXT = reverse %ERRORS;


sub new {
  my $class = shift;
  my %params = @_;
  my $self = {
       perfdata => [],
       messages => {
         ok => [],
         warning => [],
         critical => [],
         unknown => [],
       },
       args => [],
       opts => GLPlugin::Commandline::Getopt->new(%params),
       modes => [],
       statefilesdir => undef,
  };
  foreach (qw(shortname usage version url plugin blurb extra
      license timeout)) {
    $self->{$_} = $params{$_};
  }
  bless $self, $class;
  $self->{name} = $self->{plugin};
  $GLPlugin::plugin = $self;
}

sub AUTOLOAD {
  my $self = shift;
  return if ($AUTOLOAD =~ /DESTROY/);
  $self->debug("AUTOLOAD %s\n", $AUTOLOAD)
        if $self->{opts}->verbose >= 2;
  if ($AUTOLOAD =~ /^.*::(add_arg|override_opt|create_opt)$/) {
    $self->{opts}->$1(@_);
  }
}

sub DESTROY {
  my $self = shift;
  # ohne dieses DESTROY rennt nagios_exit in obiges AUTOLOAD rein
  # und fliegt aufs Maul, weil {opts} bereits nicht mehr existiert.
  # Unerklaerliches Verhalten.
}

sub debug {
  my $self = shift;
  my $format = shift;
  my $tracefile = "/tmp/".$GLPlugin::pluginname.".trace";
  $self->{trace} = -f $tracefile ? 1 : 0;
  if ($self->opts->verbose && $self->opts->verbose > 10) {
    printf("%s: ", scalar localtime);
    printf($format, @_);
    printf "\n";
  }
  if ($self->{trace}) {
    my $logfh = new IO::File;
    $logfh->autoflush(1);
    if ($logfh->open($tracefile, "a")) {
      $logfh->printf("%s: ", scalar localtime);
      $logfh->printf($format, @_);
      $logfh->printf("\n");
      $logfh->close();
    }
  }
}

sub opts {
  my $self = shift;
  return $self->{opts};
}

sub getopts {
  my $self = shift;
  $self->opts->getopts();
}

sub add_message {
  my $self = shift;
  my ($code, @messages) = @_;
  $code = (qw(ok warning critical unknown))[$code] if $code =~ /^\d+$/;
  $code = lc $code;
  push @{$self->{messages}->{$code}}, @messages;
}

sub selected_perfdata {
  my $self = shift;
  my $label = shift;
  if ($self->opts->can("selectedperfdata") && $self->opts->selectedperfdata) {
    my $pattern = $self->opts->selectedperfdata;
    return ($label =~ /$pattern/i) ? 1 : 0;
  } else {
    return 1;
  }
}

sub add_perfdata {
  my ($self, %args) = @_;
#printf "add_perfdata %s\n", Data::Dumper::Dumper(\%args);
#printf "add_perfdata %s\n", Data::Dumper::Dumper($self->{thresholds});
#
# wenn warning, critical, dann wird von oben ein expliziter wert mitgegeben
# wenn thresholds
#  wenn label in 
#    warningx $self->{thresholds}->{$label}->{warning} existiert
#  dann nimm $self->{thresholds}->{$label}->{warning}
#  ansonsten thresholds->default->warning
#

  my $label = $args{label};
  my $value = $args{value};
  my $uom = $args{uom} || "";
  my $format = '%d';

  if ($self->opts->can("morphperfdata") && $self->opts->morphperfdata) {
    # 'Intel [R] Interface (\d+) usage'='nic$1'
    foreach my $key (keys %{$self->opts->morphperfdata}) {
      if ($label =~ /$key/) {
        my $replacement = '"'.$self->opts->morphperfdata->{$key}.'"';
        my $oldlabel = $label;
        $label =~ s/$key/$replacement/ee;
        if (exists $self->{thresholds}->{$oldlabel}) {
          %{$self->{thresholds}->{$label}} = %{$self->{thresholds}->{$oldlabel}};
        }
      }
    }
  }
  if ($value =~ /\./) {
    if (defined $args{places}) {
      $value = sprintf '%.'.$args{places}.'f', $value;
    } else {
      $value = sprintf "%.2f", $value;
    }
  } else {
    $value = sprintf "%d", $value;
  }
  my $warn = "";
  my $crit = "";
  my $min = defined $args{min} ? $args{min} : "";
  my $max = defined $args{max} ? $args{max} : "";
  if ($args{thresholds} || (! exists $args{warning} && ! exists $args{critical})) {
    if (exists $self->{thresholds}->{$label}->{warning}) {
      $warn = $self->{thresholds}->{$label}->{warning};
    } elsif (exists $self->{thresholds}->{default}->{warning}) {
      $warn = $self->{thresholds}->{default}->{warning};
    }
    if (exists $self->{thresholds}->{$label}->{critical}) {
      $crit = $self->{thresholds}->{$label}->{critical};
    } elsif (exists $self->{thresholds}->{default}->{critical}) {
      $crit = $self->{thresholds}->{default}->{critical};
    }
  } else {
    if ($args{warning}) {
      $warn = $args{warning};
    }
    if ($args{critical}) {
      $crit = $args{critical};
    }
  }
  if ($uom eq "%") {
    $min = 0;
    $max = 100;
  }
  if (defined $args{places}) {
    # cut off excessive decimals which may be the result of a division
    # length = places*2, no trailing zeroes
    if ($warn ne "") {
      $warn = join("", map {
          s/\.0+$//; $_
      } map {
          s/(\.[1-9]+)0+$/$1/; $_
      } map {
          /[\+\-\d\.]+/ ? sprintf '%.'.2*$args{places}.'f', $_ : $_;
      } split(/([\+\-\d\.]+)/, $warn));
    }
    if ($crit ne "") {
      $crit = join("", map {
          s/\.0+$//; $_
      } map {
          s/(\.[1-9]+)0+$/$1/; $_
      } map {
          /[\+\-\d\.]+/ ? sprintf '%.'.2*$args{places}.'f', $_ : $_;
      } split(/([\+\-\d\.]+)/, $crit));
    }
    if ($min ne "") {
      $min = join("", map {
          s/\.0+$//; $_
      } map {
          s/(\.[1-9]+)0+$/$1/; $_
      } map {
          /[\+\-\d\.]+/ ? sprintf '%.'.2*$args{places}.'f', $_ : $_;
      } split(/([\+\-\d\.]+)/, $min));
    }
    if ($max ne "") {
      $max = join("", map {
          s/\.0+$//; $_
      } map {
          s/(\.[1-9]+)0+$/$1/; $_
      } map {
          /[\+\-\d\.]+/ ? sprintf '%.'.2*$args{places}.'f', $_ : $_;
      } split(/([\+\-\d\.]+)/, $max));
    }
  }
  push @{$self->{perfdata}}, sprintf("'%s'=%s%s;%s;%s;%s;%s",
      $label, $value, $uom, $warn, $crit, $min, $max)
      if $self->selected_perfdata($label);
}

sub add_html {
  my $self = shift;
  my $line = shift;
  push @{$self->{html}}, $line;
}

sub suppress_messages {
  my $self = shift;
  $self->{suppress_messages} = 1;
}

sub clear_messages {
  my $self = shift;
  my $code = shift;
  $code = (qw(ok warning critical unknown))[$code] if $code =~ /^\d+$/;
  $code = lc $code;
  $self->{messages}->{$code} = [];
}

sub check_messages {
  my $self = shift;
  my %args = @_;

  # Add object messages to any passed in as args
  for my $code (qw(critical warning unknown ok)) {
    my $messages = $self->{messages}->{$code} || [];
    if ($args{$code}) {
      unless (ref $args{$code} eq 'ARRAY') {
        if ($code eq 'ok') {
          $args{$code} = [ $args{$code} ];
        }
      }
      push @{$args{$code}}, @$messages;
    } else {
      $args{$code} = $messages;
    }
  }
  my %arg = %args;
  $arg{join} = ' ' unless defined $arg{join};

  # Decide $code
  my $code = OK;
  $code ||= CRITICAL  if @{$arg{critical}};
  $code ||= WARNING   if @{$arg{warning}};
  $code ||= UNKNOWN   if @{$arg{unknown}};
  return $code unless wantarray;

  # Compose message
  my $message = '';
  if ($arg{join_all}) {
      $message = join( $arg{join_all},
          map { @$_ ? join( $arg{'join'}, @$_) : () }
              $arg{critical},
              $arg{warning},
              $arg{unknown},
              $arg{ok} ? (ref $arg{ok} ? $arg{ok} : [ $arg{ok} ]) : []
      );
  }

  else {
      $message ||= join( $arg{'join'}, @{$arg{critical}} )
          if $code == CRITICAL;
      $message ||= join( $arg{'join'}, @{$arg{warning}} )
          if $code == WARNING;
      $message ||= join( $arg{'join'}, @{$arg{unknown}} )
          if $code == UNKNOWN;
      $message ||= ref $arg{ok} ? join( $arg{'join'}, @{$arg{ok}} ) : $arg{ok}
          if $arg{ok};
  }

  return ($code, $message);
}

sub status_code {
  my $self = shift;
  my $code = shift;
  $code = (qw(ok warning critical unknown))[$code] if $code =~ /^\d+$/;
  $code = uc $code;
  $code = $ERRORS{$code} if defined $code && exists $ERRORS{$code};
  $code = UNKNOWN unless defined $code && exists $STATUS_TEXT{$code};
  return "$STATUS_TEXT{$code}";
}

sub perfdata_string {
  my $self = shift;
  if (scalar (@{$self->{perfdata}})) {
    return join(" ", @{$self->{perfdata}});
  } else {
    return "";
  }
}

sub html_string {
  my $self = shift;
  if (scalar (@{$self->{html}})) {
    return join(" ", @{$self->{html}});
  } else {
    return "";
  }
}

sub nagios_exit {
  my $self = shift;
  my ($code, $message, $arg) = @_;
  $code = $ERRORS{$code} if defined $code && exists $ERRORS{$code};
  $code = UNKNOWN unless defined $code && exists $STATUS_TEXT{$code};
  $message = '' unless defined $message;
  if (ref $message && ref $message eq 'ARRAY') {
      $message = join(' ', map { chomp; $_ } @$message);
  } else {
      chomp $message;
  }
  if ($self->opts->negate) {
    my $original_code = $code;
    foreach my $from (keys %{$self->opts->negate}) {
      if ((uc $from) =~ /^(OK|WARNING|CRITICAL|UNKNOWN)$/ &&
          (uc $self->opts->negate->{$from}) =~ /^(OK|WARNING|CRITICAL|UNKNOWN)$/) {
        if ($original_code == $ERRORS{uc $from}) {
          $code = $ERRORS{uc $self->opts->negate->{$from}};
        }
      }
    }
  }
  my $output = "$STATUS_TEXT{$code}";
  $output .= " - $message" if defined $message && $message ne '';
  if ($self->opts->can("morphmessage") && $self->opts->morphmessage) {
    # 'Intel [R] Interface (\d+) usage'='nic$1'
    # '^OK.*'="alles klar"   '^CRITICAL.*'="alles hi"
    foreach my $key (keys %{$self->opts->morphmessage}) {
      if ($output =~ /$key/) {
        my $replacement = '"'.$self->opts->morphmessage->{$key}.'"';
        $output =~ s/$key/$replacement/ee;
      }
    }
  }
  if (scalar (@{$self->{perfdata}})) {
    $output .= " | ".$self->perfdata_string();
  }
  $output .= "\n";
  if ($self->opts->can("isvalidtime") && ! $self->opts->isvalidtime) {
    $code = OK;
    $output = "OK - outside valid timerange. check results are not relevant now. original message was: ".
        $output;
  }
  if (! exists $self->{suppress_messages}) {
    print $output;
  }
  exit $code;
}

sub set_thresholds {
  my $self = shift;
  my %params = @_;
  if (exists $params{metric}) {
    my $metric = $params{metric};
    # erst die hartcodierten defaultschwellwerte
    $self->{thresholds}->{$metric}->{warning} = $params{warning};
    $self->{thresholds}->{$metric}->{critical} = $params{critical};
    # dann die defaultschwellwerte von der kommandozeile
    if (defined $self->opts->warning) {
      $self->{thresholds}->{$metric}->{warning} = $self->opts->warning;
    }
    if (defined $self->opts->critical) {
      $self->{thresholds}->{$metric}->{critical} = $self->opts->critical;
    }
    # dann die ganz spezifischen schwellwerte von der kommandozeile
    if ($self->opts->warningx) { # muss nicht auf defined geprueft werden, weils ein hash ist
      foreach my $key (keys %{$self->opts->warningx}) {
        next if $key ne $metric;
        $self->{thresholds}->{$metric}->{warning} = $self->opts->warningx->{$key};
      }
    }
    if ($self->opts->criticalx) {
      foreach my $key (keys %{$self->opts->criticalx}) {
        next if $key ne $metric;
        $self->{thresholds}->{$metric}->{critical} = $self->opts->criticalx->{$key};
      }
    }
  } else {
    $self->{thresholds}->{default}->{warning} =
        defined $self->opts->warning ? $self->opts->warning : defined $params{warning} ? $params{warning} : 0;
    $self->{thresholds}->{default}->{critical} =
        defined $self->opts->critical ? $self->opts->critical : defined $params{critical} ? $params{critical} : 0;
  }
}

sub force_thresholds {
  my $self = shift;
  my %params = @_;
  if (exists $params{metric}) {
    my $metric = $params{metric};
    $self->{thresholds}->{$metric}->{warning} = $params{warning} || 0;
    $self->{thresholds}->{$metric}->{critical} = $params{critical} || 0;
  } else {
    $self->{thresholds}->{default}->{warning} = $params{warning} || 0;
    $self->{thresholds}->{default}->{critical} = $params{critical} || 0;
  }
}

sub get_thresholds {
  my $self = shift;
  my @params = @_;
  if (scalar(@params) > 1) {
    my %params = @params;
    my $metric = $params{metric};
    return ($self->{thresholds}->{$metric}->{warning},
        $self->{thresholds}->{$metric}->{critical});
  } else {
    return ($self->{thresholds}->{default}->{warning},
        $self->{thresholds}->{default}->{critical});
  }
}

sub check_thresholds {
  my $self = shift;
  my @params = @_;
  my $level = $ERRORS{OK};
  my $warningrange;
  my $criticalrange;
  my $value;
  if (scalar(@params) > 1) {
    my %params = @params;
    $value = $params{value};
    my $metric = $params{metric};
    if ($metric ne 'default') {
      $warningrange = exists $self->{thresholds}->{$metric}->{warning} ?
          $self->{thresholds}->{$metric}->{warning} :
          $self->{thresholds}->{default}->{warning};
      $criticalrange = exists $self->{thresholds}->{$metric}->{critical} ?
          $self->{thresholds}->{$metric}->{critical} :
          $self->{thresholds}->{default}->{critical};
    } else {
      $warningrange = (defined $params{warning}) ?
          $params{warning} : $self->{thresholds}->{default}->{warning};
      $criticalrange = (defined $params{critical}) ?
          $params{critical} : $self->{thresholds}->{default}->{critical};
    }
  } else {
    $value = $params[0];
    $warningrange = $self->{thresholds}->{default}->{warning};
    $criticalrange = $self->{thresholds}->{default}->{critical};
  }
  if (! defined $warningrange) {
    # there was no set_thresholds for defaults, no --warning, no --warningx
  } elsif ($warningrange =~ /^([-+]?[0-9]*\.?[0-9]+)$/) {
    # warning = 10, warn if > 10 or < 0
    $level = $ERRORS{WARNING}
        if ($value > $1 || $value < 0);
  } elsif ($warningrange =~ /^([-+]?[0-9]*\.?[0-9]+):$/) {
    # warning = 10:, warn if < 10
    $level = $ERRORS{WARNING}
        if ($value < $1);
  } elsif ($warningrange =~ /^~:([-+]?[0-9]*\.?[0-9]+)$/) {
    # warning = ~:10, warn if > 10
    $level = $ERRORS{WARNING}
        if ($value > $1);
  } elsif ($warningrange =~ /^([-+]?[0-9]*\.?[0-9]+):([-+]?[0-9]*\.?[0-9]+)$/) {
    # warning = 10:20, warn if < 10 or > 20
    $level = $ERRORS{WARNING}
        if ($value < $1 || $value > $2);
  } elsif ($warningrange =~ /^@([-+]?[0-9]*\.?[0-9]+):([-+]?[0-9]*\.?[0-9]+)$/) {
    # warning = @10:20, warn if >= 10 and <= 20
    $level = $ERRORS{WARNING}
        if ($value >= $1 && $value <= $2);
  }
  if (! defined $criticalrange) {
    # there was no set_thresholds for defaults, no --critical, no --criticalx
  } elsif ($criticalrange =~ /^([-+]?[0-9]*\.?[0-9]+)$/) {
    # critical = 10, crit if > 10 or < 0
    $level = $ERRORS{CRITICAL}
        if ($value > $1 || $value < 0);
  } elsif ($criticalrange =~ /^([-+]?[0-9]*\.?[0-9]+):$/) {
    # critical = 10:, crit if < 10
    $level = $ERRORS{CRITICAL}
        if ($value < $1);
  } elsif ($criticalrange =~ /^~:([-+]?[0-9]*\.?[0-9]+)$/) {
    # critical = ~:10, crit if > 10
    $level = $ERRORS{CRITICAL}
        if ($value > $1);
  } elsif ($criticalrange =~ /^([-+]?[0-9]*\.?[0-9]+):([-+]?[0-9]*\.?[0-9]+)$/) {
    # critical = 10:20, crit if < 10 or > 20
    $level = $ERRORS{CRITICAL}
        if ($value < $1 || $value > $2);
  } elsif ($criticalrange =~ /^@([-+]?[0-9]*\.?[0-9]+):([-+]?[0-9]*\.?[0-9]+)$/) {
    # critical = @10:20, crit if >= 10 and <= 20
    $level = $ERRORS{CRITICAL}
        if ($value >= $1 && $value <= $2);
  }
  return $level;
}


package GLPlugin::Commandline::Getopt;
use strict;
use File::Basename;
use Getopt::Long qw(:config no_ignore_case bundling);

# Standard defaults
my %DEFAULT = (
  timeout => 15,
  verbose => 0,
  license =>
"This monitoring plugin is free software, and comes with ABSOLUTELY NO WARRANTY.
It may be used, redistributed and/or modified under the terms of the GNU
General Public Licence (see http://www.fsf.org/licensing/licenses/gpl.txt).",
);
# Standard arguments
my @ARGS = ({
    spec => 'usage|?',
    help => "-?, --usage\n   Print usage information",
  }, {
    spec => 'help|h',
    help => "-h, --help\n   Print detailed help screen",
  }, {
    spec => 'version|V',
    help => "-V, --version\n   Print version information",
  }, {
    #spec => 'extra-opts:s@',
    #help => "--extra-opts=[<section>[@<config_file>]]\n   Section and/or config_file from which to load extra options (may repeat)",
  }, {
    spec => 'timeout|t=i',
    help => sprintf("-t, --timeout=INTEGER\n   Seconds before plugin times out (default: %s)", $DEFAULT{timeout}),
    default => $DEFAULT{timeout},
  }, {
    spec => 'verbose|v+',
    help => "-v, --verbose\n   Show details for command-line debugging (can repeat up to 3 times)",
    default => $DEFAULT{verbose},
  },
);
# Standard arguments we traditionally display last in the help output
my %DEFER_ARGS = map { $_ => 1 } qw(timeout verbose);

sub _init {
  my $self = shift;
  my %params = @_;
  # Check params
  my %attr = (
    usage => 1,
    version => 0,
    url => 0,
    plugin => { default => $GLPlugin::pluginname },
    blurb => 0,
    extra => 0,
    'extra-opts' => 0,
    license => { default => $DEFAULT{license} },
    timeout => { default => $DEFAULT{timeout} },
  );

  # Add attr to private _attr hash (except timeout)
  $self->{timeout} = delete $attr{timeout};
  $self->{_attr} = { %attr };
  foreach (keys %{$self->{_attr}}) {
    if (exists $params{$_}) {
      $self->{_attr}->{$_} = $params{$_};
    } else {
      $self->{_attr}->{$_} = $self->{_attr}->{$_}->{default}
          if ref ($self->{_attr}->{$_}) eq 'HASH' &&
              exists $self->{_attr}->{$_}->{default};
    }
  }
  # Chomp _attr values
  chomp foreach values %{$self->{_attr}};

  # Setup initial args list
  $self->{_args} = [ grep { exists $_->{spec} } @ARGS ];

  $self
}

sub new {
  my $class = shift;
  my $self = bless {}, $class;
  $self->_init(@_);
}

sub add_arg {
  my $self = shift;
  my %arg = @_;
  push (@{$self->{_args}}, \%arg);
}

sub getopts {
  my $self = shift;
  my %commandline = ();
  my @params = map { $_->{spec} } @{$self->{_args}};
  if (! GetOptions(\%commandline, @params)) {
    $self->print_help();
    exit 0;
  } else {
    no strict 'refs';
    no warnings 'redefine';
    do { $self->print_help(); exit 0; } if $commandline{help};
    do { $self->print_version(); exit 0 } if $commandline{version};
    do { $self->print_usage(); exit 3 } if $commandline{usage};
    foreach (map { $_->{spec} =~ /^([\w\-]+)/; $1; } @{$self->{_args}}) {
      my $field = $_;
      *{"$field"} = sub {
        return $self->{opts}->{$field};
      };
    }
    foreach (map { $_->{spec} =~ /^([\w\-]+)/; $1; }
        grep { exists $_->{required} && $_->{required} } @{$self->{_args}}) {
      do { $self->print_usage(); exit 0 } if ! exists $commandline{$_};
    }
    foreach (grep { exists $_->{default} } @{$self->{_args}}) {
      $_->{spec} =~ /^([\w\-]+)/;
      my $spec = $1;
      $self->{opts}->{$spec} = $_->{default};
    }
    foreach (keys %commandline) {
      $self->{opts}->{$_} = $commandline{$_};
    }
    foreach (grep { exists $_->{env} } @{$self->{_args}}) {
      $_->{spec} =~ /^([\w\-]+)/;
      my $spec = $1;
      if (exists $ENV{'NAGIOS__HOST'.$_->{env}}) {
        $self->{opts}->{$spec} = $ENV{'NAGIOS__HOST'.$_->{env}};
      }
      if (exists $ENV{'NAGIOS__SERVICE'.$_->{env}}) {
        $self->{opts}->{$spec} = $ENV{'NAGIOS__SERVICE'.$_->{env}};
      }
    }
    foreach (grep { exists $_->{aliasfor} } @{$self->{_args}}) {
      my $field = $_->{aliasfor};
      $_->{spec} =~ /^([\w\-]+)/;
      my $aliasfield = $1;
      next if $self->{opts}->{$field};
      *{"$field"} = sub {
        return $self->{opts}->{$aliasfield};
      };
    }
  }
}

sub create_opt {
  my $self = shift;
  my $key = shift;
  no strict 'refs';
  *{"$key"} = sub {
      return $self->{opts}->{$key};
  };
}

sub override_opt {
  my $self = shift;
  my $key = shift;
  my $value = shift;
  $self->{opts}->{$key} = $value;
}

sub get {
  my $self = shift;
  my $opt = shift;
  return $self->{opts}->{$opt};
}

sub print_help {
  my $self = shift;
  $self->print_version();
  printf "\n%s\n", $self->{_attr}->{license};
  printf "\n%s\n\n", $self->{_attr}->{blurb};
  $self->print_usage();
  foreach (@{$self->{_args}}) {
    printf " %s\n", $_->{help};
  }
  exit 0;
}

sub print_usage {
  my $self = shift;
  printf $self->{_attr}->{usage}, $self->{_attr}->{plugin};
  print "\n";
}

sub print_version {
  my $self = shift;
  printf "%s %s", $self->{_attr}->{plugin}, $self->{_attr}->{version};
  printf " [%s]", $self->{_attr}->{url} if $self->{_attr}->{url};
  print "\n";
}

sub print_license {
  my $self = shift;
  printf "%s\n", $self->{_attr}->{license};
  print "\n";
}


package GLPlugin::Item;
our @ISA = qw(GLPlugin);

use strict;

sub new {
  my $class = shift;
  my %params = @_;
  my $self = {
    blacklisted => 0,
    info => undef,
    extendedinfo => undef,
  };
  bless $self, $class;
  $self->init(%params);
  return $self;
}

sub check {
  my $self = shift;
  my $lists = shift;
  my @lists = $lists ? @{$lists} : grep { ref($self->{$_}) eq "ARRAY" } keys %{$self};
  foreach my $list (@lists) {
    $self->add_info('checking '.$list);
    foreach my $element (@{$self->{$list}}) {
      $element->blacklist() if $self->is_blacklisted();
      $element->check();
    }
  }
}


package GLPlugin::TableItem;
our @ISA = qw(GLPlugin::Item);

use strict;

sub new {
  my $class = shift;
  my %params = @_;
  my $self = {};
  bless $self, $class;
  foreach (keys %params) {
    $self->{$_} = $params{$_};
  }
  if ($self->can("finish")) {
    $self->finish(%params);
  }
  return $self;
}

sub check {
  my $self = shift;
  # some tableitems are not checkable, they are only used to enhance other
  # items (e.g. sensorthresholds enhance sensors)
  # normal tableitems should have their own check-method
}


package GLPlugin::SNMP;
our @ISA = qw(GLPlugin);

use strict;
use File::Basename;
use Digest::MD5 qw(md5_hex);
use Data::Dumper;
use AutoLoader;
our $AUTOLOAD;

use constant { OK => 0, WARNING => 1, CRITICAL => 2, UNKNOWN => 3 };

{
  our $mode = undef;
  our $plugin = undef;
  our $blacklist = undef;
  our $session = undef;
  our $rawdata = {};
  our $tablecache = {};
  our $info = [];
  our $extendedinfo = [];
  our $summary = [];
  our $oidtrace = [];
  our $uptime = 0;
}

sub v2tov3 {
  my $self = shift;
  if ($self->opts->community && $self->opts->community =~ /^snmpv3(.)(.+)/) {
    my $separator = $1;
    my ($authprotocol, $authpassword, $privprotocol, $privpassword,
        $username, $contextengineid, $contextname) = split(/$separator/, $2);
    $self->override_opt('authprotocol', $authprotocol) 
        if defined($authprotocol) && $authprotocol;
    $self->override_opt('authpassword', $authpassword) 
        if defined($authpassword) && $authpassword;
    $self->override_opt('privprotocol', $privprotocol) 
        if defined($privprotocol) && $privprotocol;
    $self->override_opt('privpassword', $privpassword) 
        if defined($privpassword) && $privpassword;
    $self->override_opt('username', $username) 
        if defined($username) && $username;
    $self->override_opt('contextengineid', $contextengineid) 
        if defined($contextengineid) && $contextengineid;
    $self->override_opt('contextname', $contextname) 
        if defined($contextname) && $contextname;
    $self->override_opt('protocol', '3') ;
  }
  if (($self->opts->authpassword || $self->opts->authprotocol ||
      $self->opts->privpassword || $self->opts->privprotocol) && 
      ! $self->opts->protocol eq '3') {
    $self->override_opt('protocol', '3') ;
  }
}

sub add_snmp_args {
  my $self = shift;
  $self->add_arg(
      spec => 'port=i',
      help => '--port
     The SNMP port to use (default: 161)',
      required => 0,
      default => 161,
  );
  $self->add_arg(
      spec => 'domain=s',
      help => '--domain
     The transport domain to use (default: udp/ipv4, other possible values: udp6, udp/ipv6, tcp, tcp4, tcp/ipv4, tcp6, tcp/ipv6)',
      required => 0,
      default => 'udp',
  );
  $self->add_arg(
      spec => 'protocol|P=s',
      help => '--protocol
     The SNMP protocol to use (default: 2c, other possibilities: 1,3)',
      required => 0,
      default => '2c',
  );
  $self->add_arg(
      spec => 'community|C=s',
      help => '--community
     SNMP community of the server (SNMP v1/2 only)',
      required => 0,
      default => 'public',
  );
  $self->add_arg(
      spec => 'username:s',
      help => '--username
     The securityName for the USM security model (SNMPv3 only)',
      required => 0,
  );
  $self->add_arg(
      spec => 'authpassword:s',
      help => '--authpassword
     The authentication password for SNMPv3',
      required => 0,
  );
  $self->add_arg(
      spec => 'authprotocol:s',
      help => '--authprotocol
     The authentication protocol for SNMPv3 (md5|sha)',
      required => 0,
  );
  $self->add_arg(
      spec => 'privpassword:s',
      help => '--privpassword
     The password for authPriv security level',
      required => 0,
  );
  $self->add_arg(
      spec => 'privprotocol=s',
      help => '--privprotocol
     The private protocol for SNMPv3 (des|aes|aes128|3des|3desde)',
      required => 0,
  );
  $self->add_arg(
      spec => 'contextengineid=s',
      help => '--contextengineid
     The context engine id for SNMPv3 (10 to 64 hex characters)',
      required => 0,
  );
  $self->add_arg(
      spec => 'contextname=s',
      help => '--contextname
     The context name for SNMPv3 (empty represents the "default" context)',
      required => 0,
  );
  $self->add_arg(
      spec => 'community2=s',
      help => '--community2
     SNMP community which can be used to switch the context during runtime',
      required => 0,
  );
}

sub validate_args {
  my $self = shift;
  $self->SUPER::validate_args();
  if ($self->opts->mode eq 'walk') {
    if ($self->opts->snmpwalk && $self->opts->hostname) {
      if ($self->check_messages == CRITICAL) {
        # gemecker vom super-validierer, der sicherstellt, dass die datei
        # snmpwalk existiert. in diesem fall wird sie aber erst neu angelegt,
        # also schnauze.
        my ($code, $message) = $self->check_messages;
        if ($message eq sprintf("file %s not found", $self->opts->snmpwalk)) {
          $self->clear_critical;
        }
      }
      # snmp agent wird abgefragt, die ergebnisse landen in einem file
      # opts->snmpwalk ist der filename. da sich die ganzen get_snmp_table/object-aufrufe
      # an das walkfile statt an den agenten halten wuerden, muss opts->snmpwalk geloescht
      # werden. stattdessen wird opts->snmpdump als traeger des dateinamens mitgegeben.
      # nur sinnvoll mit mode=walk
      $self->create_opt('snmpdump');
      $self->override_opt('snmpdump', $self->opts->snmpwalk);
      $self->override_opt('snmpwalk', undef);
    } elsif (! $self->opts->snmpwalk && $self->opts->hostname && $self->opts->mode eq 'walk') {   
      # snmp agent wird abgefragt, die ergebnisse landen in einem file, dessen name
      # nicht vorgegeben ist
      $self->create_opt('snmpdump');
    }
  } else {    
    if ($self->opts->snmpwalk && ! $self->opts->hostname) {
      # normaler aufruf, mode != walk, oid-quelle ist eine datei
      $self->override_opt('hostname', 'snmpwalk.file'.md5_hex($self->opts->snmpwalk))
    } elsif ($self->opts->snmpwalk && $self->opts->hostname) {
      # snmpwalk hat vorrang
      $self->override_opt('hostname', undef);
    }
  }
}

sub init {
  my $self = shift;
  if ($self->mode =~ /device::walk/) {
    my @trees = ();
    my $name = $GLPlugin::pluginname;
    $name =~ s/.*\///g;
    $name = sprintf "/tmp/snmpwalk_%s_%s", $name, $self->opts->hostname;
    if ($self->opts->oids) {
      # create pid filename
      # already running?;x
      @trees = split(",", $self->opts->oids);

    } elsif ($self->can("trees")) {
      @trees = $self->trees;
      push(@trees, "1.3.6.1.2.1.1");
    } else {
      @trees = ("1.3.6.1.2.1", "1.3.6.1.4.1");
    }
    if ($self->opts->snmpdump) {
      $name = $self->opts->snmpdump;
    }
    $self->opts->override_opt("protocol", $1) if $self->opts->protocol =~ /^v(.*)/;
    if (defined $self->opts->offline) {
      $self->{pidfile} = $name.".pid";
      if (! $self->check_pidfile()) {
        $self->debug("Exiting because another walk is already running");
        printf STDERR "Exiting because another walk is already running\n";
        exit 3;
      }
      $self->write_pidfile();
      my $timedout = 0;
      my $snmpwalkpid = 0;
      $SIG{'ALRM'} = sub {
        $timedout = 1;
        printf "UNKNOWN - %s timed out after %d seconds\n",
            $GLPlugin::plugin->{name}, $self->opts->timeout;
        kill 9, $snmpwalkpid;
      };
      alarm($self->opts->timeout);
      unlink $name.".partial";
      while (! $timedout && @trees) {
        my $tree = shift @trees;
        $SIG{CHLD} = 'IGNORE';
        my $cmd = sprintf "snmpwalk -ObentU -v%s -c %s %s %s >> %s", 
            $self->opts->protocol,
            $self->opts->community,
            $self->opts->hostname,
            $tree, $name.".partial";
        $self->debug($cmd);
        $snmpwalkpid = fork;
        if (not $snmpwalkpid) {
          exec($cmd);
        } else {
          wait();
        }
      }
      rename $name.".partial", $name if ! $timedout;
      -f $self->{pidfile} && unlink $self->{pidfile};
      if ($timedout) {
        printf "CRITICAL - timeout. There are still %d snmpwalks left\n", scalar(@trees);
        exit 3;
      } else {
        printf "OK - all requested oids are in %s\n", $name;
      }
    } else {
      printf "rm -f %s\n", $name;
      foreach (@trees) {
        printf "snmpwalk -ObentU -v%s -c %s %s %s >> %s\n", 
            $self->opts->protocol,
            $self->opts->community,
            $self->opts->hostname,
            $_, $name;
      }
    }
    exit 0;
  } elsif ($self->mode =~ /device::uptime/) {
    $self->add_info(sprintf 'device is up since %s',
        $self->human_timeticks($self->{uptime}));
    $self->set_thresholds(warning => '15:', critical => '5:');
    $self->add_message($self->check_thresholds($self->{uptime} / 60));
    $self->add_perfdata(
        label => 'uptime',
        value => $self->{uptime} / 60,
        places => 0,
    );
    my ($code, $message) = $self->check_messages(join => ', ', join_all => ', ');
    $GLPlugin::plugin->nagios_exit($code, $message);
  } elsif ($self->mode =~ /device::supportedmibs/) {
    our $mibdepot = [];
    my $unknowns = {};
    my @outputlist = ();
    %{$unknowns} = %{$self->rawdata};
    if ($self->opts->name && -f $self->opts->name) {
      eval { require $self->opts->name };
      $self->add_critical($@) if $@;
    } elsif ($self->opts->name && ! -f $self->opts->name) {
      $self->add_unknown("where is --name mibdepotfile?");
    }
    push(@{$mibdepot}, ['1.3.6.1.2.1.60', 'ietf', 'v2', 'ACCOUNTING-CONTROL-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.238', 'ietf', 'v2', 'ADSL2-LINE-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.238.2', 'ietf', 'v2', 'ADSL2-LINE-TC-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.94.3', 'ietf', 'v2', 'ADSL-LINE-EXT-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.94', 'ietf', 'v2', 'ADSL-LINE-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.94.2', 'ietf', 'v2', 'ADSL-TC-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.74', 'ietf', 'v2', 'AGENTX-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.3.123', 'ietf', 'v2', 'AGGREGATE-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.118', 'ietf', 'v2', 'ALARM-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.16.23', 'ietf', 'v2', 'APM-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.34.3', 'ietf', 'v2', 'APPC-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.13.1', 'ietf', 'v1', 'APPLETALK-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.27', 'ietf', 'v2', 'APPLICATION-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.62', 'ietf', 'v2', 'APPLICATION-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.34.5', 'ietf', 'v2', 'APPN-DLUR-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.34.4', 'ietf', 'v2', 'APPN-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.34.4', 'ietf', 'v2', 'APPN-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.34.4.0', 'ietf', 'v2', 'APPN-TRAP-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.49', 'ietf', 'v2', 'APS-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.117', 'ietf', 'v2', 'ARC-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.37.1.14', 'ietf', 'v2', 'ATM2-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.59', 'ietf', 'v2', 'ATM-ACCOUNTING-INFORMATION-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.37', 'ietf', 'v2', 'ATM-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.37', 'ietf', 'v2', 'ATM-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.37.3', 'ietf', 'v2', 'ATM-TC-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.15', 'ietf', 'v2', 'BGP4-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.15', 'ietf', 'v2', 'BGP4-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.3.122', 'ietf', 'v2', 'BLDG-HVAC-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.17.1', 'ietf', 'v1', 'BRIDGE-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.17', 'ietf', 'v2', 'BRIDGE-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.19', 'ietf', 'v2', 'CHARACTER-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.94', 'ietf', 'v2', 'CIRCUIT-IF-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.3.1.1', 'ietf', 'v1', 'CLNS-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.3.1.1', 'ietf', 'v1', 'CLNS-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.132', 'ietf', 'v2', 'COFFEE-POT-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.89', 'ietf', 'v2', 'COPS-CLIENT-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.18.1', 'ietf', 'v1', 'DECNET-PHIV-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.21', 'ietf', 'v2', 'DIAL-CONTROL-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.108', 'ietf', 'v2', 'DIFFSERV-CONFIG-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.97', 'ietf', 'v2', 'DIFFSERV-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.66', 'ietf', 'v2', 'DIRECTORY-SERVER-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.88', 'ietf', 'v2', 'DISMAN-EVENT-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.90', 'ietf', 'v2', 'DISMAN-EXPRESSION-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.82', 'ietf', 'v2', 'DISMAN-NSLOOKUP-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.82', 'ietf', 'v2', 'DISMAN-NSLOOKUP-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.80', 'ietf', 'v2', 'DISMAN-PING-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.80', 'ietf', 'v2', 'DISMAN-PING-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.63', 'ietf', 'v2', 'DISMAN-SCHEDULE-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.63', 'ietf', 'v2', 'DISMAN-SCHEDULE-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.64', 'ietf', 'v2', 'DISMAN-SCRIPT-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.64', 'ietf', 'v2', 'DISMAN-SCRIPT-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.81', 'ietf', 'v2', 'DISMAN-TRACEROUTE-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.81', 'ietf', 'v2', 'DISMAN-TRACEROUTE-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.46', 'ietf', 'v2', 'DLSW-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.32.2', 'ietf', 'v2', 'DNS-RESOLVER-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.32.1', 'ietf', 'v2', 'DNS-SERVER-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.127.5', 'ietf', 'v2', 'DOCS-BPI-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.69', 'ietf', 'v2', 'DOCS-CABLE-DEVICE-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.69', 'ietf', 'v2', 'DOCS-CABLE-DEVICE-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.126', 'ietf', 'v2', 'DOCS-IETF-BPI2-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.132', 'ietf', 'v2', 'DOCS-IETF-CABLE-DEVICE-NOTIFICATION-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.127', 'ietf', 'v2', 'DOCS-IETF-QOS-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.125', 'ietf', 'v2', 'DOCS-IETF-SUBMGT-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.127', 'ietf', 'v2', 'DOCS-IF-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.127', 'ietf', 'v2', 'DOCS-IF-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.45', 'ietf', 'v2', 'DOT12-IF-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.53', 'ietf', 'v2', 'DOT12-RPTR-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.155', 'ietf', 'v2', 'DOT3-EPON-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.158', 'ietf', 'v2', 'DOT3-OAM-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.4.1.2.2.1.1', 'ietf', 'v1', 'DPI20-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.82', 'ietf', 'v2', 'DS0BUNDLE-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.81', 'ietf', 'v2', 'DS0-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.18', 'ietf', 'v2', 'DS1-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.18', 'ietf', 'v2', 'DS1-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.18', 'ietf', 'v2', 'DS1-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.30', 'ietf', 'v2', 'DS3-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.30', 'ietf', 'v2', 'DS3-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.29', 'ietf', 'v2', 'DSA-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.16.26', 'ietf', 'v2', 'DSMON-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.34.7', 'ietf', 'v2', 'EBN-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.167', 'ietf', 'v2', 'EFM-CU-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.47', 'ietf', 'v2', 'ENTITY-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.47', 'ietf', 'v2', 'ENTITY-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.47', 'ietf', 'v2', 'ENTITY-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.99', 'ietf', 'v2', 'ENTITY-SENSOR-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.131', 'ietf', 'v2', 'ENTITY-STATE-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.130', 'ietf', 'v2', 'ENTITY-STATE-TC-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.70', 'ietf', 'v2', 'ETHER-CHIPSET-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.7', 'ietf', 'v1', 'EtherLike-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.7', 'ietf', 'v1', 'EtherLike-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.35', 'ietf', 'v2', 'EtherLike-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.35', 'ietf', 'v2', 'EtherLike-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.35', 'ietf', 'v2', 'EtherLike-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.35', 'ietf', 'v2', 'EtherLike-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.224', 'ietf', 'v2', 'FCIP-MGMT-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.56', 'ietf', 'v2', 'FC-MGMT-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.15.73.1', 'ietf', 'v1', 'FDDI-SMT73-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.75', 'ietf', 'v2', 'FIBRE-CHANNEL-FE-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.111', 'ietf', 'v2', 'Finisher-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.40', 'ietf', 'v2', 'FLOW-METER-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.40', 'ietf', 'v2', 'FLOW-METER-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.32', 'ietf', 'v2', 'FRAME-RELAY-DTE-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.86', 'ietf', 'v2', 'FR-ATM-PVC-SERVICE-IWF-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.47', 'ietf', 'v2', 'FR-MFR-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.44', 'ietf', 'v2', 'FRNETSERV-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.44', 'ietf', 'v2', 'FRNETSERV-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.44', 'ietf', 'v2', 'FRNETSERV-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.95', 'ietf', 'v2', 'FRSLD-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.166.16', 'ietf', 'v2', 'GMPLS-LABEL-STD-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.166.15', 'ietf', 'v2', 'GMPLS-LSR-STD-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.166.12', 'ietf', 'v2', 'GMPLS-TC-STD-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.166.13', 'ietf', 'v2', 'GMPLS-TE-STD-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.98', 'ietf', 'v2', 'GSMP-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.16.29', 'ietf', 'v2', 'HC-ALARM-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.107', 'ietf', 'v2', 'HC-PerfHist-TC-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.16.20.5', 'ietf', 'v2', 'HC-RMON-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.25.1', 'ietf', 'v1', 'HOST-RESOURCES-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.25.7.1', 'ietf', 'v2', 'HOST-RESOURCES-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.34.6.1.5', 'ietf', 'v2', 'HPR-IP-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.34.6', 'ietf', 'v2', 'HPR-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.106', 'ietf', 'v2', 'IANA-CHARSET-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.110', 'ietf', 'v2', 'IANA-FINISHER-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.152', 'ietf', 'v2', 'IANA-GMPLS-TC-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.30', 'ietf', 'v2', 'IANAifType-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.128', 'ietf', 'v2', 'IANA-IPPM-METRICS-REGISTRY-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.119', 'ietf', 'v2', 'IANA-ITU-ALARM-TC-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.154', 'ietf', 'v2', 'IANA-MAU-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.109', 'ietf', 'v2', 'IANA-PRINTER-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.4.1.2.6.2.13.1.1', 'ietf', 'v1', 'IBM-6611-APPN-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.166', 'ietf', 'v2', 'IF-CAP-STACK-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.230', 'ietf', 'v2', 'IFCP-MGMT-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.77', 'ietf', 'v2', 'IF-INVERTED-STACK-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.31', 'ietf', 'v2', 'IF-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.31', 'ietf', 'v2', 'IF-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.31', 'ietf', 'v2', 'IF-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.85', 'ietf', 'v2', 'IGMP-STD-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.76', 'ietf', 'v2', 'INET-ADDRESS-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.76', 'ietf', 'v2', 'INET-ADDRESS-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.76', 'ietf', 'v2', 'INET-ADDRESS-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.52.5', 'ietf', 'v2', 'INTEGRATED-SERVICES-GUARANTEED-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.52', 'ietf', 'v2', 'INTEGRATED-SERVICES-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.16.27', 'ietf', 'v2', 'INTERFACETOPN-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.6.3.17', 'ietf', 'v2', 'IPATM-IPMC-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.57', 'ietf', 'v2', 'IPATM-IPMC-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.4.24', 'ietf', 'v2', 'IP-FORWARD-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.4.24', 'ietf', 'v2', 'IP-FORWARD-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.168', 'ietf', 'v2', 'IPMCAST-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.48', 'ietf', 'v2', 'IP-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.48', 'ietf', 'v2', 'IP-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.83', 'ietf', 'v2', 'IPMROUTE-STD-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.46', 'ietf', 'v2', 'IPOA-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.141', 'ietf', 'v2', 'IPS-AUTH-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.153', 'ietf', 'v2', 'IPSEC-SPD-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.103', 'ietf', 'v2', 'IPV6-FLOW-LABEL-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.56', 'ietf', 'v2', 'IPV6-ICMP-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.55', 'ietf', 'v2', 'IPV6-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.91', 'ietf', 'v2', 'IPV6-MLD-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.3.86', 'ietf', 'v2', 'IPV6-TCP-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.3.87', 'ietf', 'v2', 'IPV6-UDP-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.142', 'ietf', 'v2', 'ISCSI-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.20', 'ietf', 'v2', 'ISDN-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.138', 'ietf', 'v2', 'ISIS-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.163', 'ietf', 'v2', 'ISNS-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.121', 'ietf', 'v2', 'ITU-ALARM-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.120', 'ietf', 'v2', 'ITU-ALARM-TC-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.4.1.2699.1.1', 'ietf', 'v2', 'Job-Monitoring-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.95', 'ietf', 'v2', 'L2TP-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.165', 'ietf', 'v2', 'LANGTAG-TC-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.227', 'ietf', 'v2', 'LMP-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.227', 'ietf', 'v2', 'LMP-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.101', 'ietf', 'v2', 'MALLOC-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.26.1', 'ietf', 'v1', 'MAU-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.26.6', 'ietf', 'v2', 'MAU-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.26.6', 'ietf', 'v2', 'MAU-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.26.6', 'ietf', 'v2', 'MAU-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.26.6', 'ietf', 'v2', 'MAU-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.171', 'ietf', 'v2', 'MIDCOM-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.38.1', 'ietf', 'v1', 'MIOX25-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.44', 'ietf', 'v2', 'MIP-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.133', 'ietf', 'v2', 'MOBILEIPV6-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.38', 'ietf', 'v2', 'Modem-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.166.8', 'ietf', 'v2', 'MPLS-FTN-STD-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.166.11', 'ietf', 'v2', 'MPLS-L3VPN-STD-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.166.9', 'ietf', 'v2', 'MPLS-LC-ATM-STD-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.166.10', 'ietf', 'v2', 'MPLS-LC-FR-STD-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.166.5', 'ietf', 'v2', 'MPLS-LDP-ATM-STD-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.166.6', 'ietf', 'v2', 'MPLS-LDP-FRAME-RELAY-STD-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.166.7', 'ietf', 'v2', 'MPLS-LDP-GENERIC-STD-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.4.1.9.10.65', 'ietf', 'v2', 'MPLS-LDP-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.166.4', 'ietf', 'v2', 'MPLS-LDP-STD-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.166.2', 'ietf', 'v2', 'MPLS-LSR-STD-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.166.1', 'ietf', 'v2', 'MPLS-TC-STD-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.166.3', 'ietf', 'v2', 'MPLS-TE-STD-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.3.92', 'ietf', 'v2', 'MSDP-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.28', 'ietf', 'v2', 'MTA-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.28', 'ietf', 'v2', 'MTA-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.28', 'ietf', 'v2', 'MTA-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.123', 'ietf', 'v2', 'NAT-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.27', 'ietf', 'v2', 'NETWORK-SERVICES-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.27', 'ietf', 'v2', 'NETWORK-SERVICES-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.71', 'ietf', 'v2', 'NHRP-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.92', 'ietf', 'v2', 'NOTIFICATION-LOG-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.133', 'ietf', 'v2', 'OPT-IF-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.14', 'ietf', 'v2', 'OSPF-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.14', 'ietf', 'v2', 'OSPF-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.14.16', 'ietf', 'v2', 'OSPF-TRAP-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.14.16', 'ietf', 'v2', 'OSPF-TRAP-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.34', 'ietf', 'v2', 'PARALLEL-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.17.6', 'ietf', 'v2', 'P-BRIDGE-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.58', 'ietf', 'v2', 'PerfHist-TC-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.58', 'ietf', 'v2', 'PerfHist-TC-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.172', 'ietf', 'v2', 'PIM-BSR-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.3.61', 'ietf', 'v2', 'PIM-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.157', 'ietf', 'v2', 'PIM-STD-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.93', 'ietf', 'v2', 'PINT-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.140', 'ietf', 'v2', 'PKTC-IETF-MTA-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.169', 'ietf', 'v2', 'PKTC-IETF-SIG-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.124', 'ietf', 'v2', 'POLICY-BASED-MANAGEMENT-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.105', 'ietf', 'v2', 'POWER-ETHERNET-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.23.4', 'ietf', 'v1', 'PPP-BRIDGE-NCP-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.23.3', 'ietf', 'v1', 'PPP-IP-NCP-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.23.1.1', 'ietf', 'v1', 'PPP-LCP-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.23.2', 'ietf', 'v1', 'PPP-SEC-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.43', 'ietf', 'v2', 'Printer-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.43', 'ietf', 'v2', 'Printer-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.79', 'ietf', 'v2', 'PTOPO-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.17.7', 'ietf', 'v2', 'Q-BRIDGE-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.67.2.2', 'ietf', 'v2', 'RADIUS-ACC-CLIENT-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.67.2.2', 'ietf', 'v2', 'RADIUS-ACC-CLIENT-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.67.2.1', 'ietf', 'v2', 'RADIUS-ACC-SERVER-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.67.2.1', 'ietf', 'v2', 'RADIUS-ACC-SERVER-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.67.1.2', 'ietf', 'v2', 'RADIUS-AUTH-CLIENT-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.67.1.2', 'ietf', 'v2', 'RADIUS-AUTH-CLIENT-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.67.1.1', 'ietf', 'v2', 'RADIUS-AUTH-SERVER-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.67.1.1', 'ietf', 'v2', 'RADIUS-AUTH-SERVER-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.145', 'ietf', 'v2', 'RADIUS-DYNAUTH-CLIENT-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.146', 'ietf', 'v2', 'RADIUS-DYNAUTH-SERVER-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.16.31', 'ietf', 'v2', 'RAQMON-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.16.32', 'ietf', 'v2', 'RAQMON-RDS-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.39', 'ietf', 'v2', 'RDBMS-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.1', 'ietf', 'v1', 'RFC1066-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.1', 'ietf', 'v1', 'RFC1156-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.1', 'ietf', 'v1', 'RFC1158-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.1', 'ietf', 'v1', 'RFC1213-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.12', 'ietf', 'v1', 'RFC1229-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.3.7', 'ietf', 'v1', 'RFC1230-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.9', 'ietf', 'v1', 'RFC1231-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.3.2', 'ietf', 'v1', 'RFC1232-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.3.15', 'ietf', 'v1', 'RFC1233-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.13.1', 'ietf', 'v1', 'RFC1243-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.13.1', 'ietf', 'v1', 'RFC1248-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.13.1', 'ietf', 'v1', 'RFC1252-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.14.1', 'ietf', 'v1', 'RFC1253-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.15', 'ietf', 'v1', 'RFC1269-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.16.1', 'ietf', 'v1', 'RFC1271-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.7', 'ietf', 'v1', 'RFC1284-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.15.1', 'ietf', 'v1', 'RFC1285-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.17.1', 'ietf', 'v1', 'RFC1286-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.18.1', 'ietf', 'v1', 'RFC1289-phivMIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.31', 'ietf', 'v1', 'RFC1304-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.32', 'ietf', 'v1', 'RFC1315-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.19', 'ietf', 'v1', 'RFC1316-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.33', 'ietf', 'v1', 'RFC1317-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.34', 'ietf', 'v1', 'RFC1318-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.20.2', 'ietf', 'v1', 'RFC1353-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.4.24', 'ietf', 'v1', 'RFC1354-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.16', 'ietf', 'v1', 'RFC1381-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.5', 'ietf', 'v1', 'RFC1382-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.23.1', 'ietf', 'v1', 'RFC1389-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.7', 'ietf', 'v1', 'RFC1398-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.18', 'ietf', 'v1', 'RFC1406-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.30', 'ietf', 'v1', 'RFC1407-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.24.1', 'ietf', 'v1', 'RFC1414-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.23', 'ietf', 'v2', 'RIPv2-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.16', 'ietf', 'v2', 'RMON2-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.16', 'ietf', 'v2', 'RMON2-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.16.1', 'ietf', 'v1', 'RMON-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.16.20.8', 'ietf', 'v2', 'RMON-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.112', 'ietf', 'v2', 'ROHC-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.114', 'ietf', 'v2', 'ROHC-RTP-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.113', 'ietf', 'v2', 'ROHC-UNCOMPRESSED-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.33', 'ietf', 'v2', 'RS-232-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.134', 'ietf', 'v2', 'RSTP-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.51', 'ietf', 'v2', 'RSVP-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.87', 'ietf', 'v2', 'RTP-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.139', 'ietf', 'v2', 'SCSI-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.104', 'ietf', 'v2', 'SCTP-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.4.1.4300.1', 'ietf', 'v2', 'SFLOW-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.149', 'ietf', 'v2', 'SIP-COMMON-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.36', 'ietf', 'v2', 'SIP-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.151', 'ietf', 'v2', 'SIP-SERVER-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.148', 'ietf', 'v2', 'SIP-TC-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.150', 'ietf', 'v2', 'SIP-UA-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.3.88', 'ietf', 'v2', 'SLAPM-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.16.22', 'ietf', 'v2', 'SMON-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.4.1.4.4', 'ietf', 'v1', 'SMUX-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.34', 'ietf', 'v2', 'SNA-NAU-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.34', 'ietf', 'v2', 'SNA-NAU-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.41', 'ietf', 'v2', 'SNA-SDLC-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.6.3.18', 'ietf', 'v2', 'SNMP-COMMUNITY-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.6.3.18', 'ietf', 'v2', 'SNMP-COMMUNITY-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.6.3.10', 'ietf', 'v2', 'SNMP-FRAMEWORK-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.6.3.10', 'ietf', 'v2', 'SNMP-FRAMEWORK-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.6.3.10', 'ietf', 'v2', 'SNMP-FRAMEWORK-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.6.3.21', 'ietf', 'v2', 'SNMP-IEEE802-TM-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.6.3.11', 'ietf', 'v2', 'SNMP-MPD-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.6.3.11', 'ietf', 'v2', 'SNMP-MPD-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.6.3.11', 'ietf', 'v2', 'SNMP-MPD-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.6.3.13', 'ietf', 'v2', 'SNMP-NOTIFICATION-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.6.3.13', 'ietf', 'v2', 'SNMP-NOTIFICATION-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.6.3.13', 'ietf', 'v2', 'SNMP-NOTIFICATION-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.6.3.14', 'ietf', 'v2', 'SNMP-PROXY-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.6.3.14', 'ietf', 'v2', 'SNMP-PROXY-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.6.3.14', 'ietf', 'v2', 'SNMP-PROXY-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.22.1.1', 'ietf', 'v1', 'SNMP-REPEATER-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.22.1.1', 'ietf', 'v1', 'SNMP-REPEATER-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.22.5', 'ietf', 'v2', 'SNMP-REPEATER-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.6.3.12', 'ietf', 'v2', 'SNMP-TARGET-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.6.3.12', 'ietf', 'v2', 'SNMP-TARGET-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.6.3.12', 'ietf', 'v2', 'SNMP-TARGET-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.6.3.15', 'ietf', 'v2', 'SNMP-USER-BASED-SM-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.6.3.15', 'ietf', 'v2', 'SNMP-USER-BASED-SM-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.6.3.15', 'ietf', 'v2', 'SNMP-USER-BASED-SM-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.6.3.20', 'ietf', 'v2', 'SNMP-USM-AES-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.3.101', 'ietf', 'v2', 'SNMP-USM-DH-OBJECTS-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.6.3.2', 'ietf', 'v2', 'SNMPv2-M2M-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.6.3.1', 'ietf', 'v2', 'SNMPv2-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.6.3.1', 'ietf', 'v2', 'SNMPv2-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.6.3.1', 'ietf', 'v2', 'SNMPv2-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.6.3.3', 'ietf', 'v2', 'SNMPv2-PARTY-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.6.3.6', 'ietf', 'v2', 'SNMPv2-USEC-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.6.3.16', 'ietf', 'v2', 'SNMP-VIEW-BASED-ACM-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.6.3.16', 'ietf', 'v2', 'SNMP-VIEW-BASED-ACM-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.6.3.16', 'ietf', 'v2', 'SNMP-VIEW-BASED-ACM-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.39', 'ietf', 'v2', 'SONET-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.39', 'ietf', 'v2', 'SONET-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.39', 'ietf', 'v2', 'SONET-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.17.3', 'ietf', 'v1', 'SOURCE-ROUTING-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.16.28', 'ietf', 'v2', 'SSPM-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.54', 'ietf', 'v2', 'SYSAPPL-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.137', 'ietf', 'v2', 'T11-FC-FABRIC-ADDR-MGR-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.162', 'ietf', 'v2', 'T11-FC-FABRIC-CONFIG-SERVER-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.159', 'ietf', 'v2', 'T11-FC-FABRIC-LOCK-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.143', 'ietf', 'v2', 'T11-FC-FSPF-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.135', 'ietf', 'v2', 'T11-FC-NAME-SERVER-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.144', 'ietf', 'v2', 'T11-FC-ROUTE-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.161', 'ietf', 'v2', 'T11-FC-RSCN-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.176', 'ietf', 'v2', 'T11-FC-SP-AUTHENTICATION-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.178', 'ietf', 'v2', 'T11-FC-SP-POLICY-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.179', 'ietf', 'v2', 'T11-FC-SP-SA-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.175', 'ietf', 'v2', 'T11-FC-SP-TC-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.177', 'ietf', 'v2', 'T11-FC-SP-ZONING-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.147', 'ietf', 'v2', 'T11-FC-VIRTUAL-FABRIC-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.160', 'ietf', 'v2', 'T11-FC-ZONE-SERVER-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.136', 'ietf', 'v2', 'T11-TC-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.156', 'ietf', 'v2', 'TCP-ESTATS-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.4.1.23.2.29.1', 'ietf', 'v1', 'TCPIPX-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.49', 'ietf', 'v2', 'TCP-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.49', 'ietf', 'v2', 'TCP-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.200', 'ietf', 'v2', 'TE-LINK-STD-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.122', 'ietf', 'v2', 'TE-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.3.124', 'ietf', 'v2', 'TIME-AGGREGATE-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.34.8', 'ietf', 'v2', 'TN3270E-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.34.9', 'ietf', 'v2', 'TN3270E-RT-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.9', 'ietf', 'v2', 'TOKENRING-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.9', 'ietf', 'v2', 'TOKENRING-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.16.1', 'ietf', 'v1', 'TOKEN-RING-RMON-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.42', 'ietf', 'v2', 'TOKENRING-STATION-SR-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.16.30', 'ietf', 'v2', 'TPM-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.100', 'ietf', 'v2', 'TRANSPORT-ADDRESS-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.116', 'ietf', 'v2', 'TRIP-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.115', 'ietf', 'v2', 'TRIP-TC-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.131', 'ietf', 'v2', 'TUNNEL-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.131', 'ietf', 'v2', 'TUNNEL-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.170', 'ietf', 'v2', 'UDPLITE-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.50', 'ietf', 'v2', 'UDP-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.50', 'ietf', 'v2', 'UDP-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.33', 'ietf', 'v2', 'UPS-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.164', 'ietf', 'v2', 'URI-TC-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.229', 'ietf', 'v2', 'VDSL-LINE-EXT-MCM-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.228', 'ietf', 'v2', 'VDSL-LINE-EXT-SCM-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.97', 'ietf', 'v2', 'VDSL-LINE-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.129', 'ietf', 'v2', 'VPN-TC-STD-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.68', 'ietf', 'v2', 'VRRP-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.65', 'ietf', 'v2', 'WWW-MIB']);
    my $oids = $self->get_entries_by_walk(-varbindlist => [
        '1.3.6.1.2.1', '1.3.6.1.4.1',
    ]);
    foreach my $mibinfo (@{$mibdepot}) {
      next if $self->opts->protocol eq "1" && $mibinfo->[2] ne "v1";
      next if $self->opts->protocol ne "1" && $mibinfo->[2] eq "v1";
      $GLPlugin::SNMP::mib_ids->{$mibinfo->[3]} = $mibinfo->[0];
    }
    $GLPlugin::SNMP::mib_ids->{'SNMP-MIB2'} = "1.3.6.1.2.1";
    foreach my $mib (keys %{$GLPlugin::SNMP::mib_ids}) {
      if ($self->implements_mib($mib)) {
        push(@outputlist, [$mib, $GLPlugin::SNMP::mib_ids->{$mib}]);
        $unknowns = {@{[map {
            $_, $self->rawdata->{$_}
        } grep {
            substr($_, 0, length($GLPlugin::SNMP::mib_ids->{$mib})) ne
                $GLPlugin::SNMP::mib_ids->{$mib} || (
            substr($_, 0, length($GLPlugin::SNMP::mib_ids->{$mib})) eq
                $GLPlugin::SNMP::mib_ids->{$mib} &&
            substr($_, length($GLPlugin::SNMP::mib_ids->{$mib}), 1) ne ".")
        } keys %{$unknowns}]}};
      }
    }
    my $toplevels = {};
    map {
        /^(1\.3\.6\.1\.(2|4)\.1\.\d+\.\d+)\./; $toplevels->{$1} = 1; 
    } keys %{$unknowns};
    foreach (sort {$a cmp $b} keys %{$toplevels}) {
      push(@outputlist, ["<unknown>", $_]);
    }
    foreach (sort {$a->[0] cmp $b->[0]} @outputlist) {
      printf "implements %s %s\n", $_->[0], $_->[1];
    }
    $self->add_ok("have fun");
    my ($code, $message) = $self->check_messages(join => ', ', join_all => ', ');
    $GLPlugin::plugin->nagios_exit($code, $message);
  }
}

sub check_snmp_and_model {
  my $self = shift;
  $GLPlugin::SNMP::mibs_and_oids->{'MIB-II'} = {
    sysDescr => '1.3.6.1.2.1.1.1',
    sysObjectID => '1.3.6.1.2.1.1.2',
    sysUpTime => '1.3.6.1.2.1.1.3',
    sysName => '1.3.6.1.2.1.1.5',
  };
  $GLPlugin::SNMP::mibs_and_oids->{'SNMP-FRAMEWORK-MIB'} = {
    snmpEngineID => '1.3.6.1.6.3.10.2.1.1.0',
    snmpEngineBoots => '1.3.6.1.6.3.10.2.1.2.0',
    snmpEngineTime => '1.3.6.1.6.3.10.2.1.3.0',
    snmpEngineMaxMessageSize => '1.3.6.1.6.3.10.2.1.4.0',
  };
  if ($self->opts->snmpwalk) {
    my $response = {};
    if (! -f $self->opts->snmpwalk) {
      $self->add_message(CRITICAL, 
          sprintf 'file %s not found',
          $self->opts->snmpwalk);
    } elsif (-x $self->opts->snmpwalk) {
      my $cmd = sprintf "%s -ObentU -v%s -c%s %s 1.3.6.1.4.1 2>&1",
          $self->opts->snmpwalk,
          $self->opts->protocol,
          $self->opts->community,
          $self->opts->hostname;
      open(WALK, "$cmd |");
      while (<WALK>) {
        if (/^([\.\d]+) = .*?: (\-*\d+)/) {
          $response->{$1} = $2;
        } elsif (/^([\.\d]+) = .*?: "(.*?)"/) {
          $response->{$1} = $2;
          $response->{$1} =~ s/\s+$//;
        }
      }
      close WALK;
    } else {
      if (defined $self->opts->offline && $self->opts->mode ne 'walk') {
        if ((time - (stat($self->opts->snmpwalk))[9]) > $self->opts->offline) {
          $self->add_message(UNKNOWN,
              sprintf 'snmpwalk file %s is too old', $self->opts->snmpwalk);
        }
      }
      $self->opts->override_opt('hostname', 'walkhost') if $self->opts->mode ne 'walk';
      open(MESS, $self->opts->snmpwalk);
      while(<MESS>) {
        # SNMPv2-SMI::enterprises.232.6.2.6.7.1.3.1.4 = INTEGER: 6
        if (/^([\d\.]+) = .*?INTEGER: .*\((\-*\d+)\)/) {
          # .1.3.6.1.2.1.2.2.1.8.1 = INTEGER: down(2)
          $response->{$1} = $2;
        } elsif (/^([\d\.]+) = .*?Opaque:.*?Float:.*?([\-\.\d]+)/) {
          # .1.3.6.1.4.1.2021.10.1.6.1 = Opaque: Float: 0.938965
          $response->{$1} = $2;
        } elsif (/^([\d\.]+) = STRING:\s*$/) {
          $response->{$1} = "";
        } elsif (/^([\d\.]+) = Network Address: (.*)/) {
          $response->{$1} = $2;
        } elsif (/^([\d\.]+) = Hex-STRING: (.*)/) {
          $response->{$1} = "0x".$2;
          $response->{$1} =~ s/\s+$//;
        } elsif (/^([\d\.]+) = \w+: (\-*\d+)\s*$/) {
          $response->{$1} = $2;
        } elsif (/^([\d\.]+) = \w+: "(.*?)"/) {
          $response->{$1} = $2;
          $response->{$1} =~ s/\s+$//;
        } elsif (/^([\d\.]+) = \w+: (.*)/) {
          $response->{$1} = $2;
          $response->{$1} =~ s/\s+$//;
        } elsif (/^([\d\.]+) = (\-*\d+)/) {
          $response->{$1} = $2;
        } elsif (/^([\d\.]+) = "(.*?)"/) {
          $response->{$1} = $2;
          $response->{$1} =~ s/\s+$//;
        }
      }
      close MESS;
    }
    foreach my $oid (keys %$response) {
      if ($oid =~ /^\./) {
        my $nodot = $oid;
        $nodot =~ s/^\.//g;
        $response->{$nodot} = $response->{$oid};
        delete $response->{$oid};
      }
    }
    map { $response->{$_} =~ s/^\s+//; $response->{$_} =~ s/\s+$//; }
        keys %$response;
    $self->set_rawdata($response);
  } else {
    $self->establish_snmp_session();
  }
  if (! $self->check_messages()) {
    my $tic = time;
    my $sysUptime = $self->get_snmp_object('MIB-II', 'sysUpTime', 0);
    my $snmpEngineTime = $self->get_snmp_object('SNMP-FRAMEWORK-MIB', 'snmpEngineTime');
    my $sysDescr = $self->get_snmp_object('MIB-II', 'sysDescr', 0);
    my $tac = time;
    if (defined $sysUptime && defined $sysDescr) {
      # drecksschrott asa liefert negative werte
      # und drecksschrott socomec liefert: wrong type (should be INTEGER): NULL
      if (defined $snmpEngineTime && $snmpEngineTime =~ /^\d+$/ && $snmpEngineTime > 0) {
        $self->{uptime} = $snmpEngineTime;
      } else {
        $self->{uptime} = $self->timeticks($sysUptime);
      }
      $self->{productname} = $sysDescr;
      $self->{sysobjectid} = $self->get_snmp_object('MIB-II', 'sysObjectID', 0);
      $self->debug(sprintf 'uptime: %s', $self->{uptime});
      $self->debug(sprintf 'up since: %s',
          scalar localtime (time - $self->{uptime}));
      $GLPlugin::SNMP::uptime = $self->{uptime};
      $self->debug('whoami: '.$self->{productname});
    } else {
      if ($tac - $tic >= $GLPlugin::SNMP::session->timeout) {
        $self->add_message(UNKNOWN,
            'could not contact snmp agent, timeout during snmp-get sysUptime');
      } else {
        $self->add_message(UNKNOWN,
            'got neither sysUptime nor sysDescr, is this snmp agent working correctly?');
      }
      $GLPlugin::SNMP::session->close if $GLPlugin::SNMP::session;
    }
  }
}

sub establish_snmp_session {
  my $self = shift;
  $self->set_timeout_alarm();
  if (eval "require Net::SNMP") {
    my %params = ();
    my $net_snmp_version = Net::SNMP->VERSION(); # 5.002000 or 6.000000
    $params{'-translate'} = [ # because we see "NULL" coming from socomec devices
      -all => 0x0,
      -nosuchobject => 1,
      -nosuchinstance => 1,
      -endofmibview => 1,
      -unsigned => 1,
    ];
    $params{'-hostname'} = $self->opts->hostname;
    $params{'-version'} = $self->opts->protocol;
    if ($self->opts->port) {
      $params{'-port'} = $self->opts->port;
    }
    if ($self->opts->domain) {
      $params{'-domain'} = $self->opts->domain;
    }
    $self->v2tov3;
    if ($self->opts->protocol eq '3') {
      $params{'-version'} = $self->opts->protocol;
      $params{'-username'} = $self->opts->username;
      if ($self->opts->authpassword) {
        $params{'-authpassword'} = 
            $self->decode_password($self->opts->authpassword);
      }
      if ($self->opts->authprotocol) {
        $params{'-authprotocol'} = $self->opts->authprotocol;
      }
      if ($self->opts->privpassword) {
        $params{'-privpassword'} = 
            $self->decode_password($self->opts->privpassword);
      }
      if ($self->opts->privprotocol) {
        $params{'-privprotocol'} = $self->opts->privprotocol;
      }
      # context hat in der session nix verloren, sondern wird
      # als zusatzinfo bei den requests mitgeschickt
      #if ($self->opts->contextengineid) {
      #  $params{'-contextengineid'} = $self->opts->contextengineid;
      #}
      #if ($self->opts->contextname) {
      #  $params{'-contextname'} = $self->opts->contextname;
      #}
    } else {
      $params{'-community'} = 
          $self->decode_password($self->opts->community);
    }
    my ($session, $error) = Net::SNMP->session(%params);
    if (! defined $session) {
      $self->add_message(CRITICAL, 
          sprintf 'cannot create session object: %s', $error);
      $self->debug(Data::Dumper::Dumper(\%params));
    } else {
      my $max_msg_size = $session->max_msg_size();
      $session->max_msg_size(4 * $max_msg_size);
      $GLPlugin::SNMP::session = $session;
    }
  } else {
    $self->add_message(CRITICAL,
        'could not find Net::SNMP module');
  }
}

sub establish_snmp_secondary_session {
  my $self = shift;
  if ($self->opts->protocol eq '3') {
  } else {
    if (defined $self->opts->community2 &&
        $self->decode_password($self->opts->community2) ne
        $self->decode_password($self->opts->community)) {
      $GLPlugin::SNMP::session = undef;
      $self->opts->override_opt('community',
        $self->decode_password($self->opts->community2)) ;
      $self->establish_snmp_session;
    }
  }
}

sub mult_snmp_max_msg_size {
  my $self = shift;
  my $factor = shift || 10;
  $self->debug(sprintf "raise maxmsgsize %d * %d", 
      $factor, $GLPlugin::SNMP::session->max_msg_size()) if $GLPlugin::SNMP::session;
  $GLPlugin::SNMP::session->max_msg_size($factor * $GLPlugin::SNMP::session->max_msg_size()) if $GLPlugin::SNMP::session;
}

sub no_such_model {
  my $self = shift;
  printf "Model %s is not implemented\n", $self->{productname};
  exit 3;
}

sub no_such_mode {
  my $self = shift;
  if (ref($self) eq "Classes::Generic") {
    $self->init();
  } elsif (ref($self) eq "Classes::Device") {
    $self->add_message(UNKNOWN, 'the device did not implement the mibs this plugin is asking for');
    $self->add_message(UNKNOWN,
        sprintf('unknown device%s', $self->{productname} eq 'unknown' ?
            '' : '('.$self->{productname}.')'));
  } elsif (ref($self) eq "GLPlugin::SNMP") {
    # uptime, offline
    $self->init();
  } else {
    eval {
      bless $self, "Classes::Generic";
      $self->init();
    };
    if ($@) {
      bless $self, "GLPlugin::SNMP";
      $self->init();
    }
  }
  if (ref($self) eq "GLPlugin::SNMP") {
    printf "Mode %s is not implemented for this type of device\n",
        $self->opts->mode;
    exit 3;
  }
}

sub uptime {
  my $self = shift;
  return $GLPlugin::SNMP::uptime;
}

sub discover_suitable_class {
  my $self = shift;
  my $sysobj = $self->get_snmp_object('MIB-II', 'sysObjectID', 0);
  if ($sysobj && exists $GLPlugin::SNMP::discover_ids->{$sysobj}) {
    return $GLPlugin::SNMP::discover_ids->{$sysobj};
  }
}

sub implements_mib {
  my $self = shift;
  my $mib = shift;
  if (! exists $GLPlugin::SNMP::mib_ids->{$mib}) {
    return 0;
  }
  my $sysobj = $self->get_snmp_object('MIB-II', 'sysObjectID', 0);
  $sysobj =~ s/^\.// if $sysobj;
  if ($sysobj && $sysobj eq $GLPlugin::SNMP::mib_ids->{$mib}) {
    $self->debug(sprintf "implements %s (sysobj exact)", $mib);
    return 1;
  }
  if ($GLPlugin::SNMP::mib_ids->{$mib} eq
      substr $sysobj, 0, length $GLPlugin::SNMP::mib_ids->{$mib}) {
    $self->debug(sprintf "implements %s (sysobj)", $mib);
    return 1;
  }
  # some mibs are only composed of tables
  my $traces;
  if ($self->opts->snmpwalk) {
    $traces = {@{[map {
        $_, $self->rawdata->{$_} 
    } grep {
        substr($_, 0, length($GLPlugin::SNMP::mib_ids->{$mib})) eq $GLPlugin::SNMP::mib_ids->{$mib} 
    } keys %{$self->rawdata}]}};
  } else {
    my %params = (
        -varbindlist => [
            $GLPlugin::SNMP::mib_ids->{$mib}
        ]
    );
    if ($GLPlugin::SNMP::session->version() == 3) {
      $params{-contextengineid} = $self->opts->contextengineid if $self->opts->contextengineid;
      $params{-contextname} = $self->opts->contextname if $self->opts->contextname;
    }
    $traces = $GLPlugin::SNMP::session->get_next_request(%params);
  }
  if ($traces && # must find oids following to the ident-oid
      ! exists $traces->{$GLPlugin::SNMP::mib_ids->{$mib}} && # must not be the ident-oid
      grep { # following oid is inside this tree
          substr($_, 0, length($GLPlugin::SNMP::mib_ids->{$mib})) eq $GLPlugin::SNMP::mib_ids->{$mib};
      } keys %{$traces}) {
    $self->debug(sprintf "implements %s (found traces)", $mib);
    return 1;
  }
}

sub timeticks {
  my $self = shift;
  my $timestr = shift;
  if ($timestr =~ /\((\d+)\)/) {
    # Timeticks: (20718727) 2 days, 9:33:07.27
    $timestr = $1 / 100;
  } elsif ($timestr =~ /(\d+)\s*day[s]*.*?(\d+):(\d+):(\d+)\.(\d+)/) {
    # Timeticks: 2 days, 9:33:07.27
    $timestr = $1 * 24 * 3600 + $2 * 3600 + $3 * 60 + $4;
  } elsif ($timestr =~ /(\d+):(\d+):(\d+):(\d+)\.(\d+)/) {
    # Timeticks: 0001:03:18:42.77
    $timestr = $1 * 3600 * 24 + $2 * 3600 + $3 * 60 + $4;
  } elsif ($timestr =~ /(\d+):(\d+):(\d+)\.(\d+)/) {
    # Timeticks: 9:33:07.27
    $timestr = $1 * 3600 + $2 * 60 + $3;
  } elsif ($timestr =~ /(\d+)\s*hour[s]*.*?(\d+):(\d+)\.(\d+)/) {
    # Timeticks: 3 hours, 42:17.98
    $timestr = $1 * 3600 + $2 * 60 + $3;
  } elsif ($timestr =~ /(\d+)\s*minute[s]*.*?(\d+)\.(\d+)/) {
    # Timeticks: 36 minutes, 01.96
    $timestr = $1 * 60 + $2;
  } elsif ($timestr =~ /(\d+)\.\d+\s*second[s]/) {
    # Timeticks: 01.02 seconds
    $timestr = $1;
  } elsif ($timestr =~ /^(\d+)$/) {
    $timestr = $1 / 100;
  }
  return $timestr;
}

sub human_timeticks {
  my $self = shift;
  my $timeticks = shift;
  my $days = int($timeticks / 86400);
  $timeticks -= ($days * 86400);
  my $hours = int($timeticks / 3600);
  $timeticks -= ($hours * 3600);
  my $minutes = int($timeticks / 60);
  my $seconds = $timeticks % 60;
  $days = $days < 1 ? '' : $days .'d ';
  return $days . sprintf "%dh %dm %ds", $hours, $minutes, $seconds;
}

sub internal_name {
  my $self = shift;
  my $class = ref($self);
  $class =~ s/^.*:://;
  if (exists $self->{flat_indices}) {
    return sprintf "%s_%s", uc $class, $self->{flat_indices};
  } else {
    return sprintf "%s", uc $class;
  }
}

################################################################
# file-related functions
#
sub create_interface_cache_file {
  my $self = shift;
  my $extension = "";
  if ($self->opts->snmpwalk && ! $self->opts->hostname) {
    $self->opts->override_opt('hostname',
        'snmpwalk.file'.md5_hex($self->opts->snmpwalk))
  }
  if ($self->opts->community) { 
    $extension .= md5_hex($self->opts->community);
  }
  $extension =~ s/\//_/g;
  $extension =~ s/\(/_/g;
  $extension =~ s/\)/_/g;
  $extension =~ s/\*/_/g;
  $extension =~ s/\s/_/g;
  return sprintf "%s/%s_interface_cache_%s", $self->statefilesdir(),
      $self->opts->hostname, lc $extension;
}

sub create_entry_cache_file {
  my $self = shift;
  my $mib = shift;
  my $table = shift;
  my $key_attr = shift;
  return lc sprintf "%s_%s_%s_%s_cache",
      $self->create_interface_cache_file(),
      $mib, $table, join('#', @{$key_attr});
}

sub update_entry_cache {
  my $self = shift;
  my $force = shift;
  my $mib = shift;
  my $table = shift;
  my $key_attr = shift;
  if (ref($key_attr) ne "ARRAY") {
    $key_attr = [$key_attr];
  }
  my $cache = sprintf "%s_%s_%s_cache", 
      $mib, $table, join('#', @{$key_attr});
  my $statefile = $self->create_entry_cache_file($mib, $table, $key_attr);
  my $update = time - 3600;
  #my $update = time - 1;
  if ($force || ! -f $statefile || ((stat $statefile)[9]) < ($update)) {
    $self->debug(sprintf 'force update of %s %s %s %s cache',
        $self->opts->hostname, $self->opts->mode, $mib, $table);
    $self->{$cache} = {};
    foreach my $entry ($self->get_snmp_table_objects($mib, $table)) {
      my $key = join('#', map { $entry->{$_} } @{$key_attr});
      my $hash = $key . '-//-' . join('.', @{$entry->{indices}});
      $self->{$cache}->{$hash} = $entry->{indices};
    }
    $self->save_cache($mib, $table, $key_attr);
  }
  $self->load_cache($mib, $table, $key_attr);
}

sub save_cache {
  my $self = shift;
  my $mib = shift;
  my $table = shift;
  my $key_attr = shift;
  if (ref($key_attr) ne "ARRAY") {
    $key_attr = [$key_attr];
  }
  my $cache = sprintf "%s_%s_%s_cache", 
      $mib, $table, join('#', @{$key_attr});
  $self->create_statefilesdir();
  my $statefile = $self->create_entry_cache_file($mib, $table, $key_attr);
  open(STATE, ">".$statefile.".".$$);
  printf STATE Data::Dumper::Dumper($self->{$cache});
  close STATE;
  rename $statefile.".".$$, $statefile;
  $self->debug(sprintf "saved %s to %s",
      Data::Dumper::Dumper($self->{$cache}), $statefile);
}

sub load_cache {
  my $self = shift;
  my $mib = shift;
  my $table = shift;
  my $key_attr = shift;
  if (ref($key_attr) ne "ARRAY") {
    $key_attr = [$key_attr];
  }
  my $cache = sprintf "%s_%s_%s_cache", 
      $mib, $table, join('#', @{$key_attr});
  my $statefile = $self->create_entry_cache_file($mib, $table, $key_attr);
  $self->{$cache} = {};
  if ( -f $statefile) {
    our $VAR1;
    our $VAR2;
    eval {
      require $statefile;
    };
    if($@) {
      printf "rumms\n";
    }
    # keinesfalls mehr require verwenden!!!!!!
    # beim require enthaelt VAR1 andere werte als beim slurp
    # und zwar diejenigen, die beim letzten save_cache geschrieben wurden.
    my $content = do { local (@ARGV, $/) = $statefile; my $x = <>; close ARGV; $x };
    $VAR1 = eval "$content";
    $self->debug(sprintf "load %s", Data::Dumper::Dumper($VAR1));
    $self->{$cache} = $VAR1;
  }
}


################################################################
# top-level convenience functions
#
sub get_snmp_objects {
  my $self = shift;
  my $mib = shift;
  my @mos = @_;
  foreach (@mos) {
    my $value = $self->get_snmp_object($mib, $_, 0);
    if (defined $value) {
      $self->{$_} = $value;
    } else {
      my $value = $self->get_snmp_object($mib, $_);
      if (defined $value) {
        $self->{$_} = $value;
      }
    }
  }
}

sub get_snmp_tables {
  my $self = shift;
  my $mib = shift;
  my $infos = shift;
  foreach my $info (@{$infos}) {
    my $arrayname = $info->[0];
    my $table = $info->[1];
    my $class = $info->[2];
    my $filter = $info->[3];
    $self->{$arrayname} = [] if ! exists $self->{$arrayname};
    if (! exists $GLPlugin::SNMP::tablecache->{$mib} || ! exists $GLPlugin::SNMP::tablecache->{$mib}->{$table}) {
      $GLPlugin::SNMP::tablecache->{$mib}->{$table} = [];
      foreach ($self->get_snmp_table_objects($mib, $table)) {
        my $new_object = $class->new(%{$_});
        next if (defined $filter && ! &$filter($new_object));
        push(@{$self->{$arrayname}}, $new_object);
        push(@{$GLPlugin::SNMP::tablecache->{$mib}->{$table}}, $new_object);
      }
    } else {
      $self->debug(sprintf "get_snmp_tables %s %s cache hit", $mib, $table);
      foreach (@{$GLPlugin::SNMP::tablecache->{$mib}->{$table}}) {
        push(@{$self->{$arrayname}}, $_);
      }
    }
  }
}

################################################################
# 2nd level 
#
sub get_snmp_object {
  my $self = shift;
  my $mib = shift;
  my $mo = shift;
  my $index = shift;
  if (exists $GLPlugin::SNMP::mibs_and_oids->{$mib} &&
      exists $GLPlugin::SNMP::mibs_and_oids->{$mib}->{$mo}) {
    my $oid = $GLPlugin::SNMP::mibs_and_oids->{$mib}->{$mo}.
        (defined $index ? '.'.$index : '');
    my $response = $self->get_request(-varbindlist => [$oid]);
    if (defined $response->{$oid}) {
      if ($response->{$oid} eq 'noSuchInstance' || $response->{$oid} eq 'noSuchObject') {
        $response->{$oid} = undef;
      } elsif (my @symbols = $self->make_symbolic($mib, $response, [[$index]])) {
        $response->{$oid} = $symbols[0]->{$mo};
      }
    }
    $self->debug(sprintf "GET: %s::%s (%s) : %s", $mib, $mo, $oid, defined $response->{$oid} ? $response->{$oid} : "<undef>");
    return $response->{$oid};
  }
  return undef;
}

sub get_snmp_table_objects_with_cache {
  my $self = shift;
  my $mib = shift;
  my $table = shift;
  my $key_attr = shift;
  #return $self->get_snmp_table_objects($mib, $table);
  $self->update_entry_cache(0, $mib, $table, $key_attr);
  my @indices = $self->get_cache_indices($mib, $table, $key_attr);
  my @entries = ();
  foreach ($self->get_snmp_table_objects($mib, $table, \@indices)) {
    push(@entries, $_);
  }
  return @entries;
}

# get_snmp_table_objects('MIB-Name', 'Table-Name', 'Table-Entry', [indices])
# returns array of hashrefs
sub get_snmp_table_objects {
  my $self = shift;
  my $mib = shift;
  my $table = shift;
  my $indices = shift || [];
  my @entries = ();
  my $augmenting_table;
  $self->debug(sprintf "get_snmp_table_objects %s %s", $mib, $table);
  if ($table =~ /^(.*?)\+(.*)/) {
    $table = $1;
    $augmenting_table = $2;
  }
  my $entry = $table;
  $entry =~ s/Table/Entry/g;
  if (exists $GLPlugin::SNMP::mibs_and_oids->{$mib} &&
      exists $GLPlugin::SNMP::mibs_and_oids->{$mib}->{$table}) {
    if (scalar(@{$indices}) == 1 && $indices->[0] == -1) {
      # get mini-version of a table
      my $result = {};
      my $eoid = $GLPlugin::SNMP::mibs_and_oids->{$mib}->{$entry}.'.';
      my $eoidlen = length($eoid);
      my @columns = map {
          $GLPlugin::SNMP::mibs_and_oids->{$mib}->{$_}
      } grep {
        substr($GLPlugin::SNMP::mibs_and_oids->{$mib}->{$_}, 0, $eoidlen) eq
            $GLPlugin::SNMP::mibs_and_oids->{$mib}->{$entry}.'.'
      } keys %{$GLPlugin::SNMP::mibs_and_oids->{$mib}};
      my $ifresult = $self->get_entries(
          -columns => \@columns,
      );
      map { $result->{$_} = $ifresult->{$_} }
          keys %{$ifresult};
      if ($augmenting_table &&
          exists $GLPlugin::SNMP::mibs_and_oids->{$mib}->{$augmenting_table}) {
        my $entry = $augmenting_table;
        $entry =~ s/Table/Entry/g;
        my $eoid = $GLPlugin::SNMP::mibs_and_oids->{$mib}->{$entry}.'.';
        my $eoidlen = length($eoid);
        my @columns = map {
            $GLPlugin::SNMP::mibs_and_oids->{$mib}->{$_}
        } grep {
          substr($GLPlugin::SNMP::mibs_and_oids->{$mib}->{$_}, 0, $eoidlen) eq $eoid
        } keys %{$GLPlugin::SNMP::mibs_and_oids->{$mib}};
        my $ifresult = $self->get_entries(
            -columns => \@columns,
        );
        map { $result->{$_} = $ifresult->{$_} }
            keys %{$ifresult};
      }
      my @indices = 
          $self->get_indices(
              -baseoid => $GLPlugin::SNMP::mibs_and_oids->{$mib}->{$entry},
              -oids => [keys %{$result}]);
      $self->debug(sprintf "get_snmp_table_objects get_table returns %d indices",
          scalar(@indices));
      @entries = $self->make_symbolic($mib, $result, \@indices);
      @entries = map { $_->{indices} = shift @indices; $_ } @entries;
    } elsif (scalar(@{$indices}) == 1) {
      my $result = {};
      my $eoid = $GLPlugin::SNMP::mibs_and_oids->{$mib}->{$entry}.'.';
      my $eoidlen = length($eoid);
      my @columns = map {
          $GLPlugin::SNMP::mibs_and_oids->{$mib}->{$_}
      } grep {
        substr($GLPlugin::SNMP::mibs_and_oids->{$mib}->{$_}, 0, $eoidlen) eq
            $GLPlugin::SNMP::mibs_and_oids->{$mib}->{$entry}.'.'
      } keys %{$GLPlugin::SNMP::mibs_and_oids->{$mib}};
      my $index = join('.', @{$indices->[0]});
      my $ifresult = $self->get_entries(
          -startindex => $index,
          -endindex => $index,
          -columns => \@columns,
      );
      map { $result->{$_} = $ifresult->{$_} }
          keys %{$ifresult};
      if ($augmenting_table &&
          exists $GLPlugin::SNMP::mibs_and_oids->{$mib}->{$augmenting_table}) {
        my $entry = $augmenting_table;
        $entry =~ s/Table/Entry/g;
        my $eoid = $GLPlugin::SNMP::mibs_and_oids->{$mib}->{$entry}.'.';
        my $eoidlen = length($eoid);
        my @columns = map {
            $GLPlugin::SNMP::mibs_and_oids->{$mib}->{$_}
        } grep {
          substr($GLPlugin::SNMP::mibs_and_oids->{$mib}->{$_}, 0, $eoidlen) eq $eoid
        } keys %{$GLPlugin::SNMP::mibs_and_oids->{$mib}};
        my $ifresult = $self->get_entries(
            -startindex => $index,
            -endindex => $index,
            -columns => \@columns,
        );
        map { $result->{$_} = $ifresult->{$_} }
            keys %{$ifresult};
      }
      @entries = $self->make_symbolic($mib, $result, $indices);
      @entries = map { $_->{indices} = shift @{$indices}; $_ } @entries;
    } elsif (scalar(@{$indices}) > 1) {
    # man koennte hier pruefen, ob die indices aufeinanderfolgen
    # und dann get_entries statt get_table aufrufen
      my $result = {};
      my $eoid = $GLPlugin::SNMP::mibs_and_oids->{$mib}->{$entry}.'.';
      my $eoidlen = length($eoid);
      my @columns = map {
          $GLPlugin::SNMP::mibs_and_oids->{$mib}->{$_}
      } grep {
        substr($GLPlugin::SNMP::mibs_and_oids->{$mib}->{$_}, 0, $eoidlen) eq $eoid
      } keys %{$GLPlugin::SNMP::mibs_and_oids->{$mib}};
      my @sortedindices = map { $_->[0] }
          sort { $a->[1] cmp $b->[1] }
              map { [$_,
                  join '', map { sprintf("%30d",$_) } split( /\./, $_)
              ] } map { join('.', @{$_})} @{$indices};
      my $startindex = $sortedindices[0];
      my $endindex = $sortedindices[$#sortedindices];
      if (0) {
        # holzweg. dicke ciscos liefern unvollstaendiges resultat, d.h.
        # bei 138,19,157 kommt nur 138..144, dann ist schluss.
        # maxrepetitions bringt nichts.
        $result = $self->get_entries(
            -startindex => $startindex,
            -endindex => $endindex,
            -columns => \@columns,
        );
      } else {
        foreach my $ifidx (@sortedindices) {
          my $ifresult = $self->get_entries(
              -startindex => $ifidx,
              -endindex => $ifidx,
              -columns => \@columns,
          );
          map { $result->{$_} = $ifresult->{$_} }
              keys %{$ifresult};
        }
      }
      if ($augmenting_table &&
          exists $GLPlugin::SNMP::mibs_and_oids->{$mib}->{$augmenting_table}) {
        my $entry = $augmenting_table;
        $entry =~ s/Table/Entry/g;
        my $eoid = $GLPlugin::SNMP::mibs_and_oids->{$mib}->{$entry}.'.';
        my $eoidlen = length($eoid);
        my @columns = map {
            $GLPlugin::SNMP::mibs_and_oids->{$mib}->{$_}
        } grep {
          substr($GLPlugin::SNMP::mibs_and_oids->{$mib}->{$_}, 0, $eoidlen) eq $eoid
        } keys %{$GLPlugin::SNMP::mibs_and_oids->{$mib}};
        foreach my $ifidx (@sortedindices) {
          my $ifresult = $self->get_entries(
              -startindex => $ifidx,
              -endindex => $ifidx,
              -columns => \@columns,
          );
          map { $result->{$_} = $ifresult->{$_} }
              keys %{$ifresult};
        }
      }
      # now we have numerical_oid+index => value
      # needs to become symboic_oid => value
      #my @indices =
      # $self->get_indices($GLPlugin::SNMP::mibs_and_oids->{$mib}->{$entry});
      @entries = $self->make_symbolic($mib, $result, $indices);
      @entries = map { $_->{indices} = shift @{$indices}; $_ } @entries;
    } else {
      $self->debug(sprintf "get_snmp_table_objects calls get_table %s",
          $GLPlugin::SNMP::mibs_and_oids->{$mib}->{$table});
      my $result = $self->get_table(
          -baseoid => $GLPlugin::SNMP::mibs_and_oids->{$mib}->{$table});
      $self->debug(sprintf "get_snmp_table_objects get_table returns %d oids",
          scalar(keys %{$result}));
      # now we have numerical_oid+index => value
      # needs to become symboic_oid => value
      my @indices = 
          $self->get_indices(
              -baseoid => $GLPlugin::SNMP::mibs_and_oids->{$mib}->{$entry},
              -oids => [keys %{$result}]);
      $self->debug(sprintf "get_snmp_table_objects get_table returns %d indices",
          scalar(@indices));
      @entries = $self->make_symbolic($mib, $result, \@indices);
      @entries = map { $_->{indices} = shift @indices; $_ } @entries;
    }
  }
  @entries = map { $_->{flat_indices} = join(".", @{$_->{indices}}); $_ } @entries;
  return @entries;
}

################################################################
# 3rd level functions. calling net::snmp-functions
# 
sub get_request {
  my $self = shift;
  my %params = @_;
  my @notcached = ();
  foreach my $oid (@{$params{'-varbindlist'}}) {
    $self->add_oidtrace($oid);
    if (! exists $GLPlugin::SNMP::rawdata->{$oid}) {
      push(@notcached, $oid);
    }
  }
  if (! $self->opts->snmpwalk && (scalar(@notcached) > 0)) {
    my %params = ();
    if ($GLPlugin::SNMP::session->version() == 0) {
      $params{-varbindlist} = \@notcached;
    } elsif ($GLPlugin::SNMP::session->version() == 1) {
      $params{-varbindlist} = \@notcached;
      #$params{-nonrepeaters} = scalar(@notcached);
    } elsif ($GLPlugin::SNMP::session->version() == 3) {
      $params{-varbindlist} = \@notcached;
      $params{-contextengineid} = $self->opts->contextengineid if $self->opts->contextengineid;
      $params{-contextname} = $self->opts->contextname if $self->opts->contextname;
    }
    my $result = $GLPlugin::SNMP::session->get_request(%params);
    foreach my $key (%{$result}) {
      $self->add_rawdata($key, $result->{$key});
    }
  }
  my $result = {};
  map { $result->{$_} = $GLPlugin::SNMP::rawdata->{$_} }
      @{$params{'-varbindlist'}};
  return $result;
}

sub get_entries_get_bulk {
  my $self = shift;
  my %params = @_;
  my $result = {};
  $self->debug(sprintf "get_entries_get_bulk %s", Data::Dumper::Dumper(\%params));
  my %newparams = ();
  $newparams{'-maxrepetitions'} = 3;
  $newparams{'-startindex'} = $params{'-startindex'}
      if defined $params{'-startindex'};
  $newparams{'-endindex'} = $params{'-endindex'}
      if defined $params{'-endindex'};
  $newparams{'-columns'} = $params{'-columns'};
  if ($GLPlugin::SNMP::session->version() == 3) {
    $newparams{-contextengineid} = $self->opts->contextengineid if $self->opts->contextengineid;
    $newparams{-contextname} = $self->opts->contextname if $self->opts->contextname;
  }
  $result = $GLPlugin::SNMP::session->get_entries(%newparams);
  return $result;
}

sub get_entries_get_next {
  my $self = shift;
  my %params = @_;
  my $result = {};
  $self->debug(sprintf "get_entries_get_next %s", Data::Dumper::Dumper(\%params));
  my %newparams = ();
  $newparams{'-maxrepetitions'} = 0;
  $newparams{'-startindex'} = $params{'-startindex'}
      if defined $params{'-startindex'};
  $newparams{'-endindex'} = $params{'-endindex'}
      if defined $params{'-endindex'};
  $newparams{'-columns'} = $params{'-columns'};
  if ($GLPlugin::SNMP::session->version() == 3) {
    $newparams{-contextengineid} = $self->opts->contextengineid if $self->opts->contextengineid;
    $newparams{-contextname} = $self->opts->contextname if $self->opts->contextname;
  }
  $result = $GLPlugin::SNMP::session->get_entries(%newparams);
  return $result;
}

sub get_entries_get_next_1index {
  my $self = shift;
  my %params = @_;
  my $result = {};
  $self->debug(sprintf "get_entries_get_next_1index %s", Data::Dumper::Dumper(\%params));
  my %newparams = ();
  $newparams{'-startindex'} = $params{'-startindex'}
      if defined $params{'-startindex'};
  $newparams{'-endindex'} = $params{'-endindex'}
      if defined $params{'-endindex'};
  $newparams{'-columns'} = $params{'-columns'};
  my %singleparams = ();
  $singleparams{'-maxrepetitions'} = 0;
  if ($GLPlugin::SNMP::session->version() == 3) {
    $singleparams{-contextengineid} = $self->opts->contextengineid if $self->opts->contextengineid;
    $singleparams{-contextname} = $self->opts->contextname if $self->opts->contextname;
  }
  foreach my $index ($newparams{'-startindex'}..$newparams{'-endindex'}) {
    foreach my $oid (@{$newparams{'-columns'}}) {
      $singleparams{'-columns'} = [$oid];
      $singleparams{'-startindex'} = $index;
      $singleparams{'-endindex'} =$index;
      my $singleresult = $GLPlugin::SNMP::session->get_entries(%singleparams);
      foreach my $key (keys %{$singleresult}) {
        $result->{$key} = $singleresult->{$key};
      }
    }
  }
  return $result;
}

sub get_entries_get_simple {
  my $self = shift;
  my %params = @_;
  my $result = {};
  $self->debug(sprintf "get_entries_get_simple %s", Data::Dumper::Dumper(\%params));
  my %newparams = ();
  $newparams{'-startindex'} = $params{'-startindex'}
      if defined $params{'-startindex'};
  $newparams{'-endindex'} = $params{'-endindex'}
      if defined $params{'-endindex'};
  $newparams{'-columns'} = $params{'-columns'};
  my %singleparams = ();
  if ($GLPlugin::SNMP::session->version() == 3) {
    $singleparams{-contextengineid} = $self->opts->contextengineid if $self->opts->contextengineid;
    $singleparams{-contextname} = $self->opts->contextname if $self->opts->contextname;
  }
  foreach my $index ($newparams{'-startindex'}..$newparams{'-endindex'}) {
    foreach my $oid (@{$newparams{'-columns'}}) {
      $singleparams{'-varbindlist'} = [$oid.".".$index];
      my $singleresult = $GLPlugin::SNMP::session->get_request(%singleparams);
      foreach my $key (keys %{$singleresult}) {
        $result->{$key} = $singleresult->{$key};
      }
    }
  }
  return $result;
}

sub get_entries {
  my $self = shift;
  my %params = @_;
  # [-startindex]
  # [-endindex]
  # -columns
  my $result = {};
  $self->debug(sprintf "get_entries %s", Data::Dumper::Dumper(\%params));
  if (! $self->opts->snmpwalk) {
    $result = $self->get_entries_get_bulk(%params);
    if (! $result) {
      if (scalar (@{$params{'-columns'}}) < 50 && $params{'-endindex'} && $params{'-startindex'} eq $params{'-endindex'}) {
        $result = $self->get_entries_get_simple(%params);
      } else {
        $result = $self->get_entries_get_next(%params);
      }
      if (! $result && defined $params{'-startindex'} && $params{'-startindex'} !~ /\./) {
        # compound indexes cannot continue, as these two methods iterate numerically
        if ($GLPlugin::SNMP::session->error() =~ /tooBig/i) {
          $result = $self->get_entries_get_next_1index(%params);
        }
        if (! $result) {
          $result = $self->get_entries_get_simple(%params);
        }
        if (! $result) {
          $self->debug(sprintf "nutzt nix\n");
        }
      }
    }
    foreach my $key (keys %{$result}) {
      if (substr($key, -1) eq " ") {
        my $value = $result->{$key};
        delete $result->{$key};
        $key =~ s/\s+$//g;
        $result->{$key} = $value;
        #
        # warum?
        #
        # %newparams ist:
        #  '-columns' => [
        #                  '1.3.6.1.2.1.2.2.1.8',
        #                  '1.3.6.1.2.1.2.2.1.13',
        #                  ...
        #                  '1.3.6.1.2.1.2.2.1.16'
        #                ],
        #  '-startindex' => '2',
        #  '-endindex' => '2'
        #
        # und $result ist:
        #  ...
        #  '1.3.6.1.2.1.2.2.1.2.2' => 'Adaptive Security Appliance \'outside\' interface',
        #  '1.3.6.1.2.1.2.2.1.16.2 ' => 4281465004,
        #  '1.3.6.1.2.1.2.2.1.13.2' => 0,
        #  ...
        #
        # stinkstiefel!
        #
      }
      $self->add_rawdata($key, $result->{$key});
    }
  } else {
    my $preresult = $self->get_matching_oids(
        -columns => $params{'-columns'});
    foreach (keys %{$preresult}) {
      $result->{$_} = $preresult->{$_};
    }
    my @sortedkeys = map { $_->[0] }
        sort { $a->[1] cmp $b->[1] }
            map { [$_,
                    join '', map { sprintf("%30d",$_) } split( /\./, $_)
                  ] } keys %{$result};
    my @to_del = ();
    if ($params{'-startindex'}) {
      foreach my $resoid (@sortedkeys) {
        foreach my $oid (@{$params{'-columns'}}) {
          my $poid = $oid.'.';
          my $lpoid = length($poid);
          if (substr($resoid, 0, $lpoid) eq $poid) {
            my $oidpattern = $poid;
            $oidpattern =~ s/\./\\./g;
            if ($resoid =~ /^$oidpattern(.+)$/) {
              if ($1 lt $params{'-startindex'}) {
                push(@to_del, $oid.'.'.$1);
              }
            }
          }
        }
      }
    }
    if ($params{'-endindex'}) {
      foreach my $resoid (@sortedkeys) {
        foreach my $oid (@{$params{'-columns'}}) {
          my $poid = $oid.'.';
          my $lpoid = length($poid);
          if (substr($resoid, 0, $lpoid) eq $poid) {
            my $oidpattern = $poid;
            $oidpattern =~ s/\./\\./g;
            if ($resoid =~ /^$oidpattern(.+)$/) {
              if ($1 gt $params{'-endindex'}) {
                push(@to_del, $oid.'.'.$1);
              }
            }
          }
        }
      }
    }
    foreach (@to_del) {
      delete $result->{$_};
    }
  }
  return $result;
}

sub get_entries_by_walk {
  my $self = shift;
  my %params = @_;
  if (! $self->opts->snmpwalk) {
    $self->add_ok("if you get this crap working correctly, let me know");
    if ($GLPlugin::SNMP::session->version() == 3) {
      $params{-contextengineid} = $self->opts->contextengineid if $self->opts->contextengineid;
      $params{-contextname} = $self->opts->contextname if $self->opts->contextname;
    }
    $self->debug(sprintf "get_tree %s", Data::Dumper::Dumper(\%params));
    my @baseoids = @{$params{-varbindlist}};
    delete $params{-varbindlist};
    if ($GLPlugin::SNMP::session->version() == 0) {
      foreach my $baseoid (@baseoids) {
        $params{-varbindlist} = [$baseoid];
        while (my $result = $GLPlugin::SNMP::session->get_next_request(%params)) {
          $params{-varbindlist} = [($GLPlugin::SNMP::session->var_bind_names)[0]];
        }
      }
    } else {
      $params{-maxrepetitions} = 200;
      foreach my $baseoid (@baseoids) {
        $params{-varbindlist} = [$baseoid];
        while (my $result = $GLPlugin::SNMP::session->get_bulk_request(%params)) {
          my @names = $GLPlugin::SNMP::session->var_bind_names();
          my @oids = $self->sort_oids(\@names);
          $params{-varbindlist} = [pop @oids];
        }
      }
    }
  } else {
    return $self->get_matching_oids(
        -columns => $params{-varbindlist});
  }
}

sub get_table {
  my $self = shift;
  my %params = @_;
  $self->add_oidtrace($params{'-baseoid'});
  if (! $self->opts->snmpwalk) {
    my @notcached = ();
    if ($GLPlugin::SNMP::session->version() == 3) {
      $params{-contextengineid} = $self->opts->contextengineid if $self->opts->contextengineid;
      $params{-contextname} = $self->opts->contextname if $self->opts->contextname;
    }
    $self->debug(sprintf "get_table %s", Data::Dumper::Dumper(\%params));
    my $result = $GLPlugin::SNMP::session->get_table(%params);
    $self->debug(sprintf "get_table returned %d oids", scalar(keys %{$result}));
    if (scalar(keys %{$result}) == 0) {
      $self->debug(sprintf "get_table error: %s", 
          $GLPlugin::SNMP::session->error());
      $self->debug("get_table error: try fallback");
      $params{'-maxrepetitions'} = 1;
      $self->debug(sprintf "get_table %s", Data::Dumper::Dumper(\%params));
      $result = $GLPlugin::SNMP::session->get_table(%params);
      $self->debug(sprintf "get_table returned %d oids", scalar(keys %{$result}));
      if (scalar(keys %{$result}) == 0) {
        $self->debug(sprintf "get_table error: %s", 
            $GLPlugin::SNMP::session->error());
        $self->debug("get_table error: no more fallbacks. Try --protocol 1");
      }
    }
    # Drecksstinkstiefel Net::SNMP
    # '1.3.6.1.2.1.2.2.1.22.4 ' => 'endOfMibView',
    # '1.3.6.1.2.1.2.2.1.22.4' => '0.0',
    foreach my $key (keys %{$result}) {
      if (substr($key, -1) eq " ") {
        my $value = $result->{$key};
        delete $result->{$key};
        (my $shortkey = $key) =~ s/\s+$//g;
        if (! exists $result->{shortkey}) {
          $result->{$shortkey} = $value;
        }
        $self->add_rawdata($key, $result->{$key}) if exists $result->{$key};
      } else {
        $self->add_rawdata($key, $result->{$key});
      }
    }
  }
  return $self->get_matching_oids(
      -columns => [$params{'-baseoid'}]);
}

################################################################
# helper functions
# 
sub valid_response {
  my $self = shift;
  my $mib = shift;
  my $oid = shift;
  my $index = shift;
  if (exists $GLPlugin::SNMP::mibs_and_oids->{$mib} &&
      exists $GLPlugin::SNMP::mibs_and_oids->{$mib}->{$oid}) {
    # make it numerical
    my $oid = $GLPlugin::SNMP::mibs_and_oids->{$mib}->{$oid};
    if (defined $index) {
      $oid .= '.'.$index;
    }
    my $result = $self->get_request(
        -varbindlist => [$oid]
    );
    if (!defined($result) ||
        ! defined $result->{$oid} ||
        $result->{$oid} eq 'noSuchInstance' ||
        $result->{$oid} eq 'noSuchObject' ||
        $result->{$oid} eq 'endOfMibView') {
      return undef;
    } else {
      $self->add_rawdata($oid, $result->{$oid});
      return $result->{$oid};
    }
  } else {
    return undef;
  }
}

# make_symbolic
# mib is the name of a mib (must be in mibs_and_oids)
# result is a hash-key oid->value
# indices is a array ref of array refs. [[1],[2],...] or [[1,0],[1,1],[2,0]..
sub make_symbolic {
  my $self = shift;
  my $mib = shift;
  my $result = shift;
  my $indices = shift;
  my @entries = ();
  if (! wantarray && ref(\$result) eq "SCALAR" && ref(\$indices) eq "SCALAR") {
    # $self->make_symbolic('CISCO-IETF-NAT-MIB', 'cnatProtocolStatsName', $self->{cnatProtocolStatsName});
    my $oid = $GLPlugin::SNMP::mibs_and_oids->{$mib}->{$result};
    $result = { $oid => $self->{$result} };
    $indices = [[]];
  }
  foreach my $index (@{$indices}) {
    # skip [], [[]], [[undef]]
    if (ref($index) eq "ARRAY") {
      if (scalar(@{$index}) == 0) {
        next;
      } elsif (!defined $index->[0]) {
        next;
      }
    }
    my $mo = {};
    my $idx = join('.', @{$index}); # index can be multi-level
    foreach my $symoid
        (keys %{$GLPlugin::SNMP::mibs_and_oids->{$mib}}) {
      my $oid = $GLPlugin::SNMP::mibs_and_oids->{$mib}->{$symoid};
      if (ref($oid) ne 'HASH') {
        my $fulloid = $oid . '.'.$idx;
        if (exists $result->{$fulloid}) {
          if (exists $GLPlugin::SNMP::mibs_and_oids->{$mib}->{$symoid.'Definition'}) {
            if (ref($GLPlugin::SNMP::mibs_and_oids->{$mib}->{$symoid.'Definition'}) eq 'HASH') {
              if (exists $GLPlugin::SNMP::mibs_and_oids->{$mib}->{$symoid.'Definition'}->{$result->{$fulloid}}) {
                $mo->{$symoid} = $GLPlugin::SNMP::mibs_and_oids->{$mib}->{$symoid.'Definition'}->{$result->{$fulloid}};
              } else {
                $mo->{$symoid} = 'unknown_'.$result->{$fulloid};
              }
            } elsif ($GLPlugin::SNMP::mibs_and_oids->{$mib}->{$symoid.'Definition'} =~ /^OID::(.*)/) {
              my $othermib = $1;
              my $value_which_is_a_oid = $result->{$fulloid};
              $value_which_is_a_oid =~ s/^\.//g;
              my @result = grep { $GLPlugin::SNMP::mibs_and_oids->{$othermib}->{$_} eq $value_which_is_a_oid } keys %{$GLPlugin::SNMP::mibs_and_oids->{$othermib}};
              if (scalar(@result)) {
                $mo->{$symoid} = $result[0];
              } else {
                $mo->{$symoid} = 'unknown_'.$result->{$fulloid};
              }
            } elsif ($GLPlugin::SNMP::mibs_and_oids->{$mib}->{$symoid.'Definition'} =~ /^(.*?)::(.*)/) {
              my $mib = $1;
              my $definition = $2;
              if  (exists $GLPlugin::SNMP::definitions->{$mib} &&
                  exists $GLPlugin::SNMP::definitions->{$mib}->{$definition} &&
                  ref($GLPlugin::SNMP::definitions->{$mib}->{$definition}) eq 'CODE') {
                $mo->{$symoid} = $GLPlugin::SNMP::definitions->{$mib}->{$definition}->($result->{$fulloid});
              } elsif  (exists $GLPlugin::SNMP::definitions->{$mib} &&
                  exists $GLPlugin::SNMP::definitions->{$mib}->{$definition} &&
                  ref($GLPlugin::SNMP::definitions->{$mib}->{$definition}) eq 'HASH' &&
                  exists $GLPlugin::SNMP::definitions->{$mib}->{$definition}->{$result->{$fulloid}}) {
                $mo->{$symoid} = $GLPlugin::SNMP::definitions->{$mib}->{$definition}->{$result->{$fulloid}};
              } else {
                $mo->{$symoid} = 'unknown_'.$result->{$fulloid};
              }
            } else {
              $mo->{$symoid} = 'unknown_'.$result->{$fulloid};
              # oder $GLPlugin::SNMP::mibs_and_oids->{$mib}->{$symoid.'Definition'}?
            }
          } else {
            $mo->{$symoid} = $result->{$fulloid};
          }
        }
      }
    }
    push(@entries, $mo);
  }
  if (@{$indices} and scalar(@{$indices}) == 1 and !defined $indices->[0]->[0]) {
    my $mo = {};
    foreach my $symoid
        (keys %{$GLPlugin::SNMP::mibs_and_oids->{$mib}}) {
      my $oid = $GLPlugin::SNMP::mibs_and_oids->{$mib}->{$symoid};
      if (ref($oid) ne 'HASH') {
        if (exists $result->{$oid}) {
          if (exists $GLPlugin::SNMP::mibs_and_oids->{$mib}->{$symoid.'Definition'}) {
            if (ref($GLPlugin::SNMP::mibs_and_oids->{$mib}->{$symoid.'Definition'}) eq 'HASH') {
              if (exists $GLPlugin::SNMP::mibs_and_oids->{$mib}->{$symoid.'Definition'}->{$result->{$oid}}) {
                $mo->{$symoid} = $GLPlugin::SNMP::mibs_and_oids->{$mib}->{$symoid.'Definition'}->{$result->{$oid}};
                push(@entries, $mo);
              }
            } elsif ($GLPlugin::SNMP::mibs_and_oids->{$mib}->{$symoid.'Definition'} =~ /^(.*?)::(.*)/) {
              my $mib = $1;
              my $definition = $2;
              if  (exists $GLPlugin::SNMP::definitions->{$mib} && exists $GLPlugin::SNMP::definitions->{$mib}->{$definition}
                  && exists $GLPlugin::SNMP::definitions->{$mib}->{$definition}->{$result->{$oid}}) {
                $mo->{$symoid} = $GLPlugin::SNMP::definitions->{$mib}->{$definition}->{$result->{$oid}};
              } else {
                $mo->{$symoid} = 'unknown_'.$result->{$oid};
              }
            } else {
              $mo->{$symoid} = 'unknown_'.$result->{$oid};
              # oder $GLPlugin::SNMP::mibs_and_oids->{$mib}->{$symoid.'Definition'}?
            }
          }
        }
      }
    }
    push(@entries, $mo) if keys %{$mo};
  }
  if (wantarray) {
    return @entries;
  } else {
    foreach my $entry (@entries) {
      foreach my $key (keys %{$entry}) {
        $self->{$key} = $entry->{$key};
      }
    }
  }
}

sub sort_oids {
  my $self = shift;
  my $oids = shift || [];
  my @sortedkeys = map { $_->[0] }
      sort { $a->[1] cmp $b->[1] }
          map { [$_,
                  join '', map { sprintf("%30d",$_) } split( /\./, $_)
                ] } @{$oids};
  return @sortedkeys;
}

sub get_matching_oids {
  my $self = shift;
  my %params = @_;
  my $result = {};
  $self->debug(sprintf "get_matching_oids %s", Data::Dumper::Dumper(\%params));
  foreach my $oid (@{$params{'-columns'}}) {
    my $oidpattern = $oid;
    $oidpattern =~ s/\./\\./g;
    map { $result->{$_} = $GLPlugin::SNMP::rawdata->{$_} }
        grep /^$oidpattern(?=\.|$)/, keys %{$GLPlugin::SNMP::rawdata};
  }
  $self->debug(sprintf "get_matching_oids returns %d from %d oids", 
      scalar(keys %{$result}), scalar(keys %{$GLPlugin::SNMP::rawdata}));
  return $result;
}

sub get_indices {
  my $self = shift;
  my %params = @_;
  # -baseoid : entry
  # find all oids beginning with $entry
  # then skip one field for the sequence
  # then read the next numindices fields
  my $entrypat = $params{'-baseoid'};
  $entrypat =~ s/\./\\\./g;
  my @indices = map {
      /^$entrypat\.\d+\.(.*)/ && $1;
  } grep {
      /^$entrypat/
  } keys %{$GLPlugin::SNMP::rawdata};
  my %seen = ();
  my @o = map {[split /\./]} sort grep !$seen{$_}++, @indices;
  return @o;
}

# this flattens a n-dimensional array and returns the absolute position
# of the element at position idx1,idx2,...,idxn
# element 1,2 in table 0,0 0,1 0,2 1,0 1,1 1,2 2,0 2,1 2,2 is at pos 6
sub get_number {
  my $self = shift;
  my $indexlists = shift; #, zeiger auf array aus [1, 2]
  my @element = @_;
  my $dimensions = scalar(@{$indexlists->[0]});
  my @sorted = ();
  my $number = 0;
  if ($dimensions == 1) {
    @sorted =
        sort { $a->[0] <=> $b->[0] } @{$indexlists};
  } elsif ($dimensions == 2) {
    @sorted =
        sort { $a->[0] <=> $b->[0] || $a->[1] <=> $b->[1] } @{$indexlists};
  } elsif ($dimensions == 3) {
    @sorted =
        sort { $a->[0] <=> $b->[0] ||
               $a->[1] <=> $b->[1] ||
               $a->[2] <=> $b->[2] } @{$indexlists};
  }
  foreach (@sorted) {
    if ($dimensions == 1) {
      if ($_->[0] == $element[0]) {
        last;
      }
    } elsif ($dimensions == 2) {
      if ($_->[0] == $element[0] && $_->[1] == $element[1]) {
        last;
      }
    } elsif ($dimensions == 3) {
      if ($_->[0] == $element[0] &&
          $_->[1] == $element[1] &&
          $_->[2] == $element[2]) {
        last;
      }
    }
    $number++;
  }
  return ++$number;
}

################################################################
# caching functions
# 
sub set_rawdata {
  my $self = shift;
  $GLPlugin::SNMP::rawdata = shift;
}

sub add_rawdata {
  my $self = shift;
  my $oid = shift;
  my $value = shift;
  $GLPlugin::SNMP::rawdata->{$oid} = $value;
}

sub rawdata {
  my $self = shift;
  return $GLPlugin::SNMP::rawdata;
}

sub add_oidtrace {
  my $self = shift;
  my $oid = shift;
  $self->debug("cache: ".$oid);
  push(@{$GLPlugin::SNMP::oidtrace}, $oid);
}

#  $self->update_entry_cache(0, $mib, $table, $key_attr);
#  my @indices = $self->get_cache_indices();
sub get_cache_indices {
  my $self = shift;
  my $mib = shift;
  my $table = shift;
  my $key_attr = shift;
  if (ref($key_attr) ne "ARRAY") {
    $key_attr = [$key_attr];
  }
  my $cache = sprintf "%s_%s_%s_cache", 
      $mib, $table, join('#', @{$key_attr});
  my @indices = ();
  foreach my $key (keys %{$self->{$cache}}) {
    my ($descr, $index) = split('-//-', $key, 2);
    if ($self->opts->name) {
      if ($self->opts->regexp) {
        my $pattern = $self->opts->name;
        if ($descr =~ /$pattern/i) {
          push(@indices, $self->{$cache}->{$key});
        }
      } else {
        if ($self->opts->name =~ /^\d+$/) {
          if ($index == 1 * $self->opts->name) {
            push(@indices, [1 * $self->opts->name]);
          }
        } else {
          if (lc $descr eq lc $self->opts->name) {
            push(@indices, $self->{$cache}->{$key});
          }
        }
      }
    } else {
      push(@indices, $self->{$cache}->{$key});
    }
  }
  return @indices;
  return map { join('.', ref($_) eq "ARRAY" ? @{$_} : $_) } @indices;
}


package GLPlugin::SNMP::CSF;
#our @ISA = qw(GLPlugin::SNMP);
use Digest::MD5 qw(md5_hex);
use strict;

sub create_statefile {
  my $self = shift;
  my %params = @_;
  my $extension = "";
  $extension .= $params{name} ? '_'.$params{name} : '';
  if ($self->opts->community) {
    $extension .= md5_hex($self->opts->community);
  }
  $extension =~ s/\//_/g;
  $extension =~ s/\(/_/g;
  $extension =~ s/\)/_/g;
  $extension =~ s/\*/_/g;
  $extension =~ s/\s/_/g;
  if ($self->opts->snmpwalk && ! $self->opts->hostname) {
    return sprintf "%s/%s_%s%s", $self->statefilesdir(),
        'snmpwalk.file'.md5_hex($self->opts->snmpwalk),
        $self->opts->mode, lc $extension;
  } elsif ($self->opts->snmpwalk && $self->opts->hostname eq "walkhost") {
    return sprintf "%s/%s_%s%s", $self->statefilesdir(),
        'snmpwalk.file'.md5_hex($self->opts->snmpwalk),
        $self->opts->mode, lc $extension;
  } else {
    return sprintf "%s/%s_%s%s", $self->statefilesdir(),
        $self->opts->hostname, $self->opts->mode, lc $extension;
  }
}

package GLPlugin::SNMP::Item;
our @ISA = qw(GLPlugin::SNMP::CSF GLPlugin::Item GLPlugin::SNMP);
use strict;


package GLPlugin::SNMP::TableItem;
our @ISA = qw(GLPlugin::SNMP::CSF GLPlugin::TableItem GLPlugin::SNMP);
use strict;

sub ensure_index {
  my $self = shift;
  my $key = shift;
  $self->{$key} ||= $self->{flat_indices};
}

sub unhex_ip {
  my $self = shift;
  my $value = shift;
  if ($value && $value =~ /^0x(\w{8})/) {
    $value = join(".", unpack "C*", pack "H*", $1);
  } elsif ($value && $value =~ /^0x(\w{2} \w{2} \w{2} \w{2})/) {
    $value = $1;
    $value =~ s/ //g;
    $value = join(".", unpack "C*", pack "H*", $value);
  } elsif ($value && $value =~ /^([A-Z0-9]{2} [A-Z0-9]{2} [A-Z0-9]{2} [A-Z0-9]{2})/i) {
    $value = $1;
    $value =~ s/ //g;
    $value = join(".", unpack "C*", pack "H*", $value);
  } elsif ($value && unpack("H8", $value) =~ /(\w{2})(\w{2})(\w{2})(\w{2})/) {
    $value = join(".", map { hex($_) } ($1, $2, $3, $4));
  }
  return $value;
}

sub unhex_mac {
  my $self = shift;
  my $value = shift;
  if ($value && $value =~ /^0x(\w{12})/) {
    $value = join(".", unpack "C*", pack "H*", $1);
  } elsif ($value && $value =~ /^0x(\w{2}\s*\w{2}\s*\w{2}\s*\w{2}\s*\w{2}\s*\w{2})/) {
    $value = $1;
    $value =~ s/ //g;
    $value = join(":", unpack "C*", pack "H*", $value);
  } elsif ($value && unpack("H12", $value) =~ /(\w{2})(\w{2})(\w{2})(\w{2})(\w{2})(\w{2})/) {
    $value = join(":", map { hex($_) } ($1, $2, $3, $4, $5, $6));
  }
  return $value;
}


package Classes::APC::Powermib::Components::EnvironmentalSubsystem;
our @ISA = qw(Classes::APC::Powermib);
use strict;
use POSIX qw(mktime);

sub new {
  my $class = shift;
  my $self = {};
  bless $self, $class;
  $self->init();
  return $self;
}

sub init {
  my $self = shift;
  $self->get_snmp_objects('PowerNet-MIB', (qw(
      upsBasicIdentModel 
      upsAdvIdentDateOfManufacture upsAdvIdentSerialNumber
      upsAdvTestDiagnosticSchedule
      upsAdvTestDiagnosticsResults upsAdvTestLastDiagnosticsDate)));
  eval {
    die if ! $self->{upsAdvTestLastDiagnosticsDate};
    $self->{upsAdvTestLastDiagnosticsDate} =~ /(\d+)\/(\d+)\/(\d+)/ || die;
    $self->{upsAdvTestLastDiagnosticsDate} = mktime(0, 0, 0, $2, $1 - 1, $3 - 1900);
    $self->{upsAdvTestLastDiagnosticsAge} = (time - $self->{upsAdvTestLastDiagnosticsDate}) / (3600 * 24);
  };
  if ($@) {
    $self->{upsAdvTestLastDiagnosticsDate} = 0;
  }
}

sub check {
  my $self = shift;
  my $info = undef;
  $self->add_info('checking hardware and self-tests');
  if ($self->{upsAdvTestLastDiagnosticsDate}) {
    $self->add_info(sprintf 'selftest result was %s',
        $self->{upsAdvTestDiagnosticsResults});
    if ($self->{upsAdvTestDiagnosticsResults} ne 'ok') {
      $self->add_warning();
    } else {
      $self->add_ok();
    } 
    my $maxage = undef;
    if ($self->{upsAdvTestDiagnosticSchedule} eq 'never') {
      $maxage = 365;
    } elsif ($self->{upsAdvTestDiagnosticSchedule} eq 'biweekly') {
      $maxage = 14;
    } elsif ($self->{upsAdvTestDiagnosticSchedule} eq 'weekly') {
      $maxage = 7;
    } elsif ($self->{upsAdvTestDiagnosticSchedule} eq 'fourWeeks') {
      $maxage = 28;
    } elsif ($self->{upsAdvTestDiagnosticSchedule} eq 'twelveWeeks') {
      $maxage = 84;
    } elsif ($self->{upsAdvTestDiagnosticSchedule} eq 'biweeklySinceLastTest') {
      $maxage = 14;
    } elsif ($self->{upsAdvTestDiagnosticSchedule} eq 'weeklySinceLastTest') {
      $maxage = 7;
    }
    if (! defined $maxage && $self->{upsAdvTestDiagnosticSchedule} ne 'never') {
      $self->set_thresholds(
          metric => 'selftest_age', warning => '30', critical => '60');
    } else {
      $maxage *= 2; # got lots of alerts from my test devices
      $self->set_thresholds(
          metric => 'selftest_age', warning => $maxage, critical => $maxage);
    }
    $self->add_info(sprintf 'last selftest was %d days ago (%s)', $self->{upsAdvTestLastDiagnosticsAge}, scalar localtime $self->{upsAdvTestLastDiagnosticsDate});
    $self->add_message(
        $self->check_thresholds(
            value => $self->{upsAdvTestLastDiagnosticsAge},
            metric => 'selftest_age'));
    $self->add_perfdata(
        label => 'selftest_age',
        value => $self->{upsAdvTestLastDiagnosticsAge},
    );
  } else {
    $self->add_ok("hardware working fine, at least i hope so, because self-tests were never run");
  }
}

sub dump {
  my $self = shift;
  printf "[HARDWARE]\n";
  foreach (qw(upsBasicIdentModel 
      upsAdvIdentDateOfManufacture upsAdvIdentSerialNumber
      upsAdvTestDiagnosticSchedule
      upsAdvTestDiagnosticsResults upsAdvTestLastDiagnosticsDate)) {
    printf "%s: %s\n", $_, $self->{$_} if defined $self->{$_};
    printf "%s: %s\n", $_, scalar localtime $self->{$_} if (defined $self->{$_} && $_ =~ /Date$/);
  }
  printf "info: %s\n", $self->{info};
  printf "\n";
}
package Classes::APC::Powermib::Components::BatterySubsystem;
our @ISA = qw(Classes::APC::Powermib);
use strict;

sub new {
  my $class = shift;
  my $self = {};
  bless $self, $class;
  $self->init();
  return $self;
}

sub init {
  my $self = shift;
  $self->get_snmp_objects('PowerNet-MIB', (qw(
      upsBasicBatteryStatus upsAdvBatteryCapacity 
      upsAdvBatteryReplaceIndicator upsAdvBatteryTemperature 
      upsAdvBatteryRunTimeRemaining 
      upsAdvInputLineVoltage upsAdvInputFrequency 
      upsAdvInputMaxLineVoltage upsAdvInputMinLineVoltage 
      upsAdvOutputVoltage upsAdvOutputFrequency 
      upsBasicOutputStatus upsAdvOutputLoad upsAdvOutputCurrent
      upsHighPrecOutputLoad  
      upsAdvInputLineFailCause)));
  $self->{upsAdvBatteryRunTimeRemaining} = $self->{upsAdvBatteryRunTimeRemaining} / 6000;
  # beobachtet bei Smart-Classes RT 1000 RM XL, da gab's nur
  # upsAdvOutputVoltage und upsAdvOutputFrequency
  $self->{upsAdvOutputLoad} = 
      ! defined $self->{upsAdvOutputLoad} || $self->{upsAdvOutputLoad} eq '' ?
      $self->{upsHighPrecOutputLoad} / 10 : $self->{upsAdvOutputLoad};
}

sub check {
  my $self = shift;
  $self->add_info('checking battery');
  $self->add_info(sprintf 'battery status is %s',
      $self->{upsBasicBatteryStatus});
  if ($self->{upsBasicBatteryStatus} ne 'batteryNormal') {
    $self->add_critical();
  } else {
    $self->add_ok();
  } 
  if ($self->{upsAdvBatteryReplaceIndicator} && $self->{upsAdvBatteryReplaceIndicator} eq 'batteryNeedsReplacing') {
    $self->add_critical('battery needs replacing');
  }
  if ($self->{upsBasicOutputStatus} && # kann auch undef sein (10kv z.b.)
      $self->{upsBasicOutputStatus} ne 'onLine') {
    $self->add_warning(sprintf 'output status is %s',
        $self->{upsBasicOutputStatus});
    $self->add_warning(sprintf 'caused by %s',
        $self->{upsAdvInputLineFailCause});
  }

  $self->set_thresholds(
      metric => 'capacity', warning => '25:', critical => '10:');
  $self->add_info(sprintf 'capacity is %.2f%%', $self->{upsAdvBatteryCapacity});
  $self->add_message(
      $self->check_thresholds(
          value => $self->{upsAdvBatteryCapacity},
          metric => 'capacity'));
  $self->add_perfdata(
      label => 'capacity',
      value => $self->{upsAdvBatteryCapacity},
      uom => '%',
  );

  $self->set_thresholds(
      metric => 'output_load', warning => '75', critical => '85');
  $self->add_info(sprintf 'output load %.2f%%', $self->{upsAdvOutputLoad});
  $self->add_message(
      $self->check_thresholds(
          value => $self->{upsAdvOutputLoad},
          metric => 'output_load'));
  $self->add_perfdata(
      label => 'output_load',
      value => $self->{upsAdvOutputLoad},
      uom => '%',
  );

  $self->set_thresholds(
      metric => 'battery_temperature', warning => '70', critical => '80');
  $self->add_info(sprintf 'temperature is %.2fC', $self->{upsAdvBatteryTemperature});
  $self->add_message(
      $self->check_thresholds(
          value => $self->{upsAdvBatteryTemperature},
          metric => 'battery_temperature'));
  $self->add_perfdata(
      label => 'battery_temperature',
      value => $self->{upsAdvBatteryTemperature},
  );

  $self->set_thresholds(
      metric => 'remaining_time', warning => '10:', critical => '8:');
  $self->add_info(sprintf 'remaining battery run time is %.2fmin', $self->{upsAdvBatteryRunTimeRemaining});
  $self->add_message(
      $self->check_thresholds(
          value => $self->{upsAdvBatteryRunTimeRemaining},
          metric => 'remaining_time'));
  $self->add_perfdata(
      label => 'remaining_time',
      value => $self->{upsAdvBatteryRunTimeRemaining},
  );

  if (defined $self->{upsAdvInputLineVoltage} && $self->{upsAdvInputLineVoltage} < 1) {
    $self->add_critical('input power outage');
    if ($self->{upsAdvInputLineFailCause}) {
      $self->add_critical($self->{upsAdvInputLineFailCause});
    }
  }
  $self->add_perfdata(
      label => 'input_voltage',
      value => $self->{upsAdvInputLineVoltage},
  ) if defined $self->{upsAdvInputLineVoltage};
  $self->add_perfdata(
      label => 'input_frequency',
      value => $self->{upsAdvInputFrequency},
  ) if defined $self->{upsAdvInputFrequency};
  $self->add_perfdata(
      label => 'output_voltage',
      value => $self->{upsAdvOutputVoltage},
  ) if defined $self->{upsAdvOutputVoltage};;
  $self->add_perfdata(
      label => 'output_frequency',
      value => $self->{upsAdvOutputFrequency},
  ) if defined $self->{upsAdvOutputFrequency};
}

sub dump {
  my $self = shift;
  printf "[BATTERY]\n";
  foreach (qw(upsBasicBatteryStatus upsAdvBatteryCapacity 
      upsAdvBatteryReplaceIndicator upsAdvBatteryTemperature 
      upsAdvBatteryRunTimeRemaining 
      upsAdvInputLineVoltage upsAdvInputFrequency 
      upsAdvInputMaxLineVoltage upsAdvInputMinLineVoltage 
      upsAdvOutputVoltage upsAdvOutputFrequency 
      upsBasicOutputStatus upsAdvOutputLoad upsAdvOutputCurrent
      upsAdvInputLineFailCause)) { 
    printf "%s: %s\n", $_, $self->{$_} if defined $self->{$_};
  }
  printf "info: %s\n", $self->{info};
  printf "\n";
}
package Classes::APC::Powermib;
our @ISA = qw(Classes::APC);
use strict;

sub init {
  my $self = shift;
  if ($self->mode =~ /device::battery/) {
    $self->analyze_and_check_battery_subsystem('Classes::APC::Powermib::Components::BatterySubsystem');
  } elsif ($self->mode =~ /device::hardware/) {
    $self->analyze_and_check_environmental_subsystem('Classes::APC::Powermib::Components::EnvironmentalSubsystem');
  } else {
    $self->no_such_mode();
  }
}

package Classes::APC;
our @ISA = qw(Classes::Device);
use strict;
package Classes::Socomec::Netvision::Components::EnvironmentalSubsystem;
our @ISA = qw(Classes::Socomec::Netvision);
use strict;

sub new {
  my $class = shift;
  my $self = {};
  bless $self, $class;
  $self->init();
  return $self;
}

sub init {
  my $self = shift;
  $self->get_snmp_objects("Netvision-v6-MIB", (qw(
      upsIdentModel upsIdentClassesFirmwareVersion upsIdentUpsSerialNumber
      upsAlarmsPresent)));
  $self->get_snmp_tables("Netvision-v6-MIB", [
      ["alarms", "upsAlarmTable", "Classes::Socomec::Netvision::Components::EnvironmentalSubsystem::Alarm"],
  ]);
}

sub check {
  my $self = shift;
  $self->add_info('checking alarms');
  $self->add_info(sprintf 'found %d alarms', $self->{upsAlarmsPresent});
  if ($self->{upsAlarmsPresent}) {
    $self->add_critical();
  } else {
    $self->add_ok();
  } 

}

sub dump {
  my $self = shift;
  printf "[HARDWARE]\n";
  foreach (grep /^ups/, keys %{$self}) {
    printf "%s: %s\n", $_, $self->{$_};
  }
  printf "info: %s\n", $self->{info};
  printf "\n";
  foreach (@{$self->{alarms}}) {
    $_->dump();
  }
}


package Classes::Socomec::Netvision::Components::EnvironmentalSubsystem::Alarm;
our @ISA = qw(GLPlugin::SNMP::TableItem);
use strict;

sub check {
  my $self = shift;
  $self->add_info(sprintf '%s', $self->{upsAlarmDescr});
  $self->add_critical();
}

sub dump {
  my $self = shift;
  printf "[ALARM]\n";
  foreach (grep /^ups/, keys %{$self}) {
    printf "%s: %s\n", $_, $self->{$_};
  }
  printf "info: %s\n", $self->{info};
  printf "\n";
}

package Classes::Socomec::Netvision::Components::BatterySubsystem;
our @ISA = qw(Classes::Socomec::Netvision);
use strict;

sub new {
  my $class = shift;
  my $self = {};
  bless $self, $class;
  $self->init();
  return $self;
}

sub init {
  my $self = shift;
  $self->get_snmp_objects('Netvision-v6-MIB', (qw(
      upsBatteryStatus upsSecondsonBattery upsEstimatedMinutesRemaining
      upsEstimatedChargeRemaining upsBatteryVoltage upsBatteryTemperature
      upsInputFrequency upsOutputFrequency
      upsOutputSource upsTestResultsSummary upsTestResultsDetail
      upsControlStatusControl)));
  $self->{upsSecondsonBattery} ||= 0;
  $self->{upsBatteryVoltage} /= 10;
  $self->{upsInputFrequency} /= 10;
  $self->{upsOutputFrequency} /= 10;
  $self->get_snmp_tables('Netvision-v6-MIB', [
      ['inputs', 'upsInputTable', 'Classes::Socomec::Netvision::Components::BatterySubsystem::Input'],
      ['outputs', 'upsOutputTable', 'Classes::Socomec::Netvision::Components::BatterySubsystem::Output'],
      ['bypasses', 'upsBypassTable', 'Classes::Socomec::Netvision::Components::BatterySubsystem::Bypass'],
  ]);
  foreach ($self->get_snmp_table_objects('Netvision-v6-MIB', 'upsAlarmTable')) {
#printf "%s\n", Data::Dumper::Dumper($_);
##!!!!
  }
}

sub check {
  my $self = shift;
  $self->add_info('checking battery');
  $self->add_info(sprintf 'battery status is %s', $self->{upsBatteryStatus});
  if ($self->{upsBatteryStatus} ne 'batteryNormal') {
    $self->add_critical();
  } else {
    $self->add_ok();
  } 

  $self->set_thresholds(
      metric => 'capacity', warning => '25:', critical => '10:');
  $self->add_info(sprintf 'capacity is %.2f%%', $self->{upsEstimatedChargeRemaining});
  $self->add_message(
      $self->check_thresholds(
          value => $self->{upsEstimatedChargeRemaining},
          metric => 'capacity'));
  $self->add_perfdata(
      label => 'capacity',
      value => $self->{upsEstimatedChargeRemaining},
      uom => '%',
  );

  $self->set_thresholds(
      metric => 'battery_temperature', warning => '35', critical => '38');
  $self->add_info(sprintf 'temperature is %.2fC', $self->{upsBatteryTemperature});
  $self->add_message(
      $self->check_thresholds(
          value => $self->{upsBatteryTemperature},
          metric => 'battery_temperature'));
  $self->add_perfdata(
      label => 'battery_temperature',
      value => $self->{upsBatteryTemperature},
  );

  if ($self->{upsEstimatedMinutesRemaining} == -1) {
    $self->set_thresholds(
        metric => 'remaining_time', warning => '0', critical => '0');
    $self->add_info('battery run time is unknown');
  } else {
    $self->set_thresholds(
        metric => 'remaining_time', warning => '15:', critical => '10:');
    $self->add_info(sprintf 'remaining battery run time is %.2fmin', $self->{upsEstimatedMinutesRemaining});
    $self->add_message(
        $self->check_thresholds(
            value => $self->{upsEstimatedMinutesRemaining},
            metric => 'remaining_time'));
  }
  $self->add_perfdata(
      label => 'remaining_time',
      value => $self->{upsEstimatedMinutesRemaining},
  );

  $self->add_perfdata(
      label => 'input_frequency',
      value => $self->{upsInputFrequency},
  );

  foreach (@{$self->{inputs}}) {
    $_->check();
  }
  $self->add_perfdata(
      label => 'output_frequency',
      value => $self->{upsOutputFrequency},
  );

  foreach (@{$self->{outputs}}) {
    $_->check();
  }

}

sub dump {
  my $self = shift;
  printf "[BATTERY]\n";
  foreach (grep /^ups/, keys %{$self}) {
    printf "%s: %s\n", $_, $self->{$_};
  }
  printf "info: %s\n", $self->{info};
  printf "\n";
  foreach (@{$self->{inputs}}) {
    $_->dump();
  }
  foreach (@{$self->{outputs}}) {
    $_->dump();
  }
  foreach (@{$self->{bypasses}}) {
    $_->dump();
  }
}


package Classes::Socomec::Netvision::Components::BatterySubsystem::Input;
our @ISA = qw(GLPlugin::SNMP::TableItem);
use strict;


sub check {
  my $self = shift;
  $self->{upsInputVoltage} /= 10;
  $self->{upsInputVoltageMin} /= 10;
  $self->{upsInputVoltageMax} /= 10;
  $self->{upsInputCurrent} /= 10;
  $self->add_info(sprintf 'input%d voltage is %dV', $self->{upsInputLineIndex}, $self->{upsInputVoltage});
  if ($self->{upsInputVoltage} < 1) {
    $self->add_critical(sprintf 'input power%s outage', $self->{upsInputLineIndex});
  }
  $self->add_perfdata(
      label => 'input_voltage'.$self->{upsInputLineIndex},
      value => $self->{upsInputVoltage},
  );
}

sub dump {
  my $self = shift;
  printf "[INPUT]\n";
  foreach (grep /^ups/, keys %{$self}) {
    printf "%s: %s\n", $_, $self->{$_};
  }
  printf "info: %s\n", $self->{info};
  printf "\n";
}


package Classes::Socomec::Netvision::Components::BatterySubsystem::Output;
our @ISA = qw(GLPlugin::SNMP::TableItem);
use strict;


sub check {
  my $self = shift;
  $self->{upsOutputVoltage} /= 10;
  $self->{upsOutputCurrent} /= 10;
  $self->set_thresholds(
      metric => 'output_load'.$self->{upsOutputLineIndex}, warning => '75', critical => '85');
  $self->add_info(sprintf 'output load%d %.2f%%', $self->{upsOutputLineIndex}, $self->{upsOutputPercentLoad});
  $self->add_message(
      $self->check_thresholds(
          value => $self->{upsOutputPercentLoad},
          metric => 'output_load'.$self->{upsOutputLineIndex}));
  $self->add_perfdata(
      label => 'output_load'.$self->{upsOutputLineIndex},
      value => $self->{upsOutputPercentLoad},
      uom => '%',
  );

  $self->add_perfdata(
      label => 'output_voltage'.$self->{upsOutputLineIndex},
      value => $self->{upsOutputVoltage},
  );

}

sub dump {
  my $self = shift;
  printf "[OUTPUT]\n";
  foreach (grep /^ups/, keys %{$self}) {
    printf "%s: %s\n", $_, $self->{$_};
  }
  printf "info: %s\n", $self->{info};
  printf "\n";
}


package Classes::Socomec::Netvision::Components::BatterySubsystem::Bypass;
our @ISA = qw(GLPlugin::SNMP::TableItem);
use strict;


sub check {
  my $self = shift;
  $self->{upsBypassVoltage} /= 10;
  $self->add_info(sprintf 'bypass%d voltage is %dV', $self->{upsBypassLineIndex}, $self->{upsBypassVoltage});
}

sub dump {
  my $self = shift;
  printf "[BYPASS]\n";
  foreach (grep /^ups/, keys %{$self}) {
    printf "%s: %s\n", $_, $self->{$_};
  }
  printf "info: %s\n", $self->{info};
  printf "\n";
}


package Classes::Socomec::Netvision;
our @ISA = qw(Classes::Socomec);
use strict;

sub init {
  my $self = shift;
  if ($self->mode =~ /device::hardware::health/) {
    $self->analyze_and_check_environmental_subsystem('Classes::Socomec::Netvision::Components::EnvironmentalSubsystem');
  } elsif ($self->mode =~ /device::battery/) {
    $self->analyze_and_check_battery_subsystem('Classes::Socomec::Netvision::Components::BatterySubsystem');
  } else {
    $self->no_such_mode();
  }
}

package Classes::Socomec;
our @ISA = qw(Classes::Device);
use strict;

sub init {
  my $self = shift;
  if ($self->{productname} =~ /Net Vision/i) {
    bless $self, 'Classes::Socomec::Netvision';
    $self->debug('using Classes::Socomec::Netvision');
  } else {
    $self->no_such_model();
  }
  $self->init();
}

package Classes::UPS::Components::EnvironmentalSubsystem;
our @ISA = qw(Classes::UPS);
use strict;

sub new {
  my $class = shift;
  my $self = {};
  bless $self, $class;
  $self->init();
  return $self;
}

sub init {
  my $self = shift;
  $self->get_snmp_objects("UPS-MIB", qw(upsAlarmsPresent upsTestResultsSummary
      upsTestResultsDetail upsTestStartTime));
  $self->get_snmp_tables("UPS-MIB", [
      ["alarms", "upsAlarmTable", "Classes::UPS::Components::EnvironmentalSubsystem::Alarm"],
  ]);
}

sub check {
  my $self = shift;
  $self->add_info('checking alarms');
  foreach (@{$self->{alarms}}) {
    $_->check();
  }
  if ($self->{upsTestStartTime}) {
    my $result = sprintf "test result from %s was %s", 
        scalar localtime time - $GLPlugin::SNMP::uptime + $self->{upsTestStartTime},
        $self->{upsTestResultsDetail} ? $self->{upsTestResultsDetail} : $self->{upsTestResultsSummary};
    if ($self->{upsTestResultsSummary} eq "doneWarning") {
      $self->add_warning($result);
    } elsif ($self->{upsTestResultsSummary} eq "doneError") {
      $self->add_critical($result);
    }
    my $last_test = $GLPlugin::SNMP::uptime - $self->{upsTestStartTime};
    my $days_ago = (time - $last_test) / (3600 * 24);
    $self->add_info(sprintf 'last selftest was %d days ago (%s)',
        $self->{upsAdvTestLastDiagnosticsAge}, scalar localtime $self->{upsAdvTestLastDiagnosticsDate});
    $self->add_message(
        $self->check_thresholds(
            value => $self->{upsAdvTestLastDiagnosticsAge},
            metric => 'selftest_age'));
    $self->add_perfdata(
        label => 'selftest_age',
        value => $self->{upsAdvTestLastDiagnosticsAge},
    );
  }

  if (! $self->check_messages()) {
    $self->add_ok("hardware working fine. no alarms");
  }
}

sub dump {
  my $self = shift;
  printf "[ALARMS]\n";
  foreach (grep /^ups/, keys %{$self}) {
    printf "%s: %s\n", $_, $self->{$_};
  }
  printf "info: %s\n", $self->{info};
  printf "\n";
  foreach (@{$self->{alarms}}) {
    $_->dump();
  }
}


package Classes::UPS::Components::EnvironmentalSubsystem::Alarm;
our @ISA = qw(GLPlugin::SNMP::TableItem);
use strict;

sub check {
  my $self = shift;
  foreach (qw(upsAlarmBatteryBad upsAlarmOnBattery upsAlarmLowBattery
      upsAlarmDepletedBattery upsAlarmTempBad upsAlarmInputBad
      upsAlarmOutputBad upsAlarmOutputOverload upsAlarmOnBypass
      upsAlarmBypassBad upsAlarmOutputOffAsRequested upsAlarmUpsOffAsRequested
      upsAlarmChargerFailed upsAlarmUpsOutputOff upsAlarmUpsSystemOff
      upsAlarmFanFailure upsAlarmFuseFailure upsAlarmGeneralFault
      upsAlarmDiagnosticTestFailed upsAlarmCommunicationsLost upsAlarmAwaitingPower
      upsAlarmShutdownPending upsAlarmShutdownImminent upsAlarmTestInProgress)) {
    if ($self->{upsAlarmDescr} eq  $GLPlugin::SNMP::mibs_and_oids->{"UPS-MIB"}->{$_}) {
      $self->{upsAlarmDescr} = $_;
    }
  }
  my $age = $GLPlugin::SNMP::uptime - $self->{upsAlarmTime};
  if ($age < 3600) {
    $self->add_critical(sprintf "alarm: %s (%d min ago)",
        $self->{upsAlarmDescr}, $age / 60);
  }
}
package Classes::UPS::Components::BatterySubsystem;
our @ISA = qw(Classes::UPS);
use strict;

sub new {
  my $class = shift;
  my $self = {};
  bless $self, $class;
  $self->init();
  return $self;
}

sub init {
  my $self = shift;
  $self->get_snmp_objects("UPS-MIB", qw(upsBatteryStatus upsSecondsOnBattery 
      upsEstimatedMinutesRemaining upsBatteryVoltage upsBatteryCurrent
      upsBatteryTemperature upsOutputFrequency));
  $self->get_snmp_tables("UPS-MIB", [
      ["inputs", "upsInputTable", "Classes::UPS::Components::BatterySubsystem::Input"],
      ["outputs", "upsOutputTable", "Classes::UPS::Components::BatterySubsystem::Output"],
  ]);
  $self->{upsBatteryVoltage} /= 10;
  $self->{upsBatteryCurrent} /= 10;
  $self->{upsOutputFrequency} /= 10;
}

sub check {
  my $self = shift;
  $self->add_info('checking battery');

  $self->set_thresholds(
      metric => 'battery_temperature', warning => '35', critical => '38');
  $self->add_info(sprintf 'temperature is %.2fC', $self->{upsBatteryTemperature});
  $self->add_message(
      $self->check_thresholds(
          value => $self->{upsBatteryTemperature},
          metric => 'battery_temperature'));
  $self->add_perfdata(
      label => 'battery_temperature',
      value => $self->{upsBatteryTemperature},
  );

  if ($self->{upsBaseBatteryTimeOnBattery}) {
    $self->set_thresholds(
        metric => 'remaining_time', warning => '15:', critical => '10:');
    $self->add_info(sprintf 'remaining battery run time is %.2fmin', $self->{upsEstimatedMinutesRemaining});
  } else {
    $self->set_thresholds(
        metric => 'remaining_time', warning => '0:', critical => '0:');
    $self->add_info('unit is not on battery power');
  }
  $self->add_message(
      $self->check_thresholds(
          value => $self->{upsEstimatedMinutesRemaining},
          metric => 'remaining_time'));
  $self->add_perfdata(
      label => 'remaining_time',
      value => $self->{upsEstimatedMinutesRemaining},
  );

  $self->add_perfdata(
      label => 'output_frequency',
      value => $self->{upsOutputFrequency},
  );

  foreach (@{$self->{inputs}}) {
    $_->check();
  }
  foreach (@{$self->{outputs}}) {
    $_->check();
  }

  if ($self->{upsBatteryStatus} && $self->{upsBatteryStatus} ne "batteryNormal") {
    $self->add_critical("battery has status: ".$self->{upsBatteryStatus});
  }
}

sub dump {
  my $self = shift;
  printf "[BATTERY]\n";
  foreach (grep /^ups/, keys %{$self}) {
    printf "%s: %s\n", $_, $self->{$_};
  }
  printf "info: %s\n", $self->{info};
  printf "\n";
  foreach (@{$self->{inputs}}) {
    $_->dump();
  }
  foreach (@{$self->{outputs}}) {
    $_->dump();
  }
}


package Classes::UPS::Components::BatterySubsystem::Input;
our @ISA = qw(GLPlugin::SNMP::TableItem);
use strict;

sub check {
  my $self = shift;
  $self->{upsInputFrequency} /= 10;
  $self->{upsInputCurrent} /= 10;
  if ($self->{upsInputVoltage} < 1) {
    $self->add_critical(sprintf 'input power%s outage', $self->{flat_indices});
  }
  $self->add_perfdata(
      label => 'input_voltage'.$self->{flat_indices},
      value => $self->{upsInputVoltage},
  );
  $self->add_perfdata(
      label => 'input_frequency'.$self->{flat_indices},
      value => $self->{upsInputFrequency},
  );
  $self->add_perfdata(
      label => 'input_current'.$self->{flat_indices},
      value => $self->{upsInputCurrent},
  );
}

package Classes::UPS::Components::BatterySubsystem::Output;
our @ISA = qw(GLPlugin::SNMP::TableItem);
use strict;

sub check {
  my $self = shift;
  $self->{upsOutputCurrent} /= 10;
  my $metric = 'output_load'.$self->{flat_indices};
  $self->set_thresholds(
      metric => $metric, warning => '75', critical => '85');
  $self->add_info(sprintf 'output load%d %.2f%%', $self->{flat_indices}, $self->{upsOutputPercentLoad});
  $self->add_message(
      $self->check_thresholds(
          value => $self->{upsOutputPercentLoad},
          metric => $metric));
  $self->add_perfdata(
      label => $metric,
      value => $self->{upsOutputPercentLoad},
      uom => '%',
  );
  $self->add_perfdata(
      label => 'output_voltage'.$self->{flat_indices},
      value => $self->{upsOutputVoltage},
  );
  $self->add_perfdata(
      label => 'output_current'.$self->{flat_indices},
      value => $self->{upsOutputCurrent},
  );
}

package Classes::UPS;
our @ISA = qw(Classes::Device);
use strict;

sub init {
  my $self = shift;
  if ($self->mode =~ /device::hardware::health/) {
    $self->analyze_and_check_environmental_subsystem('Classes::UPS::Components::EnvironmentalSubsystem');
  } elsif ($self->mode =~ /device::battery/) {
    $self->analyze_and_check_battery_subsystem('Classes::UPS::Components::BatterySubsystem');
  } else {
    $self->no_such_mode();
  }
}

package Classes::XUPS::Components::EnvironmentalSubsystem;
our @ISA = qw(Classes::XUPS);
use strict;

sub new {
  my $class = shift;
  my $self = {};
  bless $self, $class;
  $self->init();
  return $self;
}

sub init {
  my $self = shift;
  $self->get_snmp_objects("XUPS-MIB", qw(xupsAlarmNumEvents));
  $self->get_snmp_tables("XUPS-MIB", [
      ["alarms", "xupsAlarmTable", "Classes::XUPS::Components::EnvironmentalSubsystem::Alarm"],
  ]);
}

sub check {
  my $self = shift;
  $self->add_info('checking alarms');
  foreach (@{$self->{alarms}}) {
    $_->check();
  }
  if (! $self->check_messages()) {
    $self->add_ok("hardware working fine. no alarms");
  }
}

sub dump {
  my $self = shift;
  printf "[ALARMS]\n";
  foreach (grep /^xups/, keys %{$self}) {
    printf "%s: %s\n", $_, $self->{$_};
  }
  printf "info: %s\n", $self->{info};
  printf "\n";
  foreach (@{$self->{alarms}}) {
    $_->dump();
  }
}


package Classes::XUPS::Components::EnvironmentalSubsystem::Alarm;
our @ISA = qw(GLPlugin::SNMP::TableItem);
use strict;
use constant { OK => 0, WARNING => 1, CRITICAL => 2, UNKNOWN => 3 };

sub check {
  my $self = shift;
  foreach (qw(xupsOnBattery xupsLowBattery xupsUtilityPowerRestored xupsReturnFromLowBattery 
      xupsOutputOverload xupsInternalFailure xupsBatteryDischarged xupsInverterFailure 
      xupsOnBypass xupsBypassNotAvailable xupsOutputOff xupsInputFailure 
      xupsBuildingAlarm xupsShutdownImminent xupsOnInverter)) {
    if ($self->{xupsAlarmDescr} eq  $GLPlugin::SNMP::mibs_and_oids->{"XUPS-MIB"}->{$_}) {
      $self->{xupsAlarmDescr} = $_;
    }
  }
  my $age = $GLPlugin::SNMP::uptime - $self->{xupsAlarmTime};
  # xupsAlarmDescr: xupsUtilityPowerRestored
  # xupsAlarmTime: 723852361
  # CRITICAL - alarm: xupsUtilityPowerRestored (-11941630 min ago)
  if ($age < 3600 && $age >= 0) {
    $self->add_critical(sprintf "alarm: %s (%d min ago)",
        $self->{xupsAlarmDescr}, $age / 60);
  }
}
package Classes::XUPS::Components::BatterySubsystem;
our @ISA = qw(Classes::XUPS);
use strict;

sub new {
  my $class = shift;
  my $self = {};
  bless $self, $class;
  $self->init();
  return $self;
}

sub init {
  my $self = shift;
  $self->get_snmp_objects("XUPS-MIB", qw(xupsBatTimeRemaining xupsBatVoltage xupsBatCurrent xupsBatCapacity xupsInputFrequency xupsOutputFrequency xupsOutputLoad xupsTestBatteryStatus));
  $self->get_snmp_tables("XUPS-MIB", [
      ["inputs", "xupsInputTable", "Classes::XUPS::Components::BatterySubsystem::Input"],
      ["outputs", "xupsOutputTable", "Classes::XUPS::Components::BatterySubsystem::Output"],
  ]);
  $self->{xupsBatTimeRemaining} /= 60;
  $self->{xupsInputFrequency} /= 10;
  $self->{xupsOutputFrequency} /= 10;
}

sub check {
  my $self = shift;
  $self->add_info('checking battery');
  $self->set_thresholds(
      metric => 'capacity', warning => '25:', critical => '10:');
  $self->add_info(sprintf 'capacity is %.2f%%', $self->{xupsBatCapacity});
  $self->add_message(
      $self->check_thresholds(
          value => $self->{xupsBatCapacity},
          metric => 'capacity'));
  $self->add_perfdata(
      label => 'capacity',
      value => $self->{xupsBatCapacity},
      uom => '%',
  );

  $self->set_thresholds(
      metric => 'output_load', warning => '75', critical => '85');
  $self->add_info(sprintf 'output load %.2f%%', $self->{xupsOutputLoad});
  $self->add_message(
      $self->check_thresholds(
          value => $self->{xupsOutputLoad},
          metric => 'output_load'));
  $self->add_perfdata(
      label => 'output_load',
      value => $self->{xupsOutputLoad},
      uom => '%',
  );
  $self->add_perfdata(
      label => 'output_frequency',
      value => $self->{xupsOutputFrequency});
  foreach (@{$self->{outputs}}) {
    $_->check();
  }
  $self->add_perfdata(
      label => 'input_frequency',
      value => $self->{xupsInputFrequency});
  foreach (@{$self->{inputs}}) {
    $_->check();
  }

  $self->set_thresholds(
      metric => 'remaining_time', warning => '15:', critical => '10:');
  $self->add_info(sprintf 'remaining battery run time is %.2fmin', $self->{xupsBatTimeRemaining});
  $self->add_message(
      $self->check_thresholds(
          value => $self->{xupsBatTimeRemaining},
          metric => 'remaining_time'));
  $self->add_perfdata(
      label => 'remaining_time',
      value => $self->{xupsBatTimeRemaining},
  );

  if ($self->{xupsTestBatteryStatus} eq "failed") {
    $self->add_critical("battery has status: failed");
  }
}

sub dump {
  my $self = shift;
  printf "[BATTERY]\n";
  foreach (grep /^xups/, keys %{$self}) {
    printf "%s: %s\n", $_, $self->{$_};
  }
  printf "info: %s\n", $self->{info};
  printf "\n";
}


package Classes::XUPS::Components::BatterySubsystem::Input;
our @ISA = qw(GLPlugin::SNMP::TableItem);
use strict;

sub check {
  my $self = shift;
  if ($self->{xupsInputVoltage} < 1) {
    $self->add_critical(sprintf 'input power%s outage', $self->{flat_indices});
  }
  $self->add_perfdata(
      label => 'input_voltage'.$self->{flat_indices},
      value => $self->{xupsInputVoltage},
  );
  $self->add_perfdata(
      label => 'input_current'.$self->{flat_indices},
      value => $self->{xupsInputCurrent} || 0,
  );
}

package Classes::XUPS::Components::BatterySubsystem::Output;
our @ISA = qw(GLPlugin::SNMP::TableItem);
use strict;

sub check {
  my $self = shift;
  $self->add_perfdata(
      label => 'output_voltage_'.$self->{flat_indices},
      value => $self->{xupsOutputVoltage},
  );
  $self->add_perfdata(
      label => 'output_current'.$self->{flat_indices},
      value => $self->{xupsOutputCurrent},
  );
}
package Classes::XUPS;
our @ISA = qw(Classes::Device);
use strict;

sub init {
  my $self = shift;
  if ($self->mode =~ /device::hardware::health/) {
    $self->analyze_and_check_environmental_subsystem('Classes::XUPS::Components::EnvironmentalSubsystem');
  } elsif ($self->mode =~ /device::battery/) {
    $self->analyze_and_check_battery_subsystem('Classes::XUPS::Components::BatterySubsystem');
  } else {
    $self->no_such_mode();
  }
}

package Classes::XPPC::Components::EnvironmentalSubsystem;
our @ISA = qw(Classes::XPPC);
use strict;
use POSIX qw(mktime);

sub new {
  my $class = shift;
  my $self = {};
  bless $self, $class;
  $self->init();
  return $self;
}

sub init {
  my $self = shift;
  $self->get_snmp_objects('XPPC-MIB', (qw(upsSmartTestDiagnosticSchedule
      upsSmartTestDiagnostics upsSmartTestDiagnosticsResults
      upsSmartTestLastDiagnosticsDate upsSmartTestIndicators    upsThreePhaseBatteryGrp
      upsEnvTemperature upsEnvHumidity upsEnvWater upsEnvSmoke 
      upsEnvSecurity1 upsEnvSecurity2 upsEnvSecurity3 upsEnvSecurity4
      upsEnvSecurity5 upsEnvSecurity6 upsEnvSecurity7
      upsEnvOverTemperature upsEnvUnderTemperature upsEnvOverHumidity upsEnvUnderHumidity)));
  eval {
    die if ! $self->{upsSmartTestLastDiagnosticsDate};
    $self->{upsSmartTestLastDiagnosticsDate} =~ /(\d+)\/(\d+)\/(\d+)/;
    $self->{upsSmartTestLastDiagnosticsDate} = mktime(0, 0, 0, $2, $1 - 1, $3 - 1900);
    $self->{upsSmartTestLastDiagnosticsAge} = (time - $self->{upsSmartTestLastDiagnosticsDate}) / (3600 * 24);
  };
  if ($@) {
    $self->{upsSmartTestLastDiagnosticsDate} = 0;
  }

}

sub check {
  my $self = shift;
  $self->add_info('checking hardware and self-tests');
  if ($self->{upsEnvTemperature}) {
    my $over = $self->{upsEnvOverTemperature} || 30;
    my $under = $self->{upsEnvUnderTemperature} || 10;
    $self->set_thresholds(
        metric => 'temperature', warning => $under.':'.$over, critical => $under.':'.$over);
    $self->add_info(sprintf 'temperature is %.2fC', $self->{upsEnvTemperature});
    $self->add_message(
        $self->check_thresholds(
            value => $self->{upsEnvTemperature},
            metric => 'temperature'));
    $self->add_perfdata(
        label => 'temperature',
        value => $self->{upsEnvTemperature},
    );
  }
  if ($self->{upsEnvHumidity}) {
    my $over = $self->{upsEnvOverHumidity} || 50;
    my $under = $self->{upsEnvUnderHumidity} || 12;
    $self->set_thresholds(
        metric => 'humidity', warning => $under.':'.$over, critical => $under.':'.$over);
    $self->add_info(sprintf 'humidity is %.2f%%', $self->{upsEnvHumidity});
    $self->add_message(
        $self->check_thresholds(
            value => $self->{upsEnvHumidity},
            metric => 'humidity'));
    $self->add_perfdata(
        label => 'humidity',
        value => $self->{upsEnvHumidity},
    );
  }
  if ($self->{upsSmartTestLastDiagnosticsDate}) {
    $self->add_info(sprintf 'selftest result was %s', $self->{upsSmartTestDiagnosticsResults});
    if ($self->{upsSmartTestDiagnosticsResults} eq 'failed') {
      $self->add_warning();
    } else {
      $self->add_ok();
    } 
    my $maxage = undef;
    if ($self->{upsSmartTestDiagnosticSchedule} eq 'never') {
      $maxage = 365;
    } elsif ($self->{upsSmartTestDiagnosticSchedule} eq 'biweekly') {
      $maxage = 14;
    } elsif ($self->{upsSmartTestDiagnosticSchedule} eq 'weekly') {
      $maxage = 7;
    }
    if (! defined $maxage && $self->{upsSmartTestDiagnosticSchedule} ne 'never') {
      $self->set_thresholds(
          metric => 'selftest_age', warning => '30', critical => '60');
    } else {
      $maxage *= 2; # got lots of alerts from my test devices
      $self->set_thresholds(
          metric => 'selftest_age', warning => $maxage, critical => $maxage);
    }
    $self->add_info(sprintf 'last selftest was %d days ago (%s)', $self->{upsSmartTestLastDiagnosticsAge}, scalar localtime $self->{upsSmartTestLastDiagnosticsDate});
    $self->add_message(
        $self->check_thresholds(
            value => $self->{upsSmartTestLastDiagnosticsAge},
            metric => 'selftest_age'));
    $self->add_perfdata(
        label => 'selftest_age',
        value => $self->{upsSmartTestLastDiagnosticsAge},
    );
  } else {
    $self->add_warning("please run diagnostics");
  }
  if (! $self->check_messages()) {
    $self->add_ok("hardware working fine");
  }
}

sub xdump {
  my $self = shift;
  printf "[HARDWARE]\n";
  foreach (qw(upsBasicIdentModel 
      upsAdvIdentDateOfManufacture upsAdvIdentSerialNumber
      upsSmartTestDiagnosticSchedule
      upsAdvTestDiagnosticsResults upsSmartTestLastDiagnosticsDate)) {
    printf "%s: %s\n", $_, $self->{$_} if defined $self->{$_};
    printf "%s: %s\n", $_, scalar localtime $self->{$_} if (defined $self->{$_} && $_ =~ /Date$/);
  }
  printf "info: %s\n", $self->{info};
  printf "\n";
}
package Classes::XPPC::Components::BatterySubsystem;
our @ISA = qw(Classes::XPPC);
use strict;
use constant { OK => 0, WARNING => 1, CRITICAL => 2, UNKNOWN => 3 };

sub new {
  my $class = shift;
  my $self = {};
  bless $self, $class;
  $self->init();
  return $self;
}

sub init {
  my $self = shift;
  $self->get_snmp_objects('XPPC-MIB', (qw(upsBaseBatteryStatus
      upsSmartBatteryCapacity upsSmartBatteryVoltage upsSmartBatteryTemperature
      upsSmartBatteryRunTimeRemaining upsSmartBatteryReplaceIndicator
      upsSmartBatteryCurrent 
      upsSmartInputLineVoltage upsSmartInputFrequency upsSmartInputLineFailCause
      upsBaseOutputStatus upsSmartOutputVoltage upsSmartOutputFrequency
      upsSmartOutputLoad)));
  $self->{upsSmartBatteryTemperature} /= 10;
  $self->{upsSmartBatteryVoltage} *= 10;
  $self->{upsSmartInputLineVoltage} /= 10 if defined $self->{upsSmartInputLineVoltage};
  $self->{upsSmartInputFrequency} /= 10 if defined $self->{upsSmartInputFrequency};
  $self->{upsSmartOutputVoltage} /= 10 if defined $self->{upsSmartOutputVoltage};
  $self->{upsSmartOutputFrequency} /= 10 if defined $self->{upsSmartOutputFrequency};
}

sub check {
  my $self = shift;
  $self->add_info('checking battery');
  $self->add_info(sprintf 'battery status is %s', $self->{upsBaseBatteryStatus});
  if ($self->{upsBaseBatteryStatus} ne 'batteryNormal') {
    $self->add_critical();
  } else {
    $self->add_ok();
  } 
  if ($self->{upsSmartBatteryReplaceIndicator} &&
      $self->{upsSmartBatteryReplaceIndicator} eq 'batteryNeedsReplacing') {
    $self->add_critical('battery needs replacing');
  }
  if ($self->{upsBaseOutputStatus} && # kann auch undef sein (10kv z.b.)
      $self->{upsBaseOutputStatus} ne 'onLine') {
    $self->add_warning(sprintf 'output status is %s',
        $self->{upsBaseOutputStatus});
    $self->add_warning(sprintf 'caused by %s',
        $self->{upsSmartInputLineFailCause});
  }

  $self->set_thresholds(
      metric => 'capacity', warning => '25:', critical => '10:');
  $self->add_info(sprintf 'capacity is %.2f%%', $self->{upsSmartBatteryCapacity});
  $self->add_message(
      $self->check_thresholds(
          value => $self->{upsSmartBatteryCapacity},
          metric => 'capacity'));
  $self->add_perfdata(
      label => 'capacity',
      value => $self->{upsSmartBatteryCapacity},
      uom => '%',
  );

  $self->set_thresholds(
      metric => 'output_load', warning => '75', critical => '85');
  $self->add_info(sprintf 'output load %.2f%%', $self->{upsSmartOutputLoad});
  $self->add_message(
      $self->check_thresholds(
          value => $self->{upsSmartOutputLoad},
          metric => 'output_load'));
  $self->add_perfdata(
      label => 'output_load',
      value => $self->{upsSmartOutputLoad},
      uom => '%',
  );

  $self->set_thresholds(
      metric => 'battery_temperature', warning => '70', critical => '80');
  $self->add_info(sprintf 'temperature is %.2fC', $self->{upsSmartBatteryTemperature});
  $self->add_message(
      $self->check_thresholds(
          value => $self->{upsSmartBatteryTemperature},
          metric => 'battery_temperature'));
  $self->add_perfdata(
      label => 'battery_temperature',
      value => $self->{upsSmartBatteryTemperature},
  );

  $self->set_thresholds(
      metric => 'remaining_time', warning => '15:', critical => '10:');
  $self->add_info(sprintf 'remaining battery run time is %.2fmin', $self->{upsSmartBatteryRunTimeRemaining});
  # $self->{upsSmartBatteryRunTimeRemaining} = 0 probably is normal
  # as long as the battery is not in use
  $self->add_message(
      $self->{upsSmartBatteryRunTimeRemaining} ? $self->check_thresholds(
          value => $self->{upsSmartBatteryRunTimeRemaining},
          metric => 'remaining_time') : OK);
  $self->add_perfdata(
      label => 'remaining_time',
      value => $self->{upsSmartBatteryRunTimeRemaining},
  );

  if (defined $self->{upsSmartInputLineVoltage} && $self->{upsSmartInputLineVoltage} < 1) {
    $self->add_critical(sprintf 'input power outage');
  }
  $self->add_perfdata(
      label => 'input_voltage',
      value => $self->{upsSmartInputLineVoltage},
  ) if defined $self->{upsSmartInputLineVoltage};
  $self->add_perfdata(
      label => 'input_frequency',
      value => $self->{upsSmartInputFrequency},
  ) if defined $self->{upsSmartInputFrequency};
  $self->add_perfdata(
      label => 'output_voltage',
      value => $self->{upsSmartOutputVoltage},
  ) if defined $self->{upsSmartOutputVoltage};
  $self->add_perfdata(
      label => 'output_frequency',
      value => $self->{upsSmartOutputFrequency},
  ) if defined $self->{upsSmartOutputFrequency};
}

sub dump {
  my $self = shift;
  printf "[BATTERY]\n";
  foreach (qw(upsBaseBatteryStatus
      upsSmartBatteryCapacity upsSmartBatteryVoltage upsSmartBatteryTemperature
      upsSmartBatteryRunTimeRemaining upsSmartBatteryReplaceIndicator
      upsSmartBatteryCurrent 
      upsSmartInputLineVoltage upsSmartInputFrequency upsSmartInputLineFailCause
      upsBaseOutputStatus upsSmartOutputVoltage upsSmartOutputFrequency
      upsSmartOutputLoad)) {
    printf "%s: %s\n", $_, $self->{$_} if defined $self->{$_};
  }
  printf "info: %s\n", $self->{info};
  printf "\n";
}
package Classes::XPPC;
our @ISA = qw(Classes::Device);
use strict;

sub init {
  my $self = shift;
  if ($self->mode =~ /device::hardware::health/) {
    $self->analyze_and_check_environmental_subsystem('Classes::XPPC::Components::EnvironmentalSubsystem');
  } elsif ($self->mode =~ /device::battery/) {
    $self->analyze_and_check_battery_subsystem('Classes::XPPC::Components::BatterySubsystem');
  } else {
    $self->no_such_mode();
  }
}

package Classes::V4::Components::EnvironmentalSubsystem;
our @ISA = qw(Classes::V4);
use strict;

sub new {
  my $class = shift;
  my $self = {};
  bless $self, $class;
  $self->init();
  return $self;
}

sub init {
  my $self = shift;
  $self->get_snmp_objects('UPSV4-MIB', (qw(
      dupsEnvTemperature dupsAlarmOverEnvHumidity dupsAlarmEnvRelay1 
      dupsAlarmEnvRelay2 dupsAlarmEnvRelay3 dupsAlarmEnvRelay4 
      dupsEnvHumidity dupsEnvSetTemperatureLimit dupsEnvSetHumidityLimit 
      dupsEnvSetEnvRelay1 dupsEnvSetEnvRelay2 dupsEnvSetEnvRelay3
      dupsEnvSetEnvRelay4 dupsAlarmOverEnvTemperature
      dupsTemperature)));
  $self->{dupsEnvTemperature} ||= $self->{dupsTemperature};
  $self->get_snmp_objects('UPSV4-MIB', (qw(
      dupsAlarmDisconnect dupsAlarmBatteryTestFail
      dupsAlarmFuseFailure dupsAlarmOutputOverload dupsAlarmOutputOverCurrent
      dupsAlarmInverterAbnormal dupsAlarmRectifierAbnormal
      dupsAlarmReserveAbnormal dupsAlarmLoadOnReserve 
      dupsAlarmOverTemperature dupsAlarmOutputBad dupsAlarmPowerFail
      dupsAlarmBypassBad dupsAlarmClassesOff dupsAlarmChargerFail
      dupsAlarmFanFail dupsAlarmEconomicMode dupsAlarmOutputOff
      dupsAlarmSmartShutdown dupsAlarmEmergencyPowerOff
      dupsAlarmBatteryLow dupsAlarmLoadWarning dupsAlarmLoadSeverity
      dupsAlarmLoadOnBypass dupsAlarmClassesFault dupsAlarmBatteryGroundFault
      dupsAlarmTestInProgress)));
}

sub check {
  my $self = shift;
  $self->add_info('checking environment');
  $self->add_info(sprintf 'temperature %dC', $self->{dupsEnvTemperature});
  $self->add_ok();
  if ($self->{dupsEnvHumidity}) {
    $self->add_info(sprintf ', humidity %d%%', $self->{dupsEnvHumidity});
    $self->add_ok();
  }
  my $alarms = 0;
  foreach (qw(dupsAlarmDisconnect dupsAlarmBatteryTestFail
      dupsAlarmFuseFailure dupsAlarmOutputOverload dupsAlarmOutputOverCurrent
      dupsAlarmInverterAbnormal dupsAlarmRectifierAbnormal
      dupsAlarmReserveAbnormal dupsAlarmLoadOnReserve
      dupsAlarmOverTemperature dupsAlarmOutputBad dupsAlarmPowerFail
      dupsAlarmBypassBad dupsAlarmClassesOff dupsAlarmChargerFail
      dupsAlarmFanFail dupsAlarmEconomicMode dupsAlarmOutputOff
      dupsAlarmSmartShutdown dupsAlarmEmergencyPowerOff
      dupsAlarmBatteryLow dupsAlarmLoadWarning dupsAlarmLoadSeverity
      dupsAlarmLoadOnBypass dupsAlarmClassesFault dupsAlarmBatteryGroundFault
      dupsAlarmTestInProgress)) {
    if ($self->{$_} && $self->{$_} eq 'on') {
      $self->add_critical(sprintf 'alarm %s is on', $_);
      $alarms++;
    }
  }
  if ($self->{dupsAlarmOverEnvTemperature} eq 'on') {
    $self->add_critical(sprintf 'temperature too high, %d max',
        $self->{dupsEnvSetTemperatureLimit});
    $alarms++;
  }
  if ($self->{dupsAlarmOverEnvHumidity} eq 'on') {
    $self->add_critical(sprintf 'humidity too high, %d max',
        $self->{dupsEnvSetHumidityLimit});
    $alarms++;
  }
  if (! $alarms) {
    $self->add_ok('no alarms');
  }
  $self->add_perfdata(
      label => 'temperature',
      value => $self->{dupsEnvTemperature},
  );
  if ($self->{dupsEnvHumidity}) {
    $self->add_perfdata(
        label => 'humidity',
        value => $self->{dupsEnvHumidity},
        uom => '%',
    );
  }
}

sub dump {
  my $self = shift;
  printf "[HARDWARE]\n";
  foreach (qw(dupsEnvTemperature dupsAlarmOverEnvHumidity dupsAlarmEnvRelay1 
      dupsAlarmEnvRelay2 dupsAlarmEnvRelay3 dupsAlarmEnvRelay4 
      dupsEnvHumidity dupsEnvSetTemperatureLimit dupsEnvSetHumidityLimit 
      dupsEnvSetEnvRelay1 dupsEnvSetEnvRelay2 dupsEnvSetEnvRelay3
      dupsEnvSetEnvRelay4 dupsAlarmOverEnvTemperature)) {
    printf "%s: %s\n", $_, defined $self->{$_} ? $self->{$_} : 'undefined';
  }
  foreach (qw(dupsAlarmDisconnect dupsAlarmBatteryTestFail dupsAlarmFuseFailure dupsAlarmOutputOverload dupsAlarmOutputOverCurrent dupsAlarmInverterAbnormal dupsAlarmRectifierAbnormal dupsAlarmReserveAbnormal dupsAlarmLoadOnReserve dupsAlarmOverTemperature dupsAlarmOutputBad dupsAlarmPowerFail dupsAlarmBypassBad dupsAlarmClassesOff dupsAlarmChargerFail dupsAlarmFanFail dupsAlarmEconomicMode dupsAlarmOutputOff dupsAlarmSmartShutdown dupsAlarmEmergencyPowerOff dupsAlarmBatteryLow dupsAlarmLoadWarning dupsAlarmLoadSeverity dupsAlarmLoadOnBypass dupsAlarmClassesFault dupsAlarmBatteryGroundFault dupsAlarmTestInProgress)) {
    printf "%s: %s\n", $_, defined $self->{$_} ? $self->{$_} : 'undefined';
  }
  printf "info: %s\n", $self->{info};
  printf "\n";
}
package Classes::V4::Components::BatterySubsystem;
our @ISA = qw(Classes::V4);
use strict;

sub new {
  my $class = shift;
  my $self = {};
  bless $self, $class;
  $self->init();
  return $self;
}

sub init {
  my $self = shift;
  $self->get_snmp_objects('UPSV4-MIB', (qw(
      dupsBatteryCondiction dupsLastReplaceDate dupsNextReplaceDate
      dupsBatteryStatus dupsBatteryCharge dupsSecondsOnBattery
      dupsBatteryEstimatedTime dupsBatteryVoltage
      dupsBatteryCapacity dupsTemperature dupsLowBattTime dupsOutputSource
      dupsInputNumLines
      dupsOutputNumLines dupsOutputFrequency)));
  $self->{dupsLastReplaceDate} ||= 0;
  $self->{dupsNextReplaceDate} ||= 0;
  $self->{dupsBatteryCurrent} ||= 0;
  $self->{dupsLowBattTime} ||= 0;
  $self->{dupsOutputFrequency} /= 10;
  foreach (1..$self->{dupsInputNumLines}) {
    $self->{'dupsInputVoltage'.$_} = $self->get_snmp_object('UPSV4-MIB', 'dupsInputVoltage'.$_, 0) / 10;
    $self->{'dupsInputFrequency'.$_} = $self->get_snmp_object('UPSV4-MIB', 'dupsInputFrequency'.$_, 0) / 10;
  }
  foreach (1..$self->{dupsOutputNumLines}) {
    $self->{'dupsOutputLoad'.$_} = $self->get_snmp_object('UPSV4-MIB', 'dupsOutputLoad'.$_, 0);
    $self->{'dupsOutputVoltage'.$_} = $self->get_snmp_object('UPSV4-MIB', 'dupsOutputVoltage'.$_, 0) / 10;
  }
}

sub check {
  my $self = shift;
  $self->add_info('checking battery');
  $self->add_info(sprintf 'output source is %s, battery condition is %s, %s', 
      $self->{dupsOutputSource}, 
      $self->{dupsBatteryCondiction}, $self->{dupsBatteryCharge});
  if ($self->{dupsBatteryCondiction} eq 'weak') {
    $self->add_warning();
  } elsif ($self->{dupsBatteryCondiction} eq 'replace') {
    $self->add_critical();
  } 
  if ($self->{dupsOutputSource} eq 'battery') {
    if ($self->{dupsBatteryStatus} ne 'ok') {
      $self->add_critical();
    }
  }
  if (! $self->check_messages()) {
    $self->add_ok();
  }
  $self->set_thresholds(
      metric => 'capacity', warning => '25:', critical => '10:');
  $self->add_info(sprintf 'capacity is %.2f%%', $self->{dupsBatteryCapacity});
  $self->add_message(
      $self->check_thresholds(
          value => $self->{dupsBatteryCapacity},
          metric => 'capacity'));
  $self->add_perfdata(
      label => 'capacity',
      value => $self->{dupsBatteryCapacity},
      uom => '%',
  );

  foreach (1..$self->{dupsOutputNumLines}) {
    $self->set_thresholds(
        metric => 'output_load'.$_, warning => '75', critical => '85');
    $self->add_info(sprintf 'output load%d %.2f%%', $_, $self->{'dupsOutputLoad'.$_});
    $self->add_message(
        $self->check_thresholds(
            value => $self->{'dupsOutputLoad'.$_},
            metric => 'output_load'.$_));
    $self->add_perfdata(
        label => 'output_load'.$_,
        value => $self->{'dupsOutputLoad'.$_},
        uom => '%',
    );
  }

  $self->set_thresholds(
      metric => 'battery_temperature', warning => '35', critical => '38');
  $self->add_info(sprintf 'temperature is %.2fC', $self->{dupsTemperature});
  $self->add_message(
      $self->check_thresholds(
          value => $self->{dupsTemperature},
          metric => 'battery_temperature'));
  $self->add_perfdata(
      label => 'battery_temperature',
      value => $self->{dupsTemperature},
  );

  if ($self->{dupsSecondsOnBattery}) {
    $self->set_thresholds(
        metric => 'remaining_time', warning => '15:', critical => '10:');
    $self->add_info(sprintf 'remaining battery run time is %.2fmin', $self->{dupsBatteryEstimatedTime});
  } else {
    # laeuft nicht auf batterie, kann also nicht sagen, wie lang diese haelt.
    # dupsBatteryEstimatedTime liefert in dem fall undef
    $self->{dupsBatteryEstimatedTime} = 0;
    $self->force_thresholds(
        metric => 'remaining_time', warning => '0:', critical => '0:');
    $self->add_info(sprintf 'unit is not on battery power');
  }
  $self->add_message(
      $self->check_thresholds(
          value => $self->{dupsBatteryEstimatedTime},
          metric => 'remaining_time'));
  $self->add_perfdata(
      label => 'remaining_time',
      value => $self->{dupsBatteryEstimatedTime},
  );

  foreach (1..$self->{dupsInputNumLines}) {
    if ($self->{'dupsInputVoltage'.$_} < 1) {
      $self->add_critical(sprintf 'input power%s outage', $_);
    }
    $self->add_perfdata(
        label => 'input_voltage'.$_,
        value => $self->{'dupsInputVoltage'.$_},
    );
    $self->add_perfdata(
        label => 'input_frequency'.$_,
        value => $self->{'dupsInputFrequency'.$_},
    );
  }
  foreach (1..$self->{dupsOutputNumLines}) {
    $self->add_perfdata(
        label => 'output_voltage'.$_,
        value => $self->{'dupsOutputVoltage'.$_},
    );
  }
  $self->add_perfdata(
      label => 'output_frequency',
      value => $self->{dupsOutputFrequency},
  );
}

sub dump {
  my $self = shift;
  printf "[BATTERY]\n";
  foreach (grep /^dups/, keys %{$self}) {
    printf "%s: %s\n", $_, $self->{$_};
  }
  printf "info: %s\n", $self->{info};
  printf "\n";
}
package Classes::V4;
our @ISA = qw(Classes::Device);
use strict;

sub init {
  my $self = shift;
  if ($self->mode =~ /device::hardware::health/) {
    $self->analyze_and_check_environmental_subsystem('Classes::V4::Components::EnvironmentalSubsystem');
  } elsif ($self->mode =~ /device::battery/) {
    $self->analyze_and_check_battery_subsystem('Classes::V4::Components::BatterySubsystem');
  } else {
    $self->no_such_mode();
  }
}

package Classes::MerlinGerin::Components::EnvironmentalSubsystem;
our @ISA = qw(Classes::MerlinGerin);
use strict;

sub new {
  my $class = shift;
  my $self = {};
  bless $self, $class;
  $self->init();
  return $self;
}

sub init {
  my $self = shift;
  $self->get_snmp_objects("MG-SNMP-UPS-MIB", qw(
      upsmgConfigEmergencyTestFail upsmgConfigEmergencyOnByPass
      upsmgConfigEmergencyOverload
  ));
  $self->get_snmp_objects("MG-SNMP-UPS-MIB", qw(
   upsmgTestBatterySchedule
   upsmgTestDiagnostics
   upsmgTestDiagResult
   upsmgTestBatteryCalibration
   upsmgTestLastCalibration
   upsmgTestIndicators
   upsmgTestCommandLine
   upsmgTestCommandReady
   upsmgTestResponseLine
   upsmgTestResponseReady
   upsmgTestBatteryResult 
  ));
  $self->get_snmp_tables("MG-SNMP-UPS-MIB", [
      ["environsensors", "upsmgEnvironSensorTable", "Classes::MerlinGerin::Components::EnvironmentalSubsystem::EnvironSensor"],
  ]);
  $self->get_snmp_tables("MG-SNMP-UPS-MIB", [
      ["environmentsensors", "upsmgEnvironmentSensorTable", "Classes::MerlinGerin::Components::EnvironmentalSubsystem::EnvironmentSensor"],
  ]);
  $self->get_snmp_tables("MG-SNMP-UPS-MIB", [
      ["sensorconfigs", "upsmgConfigEnvironmentTable", "Classes::MerlinGerin::Components::EnvironmentalSubsystem::SensorConfig"],
  ]);
  foreach my $es (@{$self->{environmentsensors}}) {
    foreach my $sc (@{$self->{sensorconfigs}}) {
      if ($sc->{upsmgConfigSensorIndex} == $es->{upsmgEnvironmentIndex}) {
        foreach my $k (keys %{$sc}) {
          $es->{$k} = $sc->{$k};
        }
      }
    }
  }
}

sub check {
  my $self = shift;
  $self->add_info('checking environment');
  if (defined $self->{upsmgTestDiagResult} &&
      $self->{upsmgTestDiagResult} eq "failed") {
    # manche haben kein 1.3.6.1.4.1.705.1.10
    $self->add_critical("automatic test diagnostic failed");
  }
  if (! $self->check_messages()) {
    $self->add_ok("hardware working fine");
  }
}

sub dump {
  my $self = shift;
  printf "[SENSORS]\n";
  foreach (@{$self->{environsensors}}) {
    $_->dump();
  }
  foreach (@{$self->{environmentsensors}}) {
    $_->dump();
  }
  foreach (@{$self->{sensorconfigs}}) {
    $_->dump();
  }
  foreach (qw(upsmgConfigEmergencyTestFail upsmgConfigEmergencyOnByPass
      upsmgConfigEmergencyOverload upsmgTestBatterySchedule
      upsmgTestDiagnostics upsmgTestDiagResult
      upsmgTestBatteryCalibration upsmgTestLastCalibration
      upsmgTestIndicators upsmgTestCommandLine
      upsmgTestCommandReady upsmgTestResponseLine
      upsmgTestResponseReady upsmgTestBatteryResult 
  )){
    printf "%s: %s\n", $_, $self->{$_};
  }
  printf "\n";
}


package Classes::MerlinGerin::Components::EnvironmentalSubsystem::EnvironSensor;
our @ISA = qw(GLPlugin::SNMP::TableItem);
use strict;

sub check {
  my $self = shift;
  return;
}


package Classes::MerlinGerin::Components::EnvironmentalSubsystem::SensorConfig;
our @ISA = qw(GLPlugin::SNMP::TableItem);
use strict;


package Classes::MerlinGerin::Components::EnvironmentalSubsystem::EnvironmentSensor;
our @ISA = qw(GLPlugin::SNMP::TableItem);
use strict;

sub check {
  my $self = shift;
  if ($self->{upsmgEnvironmentComFailure} eq "yes") {
    $self->add_info("no environment module is installed");
  } else {
    foreach my $cat (qw(Temperature Humidity)) {
      if ($cat eq "Humidity" && $self->{'upsmgEnvironment'.$cat} == 0) {
        # kein feuchtesensor verbaut
        next;
      }
      foreach my $thres (qw(High Low)) {
        if ($self->{'upsmgEnvironment'.$cat.$thres} eq "yes") {
          $self->add_critical(sprintf "%s (%.2f) is too %s",
              lc $cat, $self->{'upsmgEnvironment'.$cat}, lc $thres);
        }
      }
      $self->add_perfdata(
          label => lc $cat,
          value => $self->{'upsmgEnvironment'.$cat},
          warning => $self->{'upsmgEnvironment'.$cat.'High'} - $self->{'upsmgConfig'.$cat.'High'},
          critical => $self->{'upsmgEnvironment'.$cat.'High'},
      );
    }
  }
}


package Classes::MerlinGerin::Components::BatterySubsystem;
our @ISA = qw(Classes::MerlinGerin);
use strict;

sub new {
  my $class = shift;
  my $self = {};
  bless $self, $class;
  $self->init();
  return $self;
}

sub init {
  my $self = shift;
  $self->get_snmp_objects('MG-SNMP-UPS-MIB', (qw(
      upsmgBatteryRemainingTime upsmgBatteryLevel
      upsmgBatteryRechargeTime upsmgBatteryRechargeLevel
      upsmgBatteryVoltage upsmgBatteryCurrent
      upsmgBatteryTemperature upsmgBatteryFullRechargeTime
      upsmgBatteryFaultBattery upsmgBatteryNoBattery
      upsmgBatteryReplacement upsmgBatteryUnavailableBattery
      upsmgBatteryNotHighCharge upsmgBatteryLowBattery
      upsmgBatteryChargerFault upsmgBatteryLowCondition
      upsmgBatteryLowRecharge
      upsmgInputPhaseNum upsmgOutputPhaseNum
      upsmgInputLineFailCause)));
  $self->get_snmp_tables('MG-SNMP-UPS-MIB', [
      ['inputs', 'upsmgInputPhaseTable', 'Classes::MerlinGerin::Components::BatterySubsystem::Input'],
      ['outputs', 'upsmgOutputPhaseTable', 'Classes::MerlinGerin::Components::BatterySubsystem::Output'],
  ]);
  @{$self->{inputs}} = grep {
      defined $_->{mginputFrequency} && defined $_->{mginputVoltage}
  } @{$self->{inputs}};
  @{$self->{inputs}} = splice(@{$self->{inputs}}, 0, $self->{upsmgInputPhaseNum});
  @{$self->{outputs}} = splice(@{$self->{outputs}}, 0, $self->{upsmgOutputPhaseNum});
}

sub check {
  my $self = shift;
  $self->add_info('checking battery');
  if ($self->{upsmgBatteryNoBattery} && $self->{upsmgBatteryNoBattery} eq "yes") {
    $self->add_critical("NO battery");
  }
  if ($self->{upsmgBatteryReplacement} && $self->{upsmgBatteryReplacement} eq "yes") {
    $self->add_critical("battery needs to be replaced");
  }
  if ($self->{upsmgBatteryChargerFault} && $self->{upsmgBatteryChargerFault} eq "yes") {
    $self->add_critical("charger fault");
  }
  if ($self->{upsmgBatteryLowRecharge} && $self->{upsmgBatteryLowRecharge} eq "yes") {
    $self->add_critical("low recharge");
  }
  if ($self->{upsmgBatteryLowRecharge} && $self->{upsmgBatteryLowRecharge} eq "yes") {
    $self->add_critical("low recharge");
  }
  if ($self->{upsmgBatteryFaultBattery} && $self->{upsmgBatteryFaultBattery} eq "yes") {
    $self->add_critical("battery fault");
  }
  if (! $self->check_messages()) {
    $self->add_ok("battery ok");
  }
  $self->set_thresholds(
      metric => 'capacity', warning => '25:', critical => '10:');
  $self->add_info(sprintf "capacity is %.2f%%", $self->{upsmgBatteryLevel});
  $self->add_message(
      $self->check_thresholds(
          value => $self->{upsmgBatteryLevel},
          metric => 'capacity'));
  $self->add_perfdata(
      label => 'capacity',
      value => $self->{upsmgBatteryLevel},
      uom => '%',
  );

  if ($self->{upsmgBatteryTemperature}) {
    $self->set_thresholds(
        metric => 'battery_temperature', warning => '35', critical => '38');
    $self->add_info(sprintf 'temperature is %.2fC', $self->{upsmgBatteryTemperature});
    $self->add_message(
        $self->check_thresholds(
            value => $self->{upsmgBatteryTemperature},
            metric => 'battery_temperature'));
    $self->add_perfdata(
        label => 'battery_temperature',
        value => $self->{upsmgBatteryTemperature},
    );
  }

  $self->{upsmgBatteryRemainingTime} /= 60;
  $self->set_thresholds(
      metric => 'remaining_time', warning => '15:', critical => '10:');
  $self->add_info(sprintf 'remaining battery run time is %.2fmin', $self->{upsmgBatteryRemainingTime});
  $self->add_message(
      $self->check_thresholds(
          value => $self->{upsmgBatteryRemainingTime},
          metric => 'remaining_time'));
  $self->add_perfdata(
      label => 'remaining_time',
      value => $self->{upsmgBatteryRemainingTime},
  );

  foreach (@{$self->{inputs}}) {
    $_->check();
  }
  foreach (@{$self->{outputs}}) {
    $_->check();
  }
  if ($self->check_messages()) {
    $self->add_critical(sprintf 'input line fail cause: %s',
        $self->{upsmgInputLineFailCause});
  }
}

sub dump {
  my $self = shift;
  printf "[BATTERY]\n";
  foreach (grep /^upsmg/, keys %{$self}) {
    printf "%s: %s\n", $_, $self->{$_};
  }
  foreach (@{$self->{inputs}}) {
    $_->dump();
  }
  foreach (@{$self->{outputs}}) {
    $_->dump();
  }
  printf "info: %s\n", $self->{info};
  printf "\n";
}

package Classes::MerlinGerin::Components::BatterySubsystem::Input;
our @ISA = qw(GLPlugin::SNMP::TableItem);
use strict;

sub check {
  my $self = shift;
  $self->{mginputVoltage} /= 10;
  $self->{mginputFrequency} /= 10;
  $self->{mginputCurrent} /= 10;
  if ($self->{mginputVoltage} < 1) {
    $self->add_critical(sprintf 'input power%s outage', $self->{flat_indices});
  }
  $self->add_perfdata(
      label => 'input_voltage'.$self->{flat_indices},
      value => $self->{mginputVoltage},
  );
  $self->add_perfdata(
      label => 'input_frequency'.$self->{flat_indices},
      value => $self->{mginputFrequency},
  );
  $self->add_perfdata(
      label => 'input_current'.$self->{flat_indices},
      value => $self->{mginputCurrent},
  );
}

package Classes::MerlinGerin::Components::BatterySubsystem::Output;
our @ISA = qw(GLPlugin::SNMP::TableItem);
use strict;

sub check {
  my $self = shift;
  my $metric = 'output_load'.$self->{flat_indices};
  $self->set_thresholds(
      metric => $metric, warning => '75', critical => '85');
  $self->add_info(sprintf 'output load%d %.2f%%', $self->{flat_indices}, $self->{mgoutputLoadPerPhase});
  $self->add_message(
      $self->check_thresholds(
          value => $self->{mgoutputLoadPerPhase},
          metric => $metric)
  );
  $self->add_perfdata(
      label => $metric,
      value => $self->{mgoutputLoadPerPhase},
      uom => '%',
  );
  $self->{mgoutputVoltage} /= 10;
  $self->{mgoutputFrequency} /= 10;
  $self->{mgoutputCurrent} /= 10;
  $self->add_perfdata(
      label => 'output_voltage'.$self->{flat_indices},
      value => $self->{mgoutputVoltage},
  );
  $self->add_perfdata(
      label => 'output_frequency'.$self->{flat_indices},
      value => $self->{mgoutputFrequency},
  );
  $self->add_perfdata(
      label => 'output_current'.$self->{flat_indices},
      value => $self->{mgoutputCurrent},
  );
}

package Classes::MerlinGerin;
our @ISA = qw(Classes::Device);
use strict;

sub init {
  my $self = shift;
  if ($self->mode =~ /device::hardware::health/) {
    $self->analyze_and_check_environmental_subsystem('Classes::MerlinGerin::Components::EnvironmentalSubsystem');
    # xups alarm-table ist auch noch interessant...
    $self->clear_ok();
    $self->analyze_and_check_environmental_subsystem('Classes::XUPS::Components::EnvironmentalSubsystem');
  } elsif ($self->mode =~ /device::battery/) {
    $self->analyze_and_check_battery_subsystem('Classes::MerlinGerin::Components::BatterySubsystem');
  } else {
    $self->no_such_mode();
  }
}

$GLPlugin::SNMP::discover_ids = {
  '1.3.6.1.4.1.4555.1.1.1' => 'Classes::Socomec::Netvision',
  '1.3.6.1.4.1.318.1.3.17.1' => 'Classes::APC::Powermib',
};

$GLPlugin::SNMP::mib_ids = {
  'UPSV4-MIB' => '1.3.6.1.4.1.2254.2.4',
  'XUPS-MIB' => '1.3.6.1.4.1.534.1',
  'MG-SNMP-UPS-MIB' => '1.3.6.1.4.1.705.1',
  'UPS-MIB' => '1.3.6.1.2.1.33',
  'XPPC-MIB' => '1.3.6.1.4.1.935',
};

$GLPlugin::SNMP::mibs_and_oids = {
  'MIB-II' => {
      sysDescr => '1.3.6.1.2.1.1.1',
      sysObjectID => '1.3.6.1.2.1.1.2',
      sysUpTime => '1.3.6.1.2.1.1.3',
      sysName => '1.3.6.1.2.1.1.5',
  },
  'XPPC-MIB' => {
    ppc => '1.3.6.1.4.1.935',
    products => '1.3.6.1.4.1.935.1',
    hardware => '1.3.6.1.4.1.935.1.1',
    ups => '1.3.6.1.4.1.935.1.1.1',
    upsIdentp => '1.3.6.1.4.1.935.1.1.1.1',
    upsBaseIdent => '1.3.6.1.4.1.935.1.1.1.1.1',
    upsBaseIdentModel => '1.3.6.1.4.1.935.1.1.1.1.1.1',
    upsBaseIdentUpsName => '1.3.6.1.4.1.935.1.1.1.1.1.2',
    upsSmartIdent => '1.3.6.1.4.1.935.1.1.1.1.2',
    upsSmartIdentFirmwareRevision => '1.3.6.1.4.1.935.1.1.1.1.2.1',
    upsSmartIdentDateOfManufacture => '1.3.6.1.4.1.935.1.1.1.1.2.2',
    upsSmartIdentUpsSerialNumber => '1.3.6.1.4.1.935.1.1.1.1.2.3',
    upsSmartIdentAgentFirmwareRevision => '1.3.6.1.4.1.935.1.1.1.1.2.4',
    upsBatteryp => '1.3.6.1.4.1.935.1.1.1.2',
    upsBaseBattery => '1.3.6.1.4.1.935.1.1.1.2.1',
    upsBaseBatteryStatus => '1.3.6.1.4.1.935.1.1.1.2.1.1',
    upsBaseBatteryStatusDefinition => {
      1 => 'unknown',
      3 => 'batteryLow',
      2 => 'batteryNormal',
    },
    upsBaseBatteryTimeOnBattery => '1.3.6.1.4.1.935.1.1.1.2.1.2',
    upsBaseBatteryLastReplaceDate => '1.3.6.1.4.1.935.1.1.1.2.1.3',
    upsSmartBattery => '1.3.6.1.4.1.935.1.1.1.2.2',
    upsSmartBatteryCapacity => '1.3.6.1.4.1.935.1.1.1.2.2.1',
    upsSmartBatteryVoltage => '1.3.6.1.4.1.935.1.1.1.2.2.2',
    upsSmartBatteryTemperature => '1.3.6.1.4.1.935.1.1.1.2.2.3',
    upsSmartBatteryRunTimeRemaining => '1.3.6.1.4.1.935.1.1.1.2.2.4',
    upsSmartBatteryReplaceIndicator => '1.3.6.1.4.1.935.1.1.1.2.2.5',
    upsSmartBatteryReplaceIndicatorDefinition => {
      1 => 'noBatteryNeedsReplacing',
      2 => 'batteryNeedsReplacing',
    },
    upsSmartBatteryFullChargeVoltage => '1.3.6.1.4.1.935.1.1.1.2.2.6',
    upsSmartBatteryCurrent => '1.3.6.1.4.1.935.1.1.1.2.2.7',
    upsInputp => '1.3.6.1.4.1.935.1.1.1.3',
    upsBaseInput => '1.3.6.1.4.1.935.1.1.1.3.1',
    upsBaseInputPhase => '1.3.6.1.4.1.935.1.1.1.3.1.1',
    upsSmartInput => '1.3.6.1.4.1.935.1.1.1.3.2',
    upsSmartInputLineVoltage => '1.3.6.1.4.1.935.1.1.1.3.2.1',
    upsSmartInputMaxLineVoltage => '1.3.6.1.4.1.935.1.1.1.3.2.2',
    upsSmartInputMinLineVoltage => '1.3.6.1.4.1.935.1.1.1.3.2.3',
    upsSmartInputFrequency => '1.3.6.1.4.1.935.1.1.1.3.2.4',
    upsSmartInputLineFailCause => '1.3.6.1.4.1.935.1.1.1.3.2.5',
    upsSmartInputLineFailCauseDefinition => {
      6 => 'deepMomentarySag',
      5 => 'smallMomentarySag',
      2 => 'highLineVoltage',
      8 => 'largeMomentarySpike',
      1 => 'noTransfer',
      4 => 'blackout',
      3 => 'brownout',
      7 => 'smallMomentarySpike',
    },
    upsOutputp => '1.3.6.1.4.1.935.1.1.1.4',
    upsBaseOutput => '1.3.6.1.4.1.935.1.1.1.4.1',
    upsBaseOutputStatus => '1.3.6.1.4.1.935.1.1.1.4.1.1',
    upsBaseOutputStatusDefinition => {
      7 => 'rebooting',
      4 => 'onBoost',
      2 => 'onLine',
      9 => 'onBuck',
      6 => 'onBypass',
      8 => 'standBy',
      1 => 'unknown',
      5 => 'sleeping',
      3 => 'onBattery',
    },
    upsBaseOutputPhase => '1.3.6.1.4.1.935.1.1.1.4.1.2',
    upsSmartOutput => '1.3.6.1.4.1.935.1.1.1.4.2',
    upsSmartOutputVoltage => '1.3.6.1.4.1.935.1.1.1.4.2.1',
    upsSmartOutputFrequency => '1.3.6.1.4.1.935.1.1.1.4.2.2',
    upsSmartOutputLoad => '1.3.6.1.4.1.935.1.1.1.4.2.3',
    upsConfigp => '1.3.6.1.4.1.935.1.1.1.5',
    upsBaseConfig => '1.3.6.1.4.1.935.1.1.1.5.1',
    upsBaseConfigNumDevices => '1.3.6.1.4.1.935.1.1.1.5.1.1',
    upsBaseConfigDeviceTable => '1.3.6.1.4.1.935.1.1.1.5.1.2',
    upsBaseConfigDeviceEntry => '1.3.6.1.4.1.935.1.1.1.5.1.2.1',
    indexOfDevice => '1.3.6.1.4.1.935.1.1.1.5.1.2.1.1',
    nameOfDevice => '1.3.6.1.4.1.935.1.1.1.5.1.2.1.2',
    vaRatingOfDevice => '1.3.6.1.4.1.935.1.1.1.5.1.2.1.3',
    deviceAccept => '1.3.6.1.4.1.935.1.1.1.5.1.2.1.4',
    deviceAcceptDefinition => {
      1 => 'yes',
      2 => 'no',
    },
    upsSmartConfig => '1.3.6.1.4.1.935.1.1.1.5.2',
    upsSmartConfigRatedOutputVoltage => '1.3.6.1.4.1.935.1.1.1.5.2.1',
    upsSmartConfigHighTransferVolt => '1.3.6.1.4.1.935.1.1.1.5.2.2',
    upsSmartConfigLowTransferVolt => '1.3.6.1.4.1.935.1.1.1.5.2.3',
    upsSmartConfigAlarm => '1.3.6.1.4.1.935.1.1.1.5.2.4',
    upsSmartConfigAlarmDefinition => {
      1 => 'timed',
      3 => 'never',
      2 => 'atLowBattery',
    },
    upsSmartConfigAlarmTimer => '1.3.6.1.4.1.935.1.1.1.5.2.5',
    upsSmartConfigMinReturnCapacity => '1.3.6.1.4.1.935.1.1.1.5.2.6',
    upsSmartConfigSensitivity => '1.3.6.1.4.1.935.1.1.1.5.2.7',
    upsSmartConfigSensitivityDefinition => {
      4 => 'high',
      1 => 'auto',
      3 => 'medium',
      2 => 'low',
    },
    upsSmartConfigLowBatteryRunTime => '1.3.6.1.4.1.935.1.1.1.5.2.8',
    upsSmartConfigReturnDelay => '1.3.6.1.4.1.935.1.1.1.5.2.9',
    upsSmartConfigShutoffDelay => '1.3.6.1.4.1.935.1.1.1.5.2.10',
    upsSmartConfigUpsSleepTime => '1.3.6.1.4.1.935.1.1.1.5.2.11',
    upsSmartConfigSetEEPROMDefaults => '1.3.6.1.4.1.935.1.1.1.5.2.12',
    upsSmartConfigSetEEPROMDefaultsDefinition => {
      2 => 'setEEPROMDefaults',
      1 => 'noSetEEPROMDefaults',
    },
    upsControlp => '1.3.6.1.4.1.935.1.1.1.6',
    upsBaseControl => '1.3.6.1.4.1.935.1.1.1.6.1',
    upsBaseControlConserveBattery => '1.3.6.1.4.1.935.1.1.1.6.1.1',
    upsBaseControlConserveBatteryDefinition => {
      2 => 'turnUpsOffToConserveBattery',
      3 => 'turnUpsOffToConserveBatteryDelay',
      1 => 'noTurnOffUps',
    },
    upsSmartControl => '1.3.6.1.4.1.935.1.1.1.6.2',
    upsSmartControlUpsOff => '1.3.6.1.4.1.935.1.1.1.6.2.1',
    upsSmartControlUpsOffDefinition => {
      2 => 'turnUpsOff',
      1 => 'noTurnUpsOff',
    },
    upsSmartControlRebootUps => '1.3.6.1.4.1.935.1.1.1.6.2.2',
    upsSmartControlRebootUpsDefinition => {
      2 => 'rebootUps',
      1 => 'noRebootUps',
    },
    upsSmartControlUpsSleep => '1.3.6.1.4.1.935.1.1.1.6.2.3',
    upsSmartControlUpsSleepDefinition => {
      1 => 'noPutUpsToSleep',
      2 => 'putUpsToSleep',
    },
    upsSmartControlSimulatePowerFail => '1.3.6.1.4.1.935.1.1.1.6.2.4',
    upsSmartControlSimulatePowerFailDefinition => {
      2 => 'simulatePowerFailure',
      1 => 'noSimulatePowerFailure',
    },
    upsSmartControlFlashAndBeep => '1.3.6.1.4.1.935.1.1.1.6.2.5',
    upsSmartControlFlashAndBeepDefinition => {
      2 => 'flashAndBeep',
      1 => 'noFlashAndBeep',
    },
    upsSmartControlTurnOnUpsLoad => '1.3.6.1.4.1.935.1.1.1.6.2.6',
    upsSmartControlTurnOnUpsLoadDefinition => {
      2 => 'upsSmartControlTurnOnUpsLoad',
      1 => 'noUpsSmartControlTurnOnUpsLoad',
    },
    upsTestp => '1.3.6.1.4.1.935.1.1.1.7',
    upsBaseTest => '1.3.6.1.4.1.935.1.1.1.7.1',
    upsSmartTest => '1.3.6.1.4.1.935.1.1.1.7.2',
    upsSmartTestDiagnosticSchedule => '1.3.6.1.4.1.935.1.1.1.7.2.1',
    upsSmartTestDiagnosticScheduleDefinition => {
      3 => 'weekly',
      1 => 'unknown',
      2 => 'biweekly',
      4 => 'never',
    },
    upsSmartTestDiagnostics => '1.3.6.1.4.1.935.1.1.1.7.2.2',
    upsSmartTestDiagnosticsDefinition => {
      2 => 'testDiagnostics',
      1 => 'noTestDiagnostics',
    },
    upsSmartTestDiagnosticsResults => '1.3.6.1.4.1.935.1.1.1.7.2.3',
    upsSmartTestDiagnosticsResultsDefinition => {
      1 => 'ok',
      3 => 'invalidTest',
      4 => 'testInProgress',
      2 => 'failed',
    },
    upsSmartTestLastDiagnosticsDate => '1.3.6.1.4.1.935.1.1.1.7.2.4',
    upsSmartTestIndicators => '1.3.6.1.4.1.935.1.1.1.7.2.5',
    upsSmartTestIndicatorsDefinition => {
      2 => 'testIndicators',
      1 => 'noTestIndicators',
    },
    upsSmartTestRuntimeCalibration => '1.3.6.1.4.1.935.1.1.1.7.2.6',
    upsSmartTestRuntimeCalibrationDefinition => {
      1 => 'noPerformCalibration',
      2 => 'performCalibration',
      3 => 'cancelCurrentCalibration',
    },
    upsSmartTestCalibrationResults => '1.3.6.1.4.1.935.1.1.1.7.2.7',
    upsSmartTestCalibrationResultsDefinition => {
      3 => 'calibrationInProgress',
      1 => 'ok',
      2 => 'invalidTest',
    },
    upsSmartTestCalibrationDate => '1.3.6.1.4.1.935.1.1.1.7.2.8',
    upsThreePhase => '1.3.6.1.4.1.935.1.1.1.8',
    upsThreePhaseBatteryGrp => '1.3.6.1.4.1.935.1.1.1.8.1',
    upsThreePhaseBatteryVoltage => '1.3.6.1.4.1.935.1.1.1.8.1.1',
    upsThreePhaseBatteryCapacityPercentage => '1.3.6.1.4.1.935.1.1.1.8.1.2',
    upsThreePhaseBatteryTimeRemain => '1.3.6.1.4.1.935.1.1.1.8.1.3',
    upsThreePhaseBatteryCurrent => '1.3.6.1.4.1.935.1.1.1.8.1.4',
    upsThreePhaseBatteryTemperature => '1.3.6.1.4.1.935.1.1.1.8.1.5',
    upsThreePhaseInputGrp => '1.3.6.1.4.1.935.1.1.1.8.2',
    upsThreePhaseInputFrequency => '1.3.6.1.4.1.935.1.1.1.8.2.1',
    upsThreePhaseInputVoltageR => '1.3.6.1.4.1.935.1.1.1.8.2.2',
    upsThreePhaseInputVoltageS => '1.3.6.1.4.1.935.1.1.1.8.2.3',
    upsThreePhaseInputVoltageT => '1.3.6.1.4.1.935.1.1.1.8.2.4',
    upsThreePhaseOutputGrp => '1.3.6.1.4.1.935.1.1.1.8.3',
    upsThreePhaseOutputFrequency => '1.3.6.1.4.1.935.1.1.1.8.3.1',
    upsThreePhaseOutputVoltageR => '1.3.6.1.4.1.935.1.1.1.8.3.2',
    upsThreePhaseOutputVoltageS => '1.3.6.1.4.1.935.1.1.1.8.3.3',
    upsThreePhaseOutputVoltageT => '1.3.6.1.4.1.935.1.1.1.8.3.4',
    upsThreePhaseOutputLoadPercentageR => '1.3.6.1.4.1.935.1.1.1.8.3.5',
    upsThreePhaseOutputLoadPercentageS => '1.3.6.1.4.1.935.1.1.1.8.3.6',
    upsThreePhaseOutputLoadPercentageT => '1.3.6.1.4.1.935.1.1.1.8.3.7',
    upsThreePhaseBypassGrp => '1.3.6.1.4.1.935.1.1.1.8.4',
    upsThreePhaseBypassSourceFrequency => '1.3.6.1.4.1.935.1.1.1.8.4.1',
    upsThreePhaseBypssSourceVoltageR => '1.3.6.1.4.1.935.1.1.1.8.4.2',
    upsThreePhaseBypssSourceVoltageS => '1.3.6.1.4.1.935.1.1.1.8.4.3',
    upsThreePhaseBypssSourceVoltageT => '1.3.6.1.4.1.935.1.1.1.8.4.4',
    upsThreePhaseDCandRectifierStatusGrp => '1.3.6.1.4.1.935.1.1.1.8.5',
    upsThreePhaseDCandRectifierStatusRecRotError => '1.3.6.1.4.1.935.1.1.1.8.5.1',
    upsThreePhaseDCandRectifierStatusRecRotErrorDefinition => {
      14 => 'yes',
      16 => 'no',
    },
    upsThreePhaseDCandRectifierStatusLowBatteryShutdown => '1.3.6.1.4.1.935.1.1.1.8.5.2',
    upsThreePhaseDCandRectifierStatusLowBatteryShutdownDefinition => {
      14 => 'yes',
      16 => 'no',
    },
    upsThreePhaseDCandRectifierStatusLowBattery => '1.3.6.1.4.1.935.1.1.1.8.5.3',
    upsThreePhaseDCandRectifierStatusLowBatteryDefinition => {
      14 => 'yes',
      16 => 'no',
    },
    upsThreePhaseDCandRectifierStatusInAndOut => '1.3.6.1.4.1.935.1.1.1.8.5.4',
    upsThreePhaseDCandRectifierStatusInAndOutDefinition => {
      3 => 'threeInThreeOut',
      2 => 'threeInOneOut',
    },
    upsThreePhaseDCandRectifierStatusBatteryStatus => '1.3.6.1.4.1.935.1.1.1.8.5.5',
    upsThreePhaseDCandRectifierStatusBatteryStatusDefinition => {
      5 => 'acnormal',
      4 => 'backup',
    },
    upsThreePhaseDCandRectifierStatusChargeStatus => '1.3.6.1.4.1.935.1.1.1.8.5.6',
    upsThreePhaseDCandRectifierStatusChargeStatusDefinition => {
      7 => 'float',
      6 => 'boost',
      16 => 'no',
    },
    upsThreePhaseDCandRectifierStatusRecOperating => '1.3.6.1.4.1.935.1.1.1.8.5.7',
    upsThreePhaseDCandRectifierStatusRecOperatingDefinition => {
      14 => 'yes',
      16 => 'no',
    },
    upsThreePhaseUPSStatusGrp => '1.3.6.1.4.1.935.1.1.1.8.6',
    upsThreePhaseUPSStatusBypassFreqFail => '1.3.6.1.4.1.935.1.1.1.8.6.1',
    upsThreePhaseUPSStatusBypassFreqFailDefinition => {
      14 => 'yes',
      16 => 'no',
    },
    upsThreePhaseUPSStatusManualBypassBreaker => '1.3.6.1.4.1.935.1.1.1.8.6.2',
    upsThreePhaseUPSStatusManualBypassBreakerDefinition => {
      9 => 'open',
      8 => 'close',
    },
    upsThreePhaseUPSStatusACStatus => '1.3.6.1.4.1.935.1.1.1.8.6.3',
    upsThreePhaseUPSStatusACStatusDefinition => {
      10 => 'normal',
      11 => 'abnormal',
    },
    upsThreePhaseUPSStaticSwitchMode => '1.3.6.1.4.1.935.1.1.1.8.6.4',
    upsThreePhaseUPSStaticSwitchModeDefinition => {
      13 => 'bypassmode',
      12 => 'invermode',
    },
    upsThreePhaseUPSStatusInverterOperating => '1.3.6.1.4.1.935.1.1.1.8.6.5',
    upsThreePhaseUPSStatusInverterOperatingDefinition => {
      14 => 'yes',
      16 => 'no',
    },
    upsThreePhaseFaultStatusGrp => '1.3.6.1.4.1.935.1.1.1.8.7',
    upsThreePhaseFaultStatusEmergencyStop => '1.3.6.1.4.1.935.1.1.1.8.7.1',
    upsThreePhaseFaultStatusEmergencyStopDefinition => {
      14 => 'yes',
      16 => 'no',
    },
    upsThreePhaseFaultStatusHighDCShutdown => '1.3.6.1.4.1.935.1.1.1.8.7.2',
    upsThreePhaseFaultStatusHighDCShutdownDefinition => {
      14 => 'yes',
      16 => 'no',
    },
    upsThreePhaseFaultStatusBypassBreaker => '1.3.6.1.4.1.935.1.1.1.8.7.3',
    upsThreePhaseFaultStatusBypassBreakerDefinition => {
      14 => 'yes',
      16 => 'no',
    },
    upsThreePhaseFaultStatusOverLoad => '1.3.6.1.4.1.935.1.1.1.8.7.4',
    upsThreePhaseFaultStatusOverLoadDefinition => {
      14 => 'yes',
      16 => 'no',
    },
    upsThreePhaseFaultStatusInverterOutputFail => '1.3.6.1.4.1.935.1.1.1.8.7.5',
    upsThreePhaseFaultStatusInverterOutputFailDefinition => {
      14 => 'yes',
      16 => 'no',
    },
    upsThreePhaseFaultStatusOverTemperature => '1.3.6.1.4.1.935.1.1.1.8.7.6',
    upsThreePhaseFaultStatusOverTemperatureDefinition => {
      14 => 'yes',
      16 => 'no',
    },
    upsThreePhaseFaultStatusShortCircuit => '1.3.6.1.4.1.935.1.1.1.8.7.7',
    upsThreePhaseFaultStatusShortCircuitDefinition => {
      14 => 'yes',
      16 => 'no',
    },
    upsThreePhaseRatingGrp => '1.3.6.1.4.1.935.1.1.1.8.8',
    upsThreePhaseRatingRectifierVoltage => '1.3.6.1.4.1.935.1.1.1.8.8.1',
    upsThreePhaseRatingRectifierFrequency => '1.3.6.1.4.1.935.1.1.1.8.8.2',
    upsThreePhaseRatingBypassVoltage => '1.3.6.1.4.1.935.1.1.1.8.8.3',
    upsThreePhaseRatingBypassFrequency => '1.3.6.1.4.1.935.1.1.1.8.8.4',
    upsThreePhaseRatingOutputVoltage => '1.3.6.1.4.1.935.1.1.1.8.8.5',
    upsThreePhaseRatingOutputFrequency => '1.3.6.1.4.1.935.1.1.1.8.8.6',
    upsThreePhaseRatingBatteryVoltage => '1.3.6.1.4.1.935.1.1.1.8.8.7',
    upsThreePhaseRatingPower => '1.3.6.1.4.1.935.1.1.1.8.8.8',
    upsEnvironment => '1.3.6.1.4.1.935.1.1.1.9',
    upsEnvStatus => '1.3.6.1.4.1.935.1.1.1.9.1',
    upsEnvTemperature => '1.3.6.1.4.1.935.1.1.1.9.1.1',
    upsEnvHumidity => '1.3.6.1.4.1.935.1.1.1.9.1.2',
    upsEnvWater => '1.3.6.1.4.1.935.1.1.1.9.1.3',
    upsEnvWaterDefinition => {
      1 => 'normal',
      2 => 'abnormal',
    },
    upsEnvSmoke => '1.3.6.1.4.1.935.1.1.1.9.1.4',
    upsEnvSmokeDefinition => {
      1 => 'normal',
      2 => 'abnormal',
    },
    upsEnvSecurity1 => '1.3.6.1.4.1.935.1.1.1.9.1.5',
    upsEnvSecurity1Definition => {
      1 => 'normal',
      2 => 'abnormal',
    },
    upsEnvSecurity2 => '1.3.6.1.4.1.935.1.1.1.9.1.6',
    upsEnvSecurity2Definition => {
      1 => 'normal',
      2 => 'abnormal',
    },
    upsEnvSecurity3 => '1.3.6.1.4.1.935.1.1.1.9.1.7',
    upsEnvSecurity3Definition => {
      1 => 'normal',
      2 => 'abnormal',
    },
    upsEnvSecurity4 => '1.3.6.1.4.1.935.1.1.1.9.1.8',
    upsEnvSecurity4Definition => {
      1 => 'normal',
      2 => 'abnormal',
    },
    upsEnvSecurity5 => '1.3.6.1.4.1.935.1.1.1.9.1.9',
    upsEnvSecurity5Definition => {
      1 => 'normal',
      2 => 'abnormal',
    },
    upsEnvSecurity6 => '1.3.6.1.4.1.935.1.1.1.9.1.10',
    upsEnvSecurity6Definition => {
      1 => 'normal',
      2 => 'abnormal',
    },
    upsEnvSecurity7 => '1.3.6.1.4.1.935.1.1.1.9.1.11',
    upsEnvSecurity7Definition => {
      1 => 'normal',
      2 => 'abnormal',
    },
    upsEnvSetting => '1.3.6.1.4.1.935.1.1.1.9.2',
    upsEnvOverTemperature => '1.3.6.1.4.1.935.1.1.1.9.2.1',
    upsEnvUnderTemperature => '1.3.6.1.4.1.935.1.1.1.9.2.2',
    upsEnvOverHumidity => '1.3.6.1.4.1.935.1.1.1.9.2.3',
    upsEnvUnderHumidity => '1.3.6.1.4.1.935.1.1.1.9.2.4',
    ppcmgmt => '1.3.6.1.4.1.935.2',
    mconfig => '1.3.6.1.4.1.935.2.1',
    mconfigTrapsReceiversNum => '1.3.6.1.4.1.935.2.1.1',
    mconfigTrapsReceiversTable => '1.3.6.1.4.1.935.2.1.2',
    mconfigTrapsReceiversEntry => '1.3.6.1.4.1.935.2.1.2.1',
    trapsIndex => '1.3.6.1.4.1.935.2.1.2.1.1',
    trapsReceiverAddr => '1.3.6.1.4.1.935.2.1.2.1.2',
    receiverCommunityString => '1.3.6.1.4.1.935.2.1.2.1.3',
    severityLevel => '1.3.6.1.4.1.935.2.1.2.1.4',
    severityLevelDefinition => {
      3 => 'severe',
      2 => 'warning',
      1 => 'information',
    },
    receiverAccept => '1.3.6.1.4.1.935.2.1.2.1.5',
    receiverAcceptDefinition => {
      1 => 'yes',
      2 => 'no',
    },
  },
  'UPS-MIB' => {
    upsObjects => '1.3.6.1.2.1.33.1',
    upsIdent => '1.3.6.1.2.1.33.1.1',
    upsIdent => '1.3.6.1.2.1.33.1.1',
    upsIdentManufacturer => '1.3.6.1.2.1.33.1.1.1.0',
    upsIdentModel => '1.3.6.1.2.1.33.1.1.2.0',
    upsIdentUPSSoftwareVersion => '1.3.6.1.2.1.33.1.1.3.0',
    upsIdentAgentSoftwareVersion => '1.3.6.1.2.1.33.1.1.4.0',
    upsIdentName => '1.3.6.1.2.1.33.1.1.5.0',
    upsIdentAttachedDevices => '1.3.6.1.2.1.33.1.1.6.0',
    upsBattery => '1.3.6.1.2.1.33.1.2',
    upsBatteryStatus => '1.3.6.1.2.1.33.1.2.1.0',
    upsBatteryStatusDefinition => {
      1 => 'unknown',
      2 => 'batteryNormal',
      3 => 'batteryLow',
      4 => 'batteryDepleted',
    },
    upsSecondsOnBattery => '1.3.6.1.2.1.33.1.2.2.0',
    upsEstimatedMinutesRemaining => '1.3.6.1.2.1.33.1.2.3.0',
    upsEstimatedChargeRemaining => '1.3.6.1.2.1.33.1.2.4.0',
    upsBatteryVoltage => '1.3.6.1.2.1.33.1.2.5.0',
    upsBatteryCurrent => '1.3.6.1.2.1.33.1.2.6.0',
    upsBatteryTemperature => '1.3.6.1.2.1.33.1.2.7.0',
    upsInput => '1.3.6.1.2.1.33.1.3',
    upsInputLineBads => '1.3.6.1.2.1.33.1.3.1.0',
    upsInputNumLines => '1.3.6.1.2.1.33.1.3.2.0',
    upsInputTable => '1.3.6.1.2.1.33.1.3.3',
    upsInputEntry => '1.3.6.1.2.1.33.1.3.3.1',
    upsInputLineIndex => '1.3.6.1.2.1.33.1.3.3.1.1',
    upsInputFrequency => '1.3.6.1.2.1.33.1.3.3.1.2',
    upsInputVoltage => '1.3.6.1.2.1.33.1.3.3.1.3',
    upsInputCurrent => '1.3.6.1.2.1.33.1.3.3.1.4',
    upsInputTruePower => '1.3.6.1.2.1.33.1.3.3.1.5',
    upsOutput => '1.3.6.1.2.1.33.1.4',
    upsOutputSource => '1.3.6.1.2.1.33.1.4.1.0',
    upsOutputSourceDefinition => {
      1 => 'other',
      2 => 'none',
      3 => 'normal',
      4 => 'bypess',
      5 => 'battery',
      6 => 'booster',
      7 => 'reducer',
    },
    upsOutputFrequency => '1.3.6.1.2.1.33.1.4.2.0',
    upsOutputNumLines => '1.3.6.1.2.1.33.1.4.3.0',
    upsOutputTable => '1.3.6.1.2.1.33.1.4.4',
    upsOutputEntry => '1.3.6.1.2.1.33.1.4.4.1',
    upsOutputLineIndex => '1.3.6.1.2.1.33.1.4.4.1.1',
    upsOutputVoltage => '1.3.6.1.2.1.33.1.4.4.1.2',
    upsOutputCurrent => '1.3.6.1.2.1.33.1.4.4.1.3',
    upsOutputPower => '1.3.6.1.2.1.33.1.4.4.1.4',
    upsOutputPercentLoad => '1.3.6.1.2.1.33.1.4.4.1.5',
    upsBypass => '1.3.6.1.2.1.33.1.5',
    upsBypass => '1.3.6.1.2.1.33.1.5',
    upsBypassFrequency => '1.3.6.1.2.1.33.1.5.1.0',
    upsBypassNumLines => '1.3.6.1.2.1.33.1.5.2.0',
    upsBypassTable => '1.3.6.1.2.1.33.1.5.3',
    upsBypassEntry => '1.3.6.1.2.1.33.1.5.3.1',
    upsBypassLineIndex => '1.3.6.1.2.1.33.1.5.3.1.1',
    upsBypassVoltage => '1.3.6.1.2.1.33.1.5.3.1.2',
    upsBypassCurrent => '1.3.6.1.2.1.33.1.5.3.1.3',
    upsBypassPower => '1.3.6.1.2.1.33.1.5.3.1.4',
    upsAlarm => '1.3.6.1.2.1.33.1.6',
    upsAlarm => '1.3.6.1.2.1.33.1.6',
    upsAlarmsPresent => '1.3.6.1.2.1.33.1.6.1.0',
    upsAlarmTable => '1.3.6.1.2.1.33.1.6.2',
    upsAlarmEntry => '1.3.6.1.2.1.33.1.6.2.1',
    upsAlarmId => '1.3.6.1.2.1.33.1.6.2.1.1',
    upsAlarmDescr => '1.3.6.1.2.1.33.1.6.2.1.2',
    upsAlarmTime => '1.3.6.1.2.1.33.1.6.2.1.3',
    upsWellKnownAlarms => '1.3.6.1.2.1.33.1.6.3',
    upsAlarmBatteryBad => '1.3.6.1.2.1.33.1.6.3.1',
    upsAlarmOnBattery => '1.3.6.1.2.1.33.1.6.3.2',
    upsAlarmLowBattery => '1.3.6.1.2.1.33.1.6.3.3',
    upsAlarmDepletedBattery => '1.3.6.1.2.1.33.1.6.3.4',
    upsAlarmTempBad => '1.3.6.1.2.1.33.1.6.3.5',
    upsAlarmInputBad => '1.3.6.1.2.1.33.1.6.3.6',
    upsAlarmOutputBad => '1.3.6.1.2.1.33.1.6.3.7',
    upsAlarmOutputOverload => '1.3.6.1.2.1.33.1.6.3.8',
    upsAlarmOnBypass => '1.3.6.1.2.1.33.1.6.3.9',
    upsAlarmBypassBad => '1.3.6.1.2.1.33.1.6.3.10',
    upsAlarmOutputOffAsRequested => '1.3.6.1.2.1.33.1.6.3.11',
    upsAlarmUpsOffAsRequested => '1.3.6.1.2.1.33.1.6.3.12',
    upsAlarmChargerFailed => '1.3.6.1.2.1.33.1.6.3.13',
    upsAlarmUpsOutputOff => '1.3.6.1.2.1.33.1.6.3.14',
    upsAlarmUpsSystemOff => '1.3.6.1.2.1.33.1.6.3.15',
    upsAlarmFanFailure => '1.3.6.1.2.1.33.1.6.3.16',
    upsAlarmFuseFailure => '1.3.6.1.2.1.33.1.6.3.17',
    upsAlarmGeneralFault => '1.3.6.1.2.1.33.1.6.3.18',
    upsAlarmDiagnosticTestFailed => '1.3.6.1.2.1.33.1.6.3.19',
    upsAlarmCommunicationsLost => '1.3.6.1.2.1.33.1.6.3.20',
    upsAlarmAwaitingPower => '1.3.6.1.2.1.33.1.6.3.21',
    upsAlarmShutdownPending => '1.3.6.1.2.1.33.1.6.3.22',
    upsAlarmShutdownImminent => '1.3.6.1.2.1.33.1.6.3.23',
    upsAlarmTestInProgress => '1.3.6.1.2.1.33.1.6.3.24',
    upsTest => '1.3.6.1.2.1.33.1.7',
    upsTest => '1.3.6.1.2.1.33.1.7',
    upsTestId => '1.3.6.1.2.1.33.1.7.1.0',
    upsTestSpinLock => '1.3.6.1.2.1.33.1.7.2.0',
    upsTestResultsSummary => '1.3.6.1.2.1.33.1.7.3.0',
    upsTestResultsSummaryDefinition => {
        1 => 'donePass',
        2 => 'doneWarning',
        3 => 'doneError',
        4 => 'aborted',
        5 => 'inProgress',
        6 => 'noTestsInitiated',
    },
    upsTestResultsDetail => '1.3.6.1.2.1.33.1.7.4.0',
    upsTestStartTime => '1.3.6.1.2.1.33.1.7.5.0',
    upsTestElapsedTime => '1.3.6.1.2.1.33.1.7.6.0',
    upsWellKnownTests => '1.3.6.1.2.1.33.1.7.7',
    upsTestNoTestsInitiated => '1.3.6.1.2.1.33.1.7.7.1',
    upsTestAbortTestInProgress => '1.3.6.1.2.1.33.1.7.7.2',
    upsTestGeneralSystemsTest => '1.3.6.1.2.1.33.1.7.7.3',
    upsTestQuickBatteryTest => '1.3.6.1.2.1.33.1.7.7.4',
    upsTestDeepBatteryCalibration => '1.3.6.1.2.1.33.1.7.7.5',
    upsControl => '1.3.6.1.2.1.33.1.8',
    upsControl => '1.3.6.1.2.1.33.1.8',
    upsShutdownType => '1.3.6.1.2.1.33.1.8.1.0',
    upsShutdownTypeDefinition => {
      1 => 'output',
      2 => 'system',
    },
    upsShutdownAfterDelay => '1.3.6.1.2.1.33.1.8.2.0',
    upsStartupAfterDelay => '1.3.6.1.2.1.33.1.8.3.0',
    upsRebootWithDuration => '1.3.6.1.2.1.33.1.8.4.0',
    upsAutoRestart => '1.3.6.1.2.1.33.1.8.5.0',
    upsAutoRestartDefinition => {
      1 => 'on',
      2 => 'off',
    },
    upsConfig => '1.3.6.1.2.1.33.1.9',
    upsConfig => '1.3.6.1.2.1.33.1.9',
    upsConfigInputVoltage => '1.3.6.1.2.1.33.1.9.1.0',
    upsConfigInputFreq => '1.3.6.1.2.1.33.1.9.2.0',
    upsConfigOutputVoltage => '1.3.6.1.2.1.33.1.9.3.0',
    upsConfigOutputFreq => '1.3.6.1.2.1.33.1.9.4.0',
    upsConfigOutputVA => '1.3.6.1.2.1.33.1.9.5.0',
    upsConfigOutputPower => '1.3.6.1.2.1.33.1.9.6.0',
    upsConfigLowBattTime => '1.3.6.1.2.1.33.1.9.7.0',
    upsConfigAudibleStatus => '1.3.6.1.2.1.33.1.9.8.0',
    upsConfigLowVoltageTransferPoint => '1.3.6.1.2.1.33.1.9.9.0',
    upsConfigHighVoltageTransferPoint => '1.3.6.1.2.1.33.1.9.10.0',
  },
  'UPSV4-MIB' => {
      delta => '1.3.6.1.4.1.2254',
      ups => '1.3.6.1.4.1.2254.2',
      upsv4 => '1.3.6.1.4.1.2254.2.4',
    dupsIdent => '1.3.6.1.4.1.2254.2.4.1',
    dupsIdentManufacturer => '1.3.6.1.4.1.2254.2.4.1.1',
    dupsRatingInputVoltage => '1.3.6.1.4.1.2254.2.4.1.10',
    dupsRatingInputFrequency => '1.3.6.1.4.1.2254.2.4.1.11',
    dupsRatingBatteryVoltage => '1.3.6.1.4.1.2254.2.4.1.12',
    dupsLowTransferVoltUpBound => '1.3.6.1.4.1.2254.2.4.1.13',
    dupsLowTransferVoltLowBound => '1.3.6.1.4.1.2254.2.4.1.14',
    dupsHighTransferVoltUpBound => '1.3.6.1.4.1.2254.2.4.1.15',
    dupsHighTransferVoltLowBound => '1.3.6.1.4.1.2254.2.4.1.16',
    dupsLowBattTime => '1.3.6.1.4.1.2254.2.4.1.17',
    dupsOutletRelays => '1.3.6.1.4.1.2254.2.4.1.18',
    dupsType => '1.3.6.1.4.1.2254.2.4.1.19',
    dupsTypeDefinition => {
      1 => 'on-line',
      2 => 'off-line',
      3 => 'line-interactive',
      4 => '3phase',
      5 => 'splite-phase',
    },
    dupsIdentModel => '1.3.6.1.4.1.2254.2.4.1.2',
    dupsIdentUPSSoftwareVersion => '1.3.6.1.4.1.2254.2.4.1.3',
    dupsIdentAgentSoftwareVersion => '1.3.6.1.4.1.2254.2.4.1.4',
    dupsIdentName => '1.3.6.1.4.1.2254.2.4.1.5',
    dupsAttachedDevices => '1.3.6.1.4.1.2254.2.4.1.6',
    dupsRatingOutputVA => '1.3.6.1.4.1.2254.2.4.1.7',
    dupsRatingOutputVoltage => '1.3.6.1.4.1.2254.2.4.1.8',
    dupsRatingOutputFrequency => '1.3.6.1.4.1.2254.2.4.1.9',
    dupsEnvironment => '1.3.6.1.4.1.2254.2.4.10',
    dupsEnvTemperature => '1.3.6.1.4.1.2254.2.4.10.1',
    dupsAlarmOverEnvHumidity => '1.3.6.1.4.1.2254.2.4.10.10',
    dupsAlarmOverEnvHumidityDefinition => 'DELTAUPS-MIB::dupsAlarm',
    dupsAlarmEnvRelay1 => '1.3.6.1.4.1.2254.2.4.10.11',
    dupsAlarmEnvRelay1Definition => 'DELTAUPS-MIB::dupsAlarm',
    dupsAlarmEnvRelay2 => '1.3.6.1.4.1.2254.2.4.10.12',
    dupsAlarmEnvRelay2Definition => 'DELTAUPS-MIB::dupsAlarm',
    dupsAlarmEnvRelay3 => '1.3.6.1.4.1.2254.2.4.10.13',
    dupsAlarmEnvRelay3Definition => 'DELTAUPS-MIB::dupsAlarm',
    dupsAlarmEnvRelay4 => '1.3.6.1.4.1.2254.2.4.10.14',
    dupsAlarmEnvRelay4Definition => 'DELTAUPS-MIB::dupsAlarm',
    dupsEnvHumidity => '1.3.6.1.4.1.2254.2.4.10.2',
    dupsEnvSetTemperatureLimit => '1.3.6.1.4.1.2254.2.4.10.3',
    dupsEnvSetHumidityLimit => '1.3.6.1.4.1.2254.2.4.10.4',
    dupsEnvSetEnvRelay1 => '1.3.6.1.4.1.2254.2.4.10.5',
    dupsEnvSetEnvRelay2 => '1.3.6.1.4.1.2254.2.4.10.6',
    dupsEnvSetEnvRelay3 => '1.3.6.1.4.1.2254.2.4.10.7',
    dupsEnvSetEnvRelay4 => '1.3.6.1.4.1.2254.2.4.10.8',
    dupsAlarmOverEnvTemperature => '1.3.6.1.4.1.2254.2.4.10.9',
    dupsAlarmOverEnvTemperatureDefinition => 'DELTAUPS-MIB::dupsAlarm',
    dupsControl => '1.3.6.1.4.1.2254.2.4.2',
    dupsShutdownType => '1.3.6.1.4.1.2254.2.4.2.1',
    dupsAutoReboot => '1.3.6.1.4.1.2254.2.4.2.2',
    dupsShutdownAction => '1.3.6.1.4.1.2254.2.4.2.3',
    dupsShutdownRestart => '1.3.6.1.4.1.2254.2.4.2.4',
    dupsSetOutletRelay => '1.3.6.1.4.1.2254.2.4.2.5',
    dupsRelayOffDelay => '1.3.6.1.4.1.2254.2.4.2.6',
    dupsRelayOnDelay => '1.3.6.1.4.1.2254.2.4.2.7',
    dupsConfig => '1.3.6.1.4.1.2254.2.4.3',
    dupsConfigBuzzerAlarm => '1.3.6.1.4.1.2254.2.4.3.1',
    dupsConfigBuzzerState => '1.3.6.1.4.1.2254.2.4.3.2',
    dupsConfigSensitivity => '1.3.6.1.4.1.2254.2.4.3.3',
    dupsConfigLowVoltageTransferPoint => '1.3.6.1.4.1.2254.2.4.3.4',
    dupsConfigHighVoltageTransferPoint => '1.3.6.1.4.1.2254.2.4.3.5',
    dupsConfigShutdownOSDelay => '1.3.6.1.4.1.2254.2.4.3.6',
    dupsConfigUPSBootDelay => '1.3.6.1.4.1.2254.2.4.3.7',
    dupsConfigExternalBatteryPack => '1.3.6.1.4.1.2254.2.4.3.8',
    dupsInput => '1.3.6.1.4.1.2254.2.4.4',
    dupsInputNumLines => '1.3.6.1.4.1.2254.2.4.4.1',
    dupsInputCurrent3 => '1.3.6.1.4.1.2254.2.4.4.10',
    dupsInputFrequency1 => '1.3.6.1.4.1.2254.2.4.4.2',
    dupsInputVoltage1 => '1.3.6.1.4.1.2254.2.4.4.3',
    dupsInputCurrent1 => '1.3.6.1.4.1.2254.2.4.4.4',
    dupsInputFrequency2 => '1.3.6.1.4.1.2254.2.4.4.5',
    dupsInputVoltage2 => '1.3.6.1.4.1.2254.2.4.4.6',
    dupsInputCurrent2 => '1.3.6.1.4.1.2254.2.4.4.7',
    dupsInputFrequency3 => '1.3.6.1.4.1.2254.2.4.4.8',
    dupsInputVoltage3 => '1.3.6.1.4.1.2254.2.4.4.9',
    dupsOutput => '1.3.6.1.4.1.2254.2.4.5',
    dupsOutputSource => '1.3.6.1.4.1.2254.2.4.5.1',
    dupsOutputSourceDefinition => {
      0 => 'normal',
      1 => 'battery',
      2 => 'bypass',
      3 => 'reducing',
      4 => 'boosting',
      5 => 'manualBypass',
      6 => 'other',
      7 => 'none',
    },
    dupsOutputPower2 => '1.3.6.1.4.1.2254.2.4.5.10',
    dupsOutputLoad2 => '1.3.6.1.4.1.2254.2.4.5.11',
    dupsOutputVoltage3 => '1.3.6.1.4.1.2254.2.4.5.12',
    dupsOutputCurrent3 => '1.3.6.1.4.1.2254.2.4.5.13',
    dupsOutputPower3 => '1.3.6.1.4.1.2254.2.4.5.14',
    dupsOutputLoad3 => '1.3.6.1.4.1.2254.2.4.5.15',
    dupsOutputFrequency => '1.3.6.1.4.1.2254.2.4.5.2',
    dupsOutputNumLines => '1.3.6.1.4.1.2254.2.4.5.3',
    dupsOutputVoltage1 => '1.3.6.1.4.1.2254.2.4.5.4',
    dupsOutputCurrent1 => '1.3.6.1.4.1.2254.2.4.5.5',
    dupsOutputPower1 => '1.3.6.1.4.1.2254.2.4.5.6',
    dupsOutputLoad1 => '1.3.6.1.4.1.2254.2.4.5.7',
    dupsOutputVoltage2 => '1.3.6.1.4.1.2254.2.4.5.8',
    dupsOutputCurrent2 => '1.3.6.1.4.1.2254.2.4.5.9',
    dupsBypass => '1.3.6.1.4.1.2254.2.4.6',
    dupsBypassFrequency => '1.3.6.1.4.1.2254.2.4.6.1',
    dupsBypassCurrent3 => '1.3.6.1.4.1.2254.2.4.6.10',
    dupsBypassPower3 => '1.3.6.1.4.1.2254.2.4.6.11',
    dupsBypassNumLines => '1.3.6.1.4.1.2254.2.4.6.2',
    dupsBypassVoltage1 => '1.3.6.1.4.1.2254.2.4.6.3',
    dupsBypassCurrent1 => '1.3.6.1.4.1.2254.2.4.6.4',
    dupsBypassPower1 => '1.3.6.1.4.1.2254.2.4.6.5',
    dupsBypassVoltage2 => '1.3.6.1.4.1.2254.2.4.6.6',
    dupsBypassCurrent2 => '1.3.6.1.4.1.2254.2.4.6.7',
    dupsBypassPower2 => '1.3.6.1.4.1.2254.2.4.6.8',
    dupsBypassVoltage3 => '1.3.6.1.4.1.2254.2.4.6.9',
    dupsBattery => '1.3.6.1.4.1.2254.2.4.7',
    dupsBatteryCondiction => '1.3.6.1.4.1.2254.2.4.7.1',
    dupsBatteryCondictionDefinition => {
      0 => 'good',
      1 => 'weak',
      2 => 'replace',
    },
    dupsLastReplaceDate => '1.3.6.1.4.1.2254.2.4.7.10',
    dupsNextReplaceDate => '1.3.6.1.4.1.2254.2.4.7.11',
    dupsBatteryStatus => '1.3.6.1.4.1.2254.2.4.7.2',
    dupsBatteryStatusDefinition => {
      0 => 'ok',
      1 => 'low',
      2 => 'depleted',
    },
    dupsBatteryCharge => '1.3.6.1.4.1.2254.2.4.7.3',
    dupsBatteryChargeDefinition => {
      0 => 'floating',
      1 => 'charging',
      2 => 'resting',
      3 => 'discharging',
    },
    dupsSecondsOnBattery => '1.3.6.1.4.1.2254.2.4.7.4',
    dupsBatteryEstimatedTime => '1.3.6.1.4.1.2254.2.4.7.5',
    dupsBatteryVoltage => '1.3.6.1.4.1.2254.2.4.7.6',
    dupsBatteryCurrent => '1.3.6.1.4.1.2254.2.4.7.7',
    dupsBatteryCapacity => '1.3.6.1.4.1.2254.2.4.7.8',
    dupsTemperature => '1.3.6.1.4.1.2254.2.4.7.9',
    dupsTest => '1.3.6.1.4.1.2254.2.4.8',
    dupsTestType => '1.3.6.1.4.1.2254.2.4.8.1',
    dupsTestTypeDefinition => {
      0 => 'abort',
      1 => 'generalTest',
      2 => 'batteryTest',
      3 => 'testFor10sec',
      4 => 'testUntilBattlow',
    },
    dupsTestResultsSummary => '1.3.6.1.4.1.2254.2.4.8.2',
    dupsTestResultsSummaryDefinition => {
      0 => 'noTestsInitiated',
      1 => 'donePass',
      2 => 'inProgress',
      3 => 'generalTestFail',
      4 => 'batteryTestFail',
      5 => 'deepBatteryTestFail',
    },
    dupsTestResultsDetail => '1.3.6.1.4.1.2254.2.4.8.3',

    dupsAlarm => '1.3.6.1.4.1.2254.2.4.9',
    dupsAlarmDisconnect => '1.3.6.1.4.1.2254.2.4.9.1',
    dupsAlarmBatteryTestFail => '1.3.6.1.4.1.2254.2.4.9.10',
    dupsAlarmFuseFailure => '1.3.6.1.4.1.2254.2.4.9.11',
    dupsAlarmOutputOverload => '1.3.6.1.4.1.2254.2.4.9.12',
    dupsAlarmOutputOverCurrent => '1.3.6.1.4.1.2254.2.4.9.13',
    dupsAlarmInverterAbnormal => '1.3.6.1.4.1.2254.2.4.9.14',
    dupsAlarmRectifierAbnormal => '1.3.6.1.4.1.2254.2.4.9.15',
    dupsAlarmReserveAbnormal => '1.3.6.1.4.1.2254.2.4.9.16',
    dupsAlarmLoadOnReserve => '1.3.6.1.4.1.2254.2.4.9.17',
    dupsAlarmOverTemperature => '1.3.6.1.4.1.2254.2.4.9.18',
    dupsAlarmOutputBad => '1.3.6.1.4.1.2254.2.4.9.19',
    dupsAlarmPowerFail => '1.3.6.1.4.1.2254.2.4.9.2',
    dupsAlarmBypassBad => '1.3.6.1.4.1.2254.2.4.9.20',
    dupsAlarmUPSOff => '1.3.6.1.4.1.2254.2.4.9.21',
    dupsAlarmChargerFail => '1.3.6.1.4.1.2254.2.4.9.22',
    dupsAlarmFanFail => '1.3.6.1.4.1.2254.2.4.9.23',
    dupsAlarmEconomicMode => '1.3.6.1.4.1.2254.2.4.9.24',
    dupsAlarmOutputOff => '1.3.6.1.4.1.2254.2.4.9.25',
    dupsAlarmSmartShutdown => '1.3.6.1.4.1.2254.2.4.9.26',
    dupsAlarmEmergencyPowerOff => '1.3.6.1.4.1.2254.2.4.9.27',
    dupsAlarmBatteryLow => '1.3.6.1.4.1.2254.2.4.9.3',
    dupsAlarmLoadWarning => '1.3.6.1.4.1.2254.2.4.9.4',
    dupsAlarmLoadSeverity => '1.3.6.1.4.1.2254.2.4.9.5',
    dupsAlarmLoadOnBypass => '1.3.6.1.4.1.2254.2.4.9.6',
    dupsAlarmUPSFault => '1.3.6.1.4.1.2254.2.4.9.7',
    dupsAlarmBatteryGroundFault => '1.3.6.1.4.1.2254.2.4.9.8',
    dupsAlarmTestInProgress => '1.3.6.1.4.1.2254.2.4.9.9',
    dupsAlarmDisconnectDefinition => 'DELTAUPS-MIB::dupsAlarm',
    dupsAlarmBatteryTestFailDefinition => 'DELTAUPS-MIB::dupsAlarm',
    dupsAlarmFuseFailureDefinition => 'DELTAUPS-MIB::dupsAlarm',
    dupsAlarmOutputOverloadDefinition => 'DELTAUPS-MIB::dupsAlarm',
    dupsAlarmOutputOverCurrentDefinition => 'DELTAUPS-MIB::dupsAlarm',
    dupsAlarmInverterAbnormalDefinition => 'DELTAUPS-MIB::dupsAlarm',
    dupsAlarmRectifierAbnormalDefinition => 'DELTAUPS-MIB::dupsAlarm',
    dupsAlarmReserveAbnormalDefinition => 'DELTAUPS-MIB::dupsAlarm',
    dupsAlarmLoadOnReserveDefinition => 'DELTAUPS-MIB::dupsAlarm',
    dupsAlarmOverTemperatureDefinition => 'DELTAUPS-MIB::dupsAlarm',
    dupsAlarmOutputBadDefinition => 'DELTAUPS-MIB::dupsAlarm',
    dupsAlarmPowerFailDefinition => 'DELTAUPS-MIB::dupsAlarm',
    dupsAlarmBypassBadDefinition => 'DELTAUPS-MIB::dupsAlarm',
    dupsAlarmUPSOffDefinition => 'DELTAUPS-MIB::dupsAlarm',
    dupsAlarmChargerFailDefinition => 'DELTAUPS-MIB::dupsAlarm',
    dupsAlarmFanFailDefinition => 'DELTAUPS-MIB::dupsAlarm',
    dupsAlarmEconomicModeDefinition => 'DELTAUPS-MIB::dupsAlarm',
    dupsAlarmOutputOffDefinition => 'DELTAUPS-MIB::dupsAlarm',
    dupsAlarmSmartShutdownDefinition => 'DELTAUPS-MIB::dupsAlarm',
    dupsAlarmEmergencyPowerOffDefinition => 'DELTAUPS-MIB::dupsAlarm',
    dupsAlarmBatteryLowDefinition => 'DELTAUPS-MIB::dupsAlarm',
    dupsAlarmLoadWarningDefinition => 'DELTAUPS-MIB::dupsAlarm',
    dupsAlarmLoadSeverityDefinition => 'DELTAUPS-MIB::dupsAlarm',
    dupsAlarmLoadOnBypassDefinition => 'DELTAUPS-MIB::dupsAlarm',
    dupsAlarmUPSFaultDefinition => 'DELTAUPS-MIB::dupsAlarm',
    dupsAlarmBatteryGroundFaultDefinition => 'DELTAUPS-MIB::dupsAlarm',
    dupsAlarmTestInProgressDefinition => 'DELTAUPS-MIB::dupsAlarm',
  },
  'PowerNet-MIB' => {
    apc => '1.3.6.1.4.1.318',
    products => '1.3.6.1.4.1.318.1',
    apcmgmt => '1.3.6.1.4.1.318.2',
    hardware => '1.3.6.1.4.1.318.1.1',
    software => '1.3.6.1.4.1.318.1.2',
    system => '1.3.6.1.2.1.1',
    experimental => '1.3.6.1.3',
    mconfig => '1.3.6.1.4.1.318.2.1',
    mcontrol => '1.3.6.1.4.1.318.2.2',
    mtrapargs => '1.3.6.1.4.1.318.2.3',
    mfiletransfer => '1.3.6.1.4.1.318.2.4',
    mconfigClock => '1.3.6.1.4.1.318.2.1.6',
    mfiletransferStatus => '1.3.6.1.4.1.318.2.4.1',
    mfiletransferConfig => '1.3.6.1.4.1.318.2.4.2',
    mfiletransferControl => '1.3.6.1.4.1.318.2.4.3',
    mfiletransferConfigSettings => '1.3.6.1.4.1.318.2.4.2.1',
    mfiletransferConfigTFTP => '1.3.6.1.4.1.318.2.4.2.2',
    mfiletransferConfigFTP => '1.3.6.1.4.1.318.2.4.2.3',
    ups => '1.3.6.1.4.1.318.1.1.1',
    measureUps => '1.3.6.1.4.1.318.1.1.2',
    miniSNMPadapter => '1.3.6.1.4.1.318.1.1.3',
    masterswitch => '1.3.6.1.4.1.318.1.1.4',
    masterswitchVM => '1.3.6.1.4.1.318.1.1.5',
    masterswitchMSP => '1.3.6.1.4.1.318.1.1.6',
    dcDM3 => '1.3.6.1.4.1.318.1.1.7',
    automaticTransferSwitch => '1.3.6.1.4.1.318.1.1.8',
    dc2 => '1.3.6.1.4.1.318.1.1.9',
    environmentalMonitor => '1.3.6.1.4.1.318.1.1.10',
    netlock => '1.3.6.1.4.1.318.1.1.11',
    rPDU => '1.3.6.1.4.1.318.1.1.12',
    airConditioners => '1.3.6.1.4.1.318.1.1.13',
    rARU => '1.3.6.1.4.1.318.1.1.14',
    xPDU => '1.3.6.1.4.1.318.1.1.15',
    battMan => '1.3.6.1.4.1.318.1.1.16',
    xATS => '1.3.6.1.4.1.318.1.1.17',
    generator => '1.3.6.1.4.1.318.1.1.18',
    consolePortServer => '1.3.6.1.4.1.318.1.1.19',
    accessControl => '1.3.6.1.4.1.318.1.1.20',
    apcLocalDisplay => '1.3.6.1.4.1.318.1.1.21',
    isxModularDistribution => '1.3.6.1.4.1.318.1.1.22',
    isxModularPdu => '1.3.6.1.4.1.318.1.1.23',
    universalInputOutput => '1.3.6.1.4.1.318.1.1.25',
    rPDU2 => '1.3.6.1.4.1.318.1.1.26',
    powerNetSubAgent => '1.3.6.1.4.1.318.1.2.1',
    powerNetSoftwareSystem => '1.3.6.1.4.1.318.1.2.1.1',
    powerNetSoftwareConfig => '1.3.6.1.4.1.318.1.2.1.2',
    backUPS => '1.3.6.1.2.1.1.1',
    smartUPS => '1.3.6.1.2.1.1.2',
    matrixUPS => '1.3.6.1.2.1.1.3',
    masterSwitch => '1.3.6.1.2.1.1.4',
    symmetraUPS => '1.3.6.1.2.1.1.5',
    dp100E => '1.3.6.1.2.1.1.6',
    dp300E => '1.3.6.1.2.1.1.7',
    monitors => '1.3.6.1.2.1.1.8',
    redundantSwitch => '1.3.6.1.2.1.1.9',
    dcPower => '1.3.6.1.2.1.1.10',
    automaticXferSwitch => '1.3.6.1.2.1.1.11',
    netLock => '1.3.6.1.2.1.1.12',
    symmetra3PhaseUPS => '1.3.6.1.2.1.1.13',
    networkAir => '1.3.6.1.2.1.1.14',
    infraStruXurePDU => '1.3.6.1.2.1.1.15',
    ais5000UPS => '1.3.6.1.2.1.1.16',
    smartUPS3Phase => '1.3.6.1.2.1.1.17',
    battManager => '1.3.6.1.2.1.1.18',
    infraStruXureATS => '1.3.6.1.2.1.1.19',
    conPortServ => '1.3.6.1.2.1.1.20',
    gutor => '1.3.6.1.2.1.1.21',
    accControl => '1.3.6.1.2.1.1.22',
    symmetraPX => '1.3.6.1.2.1.1.23',
    isxModDistribution => '1.3.6.1.2.1.1.24',
    isxServers => '1.3.6.1.2.1.1.25',
    smartUPS2 => '1.3.6.1.2.1.1.27',
    galaxy => '1.3.6.1.2.1.1.28',
    battManIdent => '1.3.6.1.4.1.318.1.1.16.1',
    battManSystemCalib => '1.3.6.1.4.1.318.1.1.16.2',
    battManUnitCalib => '1.3.6.1.4.1.318.1.1.16.3',
    battManStringCalib => '1.3.6.1.4.1.318.1.1.16.4',
    battManBatteryCalib => '1.3.6.1.4.1.318.1.1.16.5',
    battManConfig => '1.3.6.1.4.1.318.1.1.16.6',
    battManAlarm => '1.3.6.1.4.1.318.1.1.16.7',
    battManSystemStatus => '1.3.6.1.4.1.318.1.1.16.8',
    battManStringStatus => '1.3.6.1.4.1.318.1.1.16.9',
    battManBatteryStatus => '1.3.6.1.4.1.318.1.1.16.10',
    battManInputContactStatus => '1.3.6.1.4.1.318.1.1.16.11',
    battManControl => '1.3.6.1.4.1.318.1.1.16.12',
    battManTestResults => '1.3.6.1.4.1.318.1.1.16.13',
    battManUnitStatus => '1.3.6.1.4.1.318.1.1.16.14',
    xPDUIdent => '1.3.6.1.4.1.318.1.1.15.1',
    xPDUDevice => '1.3.6.1.4.1.318.1.1.15.2',
    xPDUACMonitoringPoint => '1.3.6.1.4.1.318.1.1.15.3',
    xPDUCircuitBreakers => '1.3.6.1.4.1.318.1.1.15.4',
    xPDUInputContacts => '1.3.6.1.4.1.318.1.1.15.5',
    xPDUOutputRelays => '1.3.6.1.4.1.318.1.1.15.6',
    xPDUMiscGroup => '1.3.6.1.4.1.318.1.1.15.7',
    xPDUMainInput => '1.3.6.1.4.1.318.1.1.15.3.1',
    xPDUBypassInput => '1.3.6.1.4.1.318.1.1.15.3.2',
    xPDUUPSInput => '1.3.6.1.4.1.318.1.1.15.3.3',
    xPDUSystemOutput => '1.3.6.1.4.1.318.1.1.15.3.4',
    xPDUGroundMonitorPoint => '1.3.6.1.4.1.318.1.1.15.3.5',
    xPDUSystemBreakers => '1.3.6.1.4.1.318.1.1.15.4.1',
    xPDUBranchBreakers => '1.3.6.1.4.1.318.1.1.15.4.2',
    xATSIdent => '1.3.6.1.4.1.318.1.1.17.1',
    xATSDevice => '1.3.6.1.4.1.318.1.1.17.2',
    xATSSwitch => '1.3.6.1.4.1.318.1.1.17.3',
    xATSACMonitoringPoint => '1.3.6.1.4.1.318.1.1.17.4',
    xATSTesting => '1.3.6.1.4.1.318.1.1.17.5',
    xATSInputContacts => '1.3.6.1.4.1.318.1.1.17.6',
    xATSOutputRelays => '1.3.6.1.4.1.318.1.1.17.7',
    xATSMisc => '1.3.6.1.4.1.318.1.1.17.8',
    xATSSwitchStatus => '1.3.6.1.4.1.318.1.1.17.3.1',
    xATSSwitchSettings => '1.3.6.1.4.1.318.1.1.17.3.2',
    xATSSwitchTimers => '1.3.6.1.4.1.318.1.1.17.3.3',
    xATSSwitchBlockMap => '1.3.6.1.4.1.318.1.1.17.3.4',
    xATSSwitchStatistics => '1.3.6.1.4.1.318.1.1.17.3.5',
    xATSSource1 => '1.3.6.1.4.1.318.1.1.17.4.1',
    xATSSource2 => '1.3.6.1.4.1.318.1.1.17.4.2',
    xATSSystemOutput => '1.3.6.1.4.1.318.1.1.17.4.3',
    xATSTestingStatus => '1.3.6.1.4.1.318.1.1.17.5.1',
    xATSTestingResults => '1.3.6.1.4.1.318.1.1.17.5.2',
    xATSTestingSchedule => '1.3.6.1.4.1.318.1.1.17.5.3',
    xATSTestingSimulatePowerFail => '1.3.6.1.4.1.318.1.1.17.5.4',
    xATSGenerator => '1.3.6.1.4.1.318.1.1.18.1',
    xATSGeneratorIdent => '1.3.6.1.4.1.318.1.1.18.1.1',
    xATSGeneratorStatus => '1.3.6.1.4.1.318.1.1.18.1.2',
    xATSGeneratorAdvStatus => '1.3.6.1.4.1.318.1.1.18.1.3',
    xATSGeneratorOutput => '1.3.6.1.4.1.318.1.1.18.1.4',
    xATSGeneratorSettings => '1.3.6.1.4.1.318.1.1.18.1.5',
    xATSGeneratorService => '1.3.6.1.4.1.318.1.1.18.1.6',
    xATSGeneratorFuelSystem => '1.3.6.1.4.1.318.1.1.18.1.7',
    cpsAP930x => '1.3.6.1.4.1.318.1.1.19.1',
    cpsAP930xSys => '1.3.6.1.4.1.318.1.1.19.1.1',
    cpsAP930xConf => '1.3.6.1.4.1.318.1.1.19.1.2',
    cpsAP930xInfo => '1.3.6.1.4.1.318.1.1.19.1.3',
    cpsAP930xAdm => '1.3.6.1.4.1.318.1.1.19.1.4',
    smartUPS250 => '1.3.6.1.2.1.1.2.1',
    smartUPS400 => '1.3.6.1.2.1.1.2.2',
    smartUPS600 => '1.3.6.1.2.1.1.2.3',
    smartUPS900 => '1.3.6.1.2.1.1.2.4',
    smartUPS1250 => '1.3.6.1.2.1.1.2.5',
    smartUPS2000 => '1.3.6.1.2.1.1.2.6',
    smartUPS450 => '1.3.6.1.2.1.1.2.7',
    smartUPS700 => '1.3.6.1.2.1.1.2.8',
    smartUPS1000 => '1.3.6.1.2.1.1.2.9',
    smartUPS1400 => '1.3.6.1.2.1.1.2.10',
    smartUPS2200 => '1.3.6.1.2.1.1.2.11',
    smartUPS3000 => '1.3.6.1.2.1.1.2.12',
    smartUPS5000 => '1.3.6.1.2.1.1.2.13',
    smartUPS7500 => '1.3.6.1.2.1.1.2.14',
    smartUPS10000 => '1.3.6.1.2.1.1.2.15',
    smartUPS1500 => '1.3.6.1.2.1.1.2.16',
    smartUPS3000DSP => '1.3.6.1.2.1.1.2.17',
    smartUPS5000DSP => '1.3.6.1.2.1.1.2.18',
    smartUPS8000 => '1.3.6.1.2.1.1.2.19',
    matrixUPS3000 => '1.3.6.1.2.1.1.3.1',
    matrixUPS5000 => '1.3.6.1.2.1.1.3.2',
    masterSwitchV1 => '1.3.6.1.2.1.1.4.1',
    masterSwitchV2 => '1.3.6.1.2.1.1.4.2',
    masterSwitchVM => '1.3.6.1.2.1.1.4.3',
    masterSwitchMSP => '1.3.6.1.2.1.1.4.4',
    masterSwitchrPDU => '1.3.6.1.2.1.1.4.5',
    masterSwitchrPDU2 => '1.3.6.1.2.1.1.4.6',
    symmetraUPS4kVA => '1.3.6.1.2.1.1.5.1',
    symmetraUPS8kVA => '1.3.6.1.2.1.1.5.2',
    symmetraUPS12kVA => '1.3.6.1.2.1.1.5.3',
    symmetraUPS16kVA => '1.3.6.1.2.1.1.5.4',
    environmental => '1.3.6.1.2.1.1.8.1',
    environmentalMgtSystem => '1.3.6.1.2.1.1.8.2',
    emu2 => '1.3.6.1.2.1.1.8.3',
    mem => '1.3.6.1.2.1.1.8.4',
    dm3 => '1.3.6.1.2.1.1.10.1',
    dcmim2 => '1.3.6.1.2.1.1.10.2',
    symmetra3PhaseUPS40kVA => '1.3.6.1.2.1.1.13.1',
    symmetra3PhaseUPS60kVA => '1.3.6.1.2.1.1.13.2',
    symmetra3PhaseUPS80kVA => '1.3.6.1.2.1.1.13.3',
    symmetra3PhaseUPS20kVA => '1.3.6.1.2.1.1.13.4',
    airFMSeries => '1.3.6.1.2.1.1.14.1',
    rackAirRemovalUnit => '1.3.6.1.2.1.1.14.2',
    airPASeries => '1.3.6.1.2.1.1.14.3',
    airIRSC100Series => '1.3.6.1.2.1.1.14.4',
    airIRRC100Series => '1.3.6.1.2.1.1.14.5',
    airIRRP100Series => '1.3.6.1.2.1.1.14.6',
    airIRRP500Series => '1.3.6.1.2.1.1.14.7',
    airIRRD100Series => '1.3.6.1.2.1.1.14.8',
    airInRoomPerimeter => '1.3.6.1.2.1.1.14.9',
    ais5000UPS10kVA => '1.3.6.1.2.1.1.16.1',
    ais5000UPS20kVA => '1.3.6.1.2.1.1.16.2',
    ais5000UPS30kVA => '1.3.6.1.2.1.1.16.3',
    ais5000UPS40kVA => '1.3.6.1.2.1.1.16.4',
    ais5000UPS60kVA => '1.3.6.1.2.1.1.16.5',
    ais5000UPS80kVA => '1.3.6.1.2.1.1.16.6',
    ais5000UPS100kVA => '1.3.6.1.2.1.1.16.7',
    smartUPS3Phase10kVA => '1.3.6.1.2.1.1.17.1',
    smartUPS3Phase15kVA => '1.3.6.1.2.1.1.17.2',
    smartUPS3Phase20kVA => '1.3.6.1.2.1.1.17.3',
    smartUPS3Phase30kVA => '1.3.6.1.2.1.1.17.4',
    smartUPS3Phase40kVA => '1.3.6.1.2.1.1.17.5',
    galaxy7000UPS200kVA => '1.3.6.1.2.1.1.28.1',
    galaxy7000UPS250kVA => '1.3.6.1.2.1.1.28.2',
    galaxy7000UPS300kVA => '1.3.6.1.2.1.1.28.3',
    galaxy7000UPS400kVA => '1.3.6.1.2.1.1.28.4',
    galaxy7000UPS500kVA => '1.3.6.1.2.1.1.28.5',
    galaxy7000SSC800kVA => '1.3.6.1.2.1.1.28.6',
    galaxy7000SSC1200kVA => '1.3.6.1.2.1.1.28.7',
    galaxy7000SSC2000kVA => '1.3.6.1.2.1.1.28.8',
    galaxy300UPS10kVA33 => '1.3.6.1.2.1.1.28.9',
    galaxy300UPS15kVA33 => '1.3.6.1.2.1.1.28.10',
    galaxy300UPS20kVA33 => '1.3.6.1.2.1.1.28.11',
    galaxy300UPS30kVA33 => '1.3.6.1.2.1.1.28.12',
    galaxy300UPS40kVA33 => '1.3.6.1.2.1.1.28.13',
    galaxy300UPS10kVA31 => '1.3.6.1.2.1.1.28.14',
    galaxy300UPS15kVA31 => '1.3.6.1.2.1.1.28.15',
    galaxy300UPS20kVA31 => '1.3.6.1.2.1.1.28.16',
    galaxy300UPS30kVA31 => '1.3.6.1.2.1.1.28.17',
    conPortServAP930x => '1.3.6.1.2.1.1.20.1',
    gutorPEW => '1.3.6.1.2.1.1.21.1',
    gutorPDW => '1.3.6.1.2.1.1.21.2',
    gutorWEW => '1.3.6.1.2.1.1.21.3',
    gutorWDW => '1.3.6.1.2.1.1.21.4',
    gutorSDC => '1.3.6.1.2.1.1.21.5',
    upsIdent => '1.3.6.1.4.1.318.1.1.1.1',
    upsBattery => '1.3.6.1.4.1.318.1.1.1.2',
    upsInput => '1.3.6.1.4.1.318.1.1.1.3',
    upsOutput => '1.3.6.1.4.1.318.1.1.1.4',
    upsConfig => '1.3.6.1.4.1.318.1.1.1.5',
    upsControl => '1.3.6.1.4.1.318.1.1.1.6',
    upsTest => '1.3.6.1.4.1.318.1.1.1.7',
    upsComm => '1.3.6.1.4.1.318.1.1.1.8',
    upsPhase => '1.3.6.1.4.1.318.1.1.1.9',
    upsSyncCtrlGroup => '1.3.6.1.4.1.318.1.1.1.10',
    upsState => '1.3.6.1.4.1.318.1.1.1.11',
    upsOutletGroups => '1.3.6.1.4.1.318.1.1.1.12',
    upsDiagnostics => '1.3.6.1.4.1.318.1.1.1.13',
    upsParallelSystem => '1.3.6.1.4.1.318.1.1.1.14',
    upsPhysicalLayout => '1.3.6.1.4.1.318.1.1.1.15',
    upsIntegratedATS => '1.3.6.1.4.1.318.1.1.1.16',
    upsBasicIdent => '1.3.6.1.4.1.318.1.1.1.1.1',
    upsAdvIdent => '1.3.6.1.4.1.318.1.1.1.1.2',
    upsBasicBattery => '1.3.6.1.4.1.318.1.1.1.2.1',
    upsAdvBattery => '1.3.6.1.4.1.318.1.1.1.2.2',
    upsHighPrecBattery => '1.3.6.1.4.1.318.1.1.1.2.3',
    upsBasicInput => '1.3.6.1.4.1.318.1.1.1.3.1',
    upsAdvInput => '1.3.6.1.4.1.318.1.1.1.3.2',
    upsHighPrecInput => '1.3.6.1.4.1.318.1.1.1.3.3',
    upsBasicOutput => '1.3.6.1.4.1.318.1.1.1.4.1',
    upsAdvOutput => '1.3.6.1.4.1.318.1.1.1.4.2',
    upsHighPrecOutput => '1.3.6.1.4.1.318.1.1.1.4.3',
    upsBasicConfig => '1.3.6.1.4.1.318.1.1.1.5.1',
    upsAdvConfig => '1.3.6.1.4.1.318.1.1.1.5.2',
    upsBasicControl => '1.3.6.1.4.1.318.1.1.1.6.1',
    upsAdvControl => '1.3.6.1.4.1.318.1.1.1.6.2',
    upsBasicTest => '1.3.6.1.4.1.318.1.1.1.7.1',
    upsAdvTest => '1.3.6.1.4.1.318.1.1.1.7.2',
    upsPhaseResetValues => '1.3.6.1.4.1.318.1.1.1.9.1',
    upsPhaseInput => '1.3.6.1.4.1.318.1.1.1.9.2',
    upsPhaseOutput => '1.3.6.1.4.1.318.1.1.1.9.3',
    upsSyncCtrlGroupConfig => '1.3.6.1.4.1.318.1.1.1.10.1',
    upsSyncCtrlGroupStatus => '1.3.6.1.4.1.318.1.1.1.10.2',
    upsBasicState => '1.3.6.1.4.1.318.1.1.1.11.1',
    upsAdvState => '1.3.6.1.4.1.318.1.1.1.11.2',
    upsOutletGroupStatus => '1.3.6.1.4.1.318.1.1.1.12.1',
    upsOutletGroupConfig => '1.3.6.1.4.1.318.1.1.1.12.2',
    upsOutletGroupControl => '1.3.6.1.4.1.318.1.1.1.12.3',
    upsDiagnosticIM => '1.3.6.1.4.1.318.1.1.1.13.1',
    upsDiagnosticPowerModules => '1.3.6.1.4.1.318.1.1.1.13.2',
    upsDiagnosticBatteries => '1.3.6.1.4.1.318.1.1.1.13.3',
    upsDiagnosticSubsystem => '1.3.6.1.4.1.318.1.1.1.13.4',
    upsDiagnosticExternalDevices => '1.3.6.1.4.1.318.1.1.1.13.5',
    upsDiagnosticComBus => '1.3.6.1.4.1.318.1.1.1.13.6',
    upsDiagSwitchGear => '1.3.6.1.4.1.318.1.1.1.13.5.1',
    upsDiagMCCBBox => '1.3.6.1.4.1.318.1.1.1.13.5.2',
    upsDiagTransformer => '1.3.6.1.4.1.318.1.1.1.13.5.3',
    mUpsEnviron => '1.3.6.1.4.1.318.1.1.2.1',
    mUpsContact => '1.3.6.1.4.1.318.1.1.2.2',
    serialPort => '1.3.6.1.4.1.318.1.1.3.1',
    serialPort1 => '1.3.6.1.4.1.318.1.1.3.1.1',
    serialPort2 => '1.3.6.1.4.1.318.1.1.3.1.2',
    serialPort2Config => '1.3.6.1.4.1.318.1.1.3.1.2.1',
    serialPort2Control => '1.3.6.1.4.1.318.1.1.3.1.2.2',
    sPDUIdent => '1.3.6.1.4.1.318.1.1.4.1',
    sPDUMasterControl => '1.3.6.1.4.1.318.1.1.4.2',
    sPDUMasterConfig => '1.3.6.1.4.1.318.1.1.4.3',
    sPDUOutletControl => '1.3.6.1.4.1.318.1.1.4.4',
    sPDUOutletConfig => '1.3.6.1.4.1.318.1.1.4.5',
    sPDUIdentVM => '1.3.6.1.4.1.318.1.1.5.1',
    sPDUMasterControlVM => '1.3.6.1.4.1.318.1.1.5.2',
    sPDUMasterConfigVM => '1.3.6.1.4.1.318.1.1.5.3',
    sPDUMasterStatusVM => '1.3.6.1.4.1.318.1.1.5.4',
    sPDUOutletControlVM => '1.3.6.1.4.1.318.1.1.5.5',
    sPDUOutletConfigVM => '1.3.6.1.4.1.318.1.1.5.6',
    sPDUOutletStatusVM => '1.3.6.1.4.1.318.1.1.5.7',
    sPDUIdentMSP => '1.3.6.1.4.1.318.1.1.6.1',
    sPDUMasterControlMSP => '1.3.6.1.4.1.318.1.1.6.2',
    sPDUMasterConfigMSP => '1.3.6.1.4.1.318.1.1.6.3',
    sPDUMasterStatusMSP => '1.3.6.1.4.1.318.1.1.6.4',
    sPDUOutletControlMSP => '1.3.6.1.4.1.318.1.1.6.5',
    sPDUOutletConfigMSP => '1.3.6.1.4.1.318.1.1.6.6',
    sPDUOutletStatusMSP => '1.3.6.1.4.1.318.1.1.6.7',
    sPDUOutletConfigMSPall => '1.3.6.1.4.1.318.1.1.6.6.1',
    sPDUOutletConfigMSPgs => '1.3.6.1.4.1.318.1.1.6.6.2',
    sPDUOutletConfigMSPannun => '1.3.6.1.4.1.318.1.1.6.6.3',
    sPDUOutletConfigMSPmups => '1.3.6.1.4.1.318.1.1.6.6.4',
    rPDUIdent => '1.3.6.1.4.1.318.1.1.12.1',
    rPDULoad => '1.3.6.1.4.1.318.1.1.12.2',
    rPDUOutlet => '1.3.6.1.4.1.318.1.1.12.3',
    rPDUPowerSupply => '1.3.6.1.4.1.318.1.1.12.4',
    rPDUStatus => '1.3.6.1.4.1.318.1.1.12.5',
    rPDULoadDevice => '1.3.6.1.4.1.318.1.1.12.2.1',
    rPDULoadPhaseConfig => '1.3.6.1.4.1.318.1.1.12.2.2',
    rPDULoadStatus => '1.3.6.1.4.1.318.1.1.12.2.3',
    rPDULoadBankConfig => '1.3.6.1.4.1.318.1.1.12.2.4',
    rPDUOutletDevice => '1.3.6.1.4.1.318.1.1.12.3.1',
    rPDUOutletPhase => '1.3.6.1.4.1.318.1.1.12.3.2',
    rPDUOutletControl => '1.3.6.1.4.1.318.1.1.12.3.3',
    rPDUOutletConfig => '1.3.6.1.4.1.318.1.1.12.3.4',
    rPDUOutletStatus => '1.3.6.1.4.1.318.1.1.12.3.5',
    rPDUOutletBank => '1.3.6.1.4.1.318.1.1.12.3.6',
    rPDUPowerSupplyDevice => '1.3.6.1.4.1.318.1.1.12.4.1',
    dm3Ident => '1.3.6.1.4.1.318.1.1.7.1',
    dm3Config => '1.3.6.1.4.1.318.1.1.7.2',
    dm3Status => '1.3.6.1.4.1.318.1.1.7.3',
    dm3IdentSystem => '1.3.6.1.4.1.318.1.1.7.1.1',
    dm3ConfigSystem => '1.3.6.1.4.1.318.1.1.7.2.1',
    dm3ConfigLVD => '1.3.6.1.4.1.318.1.1.7.2.2',
    dm3ConfigBattery => '1.3.6.1.4.1.318.1.1.7.2.3',
    dm3ConfigPowerModules => '1.3.6.1.4.1.318.1.1.7.2.4',
    dm3ConfigRelays => '1.3.6.1.4.1.318.1.1.7.2.5',
    dm3ConfigDistribution => '1.3.6.1.4.1.318.1.1.7.2.6',
    dm3ConfigRectifier => '1.3.6.1.4.1.318.1.1.7.2.4.1',
    dm3ConfigConverter => '1.3.6.1.4.1.318.1.1.7.2.4.2',
    dm3ConfigRectThresh => '1.3.6.1.4.1.318.1.1.7.2.4.1.1',
    dm3ConfigRectAlarms => '1.3.6.1.4.1.318.1.1.7.2.4.1.2',
    dm3ConfigConvThresh => '1.3.6.1.4.1.318.1.1.7.2.4.2.1',
    dm3ConfigConvAlarms => '1.3.6.1.4.1.318.1.1.7.2.4.2.2',
    dm3ConfigOutputRelays => '1.3.6.1.4.1.318.1.1.7.2.5.1',
    dm3ConfigInputRelays => '1.3.6.1.4.1.318.1.1.7.2.5.2',
    dm3ConfigBreakers => '1.3.6.1.4.1.318.1.1.7.2.6.1',
    dm3ConfigFuses => '1.3.6.1.4.1.318.1.1.7.2.6.2',
    dm3StatusSystem => '1.3.6.1.4.1.318.1.1.7.3.1',
    dm3StatusAlarms => '1.3.6.1.4.1.318.1.1.7.3.2',
    dm3StatusBattery => '1.3.6.1.4.1.318.1.1.7.3.3',
    dm3StatusOEM => '1.3.6.1.4.1.318.1.1.7.3.4',
    dm3StatusLVD => '1.3.6.1.4.1.318.1.1.7.3.5',
    dm3StatusPowerModules => '1.3.6.1.4.1.318.1.1.7.3.6',
    dm3StatusRelays => '1.3.6.1.4.1.318.1.1.7.3.7',
    dm3StatusDistribution => '1.3.6.1.4.1.318.1.1.7.3.8',
    dm3StatusRectifier => '1.3.6.1.4.1.318.1.1.7.3.6.1',
    dm3StatusConverter => '1.3.6.1.4.1.318.1.1.7.3.6.2',
    dm3StatusOutputRelays => '1.3.6.1.4.1.318.1.1.7.3.7.1',
    dm3StatusInputRelays => '1.3.6.1.4.1.318.1.1.7.3.7.2',
    dm3StatusBreakers => '1.3.6.1.4.1.318.1.1.7.3.8.1',
    dm3StatusFuses => '1.3.6.1.4.1.318.1.1.7.3.8.2',
    atsIdent => '1.3.6.1.4.1.318.1.1.8.1',
    atsCalibration => '1.3.6.1.4.1.318.1.1.8.2',
    atsControl => '1.3.6.1.4.1.318.1.1.8.3',
    atsConfig => '1.3.6.1.4.1.318.1.1.8.4',
    atsStatus => '1.3.6.1.4.1.318.1.1.8.5',
    atsCalibrationInput => '1.3.6.1.4.1.318.1.1.8.2.1',
    atsCalibrationPowerSupply => '1.3.6.1.4.1.318.1.1.8.2.2',
    atsCalibrationOutput => '1.3.6.1.4.1.318.1.1.8.2.3',
    atsStatusDeviceStatus => '1.3.6.1.4.1.318.1.1.8.5.1',
    atsStatusResetValues => '1.3.6.1.4.1.318.1.1.8.5.2',
    atsStatusInput => '1.3.6.1.4.1.318.1.1.8.5.3',
    atsStatusOutput => '1.3.6.1.4.1.318.1.1.8.5.4',
    dcmim2Ident => '1.3.6.1.4.1.318.1.1.9.1',
    dcmim2Control => '1.3.6.1.4.1.318.1.1.9.2',
    dcmim2Config => '1.3.6.1.4.1.318.1.1.9.3',
    dcmim2Status => '1.3.6.1.4.1.318.1.1.9.4',
    dcmim2IdentSystem => '1.3.6.1.4.1.318.1.1.9.1.1',
    dcmim2ControlSystem => '1.3.6.1.4.1.318.1.1.9.2.1',
    dcmim2ConfigSystem => '1.3.6.1.4.1.318.1.1.9.3.1',
    dcmim2ConfigBattery => '1.3.6.1.4.1.318.1.1.9.3.2',
    dcmim2ConfigLVD => '1.3.6.1.4.1.318.1.1.9.3.3',
    dcmim2StatusSystem => '1.3.6.1.4.1.318.1.1.9.4.1',
    dcmim2StatusRectifier => '1.3.6.1.4.1.318.1.1.9.4.2',
    dcmim2StatusBattery => '1.3.6.1.4.1.318.1.1.9.4.3',
    dcmim2StatusLVD => '1.3.6.1.4.1.318.1.1.9.4.4',
    dcmim2StatusAlarms => '1.3.6.1.4.1.318.1.1.9.4.5',
    external => '1.3.6.1.4.1.318.1.1.10.1',
    integrated => '1.3.6.1.4.1.318.1.1.10.2',
    envMgtSystem => '1.3.6.1.4.1.318.1.1.10.3',
    modEnvMgr => '1.3.6.1.4.1.318.1.1.10.4',
    emIdent => '1.3.6.1.4.1.318.1.1.10.1.1',
    emConfig => '1.3.6.1.4.1.318.1.1.10.1.2',
    emStatus => '1.3.6.1.4.1.318.1.1.10.1.3',
    iemIdent => '1.3.6.1.4.1.318.1.1.10.2.1',
    iemConfig => '1.3.6.1.4.1.318.1.1.10.2.2',
    iemStatus => '1.3.6.1.4.1.318.1.1.10.2.3',
    emsIdent => '1.3.6.1.4.1.318.1.1.10.3.1',
    emsOutputRelayControl => '1.3.6.1.4.1.318.1.1.10.3.2',
    emsOutletControl => '1.3.6.1.4.1.318.1.1.10.3.3',
    emsSensorControl => '1.3.6.1.4.1.318.1.1.10.3.4',
    emsAlarmDeviceControl => '1.3.6.1.4.1.318.1.1.10.3.5',
    emsConfig => '1.3.6.1.4.1.318.1.1.10.3.6',
    emsProbeConfig => '1.3.6.1.4.1.318.1.1.10.3.7',
    emsInputContactConfig => '1.3.6.1.4.1.318.1.1.10.3.8',
    emsOutputRelayConfig => '1.3.6.1.4.1.318.1.1.10.3.9',
    emsOutletConfig => '1.3.6.1.4.1.318.1.1.10.3.10',
    emsSensorConfig => '1.3.6.1.4.1.318.1.1.10.3.11',
    emsStatus => '1.3.6.1.4.1.318.1.1.10.3.12',
    emsProbeStatus => '1.3.6.1.4.1.318.1.1.10.3.13',
    emsInputContactStatus => '1.3.6.1.4.1.318.1.1.10.3.14',
    emsOutputRelayStatus => '1.3.6.1.4.1.318.1.1.10.3.15',
    emsOutletStatus => '1.3.6.1.4.1.318.1.1.10.3.16',
    emsAlarmDeviceStatus => '1.3.6.1.4.1.318.1.1.10.3.17',
    emsSensorStatus => '1.3.6.1.4.1.318.1.1.10.3.18',
    memModules => '1.3.6.1.4.1.318.1.1.10.4.1',
    memSensors => '1.3.6.1.4.1.318.1.1.10.4.2',
    memInputs => '1.3.6.1.4.1.318.1.1.10.4.3',
    memOutputs => '1.3.6.1.4.1.318.1.1.10.4.4',
    memOutlets => '1.3.6.1.4.1.318.1.1.10.4.5',
    memBeacons => '1.3.6.1.4.1.318.1.1.10.4.6',
    nlIdent => '1.3.6.1.4.1.318.1.1.11.1',
    nlStatus => '1.3.6.1.4.1.318.1.1.11.2',
    airFM => '1.3.6.1.4.1.318.1.1.13.1',
    airFMIdent => '1.3.6.1.4.1.318.1.1.13.1.1',
    airFMStatus => '1.3.6.1.4.1.318.1.1.13.1.2',
    airFMGroup => '1.3.6.1.4.1.318.1.1.13.1.3',
    airFMSystem => '1.3.6.1.4.1.318.1.1.13.1.4',
    airFMModule => '1.3.6.1.4.1.318.1.1.13.1.5',
    airFMAlarms => '1.3.6.1.4.1.318.1.1.13.1.6',
    airFMGroupSysRoles => '1.3.6.1.4.1.318.1.1.13.1.3.4',
    airFMGroupCfg => '1.3.6.1.4.1.318.1.1.13.1.3.5',
    airFMGroupLoadShare => '1.3.6.1.4.1.318.1.1.13.1.3.6',
    airFMGroupFailover => '1.3.6.1.4.1.318.1.1.13.1.3.7',
    airFMGroupFailoverSys => '1.3.6.1.4.1.318.1.1.13.1.3.7.1',
    airFMGroupFailoverMod => '1.3.6.1.4.1.318.1.1.13.1.3.7.2',
    airFMSysStatus => '1.3.6.1.4.1.318.1.1.13.1.4.1',
    airFMSysDemands => '1.3.6.1.4.1.318.1.1.13.1.4.2',
    airFMSysSetup => '1.3.6.1.4.1.318.1.1.13.1.4.3',
    airFMSysConfig => '1.3.6.1.4.1.318.1.1.13.1.4.4',
    airFMSysCooling => '1.3.6.1.4.1.318.1.1.13.1.4.5',
    airFMSysHumidify => '1.3.6.1.4.1.318.1.1.13.1.4.6',
    airFMSysDehumidify => '1.3.6.1.4.1.318.1.1.13.1.4.7',
    airFMSysReheat => '1.3.6.1.4.1.318.1.1.13.1.4.8',
    airFMSysThresholds => '1.3.6.1.4.1.318.1.1.13.1.4.9',
    airFMSysInputs => '1.3.6.1.4.1.318.1.1.13.1.4.10',
    airFMSysOutputs => '1.3.6.1.4.1.318.1.1.13.1.4.11',
    airFMSysAlarmMap => '1.3.6.1.4.1.318.1.1.13.1.4.12',
    airFMSysAlarmMapSys => '1.3.6.1.4.1.318.1.1.13.1.4.12.1',
    airFMSysAlarmMapMainMod => '1.3.6.1.4.1.318.1.1.13.1.4.12.2',
    airFMSysAlarmMapExpMod1 => '1.3.6.1.4.1.318.1.1.13.1.4.12.3',
    airFMSysAlarmMapExpMod2 => '1.3.6.1.4.1.318.1.1.13.1.4.12.4',
    airFMSysAlarmMapInput => '1.3.6.1.4.1.318.1.1.13.1.4.12.5',
    airFMSysAlarmMapOutput => '1.3.6.1.4.1.318.1.1.13.1.4.12.6',
    airFMModIdent => '1.3.6.1.4.1.318.1.1.13.1.5.1',
    airFMModStatus => '1.3.6.1.4.1.318.1.1.13.1.5.2',
    airFMModProperties => '1.3.6.1.4.1.318.1.1.13.1.5.3',
    airFMModCooling => '1.3.6.1.4.1.318.1.1.13.1.5.4',
    airFMModHumidity => '1.3.6.1.4.1.318.1.1.13.1.5.5',
    airFMModBlower1 => '1.3.6.1.4.1.318.1.1.13.1.5.6',
    airFMModBlower2 => '1.3.6.1.4.1.318.1.1.13.1.5.7',
    airFMModRunHours => '1.3.6.1.4.1.318.1.1.13.1.5.8',
    airFMModServIntervals => '1.3.6.1.4.1.318.1.1.13.1.5.9',
    airFMModServIntResets => '1.3.6.1.4.1.318.1.1.13.1.5.10',
    airPA => '1.3.6.1.4.1.318.1.1.13.2',
    airPAIdent => '1.3.6.1.4.1.318.1.1.13.2.1',
    airPAStatus => '1.3.6.1.4.1.318.1.1.13.2.2',
    airIR => '1.3.6.1.4.1.318.1.1.13.3',
    airIRAlarms => '1.3.6.1.4.1.318.1.1.13.3.1',
    airIRRC => '1.3.6.1.4.1.318.1.1.13.3.2',
    airIRRP => '1.3.6.1.4.1.318.1.1.13.3.3',
    airIRSC => '1.3.6.1.4.1.318.1.1.13.3.4',
    airIRRCGroup => '1.3.6.1.4.1.318.1.1.13.3.2.1',
    airIRRCUnit => '1.3.6.1.4.1.318.1.1.13.3.2.2',
    airIRRCGroupStatus => '1.3.6.1.4.1.318.1.1.13.3.2.1.1',
    airIRRCGroupSetpoints => '1.3.6.1.4.1.318.1.1.13.3.2.1.2',
    airIRRCGroupConfig => '1.3.6.1.4.1.318.1.1.13.3.2.1.3',
    airIRRCUnitIdent => '1.3.6.1.4.1.318.1.1.13.3.2.2.1',
    airIRRCUnitStatus => '1.3.6.1.4.1.318.1.1.13.3.2.2.2',
    airIRRCUnitRunHours => '1.3.6.1.4.1.318.1.1.13.3.2.2.3',
    airIRRCUnitServiceIntervals => '1.3.6.1.4.1.318.1.1.13.3.2.2.4',
    airIRRCUnitThresholds => '1.3.6.1.4.1.318.1.1.13.3.2.2.5',
    airIRRCUnitConfig => '1.3.6.1.4.1.318.1.1.13.3.2.2.6',
    airIRRP100 => '1.3.6.1.4.1.318.1.1.13.3.3.1',
    airIRRP500 => '1.3.6.1.4.1.318.1.1.13.3.3.2',
    airIRRP100Group => '1.3.6.1.4.1.318.1.1.13.3.3.1.1',
    airIRRP100Unit => '1.3.6.1.4.1.318.1.1.13.3.3.1.2',
    airIRRP100GroupStatus => '1.3.6.1.4.1.318.1.1.13.3.3.1.1.1',
    airIRRP100GroupSetpoints => '1.3.6.1.4.1.318.1.1.13.3.3.1.1.2',
    airIRRP100GroupConfig => '1.3.6.1.4.1.318.1.1.13.3.3.1.1.3',
    airIRRP100UnitIdent => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.1',
    airIRRP100UnitStatus => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.2',
    airIRRP100UnitRunHours => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.3',
    airIRRP100UnitServiceIntervals => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.4',
    airIRRP100UnitThresholds => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.5',
    airIRRP100UnitConfig => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.6',
    airIRRP500Group => '1.3.6.1.4.1.318.1.1.13.3.3.2.1',
    airIRRP500Unit => '1.3.6.1.4.1.318.1.1.13.3.3.2.2',
    airIRRP500GroupStatus => '1.3.6.1.4.1.318.1.1.13.3.3.2.1.1',
    airIRRP500GroupSetpoints => '1.3.6.1.4.1.318.1.1.13.3.3.2.1.2',
    airIRRP500GroupConfig => '1.3.6.1.4.1.318.1.1.13.3.3.2.1.3',
    airIRRP500UnitIdent => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.1',
    airIRRP500UnitStatus => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.2',
    airIRRP500UnitRunHours => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.3',
    airIRRP500UnitServiceIntervals => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.4',
    airIRRP500UnitThresholds => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.5',
    airIRRP500UnitConfig => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.6',
    airIRSCUnit => '1.3.6.1.4.1.318.1.1.13.3.4.1',
    airIRSCUnitIdent => '1.3.6.1.4.1.318.1.1.13.3.4.1.1',
    airIRSCUnitStatus => '1.3.6.1.4.1.318.1.1.13.3.4.1.2',
    airIRSCUnitRunHours => '1.3.6.1.4.1.318.1.1.13.3.4.1.3',
    airIRSCUnitServiceIntervals => '1.3.6.1.4.1.318.1.1.13.3.4.1.4',
    airIRSCUnitThresholds => '1.3.6.1.4.1.318.1.1.13.3.4.1.5',
    airIRSCUnitSetpoints => '1.3.6.1.4.1.318.1.1.13.3.4.1.6',
    airIRSCUnitConfig => '1.3.6.1.4.1.318.1.1.13.3.4.1.7',
    airIRSCGroup => '1.3.6.1.4.1.318.1.1.13.3.4.2',
    airIRSCGroupStatus => '1.3.6.1.4.1.318.1.1.13.3.4.2.1',
    airIRSCGroupSetpoints => '1.3.6.1.4.1.318.1.1.13.3.4.2.2',
    airIRSCGroupConfig => '1.3.6.1.4.1.318.1.1.13.3.4.2.3',
    airIRGen2 => '1.3.6.1.4.1.318.1.1.13.4',
    airIRG2Ident => '1.3.6.1.4.1.318.1.1.13.4.1',
    airIRG2Group => '1.3.6.1.4.1.318.1.1.13.4.2',
    airIRG2Alarms => '1.3.6.1.4.1.318.1.1.13.4.3',
    airIRG2RC => '1.3.6.1.4.1.318.1.1.13.4.4',
    airIRG2RD => '1.3.6.1.4.1.318.1.1.13.4.5',
    airIRG2SC => '1.3.6.1.4.1.318.1.1.13.4.6',
    airIRG2RA => '1.3.6.1.4.1.318.1.1.13.4.7',
    airIRG2GroupStatus => '1.3.6.1.4.1.318.1.1.13.4.2.1',
    airIRG2GroupSetpoints => '1.3.6.1.4.1.318.1.1.13.4.2.2',
    airIRG2GroupConfig => '1.3.6.1.4.1.318.1.1.13.4.2.3',
    airIRG2RDType1 => '1.3.6.1.4.1.318.1.1.13.4.5.1',
    airIRG2RDType2 => '1.3.6.1.4.1.318.1.1.13.4.5.2',
    airIRG2RDT2Status => '1.3.6.1.4.1.318.1.1.13.4.5.2.1',
    airIRG2RDT2RunHours => '1.3.6.1.4.1.318.1.1.13.4.5.2.2',
    airIRG2RDT2ServiceIntervals => '1.3.6.1.4.1.318.1.1.13.4.5.2.3',
    airIRG2RDT2Thresholds => '1.3.6.1.4.1.318.1.1.13.4.5.2.4',
    airIRG2RDT2Setpoints => '1.3.6.1.4.1.318.1.1.13.4.5.2.5',
    airIRG2RDT2Config => '1.3.6.1.4.1.318.1.1.13.4.5.2.6',
    airInRoom => '1.3.6.1.4.1.318.1.1.13.5',
    airIRmIdent => '1.3.6.1.4.1.318.1.1.13.5.1',
    airIRmAlarms => '1.3.6.1.4.1.318.1.1.13.5.2',
    airIRmPerimeter => '1.3.6.1.4.1.318.1.1.13.5.3',
    airIRmPmCommon1 => '1.3.6.1.4.1.318.1.1.13.5.3.2',
    airIRmPmCommon2 => '1.3.6.1.4.1.318.1.1.13.5.3.3',
    airIRmPmCommon3 => '1.3.6.1.4.1.318.1.1.13.5.3.4',
    airIRmPmCommon4 => '1.3.6.1.4.1.318.1.1.13.5.3.5',
    airIRmPmCommon5 => '1.3.6.1.4.1.318.1.1.13.5.3.6',
    airIRmPmCompressor1 => '1.3.6.1.4.1.318.1.1.13.5.3.7',
    airIRmPmCompressor2 => '1.3.6.1.4.1.318.1.1.13.5.3.8',
    airIRmPmSuctionValve1 => '1.3.6.1.4.1.318.1.1.13.5.3.9',
    airIRmPmSuctionValve2 => '1.3.6.1.4.1.318.1.1.13.5.3.10',
    airIRmPmEheating1 => '1.3.6.1.4.1.318.1.1.13.5.3.11',
    airIRmPmEheating2 => '1.3.6.1.4.1.318.1.1.13.5.3.12',
    airIRmPmEheating3 => '1.3.6.1.4.1.318.1.1.13.5.3.13',
    airIRmPmEheating4 => '1.3.6.1.4.1.318.1.1.13.5.3.14',
    airIRmPmGECWvalve => '1.3.6.1.4.1.318.1.1.13.5.3.15',
    airIRmPmGvalve => '1.3.6.1.4.1.318.1.1.13.5.3.16',
    airIRmPmDrycooler1 => '1.3.6.1.4.1.318.1.1.13.5.3.17',
    airIRmPmDrycooler2 => '1.3.6.1.4.1.318.1.1.13.5.3.18',
    airIRmPmDrycooler3 => '1.3.6.1.4.1.318.1.1.13.5.3.19',
    airIRmPmDrycooler4 => '1.3.6.1.4.1.318.1.1.13.5.3.20',
    airIRmPmPump1 => '1.3.6.1.4.1.318.1.1.13.5.3.21',
    airIRmPmPump2 => '1.3.6.1.4.1.318.1.1.13.5.3.22',
    airIRmPmPump3 => '1.3.6.1.4.1.318.1.1.13.5.3.23',
    airIRmPmPump4 => '1.3.6.1.4.1.318.1.1.13.5.3.24',
    airIRmPmHotgasHeating => '1.3.6.1.4.1.318.1.1.13.5.3.25',
    airIRmPmPWWHeating => '1.3.6.1.4.1.318.1.1.13.5.3.26',
    airIRmPmHumidifier1 => '1.3.6.1.4.1.318.1.1.13.5.3.27',
    airIRmPmHumidifier2 => '1.3.6.1.4.1.318.1.1.13.5.3.28',
    airIRmPmDehumidification => '1.3.6.1.4.1.318.1.1.13.5.3.31',
    airIRmPmFan1 => '1.3.6.1.4.1.318.1.1.13.5.3.32',
    airIRmPmFan2 => '1.3.6.1.4.1.318.1.1.13.5.3.33',
    airIRmPmFan3 => '1.3.6.1.4.1.318.1.1.13.5.3.34',
    airIRmPmLouver1 => '1.3.6.1.4.1.318.1.1.13.5.3.35',
    airIRmPmLouver2 => '1.3.6.1.4.1.318.1.1.13.5.3.36',
    airIRmPmLouver3 => '1.3.6.1.4.1.318.1.1.13.5.3.37',
    airIRmPmAuxAlarm1 => '1.3.6.1.4.1.318.1.1.13.5.3.38',
    airIRmPmAuxAlarm2 => '1.3.6.1.4.1.318.1.1.13.5.3.39',
    airIRmPmAuxAlarm3 => '1.3.6.1.4.1.318.1.1.13.5.3.40',
    airIRmPmAuxAlarm4 => '1.3.6.1.4.1.318.1.1.13.5.3.41',
    airIRmPmAuxAlarm5 => '1.3.6.1.4.1.318.1.1.13.5.3.42',
    airIRmPmAlarmBits => '1.3.6.1.4.1.318.1.1.13.5.3.43',
    airIRmPmMyZone => '1.3.6.1.4.1.318.1.1.13.5.3.44',
    airIRmPmGlobalZoneData => '1.3.6.1.4.1.318.1.1.13.5.3.45',
    airIRGen3 => '1.3.6.1.4.1.318.1.1.13.6',
    airIRG3Ident => '1.3.6.1.4.1.318.1.1.13.6.1',
    airIRG3Group => '1.3.6.1.4.1.318.1.1.13.6.2',
    airIRG3Alarms => '1.3.6.1.4.1.318.1.1.13.6.3',
    airIRG3RDU => '1.3.6.1.4.1.318.1.1.13.6.4',
    airIRG3CM => '1.3.6.1.4.1.318.1.1.13.6.5',
    rARUIdent => '1.3.6.1.4.1.318.1.1.14.1',
    rARUConfig => '1.3.6.1.4.1.318.1.1.14.2',
    rARUStatus => '1.3.6.1.4.1.318.1.1.14.3',
    rARUFanStatus => '1.3.6.1.4.1.318.1.1.14.4',
    rARUPower => '1.3.6.1.4.1.318.1.1.14.5',
    rARUSensors => '1.3.6.1.4.1.318.1.1.14.6',
    accessPX => '1.3.6.1.4.1.318.1.1.20.1',
    accessPXIdent => '1.3.6.1.4.1.318.1.1.20.1.1',
    accessPXConfig => '1.3.6.1.4.1.318.1.1.20.1.2',
    accessPXConfigFront => '1.3.6.1.4.1.318.1.1.20.1.3',
    accessPXStatusFront => '1.3.6.1.4.1.318.1.1.20.1.4',
    accessPXConfigRear => '1.3.6.1.4.1.318.1.1.20.1.5',
    accessPXStatusRear => '1.3.6.1.4.1.318.1.1.20.1.6',
    accessPXConfigBeacon => '1.3.6.1.4.1.318.1.1.20.1.7',
    accessPXStatusBeacon => '1.3.6.1.4.1.318.1.1.20.1.8',
    apcLocalDisplayIdent => '1.3.6.1.4.1.318.1.1.21.1',
    apcLocalDisplayConfig => '1.3.6.1.4.1.318.1.1.21.2',
    accPX => '1.3.6.1.2.1.1.22.1',
    isxModularPduIdent => '1.3.6.1.4.1.318.1.1.23.1',
    isxModularPduDevice => '1.3.6.1.4.1.318.1.1.23.2',
    isxModularPduStatus => '1.3.6.1.4.1.318.1.1.23.3',
    symmetraPx48kVA => '1.3.6.1.2.1.1.23.1',
    symmetraPx160kVA => '1.3.6.1.2.1.1.23.2',
    symmetraPx250kVA => '1.3.6.1.2.1.1.23.3',
    symmetraPx500kVA => '1.3.6.1.2.1.1.23.4',
    symmetraPx100kVA => '1.3.6.1.2.1.1.23.5',
    isx24ModuleHalfRackPdu => '1.3.6.1.2.1.1.24.1',
    isx6ModuleRackPdu => '1.3.6.1.2.1.1.24.2',
    isxModularDistInfo => '1.3.6.1.4.1.318.1.1.22.1',
    isxModularDistModules => '1.3.6.1.4.1.318.1.1.22.2',
    isxModularDistSubFeeds => '1.3.6.1.4.1.318.1.1.22.3',
    isxModularDistTotals => '1.3.6.1.4.1.318.1.1.22.4',
    isxModularDistSysVoltage => '1.3.6.1.4.1.318.1.1.22.4.1',
    isxModularDistSysCurrent => '1.3.6.1.4.1.318.1.1.22.4.2',
    isxModularDistSysPower => '1.3.6.1.4.1.318.1.1.22.4.3',
    isxcBasic => '1.3.6.1.2.1.1.25.1',
    isxcStandard => '1.3.6.1.2.1.1.25.2',
    isxcEnterprise => '1.3.6.1.2.1.1.25.3',
    uioSensor => '1.3.6.1.4.1.318.1.1.25.1',
    uioInputContact => '1.3.6.1.4.1.318.1.1.25.2',
    uioOutputRelay => '1.3.6.1.4.1.318.1.1.25.3',
    mconfig => '1.3.6.1.4.1.318.2.1',
    mconfigNumTrapReceivers => '1.3.6.1.4.1.318.2.1.1.0',
    mconfigTrapReceiverTable => '1.3.6.1.4.1.318.2.1.2',
    mconfigTrapReceiverEntry => '1.3.6.1.4.1.318.2.1.2.1',
    trapIndex => '1.3.6.1.4.1.318.2.1.2.1.1',
    receiverAddr => '1.3.6.1.4.1.318.2.1.2.1.2',
    communityString => '1.3.6.1.4.1.318.2.1.2.1.3',
    severity => '1.3.6.1.4.1.318.2.1.2.1.4',
    acceptThisReceiver => '1.3.6.1.4.1.318.2.1.2.1.5',
    receiveTrapType => '1.3.6.1.4.1.318.2.1.2.1.6',
    mconfigBOOTPEnabled => '1.3.6.1.4.1.318.2.1.3.0',
    mconfigTFTPServerIP => '1.3.6.1.4.1.318.2.1.4.0',
    newCodeAuthentViaTFTP => '1.3.6.1.4.1.318.2.1.5.0',
    mconfigClock => '1.3.6.1.4.1.318.2.1.6',
    mconfigClockDate => '1.3.6.1.4.1.318.2.1.6.1.0',
    mconfigClockTime => '1.3.6.1.4.1.318.2.1.6.2.0',
    mcontrol => '1.3.6.1.4.1.318.2.2',
    mcontrolRestartAgent => '1.3.6.1.4.1.318.2.2.1.0',
    mtrapargs => '1.3.6.1.4.1.318.2.3',
    mtrapargsInteger => '1.3.6.1.4.1.318.2.3.1.0',
    mtrapargsIpAddress => '1.3.6.1.4.1.318.2.3.2.0',
    mtrapargsString => '1.3.6.1.4.1.318.2.3.3.0',
    mtrapargsGauge => '1.3.6.1.4.1.318.2.3.4.0',
    mtrapargsTimeTicks => '1.3.6.1.4.1.318.2.3.5.0',
    mtrapargsInteger02 => '1.3.6.1.4.1.318.2.3.6.0',
    mtrapargsInteger03 => '1.3.6.1.4.1.318.2.3.7.0',
    mtrapargsIpAddress02 => '1.3.6.1.4.1.318.2.3.8.0',
    mtrapargsIpAddress03 => '1.3.6.1.4.1.318.2.3.9.0',
    mtrapargsString02 => '1.3.6.1.4.1.318.2.3.10.0',
    mtrapargsString03 => '1.3.6.1.4.1.318.2.3.11.0',
    mtrapargsGauge02 => '1.3.6.1.4.1.318.2.3.12.0',
    mtrapargsGauge03 => '1.3.6.1.4.1.318.2.3.13.0',
    mtrapargsTimeTicks02 => '1.3.6.1.4.1.318.2.3.14.0',
    mtrapargsTimeTicks03 => '1.3.6.1.4.1.318.2.3.15.0',
    mtrapargsString04 => '1.3.6.1.4.1.318.2.3.16.0',
    mtrapargsString05 => '1.3.6.1.4.1.318.2.3.17.0',
    mtrapargsInteger04 => '1.3.6.1.4.1.318.2.3.18.0',
    mtrapargsInteger05 => '1.3.6.1.4.1.318.2.3.19.0',
    mtrapargsString06 => '1.3.6.1.4.1.318.2.3.20.0',
    mtrapargsString07 => '1.3.6.1.4.1.318.2.3.21.0',
    mtrapargsString08 => '1.3.6.1.4.1.318.2.3.22.0',
    mtrapargsOctetString => '1.3.6.1.4.1.318.2.3.23.0',
    mtrapargsOctetString02 => '1.3.6.1.4.1.318.2.3.24.0',
    mtrapargsOctetString03 => '1.3.6.1.4.1.318.2.3.25.0',
    mtrapargsOctetString04 => '1.3.6.1.4.1.318.2.3.26.0',
    mtrapargsOctetString05 => '1.3.6.1.4.1.318.2.3.27.0',
    mtrapargsOctetString06 => '1.3.6.1.4.1.318.2.3.28.0',
    mtrapargsOctetString07 => '1.3.6.1.4.1.318.2.3.29.0',
    mtrapargsOctetString08 => '1.3.6.1.4.1.318.2.3.30.0',
    mfiletransferStatus => '1.3.6.1.4.1.318.2.4.1',
    mfiletransferStatusLastTransferResult => '1.3.6.1.4.1.318.2.4.1.1.0',
    mfiletransferConfigSettings => '1.3.6.1.4.1.318.2.4.2.1',
    mfiletransferConfigSettingsFilename => '1.3.6.1.4.1.318.2.4.2.1.1.0',
    mfiletransferConfigTFTP => '1.3.6.1.4.1.318.2.4.2.2',
    mfiletransferConfigTFTPServerAddress => '1.3.6.1.4.1.318.2.4.2.2.1.0',
    mfiletransferConfigFTP => '1.3.6.1.4.1.318.2.4.2.3',
    mfiletransferConfigFTPServerAddress => '1.3.6.1.4.1.318.2.4.2.3.1.0',
    mfiletransferConfigFTPServerUser => '1.3.6.1.4.1.318.2.4.2.3.2.0',
    mfiletransferConfigFTPServerPassword => '1.3.6.1.4.1.318.2.4.2.3.3.0',
    mfiletransferControl => '1.3.6.1.4.1.318.2.4.3',
    mfiletransferControlInitiateFileTransfer => '1.3.6.1.4.1.318.2.4.3.1.0',
    battManIdent => '1.3.6.1.4.1.318.1.1.16.1',
    battManIdentProductName => '1.3.6.1.4.1.318.1.1.16.1.1.0',
    battManIdentHardwareRev => '1.3.6.1.4.1.318.1.1.16.1.2.0',
    battManIdentFirmwareRev => '1.3.6.1.4.1.318.1.1.16.1.3.0',
    battManIdentDateOfManufacture => '1.3.6.1.4.1.318.1.1.16.1.4.0',
    battManIdentModelNumber => '1.3.6.1.4.1.318.1.1.16.1.5.0',
    battManIdentSerialNumber => '1.3.6.1.4.1.318.1.1.16.1.6.0',
    battManSystemCalib => '1.3.6.1.4.1.318.1.1.16.2',
    battManOhmicValueCorrectionFactor => '1.3.6.1.4.1.318.1.1.16.2.1.0',
    battManUnitCalib => '1.3.6.1.4.1.318.1.1.16.3',
    battManUnitCalibTableSize => '1.3.6.1.4.1.318.1.1.16.3.1.0',
    battManUnitCalibTable => '1.3.6.1.4.1.318.1.1.16.3.2',
    battManUnitCalibEntry => '1.3.6.1.4.1.318.1.1.16.3.2.1',
    battManUnitCalibIndex => '1.3.6.1.4.1.318.1.1.16.3.2.1.1',
    battManUnitSerialNumber => '1.3.6.1.4.1.318.1.1.16.3.2.1.2',
    battManBatteryVoltageZeroCalib => '1.3.6.1.4.1.318.1.1.16.3.2.1.3',
    battManBatteryVoltageSpanCalib => '1.3.6.1.4.1.318.1.1.16.3.2.1.4',
    battManStringCalib => '1.3.6.1.4.1.318.1.1.16.4',
    battManStringCalibTableSize => '1.3.6.1.4.1.318.1.1.16.4.1.0',
    battManStringCalibTable => '1.3.6.1.4.1.318.1.1.16.4.2',
    battManStringCalibEntry => '1.3.6.1.4.1.318.1.1.16.4.2.1',
    battManStringCalibIndex => '1.3.6.1.4.1.318.1.1.16.4.2.1.1',
    battManDCCurrentZeroCalib => '1.3.6.1.4.1.318.1.1.16.4.2.1.2',
    battManACCurrentZeroCalib => '1.3.6.1.4.1.318.1.1.16.4.2.1.3',
    battManProbeRange => '1.3.6.1.4.1.318.1.1.16.4.2.1.4',
    battManBatteryCalib => '1.3.6.1.4.1.318.1.1.16.5',
    battManString1BatteryCalibTableSize => '1.3.6.1.4.1.318.1.1.16.5.1.0',
    battManString1BatteryCalibTable => '1.3.6.1.4.1.318.1.1.16.5.2',
    battManString1BatteryCalibEntry => '1.3.6.1.4.1.318.1.1.16.5.2.1',
    battManString1BatteryCalibIndex => '1.3.6.1.4.1.318.1.1.16.5.2.1.1',
    battManString1BatteryInterTierOhmicValue => '1.3.6.1.4.1.318.1.1.16.5.2.1.2',
    battManString2BatteryCalibTableSize => '1.3.6.1.4.1.318.1.1.16.5.3.0',
    battManString2BatteryCalibTable => '1.3.6.1.4.1.318.1.1.16.5.4',
    battManString2BatteryCalibEntry => '1.3.6.1.4.1.318.1.1.16.5.4.1',
    battManString2BatteryCalibIndex => '1.3.6.1.4.1.318.1.1.16.5.4.1.1',
    battManString2BatteryInterTierOhmicValue => '1.3.6.1.4.1.318.1.1.16.5.4.1.2',
    battManConfig => '1.3.6.1.4.1.318.1.1.16.6',
    battManConfigApplication => '1.3.6.1.4.1.318.1.1.16.6.1.0',
    battManConfigBatteryChemistry => '1.3.6.1.4.1.318.1.1.16.6.2.0',
    battManConfigBatteryAHCapacity => '1.3.6.1.4.1.318.1.1.16.6.3.0',
    battManConfigNumberofStrings => '1.3.6.1.4.1.318.1.1.16.6.4.0',
    battManConfigBatteriesperString => '1.3.6.1.4.1.318.1.1.16.6.5.0',
    battManConfigCellsperBattery => '1.3.6.1.4.1.318.1.1.16.6.6.0',
    battManConfigMinCellVoltage => '1.3.6.1.4.1.318.1.1.16.6.7.0',
    battManConfigMaxCellVoltage => '1.3.6.1.4.1.318.1.1.16.6.8.0',
    battManConfigMaxPilotTempF => '1.3.6.1.4.1.318.1.1.16.6.9.0',
    battManConfigMaxPilotTempC => '1.3.6.1.4.1.318.1.1.16.6.10.0',
    battManConfigMaxAmbientTempF => '1.3.6.1.4.1.318.1.1.16.6.11.0',
    battManConfigMaxAmbientTempC => '1.3.6.1.4.1.318.1.1.16.6.12.0',
    battManConfigMinAmbientTempF => '1.3.6.1.4.1.318.1.1.16.6.13.0',
    battManConfigMinAmbientTempC => '1.3.6.1.4.1.318.1.1.16.6.14.0',
    battManConfigMaxRippleCurrent => '1.3.6.1.4.1.318.1.1.16.6.15.0',
    battManConfigMaxCurrentAcceptanceDeviation => '1.3.6.1.4.1.318.1.1.16.6.16.0',
    battManConfigMonitorWireLength => '1.3.6.1.4.1.318.1.1.16.6.17.0',
    battManConfigDischargeVoltageAlarmLevel => '1.3.6.1.4.1.318.1.1.16.6.18.0',
    battManConfigAutoAnnunciatorReset => '1.3.6.1.4.1.318.1.1.16.6.19.0',
    battManConfigSuspendCellVoltage => '1.3.6.1.4.1.318.1.1.16.6.20.0',
    battManConfigOhmicTestWaitTime => '1.3.6.1.4.1.318.1.1.16.6.21.0',
    battManConfigNumberOfBoosts => '1.3.6.1.4.1.318.1.1.16.6.22.0',
    battManAlarm => '1.3.6.1.4.1.318.1.1.16.7',
    battManAlarmManagementController => '1.3.6.1.4.1.318.1.1.16.7.1.0',
    battManAlarmBatteries => '1.3.6.1.4.1.318.1.1.16.7.2.0',
    battManAlarmCharger => '1.3.6.1.4.1.318.1.1.16.7.3.0',
    battManAlarmEnvironment => '1.3.6.1.4.1.318.1.1.16.7.4.0',
    battManSystemStatus => '1.3.6.1.4.1.318.1.1.16.8',
    battManSystemAmbientTempC => '1.3.6.1.4.1.318.1.1.16.8.1.0',
    battManSystemAmbientTempF => '1.3.6.1.4.1.318.1.1.16.8.2.0',
    battManSystemPilotTempC => '1.3.6.1.4.1.318.1.1.16.8.3.0',
    battManSystemPilotTempF => '1.3.6.1.4.1.318.1.1.16.8.4.0',
    battManSystemAmbientHighTempAlarm => '1.3.6.1.4.1.318.1.1.16.8.5.0',
    battManSystemAmbientLowTempAlarm => '1.3.6.1.4.1.318.1.1.16.8.6.0',
    battManSystemPilotBatteryHighTempAlarm => '1.3.6.1.4.1.318.1.1.16.8.7.0',
    battManSystemPilotProbeDisconnected => '1.3.6.1.4.1.318.1.1.16.8.8.0',
    battManSystemAmbientProbeDisconnected => '1.3.6.1.4.1.318.1.1.16.8.9.0',
    battManSystemConfigurationInvalid => '1.3.6.1.4.1.318.1.1.16.8.10.0',
    battManSystemSuspendVoltage => '1.3.6.1.4.1.318.1.1.16.8.11.0',
    battManInputContactStatus => '1.3.6.1.4.1.318.1.1.16.11',
    battManInputContactTableSize => '1.3.6.1.4.1.318.1.1.16.11.1.0',
    battManInputContactTable => '1.3.6.1.4.1.318.1.1.16.11.2',
    battManInputContactEntry => '1.3.6.1.4.1.318.1.1.16.11.2.1',
    battManInputContactIndex => '1.3.6.1.4.1.318.1.1.16.11.2.1.1',
    battManInputContactName => '1.3.6.1.4.1.318.1.1.16.11.2.1.2',
    battManInputContactAlarmState => '1.3.6.1.4.1.318.1.1.16.11.2.1.3',
    battManInputContactState => '1.3.6.1.4.1.318.1.1.16.11.2.1.4',
    battManInputContactNormalState => '1.3.6.1.4.1.318.1.1.16.11.2.1.5',
    battManInputContactAlarmDelay => '1.3.6.1.4.1.318.1.1.16.11.2.1.6',
    battManStringStatus => '1.3.6.1.4.1.318.1.1.16.9',
    battManStringTableSize => '1.3.6.1.4.1.318.1.1.16.9.1.0',
    battManStringTable => '1.3.6.1.4.1.318.1.1.16.9.2',
    battManStringEntry => '1.3.6.1.4.1.318.1.1.16.9.2.1',
    battManStringIndex => '1.3.6.1.4.1.318.1.1.16.9.2.1.1',
    battManStringCurrent => '1.3.6.1.4.1.318.1.1.16.9.2.1.2',
    battManStringRippleCurrent => '1.3.6.1.4.1.318.1.1.16.9.2.1.3',
    battManStringChargerHighVoltageAlarm => '1.3.6.1.4.1.318.1.1.16.9.2.1.4',
    battManStringChargerLowVoltageAlarm => '1.3.6.1.4.1.318.1.1.16.9.2.1.5',
    battManStringCurrentProbeDisconnected => '1.3.6.1.4.1.318.1.1.16.9.2.1.6',
    battManStringOnBattery => '1.3.6.1.4.1.318.1.1.16.9.2.1.7',
    battManStringHighRippleCurrent => '1.3.6.1.4.1.318.1.1.16.9.2.1.8',
    battManStringVoltage => '1.3.6.1.4.1.318.1.1.16.9.2.1.9',
    battManStringDischargeLess5Seconds => '1.3.6.1.4.1.318.1.1.16.9.2.1.10',
    battManStringDischarge5to10Seconds => '1.3.6.1.4.1.318.1.1.16.9.2.1.11',
    battManStringDischarge10to60Seconds => '1.3.6.1.4.1.318.1.1.16.9.2.1.12',
    battManStringDischargeMore60Seconds => '1.3.6.1.4.1.318.1.1.16.9.2.1.13',
    battManBatteryStatus => '1.3.6.1.4.1.318.1.1.16.10',
    battManString1BatteryTableSize => '1.3.6.1.4.1.318.1.1.16.10.1.0',
    battManString1BatteryTable => '1.3.6.1.4.1.318.1.1.16.10.2',
    battManString1BatteryEntry => '1.3.6.1.4.1.318.1.1.16.10.2.1',
    battManString1BatteryIndex => '1.3.6.1.4.1.318.1.1.16.10.2.1.1',
    battManString1BatteryVoltage => '1.3.6.1.4.1.318.1.1.16.10.2.1.2',
    battManString1BatteryLowestVoltage => '1.3.6.1.4.1.318.1.1.16.10.2.1.3',
    battManString1BatteryCellShorted => '1.3.6.1.4.1.318.1.1.16.10.2.1.4',
    battManString1BatteryOpenFuseOrConnection => '1.3.6.1.4.1.318.1.1.16.10.2.1.5',
    battManString1BatteryLowCapacity => '1.3.6.1.4.1.318.1.1.16.10.2.1.6',
    battManString1BatteryHighOhmicValue => '1.3.6.1.4.1.318.1.1.16.10.2.1.7',
    battManString1BatteryThermalRunaway => '1.3.6.1.4.1.318.1.1.16.10.2.1.8',
    battManString1BatteryDryout => '1.3.6.1.4.1.318.1.1.16.10.2.1.9',
    battManString1BatteryUserHighVoltageAlarm => '1.3.6.1.4.1.318.1.1.16.10.2.1.10',
    battManString1BatteryUserLowVoltageAlarm => '1.3.6.1.4.1.318.1.1.16.10.2.1.11',
    battManString1BatteryChemHighVoltageAlarm => '1.3.6.1.4.1.318.1.1.16.10.2.1.12',
    battManString1BatteryChemLowVoltageAlarm => '1.3.6.1.4.1.318.1.1.16.10.2.1.13',
    battManString1BatteryOpenCell => '1.3.6.1.4.1.318.1.1.16.10.2.1.14',
    battManString2BatteryTableSize => '1.3.6.1.4.1.318.1.1.16.10.3.0',
    battManString2BatteryTable => '1.3.6.1.4.1.318.1.1.16.10.4',
    battManString2BatteryEntry => '1.3.6.1.4.1.318.1.1.16.10.4.1',
    battManString2BatteryIndex => '1.3.6.1.4.1.318.1.1.16.10.4.1.1',
    battManString2BatteryVoltage => '1.3.6.1.4.1.318.1.1.16.10.4.1.2',
    battManString2BatteryLowestVoltage => '1.3.6.1.4.1.318.1.1.16.10.4.1.3',
    battManString2BatteryCellShorted => '1.3.6.1.4.1.318.1.1.16.10.4.1.4',
    battManString2BatteryOpenFuseOrConnection => '1.3.6.1.4.1.318.1.1.16.10.4.1.5',
    battManString2BatteryLowCapacity => '1.3.6.1.4.1.318.1.1.16.10.4.1.6',
    battManString2BatteryHighOhmicValue => '1.3.6.1.4.1.318.1.1.16.10.4.1.7',
    battManString2BatteryThermalRunaway => '1.3.6.1.4.1.318.1.1.16.10.4.1.8',
    battManString2BatteryDryout => '1.3.6.1.4.1.318.1.1.16.10.4.1.9',
    battManString2BatteryUserHighVoltageAlarm => '1.3.6.1.4.1.318.1.1.16.10.4.1.10',
    battManString2BatteryUserLowVoltageAlarm => '1.3.6.1.4.1.318.1.1.16.10.4.1.11',
    battManString2BatteryChemHighVoltageAlarm => '1.3.6.1.4.1.318.1.1.16.10.4.1.12',
    battManString2BatteryChemLowVoltageAlarm => '1.3.6.1.4.1.318.1.1.16.10.4.1.13',
    battManString2BatteryOpenCell => '1.3.6.1.4.1.318.1.1.16.10.4.1.14',
    battManControl => '1.3.6.1.4.1.318.1.1.16.12',
    battManRemoteAnnunciatorReset => '1.3.6.1.4.1.318.1.1.16.12.1.0',
    battManResetChargeCurrentDeviationBenchmark => '1.3.6.1.4.1.318.1.1.16.12.2.0',
    battManResetLowestDischargeVoltages => '1.3.6.1.4.1.318.1.1.16.12.3.0',
    battManResetDischargeCounters => '1.3.6.1.4.1.318.1.1.16.12.4.0',
    battManTestResults => '1.3.6.1.4.1.318.1.1.16.13',
    battManString1OhmicValueLastDischargeInfo => '1.3.6.1.4.1.318.1.1.16.13.1.0',
    battManString1OhmicValueTableSize => '1.3.6.1.4.1.318.1.1.16.13.2.0',
    battManString1OhmicValueTable => '1.3.6.1.4.1.318.1.1.16.13.3',
    battManString1OhmicValueEntry => '1.3.6.1.4.1.318.1.1.16.13.3.1',
    battManString1OhmicValueIndex => '1.3.6.1.4.1.318.1.1.16.13.3.1.1',
    battManString1OhmicValueData => '1.3.6.1.4.1.318.1.1.16.13.3.1.2',
    battManString1ResponseTestChangeTableSize => '1.3.6.1.4.1.318.1.1.16.13.4.0',
    battManString1ResponseTestChangeTable => '1.3.6.1.4.1.318.1.1.16.13.5',
    battManString1ResponseTestChangeEntry => '1.3.6.1.4.1.318.1.1.16.13.5.1',
    battManString1ResponseTestChangeIndex => '1.3.6.1.4.1.318.1.1.16.13.5.1.1',
    battManString1ResponseTestChangeData => '1.3.6.1.4.1.318.1.1.16.13.5.1.2',
    battManString2OhmicValueLastDischargeInfo => '1.3.6.1.4.1.318.1.1.16.13.6.0',
    battManString2OhmicValueTableSize => '1.3.6.1.4.1.318.1.1.16.13.7.0',
    battManString2OhmicValueTable => '1.3.6.1.4.1.318.1.1.16.13.8',
    battManString2OhmicValueEntry => '1.3.6.1.4.1.318.1.1.16.13.8.1',
    battManString2OhmicValueIndex => '1.3.6.1.4.1.318.1.1.16.13.8.1.1',
    battManString2OhmicValueData => '1.3.6.1.4.1.318.1.1.16.13.8.1.2',
    battManString2ResponseTestChangeTableSize => '1.3.6.1.4.1.318.1.1.16.13.9.0',
    battManString2ResponseTestChangeTable => '1.3.6.1.4.1.318.1.1.16.13.10',
    battManString2ResponseTestChangeEntry => '1.3.6.1.4.1.318.1.1.16.13.10.1',
    battManString2ResponseTestChangeIndex => '1.3.6.1.4.1.318.1.1.16.13.10.1.1',
    battManString2ResponseTestChangeData => '1.3.6.1.4.1.318.1.1.16.13.10.1.2',
    battManUnitStatus => '1.3.6.1.4.1.318.1.1.16.14',
    battManUnitStatusTableSize => '1.3.6.1.4.1.318.1.1.16.14.1.0',
    battManUnitStatusTable => '1.3.6.1.4.1.318.1.1.16.14.2',
    battManUnitStatusEntry => '1.3.6.1.4.1.318.1.1.16.14.2.1',
    battManUnitStatusIndex => '1.3.6.1.4.1.318.1.1.16.14.2.1.1',
    battManUnitStatusSerialNumber => '1.3.6.1.4.1.318.1.1.16.14.2.1.2',
    battManUnitHardwareRev => '1.3.6.1.4.1.318.1.1.16.14.2.1.3',
    battManUnitFirmwareRev => '1.3.6.1.4.1.318.1.1.16.14.2.1.4',
    battManUnitCommLoss => '1.3.6.1.4.1.318.1.1.16.14.2.1.5',
    battManUnitRelayStuck => '1.3.6.1.4.1.318.1.1.16.14.2.1.6',
    xPDUIdent => '1.3.6.1.4.1.318.1.1.15.1',
    xPDUIdentProductName => '1.3.6.1.4.1.318.1.1.15.1.1.0',
    xPDUIdentHardwareRev => '1.3.6.1.4.1.318.1.1.15.1.2.0',
    xPDUIdentFirmwareAppRev => '1.3.6.1.4.1.318.1.1.15.1.3.0',
    xPDUIdentFirmwareAppOSRev => '1.3.6.1.4.1.318.1.1.15.1.4.0',
    xPDUIdentFirmwareControllerRev => '1.3.6.1.4.1.318.1.1.15.1.5.0',
    xPDUIdentDateOfManufacture => '1.3.6.1.4.1.318.1.1.15.1.6.0',
    xPDUIdentModelNumber => '1.3.6.1.4.1.318.1.1.15.1.7.0',
    xPDUIdentSerialNumber => '1.3.6.1.4.1.318.1.1.15.1.8.0',
    xPDUDevice => '1.3.6.1.4.1.318.1.1.15.2',
    xPDUDeviceNominalMainInputVoltage => '1.3.6.1.4.1.318.1.1.15.2.1.0',
    xPDUDeviceServiceType => '1.3.6.1.4.1.318.1.1.15.2.2.0',
    xPDUDeviceNominalOutputVoltage => '1.3.6.1.4.1.318.1.1.15.2.3.0',
    xPDUDeviceMainInputBreakerRating => '1.3.6.1.4.1.318.1.1.15.2.4.0',
    xPDUDevicePanelBreakerRating => '1.3.6.1.4.1.318.1.1.15.2.5.0',
    xPDUDeviceTransformerPresent => '1.3.6.1.4.1.318.1.1.15.2.6.0',
    xPDUDeviceLoadTieBreakerPresent => '1.3.6.1.4.1.318.1.1.15.2.7.0',
    xPDUDeviceLoadTestPortPresent => '1.3.6.1.4.1.318.1.1.15.2.8.0',
    xPDUDeviceFusesPresent => '1.3.6.1.4.1.318.1.1.15.2.9.0',
    xPDUDeviceFansPresent => '1.3.6.1.4.1.318.1.1.15.2.10.0',
    xPDUDeviceBypassInputPresent => '1.3.6.1.4.1.318.1.1.15.2.11.0',
    xPDUDeviceCrossTieOutputPresent => '1.3.6.1.4.1.318.1.1.15.2.12.0',
    xPDUDeviceEarthGroundMonitorPresent => '1.3.6.1.4.1.318.1.1.15.2.13.0',
    xPDUDeviceInfraStruXureType => '1.3.6.1.4.1.318.1.1.15.2.14.0',
    xPDUMainInput => '1.3.6.1.4.1.318.1.1.15.3.1',
    xPDUMainInputOverVoltThreshold => '1.3.6.1.4.1.318.1.1.15.3.1.1.0',
    xPDUMainInputUnderVoltThreshold => '1.3.6.1.4.1.318.1.1.15.3.1.2.0',
    xPDUMainInputVoltageTableSize => '1.3.6.1.4.1.318.1.1.15.3.1.3.0',
    xPDUMainInputVoltagePhaseTable => '1.3.6.1.4.1.318.1.1.15.3.1.4',
    xPDUMainInputVoltagePhaseEntry => '1.3.6.1.4.1.318.1.1.15.3.1.4.1',
    xPDUMainInputVoltagePhaseIndex => '1.3.6.1.4.1.318.1.1.15.3.1.4.1.1',
    xPDUMainInputVoltageLtoL => '1.3.6.1.4.1.318.1.1.15.3.1.4.1.2',
    xPDUMainInputVoltageLtoN => '1.3.6.1.4.1.318.1.1.15.3.1.4.1.3',
    xPDUBypassInput => '1.3.6.1.4.1.318.1.1.15.3.2',
    xPDUBypassInputOverVoltThreshold => '1.3.6.1.4.1.318.1.1.15.3.2.1.0',
    xPDUBypassInputUnderVoltThreshold => '1.3.6.1.4.1.318.1.1.15.3.2.2.0',
    xPDUBypassInputVoltagePhaseTableSize => '1.3.6.1.4.1.318.1.1.15.3.2.3.0',
    xPDUBypassInputVoltagePhaseTable => '1.3.6.1.4.1.318.1.1.15.3.2.4',
    xPDUBypassInputVoltagePhaseEntry => '1.3.6.1.4.1.318.1.1.15.3.2.4.1',
    xPDUBypassInputVoltagePhaseIndex => '1.3.6.1.4.1.318.1.1.15.3.2.4.1.1',
    xPDUBypassInputVoltageLtoL => '1.3.6.1.4.1.318.1.1.15.3.2.4.1.2',
    xPDUBypassInputVoltageLtoN => '1.3.6.1.4.1.318.1.1.15.3.2.4.1.3',
    xPDUUPSInput => '1.3.6.1.4.1.318.1.1.15.3.3',
    xPDUUPSInputVoltagePhaseTableSize => '1.3.6.1.4.1.318.1.1.15.3.3.1.0',
    xPDUUPSInputVoltagePhaseTable => '1.3.6.1.4.1.318.1.1.15.3.3.2',
    xPDUUPSInputVoltagePhaseEntry => '1.3.6.1.4.1.318.1.1.15.3.3.2.1',
    xPDUUPSInputVoltagePhaseIndex => '1.3.6.1.4.1.318.1.1.15.3.3.2.1.1',
    xPDUUPSInputVoltageLtoNPresent => '1.3.6.1.4.1.318.1.1.15.3.3.2.1.2',
    xPDUSystemOutput => '1.3.6.1.4.1.318.1.1.15.3.4',
    xPDUSystemOutputFrequency => '1.3.6.1.4.1.318.1.1.15.3.4.1.0',
    xPDUSystemOutputNeutralCurrent => '1.3.6.1.4.1.318.1.1.15.3.4.2.0',
    xPDUSystemOutputTotalPower => '1.3.6.1.4.1.318.1.1.15.3.4.3.0',
    xPDUSystemOutputTotalApparentPower => '1.3.6.1.4.1.318.1.1.15.3.4.4.0',
    xPDUSystemOutputTotalPowerFactor => '1.3.6.1.4.1.318.1.1.15.3.4.5.0',
    xPDUSystemOutputFrequencyTolerance => '1.3.6.1.4.1.318.1.1.15.3.4.6.0',
    xPDUSystemOutputMaxKWPower => '1.3.6.1.4.1.318.1.1.15.3.4.7.0',
    xPDUSystemOutputOverVoltThreshold => '1.3.6.1.4.1.318.1.1.15.3.4.8.0',
    xPDUSystemOutputUnderVoltThreshold => '1.3.6.1.4.1.318.1.1.15.3.4.9.0',
    xPDUSystemOutputOverCurrentThreshold => '1.3.6.1.4.1.318.1.1.15.3.4.10.0',
    xPDUSystemOutputOverCurrentNeutralThreshold => '1.3.6.1.4.1.318.1.1.15.3.4.11.0',
    xPDUSystemOutputUnderCurrentThreshold => '1.3.6.1.4.1.318.1.1.15.3.4.12.0',
    xPDUSystemOutputTableSize => '1.3.6.1.4.1.318.1.1.15.3.4.13.0',
    xPDUSystemOutputPhaseTable => '1.3.6.1.4.1.318.1.1.15.3.4.14',
    xPDUSystemOutputPhaseEntry => '1.3.6.1.4.1.318.1.1.15.3.4.14.1',
    xPDUSystemOutputPhaseIndex => '1.3.6.1.4.1.318.1.1.15.3.4.14.1.1',
    xPDUSystemOutputVoltageLtoL => '1.3.6.1.4.1.318.1.1.15.3.4.14.1.2',
    xPDUSystemOutputVoltageLtoN => '1.3.6.1.4.1.318.1.1.15.3.4.14.1.3',
    xPDUSystemOutputPhaseCurrent => '1.3.6.1.4.1.318.1.1.15.3.4.14.1.4',
    xPDUSystemOutputPower => '1.3.6.1.4.1.318.1.1.15.3.4.14.1.5',
    xPDUSystemOutputApparentPower => '1.3.6.1.4.1.318.1.1.15.3.4.14.1.6',
    xPDUSystemOutputPowerFactor => '1.3.6.1.4.1.318.1.1.15.3.4.14.1.7',
    xPDUGroundMonitorPoint => '1.3.6.1.4.1.318.1.1.15.3.5',
    xPDUGroundCurrent => '1.3.6.1.4.1.318.1.1.15.3.5.1.0',
    xPDUGroundCurrentThreshold => '1.3.6.1.4.1.318.1.1.15.3.5.2.0',
    xPDUSystemBreakers => '1.3.6.1.4.1.318.1.1.15.4.1',
    xPDUSystemBreakerTableSize => '1.3.6.1.4.1.318.1.1.15.4.1.1.0',
    xPDUSystemBreakerTable => '1.3.6.1.4.1.318.1.1.15.4.1.2',
    xPDUSystemBreakerEntry => '1.3.6.1.4.1.318.1.1.15.4.1.2.1',
    xPDUSystemBreakerTableIndex => '1.3.6.1.4.1.318.1.1.15.4.1.2.1.1',
    xPDUSystemBreakerDescription => '1.3.6.1.4.1.318.1.1.15.4.1.2.1.2',
    xPDUSystemBreakerPosition => '1.3.6.1.4.1.318.1.1.15.4.1.2.1.3',
    xPDUBranchBreakers => '1.3.6.1.4.1.318.1.1.15.4.2',
    xPDUNumOfBranchBreakers => '1.3.6.1.4.1.318.1.1.15.4.2.1.0',
    xPDUBranchBreakerTableSize => '1.3.6.1.4.1.318.1.1.15.4.2.2.0',
    xPDUBranchBreakerTable => '1.3.6.1.4.1.318.1.1.15.4.2.3',
    xPDUBranchBreakerEntry => '1.3.6.1.4.1.318.1.1.15.4.2.3.1',
    xPDUBranchBreakerTableIndex => '1.3.6.1.4.1.318.1.1.15.4.2.3.1.1',
    xPDUBranchBreakerRating => '1.3.6.1.4.1.318.1.1.15.4.2.3.1.2',
    xPDUBranchBreakerRDPFeed => '1.3.6.1.4.1.318.1.1.15.4.2.3.1.3',
    xPDUBranchBreakerTieIndicator => '1.3.6.1.4.1.318.1.1.15.4.2.3.1.4',
    xPDUBranchBreakerCurrent => '1.3.6.1.4.1.318.1.1.15.4.2.3.1.5',
    xPDUBranchBreakerOverCurrentThreshold => '1.3.6.1.4.1.318.1.1.15.4.2.3.1.6',
    xPDUBranchBreakerUnderCurrentThreshold => '1.3.6.1.4.1.318.1.1.15.4.2.3.1.7',
    xPDUBranchBreakerMaxCurrentThreshold => '1.3.6.1.4.1.318.1.1.15.4.2.3.1.8',
    xPDUBranchBreakerMinCurrentThreshold => '1.3.6.1.4.1.318.1.1.15.4.2.3.1.9',
    xPDUBranchBreakerName => '1.3.6.1.4.1.318.1.1.15.4.2.3.1.10',
    xPDUBranchBreakerLocation => '1.3.6.1.4.1.318.1.1.15.4.2.3.1.11',
    xPDUInputContacts => '1.3.6.1.4.1.318.1.1.15.5',
    xPDUInputContactNumContacts => '1.3.6.1.4.1.318.1.1.15.5.1.0',
    xPDUInputContactTableSize => '1.3.6.1.4.1.318.1.1.15.5.2.0',
    xPDUInputContactTable => '1.3.6.1.4.1.318.1.1.15.5.3',
    xPDUInputContactEntry => '1.3.6.1.4.1.318.1.1.15.5.3.1',
    xPDUInputContactNumber => '1.3.6.1.4.1.318.1.1.15.5.3.1.1',
    xPDUInputContactName => '1.3.6.1.4.1.318.1.1.15.5.3.1.2',
    xPDUInputContactNormalState => '1.3.6.1.4.1.318.1.1.15.5.3.1.3',
    xPDUInputContactCurrentState => '1.3.6.1.4.1.318.1.1.15.5.3.1.4',
    xPDUOutputRelays => '1.3.6.1.4.1.318.1.1.15.6',
    xPDUOutputRelaysNumRelays => '1.3.6.1.4.1.318.1.1.15.6.1.0',
    xPDUOutputRelaysTableSize => '1.3.6.1.4.1.318.1.1.15.6.2.0',
    xPDUOutputRelayTable => '1.3.6.1.4.1.318.1.1.15.6.3',
    xPDUOutputRelayEntry => '1.3.6.1.4.1.318.1.1.15.6.3.1',
    xPDUOutputRelayNumber => '1.3.6.1.4.1.318.1.1.15.6.3.1.1',
    xPDUOutputRelayName => '1.3.6.1.4.1.318.1.1.15.6.3.1.2',
    xPDUOutputRelayNormalState => '1.3.6.1.4.1.318.1.1.15.6.3.1.3',
    xPDUOutputRelayCurrentState => '1.3.6.1.4.1.318.1.1.15.6.3.1.4',
    xPDUMiscGroup => '1.3.6.1.4.1.318.1.1.15.7',
    xPDUEPOMode => '1.3.6.1.4.1.318.1.1.15.7.1.0',
    xPDUTransformTempStatus => '1.3.6.1.4.1.318.1.1.15.7.2.0',
    xPDUCoolingFanStatus => '1.3.6.1.4.1.318.1.1.15.7.3.0',
    xATSIdent => '1.3.6.1.4.1.318.1.1.17.1',
    xATSIdentProductName => '1.3.6.1.4.1.318.1.1.17.1.1.0',
    xATSIdentHardwareRev => '1.3.6.1.4.1.318.1.1.17.1.2.0',
    xATSIdentFirmwareAppRev => '1.3.6.1.4.1.318.1.1.17.1.3.0',
    xATSIdentFirmwareAppOSRev => '1.3.6.1.4.1.318.1.1.17.1.4.0',
    xATSIdentFirmwareControllerRev => '1.3.6.1.4.1.318.1.1.17.1.5.0',
    xATSIdentDateOfManufacture => '1.3.6.1.4.1.318.1.1.17.1.6.0',
    xATSIdentModelNumber => '1.3.6.1.4.1.318.1.1.17.1.7.0',
    xATSIdentSerialNumber => '1.3.6.1.4.1.318.1.1.17.1.8.0',
    xATSDevice => '1.3.6.1.4.1.318.1.1.17.2',
    xATSDeviceServiceType => '1.3.6.1.4.1.318.1.1.17.2.1.0',
    xATSDeviceNominalVoltage => '1.3.6.1.4.1.318.1.1.17.2.2.0',
    xATSDeviceNominalFrequency => '1.3.6.1.4.1.318.1.1.17.2.3.0',
    xATSDeviceTransferSwitchRating => '1.3.6.1.4.1.318.1.1.17.2.4.0',
    xATSDeviceDCBackUpPresent => '1.3.6.1.4.1.318.1.1.17.2.5.0',
    xATSSwitchStatus => '1.3.6.1.4.1.318.1.1.17.3.1',
    xATSSwitchStatusSelectedSource => '1.3.6.1.4.1.318.1.1.17.3.1.1.0',
    xATSSwitchStatusOperationalMode => '1.3.6.1.4.1.318.1.1.17.3.1.2.0',
    xATSSwitchStatusAutomaticOperationSwitch => '1.3.6.1.4.1.318.1.1.17.3.1.3.0',
    xATSSwitchStatusEngineStartSignal => '1.3.6.1.4.1.318.1.1.17.3.1.4.0',
    xATSSwitchSettings => '1.3.6.1.4.1.318.1.1.17.3.2',
    xATSSwitchSettingsLowVoltageTransferPoint => '1.3.6.1.4.1.318.1.1.17.3.2.1.0',
    xATSSwitchSettingsHighVoltageTransferPoint => '1.3.6.1.4.1.318.1.1.17.3.2.2.0',
    xATSSwitchSettingsMaxFrequencyDeviation => '1.3.6.1.4.1.318.1.1.17.3.2.3.0',
    xATSSwitchSettingsMinPhaseBalance => '1.3.6.1.4.1.318.1.1.17.3.2.4.0',
    xATSSwitchSettingsNominalRotation => '1.3.6.1.4.1.318.1.1.17.3.2.5.0',
    xATSSwitchSettingsAllowClosedTransfer => '1.3.6.1.4.1.318.1.1.17.3.2.6.0',
    xATSSwitchSettingsMaxSyncTime => '1.3.6.1.4.1.318.1.1.17.3.2.7.0',
    xATSSwitchSettingsNeutralTransferTime => '1.3.6.1.4.1.318.1.1.17.3.2.8.0',
    xATSSwitchSettingsClearLatchedAlarms => '1.3.6.1.4.1.318.1.1.17.3.2.9.0',
    xATSSwitchSettingsSetToFactoryDefaults => '1.3.6.1.4.1.318.1.1.17.3.2.10.0',
    xATSSwitchTimers => '1.3.6.1.4.1.318.1.1.17.3.3',
    xATSSwitchTimersTableSize => '1.3.6.1.4.1.318.1.1.17.3.3.1.0',
    xATSSwitchTimersTable => '1.3.6.1.4.1.318.1.1.17.3.3.2',
    xATSSwitchTimersEntry => '1.3.6.1.4.1.318.1.1.17.3.3.2.1',
    xATSSwitchTimersIndex => '1.3.6.1.4.1.318.1.1.17.3.3.2.1.1',
    xATSSwitchTimersName => '1.3.6.1.4.1.318.1.1.17.3.3.2.1.2',
    xATSSwitchTimersAbort => '1.3.6.1.4.1.318.1.1.17.3.3.2.1.3',
    xATSSwitchTimersStatus => '1.3.6.1.4.1.318.1.1.17.3.3.2.1.4',
    xATSSwitchTimersRemainingTime => '1.3.6.1.4.1.318.1.1.17.3.3.2.1.5',
    xATSSwitchTimersDelaySetting => '1.3.6.1.4.1.318.1.1.17.3.3.2.1.6',
    xATSSwitchBlockMap => '1.3.6.1.4.1.318.1.1.17.3.4',
    xATSSwitchBlockMapTableSize => '1.3.6.1.4.1.318.1.1.17.3.4.1.0',
    xATSSwitchBlockMapTable => '1.3.6.1.4.1.318.1.1.17.3.4.2',
    xATSSwitchBlockMapEntry => '1.3.6.1.4.1.318.1.1.17.3.4.2.1',
    xATSSwitchBlockMapIndex => '1.3.6.1.4.1.318.1.1.17.3.4.2.1.1',
    xATSSwitchBlockMapName => '1.3.6.1.4.1.318.1.1.17.3.4.2.1.2',
    xATSSwitchBlockMapStatus => '1.3.6.1.4.1.318.1.1.17.3.4.2.1.3',
    xATSSwitchBlockMapSetting => '1.3.6.1.4.1.318.1.1.17.3.4.2.1.4',
    xATSSwitchStatistics => '1.3.6.1.4.1.318.1.1.17.3.5',
    xATSSwitchStatisticsTableSize => '1.3.6.1.4.1.318.1.1.17.3.5.1.0',
    xATSSwitchStatisticsTable => '1.3.6.1.4.1.318.1.1.17.3.5.2',
    xATSSwitchStatisticsEntry => '1.3.6.1.4.1.318.1.1.17.3.5.2.1',
    xATSSwitchStatisticsIndex => '1.3.6.1.4.1.318.1.1.17.3.5.2.1.1',
    xATSSwitchStatisticsName => '1.3.6.1.4.1.318.1.1.17.3.5.2.1.2',
    xATSSwitchStatisticsValue => '1.3.6.1.4.1.318.1.1.17.3.5.2.1.3',
    xATSSwitchStatisticsReset => '1.3.6.1.4.1.318.1.1.17.3.5.2.1.4',
    xATSSource1 => '1.3.6.1.4.1.318.1.1.17.4.1',
    xATSSource1Name => '1.3.6.1.4.1.318.1.1.17.4.1.1.0',
    xATSSource1Position => '1.3.6.1.4.1.318.1.1.17.4.1.2.0',
    xATSSource1Frequency => '1.3.6.1.4.1.318.1.1.17.4.1.3.0',
    xATSSource1Quality => '1.3.6.1.4.1.318.1.1.17.4.1.4.0',
    xATSSource1Rotation => '1.3.6.1.4.1.318.1.1.17.4.1.5.0',
    xATSSource1TableSize => '1.3.6.1.4.1.318.1.1.17.4.1.6.0',
    xATSSource1PhaseTable => '1.3.6.1.4.1.318.1.1.17.4.1.7',
    xATSSource1PhaseEntry => '1.3.6.1.4.1.318.1.1.17.4.1.7.1',
    xATSSource1Index => '1.3.6.1.4.1.318.1.1.17.4.1.7.1.1',
    xATSSource1VoltageLtoL => '1.3.6.1.4.1.318.1.1.17.4.1.7.1.2',
    xATSSource1VoltageLtoN => '1.3.6.1.4.1.318.1.1.17.4.1.7.1.3',
    xATSSource2 => '1.3.6.1.4.1.318.1.1.17.4.2',
    xATSSource2Name => '1.3.6.1.4.1.318.1.1.17.4.2.1.0',
    xATSSource2Position => '1.3.6.1.4.1.318.1.1.17.4.2.2.0',
    xATSSource2Frequency => '1.3.6.1.4.1.318.1.1.17.4.2.3.0',
    xATSSource2Quality => '1.3.6.1.4.1.318.1.1.17.4.2.4.0',
    xATSSource2Rotation => '1.3.6.1.4.1.318.1.1.17.4.2.5.0',
    xATSSource2TableSize => '1.3.6.1.4.1.318.1.1.17.4.2.6.0',
    xATSSource2PhaseTable => '1.3.6.1.4.1.318.1.1.17.4.2.7',
    xATSSource2PhaseEntry => '1.3.6.1.4.1.318.1.1.17.4.2.7.1',
    xATSSource2Index => '1.3.6.1.4.1.318.1.1.17.4.2.7.1.1',
    xATSSource2VoltageLtoL => '1.3.6.1.4.1.318.1.1.17.4.2.7.1.2',
    xATSSource2VoltageLtoN => '1.3.6.1.4.1.318.1.1.17.4.2.7.1.3',
    xATSSystemOutput => '1.3.6.1.4.1.318.1.1.17.4.3',
    xATSSystemOutputFrequency => '1.3.6.1.4.1.318.1.1.17.4.3.1.0',
    xATSSystemOutputTotalPower => '1.3.6.1.4.1.318.1.1.17.4.3.2.0',
    xATSSystemOutputTotalApparentPower => '1.3.6.1.4.1.318.1.1.17.4.3.3.0',
    xATSSystemOutputTotalPowerFactor => '1.3.6.1.4.1.318.1.1.17.4.3.4.0',
    xATSSystemOutputFrequencyTolerance => '1.3.6.1.4.1.318.1.1.17.4.3.5.0',
    xATSSystemOutputOverVoltThreshold => '1.3.6.1.4.1.318.1.1.17.4.3.6.0',
    xATSSystemOutputUnderVoltThreshold => '1.3.6.1.4.1.318.1.1.17.4.3.7.0',
    xATSSystemOutputOverCurrentThreshold => '1.3.6.1.4.1.318.1.1.17.4.3.8.0',
    xATSSystemOutputUnderCurrentThreshold => '1.3.6.1.4.1.318.1.1.17.4.3.9.0',
    xATSSystemOutputAlarmDelayThreshold => '1.3.6.1.4.1.318.1.1.17.4.3.10.0',
    xATSSystemOutputTableSize => '1.3.6.1.4.1.318.1.1.17.4.3.11.0',
    xATSSystemOutputPhaseTable => '1.3.6.1.4.1.318.1.1.17.4.3.12',
    xATSSystemOutputPhaseEntry => '1.3.6.1.4.1.318.1.1.17.4.3.12.1',
    xATSSystemOutputPhaseIndex => '1.3.6.1.4.1.318.1.1.17.4.3.12.1.1',
    xATSSystemOutputVoltageLtoL => '1.3.6.1.4.1.318.1.1.17.4.3.12.1.2',
    xATSSystemOutputVoltageLtoN => '1.3.6.1.4.1.318.1.1.17.4.3.12.1.3',
    xATSSystemOutputPhaseCurrent => '1.3.6.1.4.1.318.1.1.17.4.3.12.1.4',
    xATSSystemOutputPower => '1.3.6.1.4.1.318.1.1.17.4.3.12.1.5',
    xATSSystemOutputApparentPower => '1.3.6.1.4.1.318.1.1.17.4.3.12.1.6',
    xATSSystemOutputPowerFactor => '1.3.6.1.4.1.318.1.1.17.4.3.12.1.7',
    xATSTestingStatus => '1.3.6.1.4.1.318.1.1.17.5.1',
    xATSTestingStatusSelectTestProcess => '1.3.6.1.4.1.318.1.1.17.5.1.1.0',
    xATSTestingStatusTestStatus => '1.3.6.1.4.1.318.1.1.17.5.1.2.0',
    xATSTestingStatusProfileWarmupTime => '1.3.6.1.4.1.318.1.1.17.5.1.3.0',
    xATSTestingStatusProfileLoadedTime => '1.3.6.1.4.1.318.1.1.17.5.1.4.0',
    xATSTestingStatusProfileUnloadedTime => '1.3.6.1.4.1.318.1.1.17.5.1.5.0',
    xATSTestingResults => '1.3.6.1.4.1.318.1.1.17.5.2',
    xATSTestingResultsLastDateOfTest => '1.3.6.1.4.1.318.1.1.17.5.2.1.0',
    xATSTestingResultsLastResult => '1.3.6.1.4.1.318.1.1.17.5.2.2.0',
    xATSTestingResultsTestLastTestTime => '1.3.6.1.4.1.318.1.1.17.5.2.3.0',
    xATSTestingResultsLastCrankDuration => '1.3.6.1.4.1.318.1.1.17.5.2.4.0',
    xATSTestingResultsLastWarmupDuration => '1.3.6.1.4.1.318.1.1.17.5.2.5.0',
    xATSTestingResultsLastLoadedDuration => '1.3.6.1.4.1.318.1.1.17.5.2.6.0',
    xATSTestingResultsLastUnloadedDuration => '1.3.6.1.4.1.318.1.1.17.5.2.7.0',
    xATSTestingSchedule => '1.3.6.1.4.1.318.1.1.17.5.3',
    xATSTestingScheduleFrequency => '1.3.6.1.4.1.318.1.1.17.5.3.1.0',
    xATSTestingScheduleTestDay => '1.3.6.1.4.1.318.1.1.17.5.3.2.0',
    xATSTestingScheduleTestTime => '1.3.6.1.4.1.318.1.1.17.5.3.3.0',
    xATSTestingScheduleTestWithLoadInterval => '1.3.6.1.4.1.318.1.1.17.5.3.4.0',
    xATSTestingScheduleTestWithLoadSelectMonth => '1.3.6.1.4.1.318.1.1.17.5.3.5.0',
    xATSTestingScheduleNextTestDate => '1.3.6.1.4.1.318.1.1.17.5.3.6.0',
    xATSTestingSimulatePowerFail => '1.3.6.1.4.1.318.1.1.17.5.4',
    xATSTestingSimulatePowerFailTest => '1.3.6.1.4.1.318.1.1.17.5.4.1.0',
    xATSTestingSimulatePowerFailTimeRemaining => '1.3.6.1.4.1.318.1.1.17.5.4.2.0',
    xATSInputContacts => '1.3.6.1.4.1.318.1.1.17.6',
    xATSInputContactNumContacts => '1.3.6.1.4.1.318.1.1.17.6.1.0',
    xATSInputContactTableSize => '1.3.6.1.4.1.318.1.1.17.6.2.0',
    xATSInputContactTable => '1.3.6.1.4.1.318.1.1.17.6.3',
    xATSInputContactEntry => '1.3.6.1.4.1.318.1.1.17.6.3.1',
    xATSInputContactNumber => '1.3.6.1.4.1.318.1.1.17.6.3.1.1',
    xATSInputContactName => '1.3.6.1.4.1.318.1.1.17.6.3.1.2',
    xATSInputContactNormalState => '1.3.6.1.4.1.318.1.1.17.6.3.1.3',
    xATSInputContactCurrentState => '1.3.6.1.4.1.318.1.1.17.6.3.1.4',
    xATSOutputRelays => '1.3.6.1.4.1.318.1.1.17.7',
    xATSOutputRelayNumRelays => '1.3.6.1.4.1.318.1.1.17.7.1.0',
    xATSOutputRelayTableSize => '1.3.6.1.4.1.318.1.1.17.7.2.0',
    xATSOutputRelayTable => '1.3.6.1.4.1.318.1.1.17.7.3',
    xATSOutputRelayEntry => '1.3.6.1.4.1.318.1.1.17.7.3.1',
    xATSOutputRelayNumber => '1.3.6.1.4.1.318.1.1.17.7.3.1.1',
    xATSOutputRelayName => '1.3.6.1.4.1.318.1.1.17.7.3.1.2',
    xATSOutputRelayNormalState => '1.3.6.1.4.1.318.1.1.17.7.3.1.3',
    xATSOutputRelayCurrentState => '1.3.6.1.4.1.318.1.1.17.7.3.1.4',
    xATSGeneratorIdent => '1.3.6.1.4.1.318.1.1.18.1.1',
    xATSGeneratorIdentModelNumber => '1.3.6.1.4.1.318.1.1.18.1.1.1.0',
    xATSGeneratorIdentSerialNumber => '1.3.6.1.4.1.318.1.1.18.1.1.2.0',
    xATSGeneratorIdentDateofManufacture => '1.3.6.1.4.1.318.1.1.18.1.1.3.0',
    xATSGeneratorIdentVoltageConfiguration => '1.3.6.1.4.1.318.1.1.18.1.1.4.0',
    xATSGeneratorIdentMaxPowerRating => '1.3.6.1.4.1.318.1.1.18.1.1.5.0',
    xATSGeneratorIdentAlternatorFrequency => '1.3.6.1.4.1.318.1.1.18.1.1.6.0',
    xATSGeneratorStatus => '1.3.6.1.4.1.318.1.1.18.1.2',
    xATSGeneratorStatusGeneratorName => '1.3.6.1.4.1.318.1.1.18.1.2.1.0',
    xATSGeneratorStatusOperational => '1.3.6.1.4.1.318.1.1.18.1.2.2.0',
    xATSGeneratorStatusModeSwitchPosition => '1.3.6.1.4.1.318.1.1.18.1.2.3.0',
    xATSGeneratorStatusRemoteStart => '1.3.6.1.4.1.318.1.1.18.1.2.4.0',
    xATSGeneratorAdvStatus => '1.3.6.1.4.1.318.1.1.18.1.3',
    xATSGeneratorAdvStatusBatteryVoltage => '1.3.6.1.4.1.318.1.1.18.1.3.1.0',
    xATSGeneratorAdvStatusOilPressure => '1.3.6.1.4.1.318.1.1.18.1.3.2.0',
    xATSGeneratorAdvStatusCoolantTemperature => '1.3.6.1.4.1.318.1.1.18.1.3.3.0',
    xATSGeneratorAdvStatusEngineRPM => '1.3.6.1.4.1.318.1.1.18.1.3.4.0',
    xATSGeneratorAdvStatusOilLevel => '1.3.6.1.4.1.318.1.1.18.1.3.5.0',
    xATSGeneratorAdvStatusCoolantLevel => '1.3.6.1.4.1.318.1.1.18.1.3.6.0',
    xATSGeneratorOutput => '1.3.6.1.4.1.318.1.1.18.1.4',
    xATSGeneratorOutputFrequency => '1.3.6.1.4.1.318.1.1.18.1.4.1.0',
    xATSGeneratorOutputTotalPower => '1.3.6.1.4.1.318.1.1.18.1.4.2.0',
    xATSGeneratorOutputTotalApparentPower => '1.3.6.1.4.1.318.1.1.18.1.4.3.0',
    xATSGeneratorOutputTotalPowerFactor => '1.3.6.1.4.1.318.1.1.18.1.4.4.0',
    xATSGeneratorOutputTableSize => '1.3.6.1.4.1.318.1.1.18.1.4.5.0',
    xATSGeneratorOutputPhaseTable => '1.3.6.1.4.1.318.1.1.18.1.4.6',
    xATSGeneratorOutputPhaseEntry => '1.3.6.1.4.1.318.1.1.18.1.4.6.1',
    xATSGeneratorOutputPhaseIndex => '1.3.6.1.4.1.318.1.1.18.1.4.6.1.1',
    xATSGeneratorOutputVoltageLtoL => '1.3.6.1.4.1.318.1.1.18.1.4.6.1.2',
    xATSGeneratorOutputVoltageLtoN => '1.3.6.1.4.1.318.1.1.18.1.4.6.1.3',
    xATSGeneratorOutputPhaseCurrent => '1.3.6.1.4.1.318.1.1.18.1.4.6.1.4',
    xATSGeneratorOutputPower => '1.3.6.1.4.1.318.1.1.18.1.4.6.1.5',
    xATSGeneratorOutputApparentPower => '1.3.6.1.4.1.318.1.1.18.1.4.6.1.6',
    xATSGeneratorOutputPowerFactor => '1.3.6.1.4.1.318.1.1.18.1.4.6.1.7',
    xATSGeneratorSettings => '1.3.6.1.4.1.318.1.1.18.1.5',
    xATSGeneratorSettingsVoltageAdjust => '1.3.6.1.4.1.318.1.1.18.1.5.1.0',
    xATSGeneratorSettingsFrequencyAdjust => '1.3.6.1.4.1.318.1.1.18.1.5.2.0',
    xATSGeneratorSettingsStartDelay => '1.3.6.1.4.1.318.1.1.18.1.5.3.0',
    xATSGeneratorSettingsStopDelay => '1.3.6.1.4.1.318.1.1.18.1.5.4.0',
    xATSGeneratorSettingsCrankCycleEnable => '1.3.6.1.4.1.318.1.1.18.1.5.5.0',
    xATSGeneratorSettingsCrankTime => '1.3.6.1.4.1.318.1.1.18.1.5.6.0',
    xATSGeneratorSettingsCrankRestTime => '1.3.6.1.4.1.318.1.1.18.1.5.7.0',
    xATSGeneratorSettingsNumberCrank => '1.3.6.1.4.1.318.1.1.18.1.5.8.0',
    xATSGeneratorSettingsMetricUnit => '1.3.6.1.4.1.318.1.1.18.1.5.9.0',
    xATSGeneratorService => '1.3.6.1.4.1.318.1.1.18.1.6',
    xATSGeneratorServiceTotalRunHoursLifetime => '1.3.6.1.4.1.318.1.1.18.1.6.1.0',
    xATSGeneratorServiceEngineStartsLifetime => '1.3.6.1.4.1.318.1.1.18.1.6.2.0',
    xATSGeneratorServiceTotalkWhLifetime => '1.3.6.1.4.1.318.1.1.18.1.6.3.0',
    xATSGeneratorServiceTotalRunHoursSinceMaintenance => '1.3.6.1.4.1.318.1.1.18.1.6.4.0',
    xATSGeneratorServiceEngineStartsSinceMaintenance => '1.3.6.1.4.1.318.1.1.18.1.6.5.0',
    xATSGeneratorServiceTotalkWhMaintenance => '1.3.6.1.4.1.318.1.1.18.1.6.6.0',
    xATSGeneratorServiceResetRecord => '1.3.6.1.4.1.318.1.1.18.1.6.7.0',
    xATSGeneratorServiceRecordResetDate => '1.3.6.1.4.1.318.1.1.18.1.6.8.0',
    xATSGeneratorServiceNextServiceDate => '1.3.6.1.4.1.318.1.1.18.1.6.9.0',
    xATSGeneratorServiceRunHoursUntilServiceDate => '1.3.6.1.4.1.318.1.1.18.1.6.10.0',
    xATSGeneratorServiceRunHoursThreshold => '1.3.6.1.4.1.318.1.1.18.1.6.11.0',
    xATSGeneratorServiceCalendarIntervalThreshold => '1.3.6.1.4.1.318.1.1.18.1.6.12.0',
    xATSGeneratorFuelSystem => '1.3.6.1.4.1.318.1.1.18.1.7',
    xATSGeneratorFuelSystemType => '1.3.6.1.4.1.318.1.1.18.1.7.1.0',
    xATSGeneratorFuelSystemTankSize => '1.3.6.1.4.1.318.1.1.18.1.7.2.0',
    xATSGeneratorFuelSystemFuelLevel => '1.3.6.1.4.1.318.1.1.18.1.7.3.0',
    xATSGeneratorFuelSystemRuntimePower => '1.3.6.1.4.1.318.1.1.18.1.7.4.0',
    xATSGeneratorFuelSystemEstimatedRunTime => '1.3.6.1.4.1.318.1.1.18.1.7.5.0',
    xATSGeneratorFuelSystemLowRunTimeThreshold => '1.3.6.1.4.1.318.1.1.18.1.7.6.0',
    xATSGeneratorFuelSystemVeryLowRunTimeThreshold => '1.3.6.1.4.1.318.1.1.18.1.7.7.0',
    xATSGeneratorFuelSystemLowFuelLevelThreshold => '1.3.6.1.4.1.318.1.1.18.1.7.8.0',
    xATSGeneratorFuelSystemVeryLowFuelLevelThreshold => '1.3.6.1.4.1.318.1.1.18.1.7.9.0',
    cpsAP930xSys => '1.3.6.1.4.1.318.1.1.19.1.1',
    apCPSpname => '1.3.6.1.4.1.318.1.1.19.1.1.1.0',
    apCPSversion => '1.3.6.1.4.1.318.1.1.19.1.1.2.0',
    apCPSPower => '1.3.6.1.4.1.318.1.1.19.1.1.3',
    apCPSPower => '1.3.6.1.4.1.318.1.1.19.1.1.3',
    apCPSPwNum => '1.3.6.1.4.1.318.1.1.19.1.1.3.1.0',
    apCPSPw1 => '1.3.6.1.4.1.318.1.1.19.1.1.3.2.0',
    apCPSPw2 => '1.3.6.1.4.1.318.1.1.19.1.1.3.3.0',
    apCPSPcmcia => '1.3.6.1.4.1.318.1.1.19.1.1.4',
    apCPSPcmcia => '1.3.6.1.4.1.318.1.1.19.1.1.4',
    apCPSNPcmcia => '1.3.6.1.4.1.318.1.1.19.1.1.4.1.0',
    cpsCardIdentTable => '1.3.6.1.4.1.318.1.1.19.1.1.4.2',
    cpsCardIdentEntry => '1.3.6.1.4.1.318.1.1.19.1.1.4.2.1',
    cpsCardIdentIndex => '1.3.6.1.4.1.318.1.1.19.1.1.4.2.1.1',
    cpsCardIdentProd => '1.3.6.1.4.1.318.1.1.19.1.1.4.2.1.2',
    cpsCardIdentMan => '1.3.6.1.4.1.318.1.1.19.1.1.4.2.1.3',
    cpsCardIdentFunc => '1.3.6.1.4.1.318.1.1.19.1.1.4.2.1.4',
    cpsCardIdentPCI => '1.3.6.1.4.1.318.1.1.19.1.1.4.2.1.5',
    cpsCardConfTable => '1.3.6.1.4.1.318.1.1.19.1.1.4.3',
    cpsCardConfEntry => '1.3.6.1.4.1.318.1.1.19.1.1.4.3.1',
    cpsCardConfIndex => '1.3.6.1.4.1.318.1.1.19.1.1.4.3.1.1',
    cpsCardConfPower => '1.3.6.1.4.1.318.1.1.19.1.1.4.3.1.2',
    cpsCardConfType => '1.3.6.1.4.1.318.1.1.19.1.1.4.3.1.3',
    cpsCardConfInter => '1.3.6.1.4.1.318.1.1.19.1.1.4.3.1.4',
    cpsCardConfFunc => '1.3.6.1.4.1.318.1.1.19.1.1.4.3.1.5',
    cpsCardConfCardv => '1.3.6.1.4.1.318.1.1.19.1.1.4.3.1.6',
    cpsCardConfPort1 => '1.3.6.1.4.1.318.1.1.19.1.1.4.3.1.7',
    cpsCardConfPort2 => '1.3.6.1.4.1.318.1.1.19.1.1.4.3.1.8',
    cpsCardStatusTable => '1.3.6.1.4.1.318.1.1.19.1.1.4.4',
    cpsCardStatusEntry => '1.3.6.1.4.1.318.1.1.19.1.1.4.4.1',
    cpsCardStatusIndex => '1.3.6.1.4.1.318.1.1.19.1.1.4.4.1.1',
    cpsCardStatusCard => '1.3.6.1.4.1.318.1.1.19.1.1.4.4.1.2',
    cpsCardStatusFunc => '1.3.6.1.4.1.318.1.1.19.1.1.4.4.1.3',
    cpsAP930xSys => '1.3.6.1.4.1.318.1.1.19.1.1',
    apCPSFlashSize => '1.3.6.1.4.1.318.1.1.19.1.1.5.0',
    apCPSRAMSize => '1.3.6.1.4.1.318.1.1.19.1.1.6.0',
    apCPSCPUfreq => '1.3.6.1.4.1.318.1.1.19.1.1.7.0',
    apCPSDevId => '1.3.6.1.4.1.318.1.1.19.1.1.8.0',
    cpsAP930xConf => '1.3.6.1.4.1.318.1.1.19.1.2',
    cpsHostName => '1.3.6.1.4.1.318.1.1.19.1.2.1.0',
    cpsConsoleBanner => '1.3.6.1.4.1.318.1.1.19.1.2.2.0',
    cpsMotd => '1.3.6.1.4.1.318.1.1.19.1.2.3.0',
    cpsEthItf => '1.3.6.1.4.1.318.1.1.19.1.2.4',
    cpsEthItf => '1.3.6.1.4.1.318.1.1.19.1.2.4',
    cpsEthDhcpc => '1.3.6.1.4.1.318.1.1.19.1.2.4.1.0',
    cpsEthIPaddr => '1.3.6.1.4.1.318.1.1.19.1.2.4.2.0',
    cpsEthIPmask => '1.3.6.1.4.1.318.1.1.19.1.2.4.3.0',
    cpsEthMTU => '1.3.6.1.4.1.318.1.1.19.1.2.4.4.0',
    cpsEthIPaddr2 => '1.3.6.1.4.1.318.1.1.19.1.2.4.5.0',
    cpsEthIPmask2 => '1.3.6.1.4.1.318.1.1.19.1.2.4.6.0',
    cpsNameService => '1.3.6.1.4.1.318.1.1.19.1.2.5',
    cpsNameService => '1.3.6.1.4.1.318.1.1.19.1.2.5',
    cpsResolverOrder => '1.3.6.1.4.1.318.1.1.19.1.2.5.1.0',
    cpsMultipleIP => '1.3.6.1.4.1.318.1.1.19.1.2.5.2.0',
    cpsDNSserv => '1.3.6.1.4.1.318.1.1.19.1.2.5.3',
    cpsDNSserv => '1.3.6.1.4.1.318.1.1.19.1.2.5.3',
    cpsDNSpriserv => '1.3.6.1.4.1.318.1.1.19.1.2.5.3.1.0',
    cpsDNSsecserv => '1.3.6.1.4.1.318.1.1.19.1.2.5.3.2.0',
    cpsDNSdomain => '1.3.6.1.4.1.318.1.1.19.1.2.5.3.3.0',
    cpsSerialPortConf => '1.3.6.1.4.1.318.1.1.19.1.2.6',
    cpsSerialGlobal => '1.3.6.1.4.1.318.1.1.19.1.2.6.1',
    cpsSerialGlobal => '1.3.6.1.4.1.318.1.1.19.1.2.6.1',
    cpsSerialInclude => '1.3.6.1.4.1.318.1.1.19.1.2.6.1.1.0',
    cpsSerialNFS => '1.3.6.1.4.1.318.1.1.19.1.2.6.1.2.0',
    cpsSerialLockDir => '1.3.6.1.4.1.318.1.1.19.1.2.6.1.3.0',
    cpsSerialRlogin => '1.3.6.1.4.1.318.1.1.19.1.2.6.1.4.0',
    cpsSerialPppd => '1.3.6.1.4.1.318.1.1.19.1.2.6.1.5.0',
    cpsSerialTelnet => '1.3.6.1.4.1.318.1.1.19.1.2.6.1.6.0',
    cpsSerialSsh => '1.3.6.1.4.1.318.1.1.19.1.2.6.1.7.0',
    cpsSerialLocalLogins => '1.3.6.1.4.1.318.1.1.19.1.2.6.1.8.0',
    cpsSerialFacility => '1.3.6.1.4.1.318.1.1.19.1.2.6.1.9.0',
    cpsSerialDBFacility => '1.3.6.1.4.1.318.1.1.19.1.2.6.1.10.0',
    cpsSerialGroupTable => '1.3.6.1.4.1.318.1.1.19.1.2.6.1.11',
    cpsSerialGroupEntry => '1.3.6.1.4.1.318.1.1.19.1.2.6.1.11.1',
    cpsSerialGroupIndex => '1.3.6.1.4.1.318.1.1.19.1.2.6.1.11.1.1',
    cpsSerialGroupName => '1.3.6.1.4.1.318.1.1.19.1.2.6.1.11.1.2',
    cpsSerialGroupUsers => '1.3.6.1.4.1.318.1.1.19.1.2.6.1.11.1.3',
    cpsSerialSpec => '1.3.6.1.4.1.318.1.1.19.1.2.6.2',
    cpsSerialSpec => '1.3.6.1.4.1.318.1.1.19.1.2.6.2',
    cpsSerialPortTable => '1.3.6.1.4.1.318.1.1.19.1.2.6.2.1',
    cpsSerialPortEntry => '1.3.6.1.4.1.318.1.1.19.1.2.6.2.1.1',
    cpsSerialPortNumber => '1.3.6.1.4.1.318.1.1.19.1.2.6.2.1.1.1',
    cpsSerialPortTty => '1.3.6.1.4.1.318.1.1.19.1.2.6.2.1.1.2',
    cpsSerialPortName => '1.3.6.1.4.1.318.1.1.19.1.2.6.2.1.1.3',
    cpsSerialPortSpeed => '1.3.6.1.4.1.318.1.1.19.1.2.6.2.1.1.4',
    cpsSerialPortDataSize => '1.3.6.1.4.1.318.1.1.19.1.2.6.2.1.1.5',
    cpsSerialPortStopBits => '1.3.6.1.4.1.318.1.1.19.1.2.6.2.1.1.6',
    cpsSerialPortParity => '1.3.6.1.4.1.318.1.1.19.1.2.6.2.1.1.7',
    cpsSerialPortFlowCtrl => '1.3.6.1.4.1.318.1.1.19.1.2.6.2.1.1.8',
    cpsSerialPortDTRdelay => '1.3.6.1.4.1.318.1.1.19.1.2.6.2.1.1.9',
    cpsSerialPortDCDCtrl => '1.3.6.1.4.1.318.1.1.19.1.2.6.2.1.1.10',
    cpsSerialPortLogUtmp => '1.3.6.1.4.1.318.1.1.19.1.2.6.2.1.1.11',
    cpsSerialPortLogWtmp => '1.3.6.1.4.1.318.1.1.19.1.2.6.2.1.1.12',
    cpsSerialPortLogform => '1.3.6.1.4.1.318.1.1.19.1.2.6.2.1.1.13',
    cpsSerialPortAuthtype => '1.3.6.1.4.1.318.1.1.19.1.2.6.2.1.1.14',
    cpsSerialPortAuthSrv1 => '1.3.6.1.4.1.318.1.1.19.1.2.6.2.1.1.15',
    cpsSerialPortAccSrv1 => '1.3.6.1.4.1.318.1.1.19.1.2.6.2.1.1.16',
    cpsSerialPortAuthTmo => '1.3.6.1.4.1.318.1.1.19.1.2.6.2.1.1.17',
    cpsSerialPortAuthRetr => '1.3.6.1.4.1.318.1.1.19.1.2.6.2.1.1.18',
    cpsSerialPortAuthSrv2 => '1.3.6.1.4.1.318.1.1.19.1.2.6.2.1.1.19',
    cpsSerialPortAccSrv2 => '1.3.6.1.4.1.318.1.1.19.1.2.6.2.1.1.20',
    cpsSerialPortAuthSecret => '1.3.6.1.4.1.318.1.1.19.1.2.6.2.1.1.21',
    cpsSerialPortAuthRadP => '1.3.6.1.4.1.318.1.1.19.1.2.6.2.1.1.22',
    cpsSerialPortAuthAcc => '1.3.6.1.4.1.318.1.1.19.1.2.6.2.1.1.23',
    cpsSerialPortProtocol => '1.3.6.1.4.1.318.1.1.19.1.2.6.2.1.1.24',
    cpsSerialPortRemoteIP => '1.3.6.1.4.1.318.1.1.19.1.2.6.2.1.1.25',
    cpsSerialPortSocketPort => '1.3.6.1.4.1.318.1.1.19.1.2.6.2.1.1.26',
    cpsSerialPortRemHost => '1.3.6.1.4.1.318.1.1.19.1.2.6.2.1.1.27',
    cpsSerialPortBanner => '1.3.6.1.4.1.318.1.1.19.1.2.6.2.1.1.28',
    cpsSerialPortPrompt => '1.3.6.1.4.1.318.1.1.19.1.2.6.2.1.1.29',
    cpsSerialPortTermType => '1.3.6.1.4.1.318.1.1.19.1.2.6.2.1.1.30',
    cpsSerialPortAutomUsr => '1.3.6.1.4.1.318.1.1.19.1.2.6.2.1.1.31',
    cpsSerialPortNetMask => '1.3.6.1.4.1.318.1.1.19.1.2.6.2.1.1.32',
    cpsSerialPortPppMtu => '1.3.6.1.4.1.318.1.1.19.1.2.6.2.1.1.33',
    cpsSerialPortPppMru => '1.3.6.1.4.1.318.1.1.19.1.2.6.2.1.1.34',
    cpsSerialPortPppOptions => '1.3.6.1.4.1.318.1.1.19.1.2.6.2.1.1.35',
    cpsSerialPortPppFoption => '1.3.6.1.4.1.318.1.1.19.1.2.6.2.1.1.36',
    cpsSerialPortModemChat => '1.3.6.1.4.1.318.1.1.19.1.2.6.2.1.1.37',
    cpsSerialPortSttyCmd => '1.3.6.1.4.1.318.1.1.19.1.2.6.2.1.1.38',
    cpsSerialPortSockTx => '1.3.6.1.4.1.318.1.1.19.1.2.6.2.1.1.39',
    cpsSerialPortSockPoll => '1.3.6.1.4.1.318.1.1.19.1.2.6.2.1.1.40',
    cpsSerialPortSockIdle => '1.3.6.1.4.1.318.1.1.19.1.2.6.2.1.1.41',
    cpsSerialPortDBsize => '1.3.6.1.4.1.318.1.1.19.1.2.6.2.1.1.42',
    cpsSerialPortDBtime => '1.3.6.1.4.1.318.1.1.19.1.2.6.2.1.1.43',
    cpsSerialPortDBmode => '1.3.6.1.4.1.318.1.1.19.1.2.6.2.1.1.44',
    cpsSerialPortDBsyslog => '1.3.6.1.4.1.318.1.1.19.1.2.6.2.1.1.45',
    cpsSerialPortDBmenu => '1.3.6.1.4.1.318.1.1.19.1.2.6.2.1.1.46',
    cpsSerialPortDBalarm => '1.3.6.1.4.1.318.1.1.19.1.2.6.2.1.1.47',
    cpsSerialPortSSHbreak => '1.3.6.1.4.1.318.1.1.19.1.2.6.2.1.1.48',
    cpsSerialPortSniffSess => '1.3.6.1.4.1.318.1.1.19.1.2.6.2.1.1.49',
    cpsSerialPortSniffAdm => '1.3.6.1.4.1.318.1.1.19.1.2.6.2.1.1.50',
    cpsSerialPortSniffEsc => '1.3.6.1.4.1.318.1.1.19.1.2.6.2.1.1.51',
    cpsSerialPortSniffMsess => '1.3.6.1.4.1.318.1.1.19.1.2.6.2.1.1.52',
    cpsSerialPortTelnetMode => '1.3.6.1.4.1.318.1.1.19.1.2.6.2.1.1.53',
    cpsSerialPortSysBufSess => '1.3.6.1.4.1.318.1.1.19.1.2.6.2.1.1.54',
    cpsSerialPortLFSuppress => '1.3.6.1.4.1.318.1.1.19.1.2.6.2.1.1.55',
    cpsSerialPortAutoInput => '1.3.6.1.4.1.318.1.1.19.1.2.6.2.1.1.56',
    cpsSerialPortAutoOutput => '1.3.6.1.4.1.318.1.1.19.1.2.6.2.1.1.57',
    cpsSerialPortBreakInterval => '1.3.6.1.4.1.318.1.1.19.1.2.6.2.1.1.58',
    cpsAP930xInfo => '1.3.6.1.4.1.318.1.1.19.1.3',
    cpsInfoSerialPortTable => '1.3.6.1.4.1.318.1.1.19.1.3.1',
    cpsInfoSerialPortEntry => '1.3.6.1.4.1.318.1.1.19.1.3.1.1',
    cpsInfoSerialPortNumber => '1.3.6.1.4.1.318.1.1.19.1.3.1.1.1',
    cpsInfoSerialPortTty => '1.3.6.1.4.1.318.1.1.19.1.3.1.1.2',
    cpsInfoSerialPortName => '1.3.6.1.4.1.318.1.1.19.1.3.1.1.3',
    cpsInfoSerialPortSpeed => '1.3.6.1.4.1.318.1.1.19.1.3.1.1.4',
    cpsInfoSerialPortTxBytes => '1.3.6.1.4.1.318.1.1.19.1.3.1.1.5',
    cpsInfoSerialPortRXBytes => '1.3.6.1.4.1.318.1.1.19.1.3.1.1.6',
    cpsInfoSerialPortErrFrame => '1.3.6.1.4.1.318.1.1.19.1.3.1.1.7',
    cpsInfoSerialPortErrParity => '1.3.6.1.4.1.318.1.1.19.1.3.1.1.8',
    cpsInfoSerialPortErrBreaks => '1.3.6.1.4.1.318.1.1.19.1.3.1.1.9',
    cpsInfoSerialPortErrOverrun => '1.3.6.1.4.1.318.1.1.19.1.3.1.1.10',
    cpsInfoSerialPortSigDTR => '1.3.6.1.4.1.318.1.1.19.1.3.1.1.11',
    cpsInfoSerialPortSigCD => '1.3.6.1.4.1.318.1.1.19.1.3.1.1.12',
    cpsInfoSerialPortSigDSR => '1.3.6.1.4.1.318.1.1.19.1.3.1.1.13',
    cpsInfoSerialPortSigRTS => '1.3.6.1.4.1.318.1.1.19.1.3.1.1.14',
    cpsInfoSerialPortSigCTS => '1.3.6.1.4.1.318.1.1.19.1.3.1.1.15',
    cpsInfoSerialPortSigRI => '1.3.6.1.4.1.318.1.1.19.1.3.1.1.16',
    cpsAP930xAdm => '1.3.6.1.4.1.318.1.1.19.1.4',
    apCPSSave => '1.3.6.1.4.1.318.1.1.19.1.4.1.0',
    apCPSSerialHUP => '1.3.6.1.4.1.318.1.1.19.1.4.2.0',
    accessPXIdent => '1.3.6.1.4.1.318.1.1.20.1.1',
    accessPXIdentAlarmStatus => '1.3.6.1.4.1.318.1.1.20.1.1.1.0',
    accessPXIdentProductNumber => '1.3.6.1.4.1.318.1.1.20.1.1.2.0',
    accessPXIdentHardwareRev => '1.3.6.1.4.1.318.1.1.20.1.1.3.0',
    accessPXIdentDateOfManufacture => '1.3.6.1.4.1.318.1.1.20.1.1.4.0',
    accessPXIdentSerialNumber => '1.3.6.1.4.1.318.1.1.20.1.1.5.0',
    accessPXConfig => '1.3.6.1.4.1.318.1.1.20.1.2',
    accessPXConfigCardReaderEnableDisableAction => '1.3.6.1.4.1.318.1.1.20.1.2.1.0',
    accessPXConfigAutoRelockTime => '1.3.6.1.4.1.318.1.1.20.1.2.2.0',
    accessPXConfigCardFormat => '1.3.6.1.4.1.318.1.1.20.1.2.3.0',
    accessPXConfigFront => '1.3.6.1.4.1.318.1.1.20.1.3',
    accessPXConfigFrontDoorLockControl => '1.3.6.1.4.1.318.1.1.20.1.3.1.0',
    accessPXConfigFrontDoorMaxOpenTime => '1.3.6.1.4.1.318.1.1.20.1.3.2.0',
    accessPXStatusFront => '1.3.6.1.4.1.318.1.1.20.1.4',
    accessPXStatusFrontDoorLock => '1.3.6.1.4.1.318.1.1.20.1.4.1.0',
    accessPXStatusFrontDoor => '1.3.6.1.4.1.318.1.1.20.1.4.2.0',
    accessPXStatusFrontDoorHandle => '1.3.6.1.4.1.318.1.1.20.1.4.3.0',
    accessPXStatusFrontDoorMaxOpenTime => '1.3.6.1.4.1.318.1.1.20.1.4.4.0',
    accessPXStatusFrontDoorAlarmStatus => '1.3.6.1.4.1.318.1.1.20.1.4.5.0',
    accessPXConfigRear => '1.3.6.1.4.1.318.1.1.20.1.5',
    accessPXConfigRearDoorLockControl => '1.3.6.1.4.1.318.1.1.20.1.5.1.0',
    accessPXConfigRearDoorMaxOpenTime => '1.3.6.1.4.1.318.1.1.20.1.5.2.0',
    accessPXStatusRear => '1.3.6.1.4.1.318.1.1.20.1.6',
    accessPXStatusRearDoorLock => '1.3.6.1.4.1.318.1.1.20.1.6.1.0',
    accessPXStatusRearDoor => '1.3.6.1.4.1.318.1.1.20.1.6.2.0',
    accessPXStatusRearDoorHandle => '1.3.6.1.4.1.318.1.1.20.1.6.3.0',
    accessPXStatusRearDoorMaxOpenTime => '1.3.6.1.4.1.318.1.1.20.1.6.4.0',
    accessPXStatusRearDoorAlarmStatus => '1.3.6.1.4.1.318.1.1.20.1.6.5.0',
    accessPXConfigBeacon => '1.3.6.1.4.1.318.1.1.20.1.7',
    accessPXConfigBeaconName => '1.3.6.1.4.1.318.1.1.20.1.7.1.0',
    accessPXConfigBeaconLocation => '1.3.6.1.4.1.318.1.1.20.1.7.2.0',
    accessPXConfigBeaconAction => '1.3.6.1.4.1.318.1.1.20.1.7.3.0',
    accessPXStatusBeacon => '1.3.6.1.4.1.318.1.1.20.1.8',
    accessPXStatusBeaconName => '1.3.6.1.4.1.318.1.1.20.1.8.1.0',
    accessPXStatusBeaconLocation => '1.3.6.1.4.1.318.1.1.20.1.8.2.0',
    accessPXStatusBeaconCurrentState => '1.3.6.1.4.1.318.1.1.20.1.8.3.0',
    apcLocalDisplayIdent => '1.3.6.1.4.1.318.1.1.21.1',
    apcLocalDisplayIdentDisplayType => '1.3.6.1.4.1.318.1.1.21.1.1.0',
    apcLocalDisplayIdentModelNumber => '1.3.6.1.4.1.318.1.1.21.1.2.0',
    apcLocalDisplayIdentFirmwareRev => '1.3.6.1.4.1.318.1.1.21.1.3.0',
    apcLocalDisplayIdentOptions => '1.3.6.1.4.1.318.1.1.21.1.4.0',
    apcLocalDisplayIdentDateOfManufacture => '1.3.6.1.4.1.318.1.1.21.1.5.0',
    apcLocalDisplayIdentSerialNumber => '1.3.6.1.4.1.318.1.1.21.1.6.0',
    apcLocalDisplayConfig => '1.3.6.1.4.1.318.1.1.21.2',
    apcLocalDisplayConfigAlarmBeeper => '1.3.6.1.4.1.318.1.1.21.2.1.0',
    apcLocalDisplayConfigBeeperVolume => '1.3.6.1.4.1.318.1.1.21.2.2.0',
    apcLocalDisplayConfigCheckLogIndicator => '1.3.6.1.4.1.318.1.1.21.2.3.0',
    apcLocalDisplayConfigKeyClick => '1.3.6.1.4.1.318.1.1.21.2.4.0',
    apcLocalDisplayConfigContrast => '1.3.6.1.4.1.318.1.1.21.2.5.0',
    powerNetSoftwareSystem => '1.3.6.1.4.1.318.1.2.1.1',
    powerNetSoftwareSystemDescription => '1.3.6.1.4.1.318.1.2.1.1.1.0',
    powerNetSoftwareOid => '1.3.6.1.4.1.318.1.2.1.1.2.0',
    powerNetSoftwareSystemUpTime => '1.3.6.1.4.1.318.1.2.1.1.3.0',
    powerNetSoftwareConfig => '1.3.6.1.4.1.318.1.2.1.2',
    powerNetSoftwareTableSize => '1.3.6.1.4.1.318.1.2.1.2.1.0',
    powerNetSoftwareTable => '1.3.6.1.4.1.318.1.2.1.2.2',
    powerNetSoftwareEntry => '1.3.6.1.4.1.318.1.2.1.2.2.1',
    moduleNumber => '1.3.6.1.4.1.318.1.2.1.2.2.1.1',
    moduleName => '1.3.6.1.4.1.318.1.2.1.2.2.1.2',
    moduleVersion => '1.3.6.1.4.1.318.1.2.1.2.2.1.3',
    moduleDate => '1.3.6.1.4.1.318.1.2.1.2.2.1.4',
    upsBasicIdent => '1.3.6.1.4.1.318.1.1.1.1.1',
    upsBasicIdentModel => '1.3.6.1.4.1.318.1.1.1.1.1.1.0',
    upsBasicIdentName => '1.3.6.1.4.1.318.1.1.1.1.1.2.0',
    upsAdvIdent => '1.3.6.1.4.1.318.1.1.1.1.2',
    upsAdvIdentFirmwareRevision => '1.3.6.1.4.1.318.1.1.1.1.2.1.0',
    upsAdvIdentDateOfManufacture => '1.3.6.1.4.1.318.1.1.1.1.2.2.0',
    upsAdvIdentSerialNumber => '1.3.6.1.4.1.318.1.1.1.1.2.3.0',
    upsAdvIdentFirmwareRevision2 => '1.3.6.1.4.1.318.1.1.1.1.2.4.0',
    upsAdvIdentSkuNumber => '1.3.6.1.4.1.318.1.1.1.1.2.5.0',
    upsBasicBattery => '1.3.6.1.4.1.318.1.1.1.2.1',
    upsBasicBatteryStatus => '1.3.6.1.4.1.318.1.1.1.2.1.1.0',
    upsBasicBatteryStatusDefinition => {
        1 => 'unknown',
        2 => 'batteryNormal',
        3 => 'batteryLow',
    },
    upsBasicBatteryTimeOnBattery => '1.3.6.1.4.1.318.1.1.1.2.1.2.0',
    upsBasicBatteryLastReplaceDate => '1.3.6.1.4.1.318.1.1.1.2.1.3.0',
    upsAdvBattery => '1.3.6.1.4.1.318.1.1.1.2.2',
    upsAdvBatteryCapacity => '1.3.6.1.4.1.318.1.1.1.2.2.1.0',
    upsAdvBatteryTemperature => '1.3.6.1.4.1.318.1.1.1.2.2.2.0',
    upsAdvBatteryRunTimeRemaining => '1.3.6.1.4.1.318.1.1.1.2.2.3.0',
    upsAdvBatteryReplaceIndicator => '1.3.6.1.4.1.318.1.1.1.2.2.4.0',
    upsAdvBatteryReplaceIndicatorDefinition => {
        1 => 'noBatteryNeedsReplacing',
        2 => 'batteryNeedsReplacing',
    },
    upsAdvBatteryNumOfBattPacks => '1.3.6.1.4.1.318.1.1.1.2.2.5.0',
    upsAdvBatteryNumOfBadBattPacks => '1.3.6.1.4.1.318.1.1.1.2.2.6.0',
    upsAdvBatteryNominalVoltage => '1.3.6.1.4.1.318.1.1.1.2.2.7.0',
    upsAdvBatteryActualVoltage => '1.3.6.1.4.1.318.1.1.1.2.2.8.0',
    upsAdvBatteryCurrent => '1.3.6.1.4.1.318.1.1.1.2.2.9.0',
    upsAdvTotalDCCurrent => '1.3.6.1.4.1.318.1.1.1.2.2.10.0',
    upsAdvBatteryFullCapacity => '1.3.6.1.4.1.318.1.1.1.2.2.11.0',
    upsAdvBatteryActualVoltageTable => '1.3.6.1.4.1.318.1.1.1.2.2.12',
    upsAdvBatteryActualVoltageEntry => '1.3.6.1.4.1.318.1.1.1.2.2.12.1',
    upsAdvBatteryActualVoltageTableIndex => '1.3.6.1.4.1.318.1.1.1.2.2.12.1.1',
    upsAdvBatteryActualVoltagePolarity => '1.3.6.1.4.1.318.1.1.1.2.2.12.1.2',
    upsAdvBatteryFrameActualVoltage => '1.3.6.1.4.1.318.1.1.1.2.2.12.1.3',
    upsAdvTotalDCCurrentTable => '1.3.6.1.4.1.318.1.1.1.2.2.13',
    upsAdvTotalDCCurrentEntry => '1.3.6.1.4.1.318.1.1.1.2.2.13.1',
    upsAdvTotalDCCurrentTableIndex => '1.3.6.1.4.1.318.1.1.1.2.2.13.1.1',
    upsAdvTotalDCCurrentPolarity => '1.3.6.1.4.1.318.1.1.1.2.2.13.1.2',
    upsAdvTotalFrameDCCurrent => '1.3.6.1.4.1.318.1.1.1.2.2.13.1.3',
    upsAdvBatteryCurrentTable => '1.3.6.1.4.1.318.1.1.1.2.2.14',
    upsAdvBatteryCurrentEntry => '1.3.6.1.4.1.318.1.1.1.2.2.14.1',
    upsAdvBatteryCurrentTableIndex => '1.3.6.1.4.1.318.1.1.1.2.2.14.1.1',
    upsAdvBatteryCurrentIndex => '1.3.6.1.4.1.318.1.1.1.2.2.14.1.2',
    upsAdvBatteryCurrentPolarity => '1.3.6.1.4.1.318.1.1.1.2.2.14.1.3',
    upsAdvBatteryFrameCurrent => '1.3.6.1.4.1.318.1.1.1.2.2.14.1.4',
    upsHighPrecBattery => '1.3.6.1.4.1.318.1.1.1.2.3',
    upsHighPrecBatteryCapacity => '1.3.6.1.4.1.318.1.1.1.2.3.1.0',
    upsHighPrecBatteryTemperature => '1.3.6.1.4.1.318.1.1.1.2.3.2.0',
    upsHighPrecBatteryNominalVoltage => '1.3.6.1.4.1.318.1.1.1.2.3.3.0',
    upsHighPrecBatteryActualVoltage => '1.3.6.1.4.1.318.1.1.1.2.3.4.0',
    upsHighPrecBatteryCurrent => '1.3.6.1.4.1.318.1.1.1.2.3.5.0',
    upsHighPrecTotalDCCurrent => '1.3.6.1.4.1.318.1.1.1.2.3.6.0',
    upsHighPrecBatteryActualVoltageTable => '1.3.6.1.4.1.318.1.1.1.2.3.7',
    upsHighPrecBatteryActualVoltageEntry => '1.3.6.1.4.1.318.1.1.1.2.3.7.1',
    upsHighPrecBatteryActualVoltageTableIndex => '1.3.6.1.4.1.318.1.1.1.2.3.7.1.1',
    upsHighPrecBatteryActualVoltagePolarity => '1.3.6.1.4.1.318.1.1.1.2.3.7.1.2',
    upsHighPrecBatteryVoltage => '1.3.6.1.4.1.318.1.1.1.2.3.7.1.3',
    upsHighPrecTotalDCCurrentTable => '1.3.6.1.4.1.318.1.1.1.2.3.8',
    upsHighPrecTotalDCCurrentEntry => '1.3.6.1.4.1.318.1.1.1.2.3.8.1',
    upsHighPrecTotalDCCurrentTableIndex => '1.3.6.1.4.1.318.1.1.1.2.3.8.1.1',
    upsHighPrecTotalDCCurrentPolarity => '1.3.6.1.4.1.318.1.1.1.2.3.8.1.2',
    upsHighPrecTotalDCFrameCurrent => '1.3.6.1.4.1.318.1.1.1.2.3.8.1.3',
    upsHighPrecBatteryCurrentTable => '1.3.6.1.4.1.318.1.1.1.2.3.9',
    upsHighPrecBatteryCurrentEntry => '1.3.6.1.4.1.318.1.1.1.2.3.9.1',
    upsHighPrecBatteryCurrentTableIndex => '1.3.6.1.4.1.318.1.1.1.2.3.9.1.1',
    upsHighPrecBatteryCurrentIndex => '1.3.6.1.4.1.318.1.1.1.2.3.9.1.2',
    upsHighPrecBatteryCurrentPolarity => '1.3.6.1.4.1.318.1.1.1.2.3.9.1.3',
    upsHighPrecBatteryFrameCurrent => '1.3.6.1.4.1.318.1.1.1.2.3.9.1.4',
    upsBasicInput => '1.3.6.1.4.1.318.1.1.1.3.1',
    upsBasicInputPhase => '1.3.6.1.4.1.318.1.1.1.3.1.1.0',
    upsAdvInput => '1.3.6.1.4.1.318.1.1.1.3.2',
    upsAdvInputLineVoltage => '1.3.6.1.4.1.318.1.1.1.3.2.1.0',
    upsAdvInputMaxLineVoltage => '1.3.6.1.4.1.318.1.1.1.3.2.2.0',
    upsAdvInputMinLineVoltage => '1.3.6.1.4.1.318.1.1.1.3.2.3.0',
    upsAdvInputFrequency => '1.3.6.1.4.1.318.1.1.1.3.2.4.0',
    upsAdvInputLineFailCause => '1.3.6.1.4.1.318.1.1.1.3.2.5.0',
    upsAdvInputLineFailCauseDefinition => {
      1 => 'noTransfer',
      2 => 'highLineVoltage',
      3 => 'brownout',
      4 => 'blackout',
      5 => 'smallMomentarySag',
      6 => 'deepMomentarySag',
      7 => 'smallMomentarySpike',
      8 => 'largeMomentarySpike',
      9 => 'selfTest',
      10 => 'rateOfVoltageChange',
    },
    upsAdvInputNominalFrequency => '1.3.6.1.4.1.318.1.1.1.3.2.6.0',
    upsAdvInputNominalVoltage => '1.3.6.1.4.1.318.1.1.1.3.2.7.0',
    upsAdvInputBypassNominalFrequency => '1.3.6.1.4.1.318.1.1.1.3.2.8.0',
    upsAdvInputBypassNominalVoltage => '1.3.6.1.4.1.318.1.1.1.3.2.9.0',
    upsHighPrecInput => '1.3.6.1.4.1.318.1.1.1.3.3',
    upsHighPrecInputLineVoltage => '1.3.6.1.4.1.318.1.1.1.3.3.1.0',
    upsHighPrecInputMaxLineVoltage => '1.3.6.1.4.1.318.1.1.1.3.3.2.0',
    upsHighPrecInputMinLineVoltage => '1.3.6.1.4.1.318.1.1.1.3.3.3.0',
    upsHighPrecInputFrequency => '1.3.6.1.4.1.318.1.1.1.3.3.4.0',
    upsBasicOutput => '1.3.6.1.4.1.318.1.1.1.4.1',
    upsBasicOutputStatus => '1.3.6.1.4.1.318.1.1.1.4.1.1.0',
    upsBasicOutputStatusDefinition => {
      1 => 'unknown',
      2 => 'onLine',
      3 => 'onBattery',
      4 => 'onSmartBoost',
      5 => 'timedSleeping',
      6 => 'softwareBypass',
      7 => 'off',
      8 => 'rebooting',
      9 => 'switchedBypass',
      10 => 'hardwareFailureBypass',
      11 => 'sleepingUntilPowerReturn',
      12 => 'onSmartTrim',
    },
    upsBasicOutputPhase => '1.3.6.1.4.1.318.1.1.1.4.1.2.0',
    upsBasicSystemStatus => '1.3.6.1.4.1.318.1.1.1.4.1.3.0',
    upsBasicSystemStatusDefinition => {
      1 => 'unknown',
      2 => 'onLine',
      3 => 'onBattery',
      4 => 'onSmartBoost',
      5 => 'timedSleeping',
      6 => 'softwareBypass',
      7 => 'off',
      8 => 'rebooting',
      9 => 'switchedBypass',
      10 => 'hardwareFailureBypass',
      11 => 'sleepingUntilPowerReturn',
      12 => 'onSmartTrim',
    },
    # hat keine der testups. nicht verwenden
    upsBasicSystemInternalTemperature => '1.3.6.1.4.1.318.1.1.1.4.1.4.0',
    upsAdvOutput => '1.3.6.1.4.1.318.1.1.1.4.2',
    upsAdvOutputVoltage => '1.3.6.1.4.1.318.1.1.1.4.2.1.0',
    upsAdvOutputFrequency => '1.3.6.1.4.1.318.1.1.1.4.2.2.0',
    upsAdvOutputLoad => '1.3.6.1.4.1.318.1.1.1.4.2.3.0',
    upsAdvOutputCurrent => '1.3.6.1.4.1.318.1.1.1.4.2.4.0',
    upsAdvOutputRedundancy => '1.3.6.1.4.1.318.1.1.1.4.2.5.0',
    upsAdvOutputKVACapacity => '1.3.6.1.4.1.318.1.1.1.4.2.6.0',
    upsAdvOutputNominalFrequency => '1.3.6.1.4.1.318.1.1.1.4.2.7.0',
    upsAdvOutputActivePower => '1.3.6.1.4.1.318.1.1.1.4.2.8.0',
    upsAdvOutputApparentPower => '1.3.6.1.4.1.318.1.1.1.4.2.9.0',
    upsHighPrecOutput => '1.3.6.1.4.1.318.1.1.1.4.3',
    upsHighPrecOutputVoltage => '1.3.6.1.4.1.318.1.1.1.4.3.1.0',
    upsHighPrecOutputFrequency => '1.3.6.1.4.1.318.1.1.1.4.3.2.0',
    upsHighPrecOutputLoad => '1.3.6.1.4.1.318.1.1.1.4.3.3.0',
    upsHighPrecOutputCurrent => '1.3.6.1.4.1.318.1.1.1.4.3.4.0',
    upsBasicConfig => '1.3.6.1.4.1.318.1.1.1.5.1',
    upsBasicConfigNumDevices => '1.3.6.1.4.1.318.1.1.1.5.1.1.0',
    upsBasicConfigDeviceTable => '1.3.6.1.4.1.318.1.1.1.5.1.2',
    upsBasicConfigDeviceEntry => '1.3.6.1.4.1.318.1.1.1.5.1.2.1',
    deviceIndex => '1.3.6.1.4.1.318.1.1.1.5.1.2.1.1',
    deviceName => '1.3.6.1.4.1.318.1.1.1.5.1.2.1.2',
    vaRating => '1.3.6.1.4.1.318.1.1.1.5.1.2.1.3',
    acceptThisDevice => '1.3.6.1.4.1.318.1.1.1.5.1.2.1.4',
    upsAdvConfig => '1.3.6.1.4.1.318.1.1.1.5.2',
    upsAdvConfigRatedOutputVoltage => '1.3.6.1.4.1.318.1.1.1.5.2.1.0',
    upsAdvConfigHighTransferVolt => '1.3.6.1.4.1.318.1.1.1.5.2.2.0',
    upsAdvConfigLowTransferVolt => '1.3.6.1.4.1.318.1.1.1.5.2.3.0',
    upsAdvConfigAlarm => '1.3.6.1.4.1.318.1.1.1.5.2.4.0',
    upsAdvConfigAlarmTimer => '1.3.6.1.4.1.318.1.1.1.5.2.5.0',
    upsAdvConfigMinReturnCapacity => '1.3.6.1.4.1.318.1.1.1.5.2.6.0',
    upsAdvConfigSensitivity => '1.3.6.1.4.1.318.1.1.1.5.2.7.0',
    upsAdvConfigLowBatteryRunTime => '1.3.6.1.4.1.318.1.1.1.5.2.8.0',
    upsAdvConfigReturnDelay => '1.3.6.1.4.1.318.1.1.1.5.2.9.0',
    upsAdvConfigShutoffDelay => '1.3.6.1.4.1.318.1.1.1.5.2.10.0',
    upsAdvConfigUpsSleepTime => '1.3.6.1.4.1.318.1.1.1.5.2.11.0',
    upsAdvConfigSetEEPROMDefaults => '1.3.6.1.4.1.318.1.1.1.5.2.12.0',
    upsAdvConfigDipSwitchTable => '1.3.6.1.4.1.318.1.1.1.5.2.13',
    upsAdvConfigDipSwitchEntry => '1.3.6.1.4.1.318.1.1.1.5.2.13.1',
    dipSwitchIndex => '1.3.6.1.4.1.318.1.1.1.5.2.13.1.1',
    dipSwitchStatus => '1.3.6.1.4.1.318.1.1.1.5.2.13.1.2',
    upsAdvConfigBattExhaustThresh => '1.3.6.1.4.1.318.1.1.1.5.2.14.0',
    upsAdvConfigPassword => '1.3.6.1.4.1.318.1.1.1.5.2.15.0',
    upsAdvConfigAllowedSetTable => '1.3.6.1.4.1.318.1.1.1.5.2.16',
    upsAdvConfigAllowedSetEntry => '1.3.6.1.4.1.318.1.1.1.5.2.16.1',
    apcUpsConfigFieldIndex => '1.3.6.1.4.1.318.1.1.1.5.2.16.1.1',
    apcUpsConfigFieldOID => '1.3.6.1.4.1.318.1.1.1.5.2.16.1.2',
    apcUpsConfigFieldValueRange => '1.3.6.1.4.1.318.1.1.1.5.2.16.1.3',
    upsAdvConfigBattCabAmpHour => '1.3.6.1.4.1.318.1.1.1.5.2.17.0',
    upsAdvConfigPositionSelector => '1.3.6.1.4.1.318.1.1.1.5.2.18.0',
    upsAdvConfigOutputFreqRange => '1.3.6.1.4.1.318.1.1.1.5.2.19.0',
    upsAdvConfigUPSFail => '1.3.6.1.4.1.318.1.1.1.5.2.20.0',
    upsAdvConfigAlarmRedundancy => '1.3.6.1.4.1.318.1.1.1.5.2.21.0',
    upsAdvConfigAlarmLoadOver => '1.3.6.1.4.1.318.1.1.1.5.2.22.0',
    upsAdvConfigAlarmRuntimeUnder => '1.3.6.1.4.1.318.1.1.1.5.2.23.0',
    upsAdvConfigVoutReporting => '1.3.6.1.4.1.318.1.1.1.5.2.24.0',
    upsAdvConfigNumExternalBatteries => '1.3.6.1.4.1.318.1.1.1.5.2.25.0',
    upsAdvConfigSimpleSignalShutdowns => '1.3.6.1.4.1.318.1.1.1.5.2.26.0',
    upsAdvConfigMaxShutdownTime => '1.3.6.1.4.1.318.1.1.1.5.2.27.0',
    upsAsiUpsControlServerRequestShutdown => '1.3.6.1.4.1.318.1.1.1.5.2.28.0',
    upsAdvConfigMinReturnRuntime => '1.3.6.1.4.1.318.1.1.1.5.2.29.0',
    upsAdvConfigBasicSignalLowBatteryDuration => '1.3.6.1.4.1.318.1.1.1.5.2.30.0',
    upsAdvConfigBypassPhaseLockRequired => '1.3.6.1.4.1.318.1.1.1.5.2.31.0',
    upsAdvConfigOutputFreqSlewRate => '1.3.6.1.4.1.318.1.1.1.5.2.32.0',
    upsAdvConfigChargerLevel => '1.3.6.1.4.1.318.1.1.1.5.2.33.0',
    upsAdvConfigBypassToleranceSetting => '1.3.6.1.4.1.318.1.1.1.5.2.34.0',
    upsAdvConfigMainsSetting => '1.3.6.1.4.1.318.1.1.1.5.2.35.0',
    upsAdvConfigACWiringSetting => '1.3.6.1.4.1.318.1.1.1.5.2.36.0',
    upsAdvConfigUpperOutputVoltTolerance => '1.3.6.1.4.1.318.1.1.1.5.2.37.0',
    upsAdvConfigLowerOutputVoltTolerance => '1.3.6.1.4.1.318.1.1.1.5.2.38.0',
    upsAdvConfigUpperBypassVoltTolerance => '1.3.6.1.4.1.318.1.1.1.5.2.39.0',
    upsAdvConfigLowerBypassVoltTolerance => '1.3.6.1.4.1.318.1.1.1.5.2.40.0',
    upsAdvConfigOutofSyncBypassTransferDelay => '1.3.6.1.4.1.318.1.1.1.5.2.41.0',
    upsSyncCtrlGroupConfig => '1.3.6.1.4.1.318.1.1.1.10.1',
    upsSCGMembershipGroupNumber => '1.3.6.1.4.1.318.1.1.1.10.1.1.0',
    upsSCGActiveMembershipStatus => '1.3.6.1.4.1.318.1.1.1.10.1.2.0',
    upsSCGPowerSynchronizationDelayTime => '1.3.6.1.4.1.318.1.1.1.10.1.3.0',
    upsSCGReturnBatteryCapacityOffset => '1.3.6.1.4.1.318.1.1.1.10.1.4.0',
    upsSCGMultiCastIP => '1.3.6.1.4.1.318.1.1.1.10.1.5.0',
    upsSyncCtrlGroupStatus => '1.3.6.1.4.1.318.1.1.1.10.2',
    upsSCGNumOfGroupMembers => '1.3.6.1.4.1.318.1.1.1.10.2.1.0',
    upsSCGStatusTable => '1.3.6.1.4.1.318.1.1.1.10.2.2',
    upsSCGStatusEntry => '1.3.6.1.4.1.318.1.1.1.10.2.2.1',
    upsSCGStatusTableIndex => '1.3.6.1.4.1.318.1.1.1.10.2.2.1.1',
    upsSCGMemberIP => '1.3.6.1.4.1.318.1.1.1.10.2.2.1.2',
    upsSCGACInputStatus => '1.3.6.1.4.1.318.1.1.1.10.2.2.1.3',
    upsSCGACOutputStatus => '1.3.6.1.4.1.318.1.1.1.10.2.2.1.4',
    upsBasicState => '1.3.6.1.4.1.318.1.1.1.11.1',
    upsBasicStateOutputState => '1.3.6.1.4.1.318.1.1.1.11.1.1.0',
    upsAdvState => '1.3.6.1.4.1.318.1.1.1.11.2',
    upsAdvStateAbnormalConditions => '1.3.6.1.4.1.318.1.1.1.11.2.1.0',
    upsAdvStateSymmetra3PhaseSpecificFaults => '1.3.6.1.4.1.318.1.1.1.11.2.2.0',
    upsAdvStateDP300ESpecificFaults => '1.3.6.1.4.1.318.1.1.1.11.2.3.0',
    upsAdvStateSymmetraSpecificFaults => '1.3.6.1.4.1.318.1.1.1.11.2.4.0',
    upsAdvStateSmartUPSSpecificFaults => '1.3.6.1.4.1.318.1.1.1.11.2.5.0',
    upsAdvStateSystemMessages => '1.3.6.1.4.1.318.1.1.1.11.2.6.0',
    upsBasicControl => '1.3.6.1.4.1.318.1.1.1.6.1',
    upsBasicControlConserveBattery => '1.3.6.1.4.1.318.1.1.1.6.1.1.0',
    upsAdvControl => '1.3.6.1.4.1.318.1.1.1.6.2',
    upsAdvControlUpsOff => '1.3.6.1.4.1.318.1.1.1.6.2.1.0',
    upsAdvControlRebootShutdownUps => '1.3.6.1.4.1.318.1.1.1.6.2.2.0',
    upsAdvControlUpsSleep => '1.3.6.1.4.1.318.1.1.1.6.2.3.0',
    upsAdvControlSimulatePowerFail => '1.3.6.1.4.1.318.1.1.1.6.2.4.0',
    upsAdvControlFlashAndBeep => '1.3.6.1.4.1.318.1.1.1.6.2.5.0',
    upsAdvControlTurnOnUPS => '1.3.6.1.4.1.318.1.1.1.6.2.6.0',
    upsAdvControlBypassSwitch => '1.3.6.1.4.1.318.1.1.1.6.2.7.0',
    upsAdvControlRebootUpsWithOrWithoutAC => '1.3.6.1.4.1.318.1.1.1.6.2.8.0',
    upsAdvControlFirmwareUpdate => '1.3.6.1.4.1.318.1.1.1.6.2.9.0',
    upsAdvTest => '1.3.6.1.4.1.318.1.1.1.7.2',
    upsAdvTestDiagnosticSchedule => '1.3.6.1.4.1.318.1.1.1.7.2.1.0',
    upsAdvTestDiagnosticScheduleDefinition => {
      1 => 'unknown',
      2 => 'biweekly',
      3 => 'weekly',
      4 => 'atTurnOn',
      5 => 'never',
      6 => 'fourWeeks',
      7 => 'twelveWeeks',
      8 => 'biweeklySinceLastTest',
      9 => 'weeklySinceLastTest',
    },
    upsAdvTestDiagnostics => '1.3.6.1.4.1.318.1.1.1.7.2.2.0',
    upsAdvTestDiagnosticsResults => '1.3.6.1.4.1.318.1.1.1.7.2.3.0',
    upsAdvTestDiagnosticsResultsDefinition => {
      1 => 'ok',
      2 => 'failed',
      3 => 'invalidTest',
      4 => 'testInProgress',
    },
    upsAdvTestLastDiagnosticsDate => '1.3.6.1.4.1.318.1.1.1.7.2.4.0',
    upsAdvTestRuntimeCalibration => '1.3.6.1.4.1.318.1.1.1.7.2.5.0',
    upsAdvTestCalibrationResults => '1.3.6.1.4.1.318.1.1.1.7.2.6.0',
    upsAdvTestCalibrationDate => '1.3.6.1.4.1.318.1.1.1.7.2.7.0',
    upsAdvTestDiagnosticTime => '1.3.6.1.4.1.318.1.1.1.7.2.8.0',
    upsAdvTestDiagnosticDay => '1.3.6.1.4.1.318.1.1.1.7.2.9.0',
    upsComm => '1.3.6.1.4.1.318.1.1.1.8',
    upsCommStatus => '1.3.6.1.4.1.318.1.1.1.8.1.0',
    mUpsEnviron => '1.3.6.1.4.1.318.1.1.2.1',
    mUpsEnvironAmbientTemperature => '1.3.6.1.4.1.318.1.1.2.1.1.0',
    mUpsEnvironRelativeHumidity => '1.3.6.1.4.1.318.1.1.2.1.2.0',
    mUpsEnvironAmbientTemperature2 => '1.3.6.1.4.1.318.1.1.2.1.3.0',
    mUpsEnvironRelativeHumidity2 => '1.3.6.1.4.1.318.1.1.2.1.4.0',
    mUpsContact => '1.3.6.1.4.1.318.1.1.2.2',
    mUpsContactNumContacts => '1.3.6.1.4.1.318.1.1.2.2.1.0',
    mUpsContactTable => '1.3.6.1.4.1.318.1.1.2.2.2',
    mUpsContactEntry => '1.3.6.1.4.1.318.1.1.2.2.2.1',
    contactNumber => '1.3.6.1.4.1.318.1.1.2.2.2.1.1',
    normalState => '1.3.6.1.4.1.318.1.1.2.2.2.1.2',
    description => '1.3.6.1.4.1.318.1.1.2.2.2.1.3',
    monitoringStatus => '1.3.6.1.4.1.318.1.1.2.2.2.1.4',
    currentStatus => '1.3.6.1.4.1.318.1.1.2.2.2.1.5',
    upsPhaseResetValues => '1.3.6.1.4.1.318.1.1.1.9.1',
    upsPhaseResetMaxMinValues => '1.3.6.1.4.1.318.1.1.1.9.1.1.0',
    upsPhaseInput => '1.3.6.1.4.1.318.1.1.1.9.2',
    upsPhaseNumInputs => '1.3.6.1.4.1.318.1.1.1.9.2.1.0',
    upsPhaseInputTable => '1.3.6.1.4.1.318.1.1.1.9.2.2',
    upsPhaseInputEntry => '1.3.6.1.4.1.318.1.1.1.9.2.2.1',
    upsPhaseInputTableIndex => '1.3.6.1.4.1.318.1.1.1.9.2.2.1.1',
    upsPhaseNumInputPhases => '1.3.6.1.4.1.318.1.1.1.9.2.2.1.2',
    upsPhaseInputVoltageOrientation => '1.3.6.1.4.1.318.1.1.1.9.2.2.1.3',
    upsPhaseInputFrequency => '1.3.6.1.4.1.318.1.1.1.9.2.2.1.4',
    upsPhaseInputType => '1.3.6.1.4.1.318.1.1.1.9.2.2.1.5',
    upsPhaseInputName => '1.3.6.1.4.1.318.1.1.1.9.2.2.1.6',
    upsPhaseInputPhaseTable => '1.3.6.1.4.1.318.1.1.1.9.2.3',
    upsPhaseInputPhaseEntry => '1.3.6.1.4.1.318.1.1.1.9.2.3.1',
    upsPhaseInputPhaseTableIndex => '1.3.6.1.4.1.318.1.1.1.9.2.3.1.1',
    upsPhaseInputPhaseIndex => '1.3.6.1.4.1.318.1.1.1.9.2.3.1.2',
    upsPhaseInputVoltage => '1.3.6.1.4.1.318.1.1.1.9.2.3.1.3',
    upsPhaseInputMaxVoltage => '1.3.6.1.4.1.318.1.1.1.9.2.3.1.4',
    upsPhaseInputMinVoltage => '1.3.6.1.4.1.318.1.1.1.9.2.3.1.5',
    upsPhaseInputCurrent => '1.3.6.1.4.1.318.1.1.1.9.2.3.1.6',
    upsPhaseInputMaxCurrent => '1.3.6.1.4.1.318.1.1.1.9.2.3.1.7',
    upsPhaseInputMinCurrent => '1.3.6.1.4.1.318.1.1.1.9.2.3.1.8',
    upsPhaseInputPower => '1.3.6.1.4.1.318.1.1.1.9.2.3.1.9',
    upsPhaseInputMaxPower => '1.3.6.1.4.1.318.1.1.1.9.2.3.1.10',
    upsPhaseInputMinPower => '1.3.6.1.4.1.318.1.1.1.9.2.3.1.11',
    upsPhaseOutput => '1.3.6.1.4.1.318.1.1.1.9.3',
    upsPhaseNumOutputs => '1.3.6.1.4.1.318.1.1.1.9.3.1.0',
    upsPhaseOutputTable => '1.3.6.1.4.1.318.1.1.1.9.3.2',
    upsPhaseOutputEntry => '1.3.6.1.4.1.318.1.1.1.9.3.2.1',
    upsPhaseOutputTableIndex => '1.3.6.1.4.1.318.1.1.1.9.3.2.1.1',
    upsPhaseNumOutputPhases => '1.3.6.1.4.1.318.1.1.1.9.3.2.1.2',
    upsPhaseOutputVoltageOrientation => '1.3.6.1.4.1.318.1.1.1.9.3.2.1.3',
    upsPhaseOutputFrequency => '1.3.6.1.4.1.318.1.1.1.9.3.2.1.4',
    upsPhaseOutputPhaseTable => '1.3.6.1.4.1.318.1.1.1.9.3.3',
    upsPhaseOutputPhaseEntry => '1.3.6.1.4.1.318.1.1.1.9.3.3.1',
    upsPhaseOutputPhaseTableIndex => '1.3.6.1.4.1.318.1.1.1.9.3.3.1.1',
    upsPhaseOutputPhaseIndex => '1.3.6.1.4.1.318.1.1.1.9.3.3.1.2',
    upsPhaseOutputVoltage => '1.3.6.1.4.1.318.1.1.1.9.3.3.1.3',
    upsPhaseOutputCurrent => '1.3.6.1.4.1.318.1.1.1.9.3.3.1.4',
    upsPhaseOutputMaxCurrent => '1.3.6.1.4.1.318.1.1.1.9.3.3.1.5',
    upsPhaseOutputMinCurrent => '1.3.6.1.4.1.318.1.1.1.9.3.3.1.6',
    upsPhaseOutputLoad => '1.3.6.1.4.1.318.1.1.1.9.3.3.1.7',
    upsPhaseOutputMaxLoad => '1.3.6.1.4.1.318.1.1.1.9.3.3.1.8',
    upsPhaseOutputMinLoad => '1.3.6.1.4.1.318.1.1.1.9.3.3.1.9',
    upsPhaseOutputPercentLoad => '1.3.6.1.4.1.318.1.1.1.9.3.3.1.10',
    upsPhaseOutputMaxPercentLoad => '1.3.6.1.4.1.318.1.1.1.9.3.3.1.11',
    upsPhaseOutputMinPercentLoad => '1.3.6.1.4.1.318.1.1.1.9.3.3.1.12',
    upsPhaseOutputPower => '1.3.6.1.4.1.318.1.1.1.9.3.3.1.13',
    upsPhaseOutputMaxPower => '1.3.6.1.4.1.318.1.1.1.9.3.3.1.14',
    upsPhaseOutputMinPower => '1.3.6.1.4.1.318.1.1.1.9.3.3.1.15',
    upsPhaseOutputPercentPower => '1.3.6.1.4.1.318.1.1.1.9.3.3.1.16',
    upsPhaseOutputMaxPercentPower => '1.3.6.1.4.1.318.1.1.1.9.3.3.1.17',
    upsPhaseOutputMinPercentPower => '1.3.6.1.4.1.318.1.1.1.9.3.3.1.18',
    upsOutletGroupStatus => '1.3.6.1.4.1.318.1.1.1.12.1',
    upsOutletGroupStatusTableSize => '1.3.6.1.4.1.318.1.1.1.12.1.1.0',
    upsOutletGroupStatusTable => '1.3.6.1.4.1.318.1.1.1.12.1.2',
    upsOutletGroupStatusEntry => '1.3.6.1.4.1.318.1.1.1.12.1.2.1',
    upsOutletGroupStatusIndex => '1.3.6.1.4.1.318.1.1.1.12.1.2.1.1',
    upsOutletGroupStatusName => '1.3.6.1.4.1.318.1.1.1.12.1.2.1.2',
    upsOutletGroupStatusGroupState => '1.3.6.1.4.1.318.1.1.1.12.1.2.1.3',
    upsOutletGroupStatusCommandPending => '1.3.6.1.4.1.318.1.1.1.12.1.2.1.4',
    upsOutletGroupStatusOutletType => '1.3.6.1.4.1.318.1.1.1.12.1.2.1.5',
    upsOutletGroupConfig => '1.3.6.1.4.1.318.1.1.1.12.2',
    upsOutletGroupConfigTableSize => '1.3.6.1.4.1.318.1.1.1.12.2.1.0',
    upsOutletGroupConfigTable => '1.3.6.1.4.1.318.1.1.1.12.2.2',
    upsOutletGroupConfigEntry => '1.3.6.1.4.1.318.1.1.1.12.2.2.1',
    upsOutletGroupConfigIndex => '1.3.6.1.4.1.318.1.1.1.12.2.2.1.1',
    upsOutletGroupConfigName => '1.3.6.1.4.1.318.1.1.1.12.2.2.1.2',
    upsOutletGroupConfigPowerOnDelay => '1.3.6.1.4.1.318.1.1.1.12.2.2.1.3',
    upsOutletGroupConfigPowerOffDelay => '1.3.6.1.4.1.318.1.1.1.12.2.2.1.4',
    upsOutletGroupConfigRebootDuration => '1.3.6.1.4.1.318.1.1.1.12.2.2.1.5',
    upsOutletGroupConfigMinReturnRuntime => '1.3.6.1.4.1.318.1.1.1.12.2.2.1.6',
    upsOutletGroupConfigOutletType => '1.3.6.1.4.1.318.1.1.1.12.2.2.1.7',
    upsOutletGroupConfigLoadShedControlSkipOffDelay => '1.3.6.1.4.1.318.1.1.1.12.2.2.1.8',
    upsOutletGroupConfigLoadShedControlAutoRestart => '1.3.6.1.4.1.318.1.1.1.12.2.2.1.9',
    upsOutletGroupConfigLoadShedControlTimeOnBattery => '1.3.6.1.4.1.318.1.1.1.12.2.2.1.10',
    upsOutletGroupConfigLoadShedControlRuntimeRemaining => '1.3.6.1.4.1.318.1.1.1.12.2.2.1.11',
    upsOutletGroupConfigLoadShedControlInOverload => '1.3.6.1.4.1.318.1.1.1.12.2.2.1.12',
    upsOutletGroupConfigLoadShedTimeOnBattery => '1.3.6.1.4.1.318.1.1.1.12.2.2.1.13',
    upsOutletGroupConfigLoadShedRuntimeRemaining => '1.3.6.1.4.1.318.1.1.1.12.2.2.1.14',
    upsOutletGroupControl => '1.3.6.1.4.1.318.1.1.1.12.3',
    upsOutletGroupControlTableSize => '1.3.6.1.4.1.318.1.1.1.12.3.1.0',
    upsOutletGroupControlTable => '1.3.6.1.4.1.318.1.1.1.12.3.2',
    upsOutletGroupControlEntry => '1.3.6.1.4.1.318.1.1.1.12.3.2.1',
    upsOutletGroupControlIndex => '1.3.6.1.4.1.318.1.1.1.12.3.2.1.1',
    upsOutletGroupControlName => '1.3.6.1.4.1.318.1.1.1.12.3.2.1.2',
    upsOutletGroupControlCommand => '1.3.6.1.4.1.318.1.1.1.12.3.2.1.3',
    upsOutletGroupControlOutletType => '1.3.6.1.4.1.318.1.1.1.12.3.2.1.4',
    upsDiagnosticIM => '1.3.6.1.4.1.318.1.1.1.13.1',
    upsDiagIMTableSize => '1.3.6.1.4.1.318.1.1.1.13.1.1.0',
    upsDiagIMTable => '1.3.6.1.4.1.318.1.1.1.13.1.2',
    upsDiagIMEntry => '1.3.6.1.4.1.318.1.1.1.13.1.2.1',
    upsDiagIMIndex => '1.3.6.1.4.1.318.1.1.1.13.1.2.1.1',
    upsDiagIMType => '1.3.6.1.4.1.318.1.1.1.13.1.2.1.2',
    upsDiagIMStatus => '1.3.6.1.4.1.318.1.1.1.13.1.2.1.3',
    upsDiagIMFirmwareRev => '1.3.6.1.4.1.318.1.1.1.13.1.2.1.4',
    upsDiagIMSlaveFirmwareRev => '1.3.6.1.4.1.318.1.1.1.13.1.2.1.5',
    upsDiagIMHardwareRev => '1.3.6.1.4.1.318.1.1.1.13.1.2.1.6',
    upsDiagIMSerialNum => '1.3.6.1.4.1.318.1.1.1.13.1.2.1.7',
    upsDiagIMManufactureDate => '1.3.6.1.4.1.318.1.1.1.13.1.2.1.8',
    upsDiagnosticPowerModules => '1.3.6.1.4.1.318.1.1.1.13.2',
    upsDiagPMTableSize => '1.3.6.1.4.1.318.1.1.1.13.2.1.0',
    upsDiagPMTable => '1.3.6.1.4.1.318.1.1.1.13.2.2',
    upsDiagPMEntry => '1.3.6.1.4.1.318.1.1.1.13.2.2.1',
    upsDiagPMIndex => '1.3.6.1.4.1.318.1.1.1.13.2.2.1.1',
    upsDiagPMStatus => '1.3.6.1.4.1.318.1.1.1.13.2.2.1.2',
    upsDiagPMFirmwareRev => '1.3.6.1.4.1.318.1.1.1.13.2.2.1.3',
    upsDiagPMHardwareRev => '1.3.6.1.4.1.318.1.1.1.13.2.2.1.4',
    upsDiagPMSerialNum => '1.3.6.1.4.1.318.1.1.1.13.2.2.1.5',
    upsDiagPMManufactureDate => '1.3.6.1.4.1.318.1.1.1.13.2.2.1.6',
    upsDiagnosticBatteries => '1.3.6.1.4.1.318.1.1.1.13.3',
    upsDiagBatteryTableSize => '1.3.6.1.4.1.318.1.1.1.13.3.1.0',
    upsDiagBatteryTable => '1.3.6.1.4.1.318.1.1.1.13.3.2',
    upsDiagBatteryEntry => '1.3.6.1.4.1.318.1.1.1.13.3.2.1',
    upsDiagBatteryFrameIndex => '1.3.6.1.4.1.318.1.1.1.13.3.2.1.1',
    upsDiagBatteryIndex => '1.3.6.1.4.1.318.1.1.1.13.3.2.1.2',
    upsDiagBatteryStatus => '1.3.6.1.4.1.318.1.1.1.13.3.2.1.3',
    upsDiagBatterySerialNumber => '1.3.6.1.4.1.318.1.1.1.13.3.2.1.4',
    upsDiagBatteryFirmwareRev => '1.3.6.1.4.1.318.1.1.1.13.3.2.1.5',
    upsDiagBatteryManufactureDate => '1.3.6.1.4.1.318.1.1.1.13.3.2.1.6',
    upsDiagBatteryType => '1.3.6.1.4.1.318.1.1.1.13.3.2.1.7',
    upsDiagSubSysFrameTableSize => '1.3.6.1.4.1.318.1.1.1.13.4.1',
    upsDiagnosticSubsystem => '1.3.6.1.4.1.318.1.1.1.13.4',
    upsDiagSubSysFrameTable => '1.3.6.1.4.1.318.1.1.1.13.4.2',
    upsDiagSubSysFrameEntry => '1.3.6.1.4.1.318.1.1.1.13.4.2.1',
    upsDiagSubSysFrameIndex => '1.3.6.1.4.1.318.1.1.1.13.4.2.1.1',
    upsDiagSubSysFrameType => '1.3.6.1.4.1.318.1.1.1.13.4.2.1.2',
    upsDiagSubSysFrameFirmwareRev => '1.3.6.1.4.1.318.1.1.1.13.4.2.1.3',
    upsDiagSubSysFrameHardwareRev => '1.3.6.1.4.1.318.1.1.1.13.4.2.1.4',
    upsDiagSubSysFrameSerialNum => '1.3.6.1.4.1.318.1.1.1.13.4.2.1.5',
    upsDiagSubSysFrameManufactureDate => '1.3.6.1.4.1.318.1.1.1.13.4.2.1.6',
    upsDiagSubSysIntBypSwitchTableSize => '1.3.6.1.4.1.318.1.1.1.13.4.3.0',
    upsDiagSubSysIntBypSwitchTable => '1.3.6.1.4.1.318.1.1.1.13.4.4',
    upsDiagSubSysIntBypSwitchEntry => '1.3.6.1.4.1.318.1.1.1.13.4.4.1',
    upsDiagSubSysIntBypSwitchFrameIndex => '1.3.6.1.4.1.318.1.1.1.13.4.4.1.1',
    upsDiagSubSysIntBypSwitchIndex => '1.3.6.1.4.1.318.1.1.1.13.4.4.1.2',
    upsDiagSubSysIntBypSwitchStatus => '1.3.6.1.4.1.318.1.1.1.13.4.4.1.3',
    upsDiagSubSysIntBypSwitchFirmwareRev => '1.3.6.1.4.1.318.1.1.1.13.4.4.1.4',
    upsDiagSubSysIntBypSwitchHardwareRev => '1.3.6.1.4.1.318.1.1.1.13.4.4.1.5',
    upsDiagSubSysIntBypSwitchSerialNum => '1.3.6.1.4.1.318.1.1.1.13.4.4.1.6',
    upsDiagSubSysIntBypSwitchManufactureDate => '1.3.6.1.4.1.318.1.1.1.13.4.4.1.7',
    upsDiagSubSysBattMonitorTableSize => '1.3.6.1.4.1.318.1.1.1.13.4.5.0',
    upsDiagSubSysBattMonitorTable => '1.3.6.1.4.1.318.1.1.1.13.4.6',
    upsDiagSubSysBattMonitorEntry => '1.3.6.1.4.1.318.1.1.1.13.4.6.1',
    upsDiagSubSysBattMonitorFrameIndex => '1.3.6.1.4.1.318.1.1.1.13.4.6.1.1',
    upsDiagSubSysBattMonitorIndex => '1.3.6.1.4.1.318.1.1.1.13.4.6.1.2',
    upsDiagSubSysBattMonitorStatus => '1.3.6.1.4.1.318.1.1.1.13.4.6.1.3',
    upsDiagSubSysBattMonitorFirmwareRev => '1.3.6.1.4.1.318.1.1.1.13.4.6.1.4',
    upsDiagSubSysBattMonitorHardwareRev => '1.3.6.1.4.1.318.1.1.1.13.4.6.1.5',
    upsDiagSubSysBattMonitorSerialNum => '1.3.6.1.4.1.318.1.1.1.13.4.6.1.6',
    upsDiagSubSysBattMonitorManufactureDate => '1.3.6.1.4.1.318.1.1.1.13.4.6.1.7',
    upsDiagSubSysExternalSwitchGearTableSize => '1.3.6.1.4.1.318.1.1.1.13.4.7.0',
    upsDiagSubSysExternalSwitchGearTable => '1.3.6.1.4.1.318.1.1.1.13.4.8',
    upsDiagSubSysExternalSwitchGearEntry => '1.3.6.1.4.1.318.1.1.1.13.4.8.1',
    upsDiagSubSysExternalSwitchGearFrameIndex => '1.3.6.1.4.1.318.1.1.1.13.4.8.1.1',
    upsDiagSubSysExternalSwitchGearIndex => '1.3.6.1.4.1.318.1.1.1.13.4.8.1.2',
    upsDiagSubSysExternalSwitchGearStatus => '1.3.6.1.4.1.318.1.1.1.13.4.8.1.3',
    upsDiagSubSysExternalSwitchGearFirmwareRev => '1.3.6.1.4.1.318.1.1.1.13.4.8.1.4',
    upsDiagSubSysExternalSwitchGearHardwareRev => '1.3.6.1.4.1.318.1.1.1.13.4.8.1.5',
    upsDiagSubSysExternalSwitchGearSerialNum => '1.3.6.1.4.1.318.1.1.1.13.4.8.1.6',
    upsDiagSubSysExternalSwitchGearManufactureDate => '1.3.6.1.4.1.318.1.1.1.13.4.8.1.7',
    upsDiagSubSysDisplayInterfaceCardTableSize => '1.3.6.1.4.1.318.1.1.1.13.4.9.0',
    upsDiagSubSysDisplayInterfaceCardTable => '1.3.6.1.4.1.318.1.1.1.13.4.10',
    upsDiagSubSysDisplayInterfaceCardEntry => '1.3.6.1.4.1.318.1.1.1.13.4.10.1',
    upsDiagSubSysDisplayInterfaceCardFrameIndex => '1.3.6.1.4.1.318.1.1.1.13.4.10.1.1',
    upsDiagSubSysDisplayInterfaceCardIndex => '1.3.6.1.4.1.318.1.1.1.13.4.10.1.2',
    upsDiagSubSysDisplayInterfaceCardStatus => '1.3.6.1.4.1.318.1.1.1.13.4.10.1.3',
    upsDiagSubSysDCCircuitBreakerTableSize => '1.3.6.1.4.1.318.1.1.1.13.4.11.0',
    upsDiagSubSysDCCircuitBreakerTable => '1.3.6.1.4.1.318.1.1.1.13.4.12',
    upsDiagSubSysDCCircuitBreakerEntry => '1.3.6.1.4.1.318.1.1.1.13.4.12.1',
    upsDiagSubSysDCCircuitBreakerFrameIndex => '1.3.6.1.4.1.318.1.1.1.13.4.12.1.1',
    upsDiagSubSysDCCircuitBreakerIndex => '1.3.6.1.4.1.318.1.1.1.13.4.12.1.2',
    upsDiagSubSysDCCircuitBreakerStatus => '1.3.6.1.4.1.318.1.1.1.13.4.12.1.3',
    upsDiagSubSysSystemPowerSupplyTableSize => '1.3.6.1.4.1.318.1.1.1.13.4.13.0',
    upsDiagSubSysSystemPowerSupplyTable => '1.3.6.1.4.1.318.1.1.1.13.4.14',
    upsDiagSubSysSystemPowerSupplyEntry => '1.3.6.1.4.1.318.1.1.1.13.4.14.1',
    upsDiagSubSysSystemPowerSupplyFrameIndex => '1.3.6.1.4.1.318.1.1.1.13.4.14.1.1',
    upsDiagSubSysSystemPowerSupplyIndex => '1.3.6.1.4.1.318.1.1.1.13.4.14.1.2',
    upsDiagSubSysSystemPowerSupplyStatus => '1.3.6.1.4.1.318.1.1.1.13.4.14.1.3',
    upsDiagSubSysSystemPowerSupplyFirmwareRev => '1.3.6.1.4.1.318.1.1.1.13.4.14.1.4',
    upsDiagSubSysSystemPowerSupplyHardwareRev => '1.3.6.1.4.1.318.1.1.1.13.4.14.1.5',
    upsDiagSubSysSystemPowerSupplySerialNum => '1.3.6.1.4.1.318.1.1.1.13.4.14.1.6',
    upsDiagSubSysSystemPowerSupplyManufactureDate => '1.3.6.1.4.1.318.1.1.1.13.4.14.1.7',
    upsDiagSubSysXRCommunicationCardTableSize => '1.3.6.1.4.1.318.1.1.1.13.4.15.0',
    upsDiagSubSysXRCommunicationCardTable => '1.3.6.1.4.1.318.1.1.1.13.4.16',
    upsDiagSubSysXRCommunicationCardEntry => '1.3.6.1.4.1.318.1.1.1.13.4.16.1',
    upsDiagSubSysXRCommunicationCardFrameIndex => '1.3.6.1.4.1.318.1.1.1.13.4.16.1.1',
    upsDiagSubSysXRCommunicationCardIndex => '1.3.6.1.4.1.318.1.1.1.13.4.16.1.2',
    upsDiagSubSysXRCommunicationCardStatus => '1.3.6.1.4.1.318.1.1.1.13.4.16.1.3',
    upsDiagSubSysXRCommunicationCardFirmwareRev => '1.3.6.1.4.1.318.1.1.1.13.4.16.1.4',
    upsDiagSubSysXRCommunicationCardSerialNum => '1.3.6.1.4.1.318.1.1.1.13.4.16.1.5',
    upsDiagSubSysExternalPowerFrameBoardTableSize => '1.3.6.1.4.1.318.1.1.1.13.4.17.0',
    upsDiagSubSysExternalPowerFrameBoardTable => '1.3.6.1.4.1.318.1.1.1.13.4.18',
    upsDiagSubSysExternalPowerFrameBoardEntry => '1.3.6.1.4.1.318.1.1.1.13.4.18.1',
    upsDiagSubSysExternalPowerFrameBoardFrameIndex => '1.3.6.1.4.1.318.1.1.1.13.4.18.1.1',
    upsDiagSubSysExternalPowerFrameBoardIndex => '1.3.6.1.4.1.318.1.1.1.13.4.18.1.2',
    upsDiagSubSysExternalPowerFrameBoardStatus => '1.3.6.1.4.1.318.1.1.1.13.4.18.1.3',
    upsDiagSubSysChargerTableSize => '1.3.6.1.4.1.318.1.1.1.13.4.19.0',
    upsDiagSubSysChargerTable => '1.3.6.1.4.1.318.1.1.1.13.4.20',
    upsDiagSubSysChargerEntry => '1.3.6.1.4.1.318.1.1.1.13.4.20.1',
    upsDiagSubSysChargerFrameIndex => '1.3.6.1.4.1.318.1.1.1.13.4.20.1.1',
    upsDiagSubSysChargerIndex => '1.3.6.1.4.1.318.1.1.1.13.4.20.1.2',
    upsDiagSubSysChargerStatus => '1.3.6.1.4.1.318.1.1.1.13.4.20.1.3',
    upsDiagSubSysInverterTableSize => '1.3.6.1.4.1.318.1.1.1.13.4.21.0',
    upsDiagSubSysInverterTable => '1.3.6.1.4.1.318.1.1.1.13.4.22',
    upsDiagSubSysInverterEntry => '1.3.6.1.4.1.318.1.1.1.13.4.22.1',
    upsDiagSubSysInverterFrameIndex => '1.3.6.1.4.1.318.1.1.1.13.4.22.1.1',
    upsDiagSubSysInverterIndex => '1.3.6.1.4.1.318.1.1.1.13.4.22.1.2',
    upsDiagSubSysInverterStatus => '1.3.6.1.4.1.318.1.1.1.13.4.22.1.3',
    upsDiagSubSysInverterFirmwareRev => '1.3.6.1.4.1.318.1.1.1.13.4.22.1.4',
    upsDiagSubSysInverterHardwareRev => '1.3.6.1.4.1.318.1.1.1.13.4.22.1.5',
    upsDiagSubSysInverterSerialNum => '1.3.6.1.4.1.318.1.1.1.13.4.22.1.6',
    upsDiagSubSysInverterManufactureDate => '1.3.6.1.4.1.318.1.1.1.13.4.22.1.7',
    upsDiagSubSysPowerFactorCorrectionTableSize => '1.3.6.1.4.1.318.1.1.1.13.4.23.0',
    upsDiagSubSysPowerFactorCorrectionTable => '1.3.6.1.4.1.318.1.1.1.13.4.24',
    upsDiagSubSysPowerFactorCorrectionEntry => '1.3.6.1.4.1.318.1.1.1.13.4.24.1',
    upsDiagSubSysPowerFactorCorrectionFrameIndex => '1.3.6.1.4.1.318.1.1.1.13.4.24.1.1',
    upsDiagSubSysPowerFactorCorrectionIndex => '1.3.6.1.4.1.318.1.1.1.13.4.24.1.2',
    upsDiagSubSysPowerFactorCorrectionStatus => '1.3.6.1.4.1.318.1.1.1.13.4.24.1.3',
    upsDiagSubSysPowerFactorCorrectionFirmwareRev => '1.3.6.1.4.1.318.1.1.1.13.4.24.1.4',
    upsDiagSubSysPowerFactorCorrectionHardwareRev => '1.3.6.1.4.1.318.1.1.1.13.4.24.1.5',
    upsDiagSubSysPowerFactorCorrectionSerialNum => '1.3.6.1.4.1.318.1.1.1.13.4.24.1.6',
    upsDiagSubSysPowerFactorCorrectionManufactureDate => '1.3.6.1.4.1.318.1.1.1.13.4.24.1.7',
    upsDiagSubSysNetworkComCardTableSize => '1.3.6.1.4.1.318.1.1.1.13.4.25.0',
    upsDiagSubSysNetworkComCardTable => '1.3.6.1.4.1.318.1.1.1.13.4.26',
    upsDiagSubSysNetworkComCardEntry => '1.3.6.1.4.1.318.1.1.1.13.4.26.1',
    upsDiagSubSysNetworkComCardIndex => '1.3.6.1.4.1.318.1.1.1.13.4.26.1.1',
    upsDiagSubSysNetworkComCardModelNumber => '1.3.6.1.4.1.318.1.1.1.13.4.26.1.2',
    upsDiagSubSysNetworkComCardSerialNumber => '1.3.6.1.4.1.318.1.1.1.13.4.26.1.3',
    upsDiagSubSysNetworkComCardDateOfManufacture => '1.3.6.1.4.1.318.1.1.1.13.4.26.1.4',
    upsDiagSubSysNetworkComCardHardwareRev => '1.3.6.1.4.1.318.1.1.1.13.4.26.1.5',
    upsDiagSubSysNetworkComCardFirmwareAppRev => '1.3.6.1.4.1.318.1.1.1.13.4.26.1.6',
    upsDiagSubSysNetworkComCardFirmwareAppOSRev => '1.3.6.1.4.1.318.1.1.1.13.4.26.1.7',
    upsDiagSwitchGear => '1.3.6.1.4.1.318.1.1.1.13.5.1',
    upsDiagSwitchGearStatus => '1.3.6.1.4.1.318.1.1.1.13.5.1.1.0',
    upsDiagSwitchGearInputSwitchStatus => '1.3.6.1.4.1.318.1.1.1.13.5.1.2.0',
    upsDiagSwitchGearOutputSwitchStatus => '1.3.6.1.4.1.318.1.1.1.13.5.1.3.0',
    upsDiagSwitchGearBypassSwitchStatus => '1.3.6.1.4.1.318.1.1.1.13.5.1.4.0',
    upsDiagSwitchGearBypassInputSwitchStatus => '1.3.6.1.4.1.318.1.1.1.13.5.1.5.0',
    upsDiagSwitchGearBreakerTableSize => '1.3.6.1.4.1.318.1.1.1.13.5.1.6.0',
    upsDiagSwitchGearBreakerTable => '1.3.6.1.4.1.318.1.1.1.13.5.1.7',
    upsDiagSwitchGearBreakerEntry => '1.3.6.1.4.1.318.1.1.1.13.5.1.7.1',
    switchgearBreakerIndex => '1.3.6.1.4.1.318.1.1.1.13.5.1.7.1.1',
    switchgearBreakerPresent => '1.3.6.1.4.1.318.1.1.1.13.5.1.7.1.2',
    switchgearBreakerName => '1.3.6.1.4.1.318.1.1.1.13.5.1.7.1.3',
    upsDiagSubFeedBreakerTableSize => '1.3.6.1.4.1.318.1.1.1.13.5.1.8.0',
    upsDiagSubFeedBreakerTable => '1.3.6.1.4.1.318.1.1.1.13.5.1.9',
    upsDiagSubFeedBreakerEntry => '1.3.6.1.4.1.318.1.1.1.13.5.1.9.1',
    subfeedBreakerIndex => '1.3.6.1.4.1.318.1.1.1.13.5.1.9.1.1',
    subfeedBreakerPresent => '1.3.6.1.4.1.318.1.1.1.13.5.1.9.1.2',
    subfeedBreakerRating => '1.3.6.1.4.1.318.1.1.1.13.5.1.9.1.3',
    subfeedBreakerUpperAcceptPowerWarning => '1.3.6.1.4.1.318.1.1.1.13.5.1.9.1.4',
    upsDiagMCCBBox => '1.3.6.1.4.1.318.1.1.1.13.5.2',
    upsDiagMCCBBoxStatus => '1.3.6.1.4.1.318.1.1.1.13.5.2.1.0',
    upsDiagTransformer => '1.3.6.1.4.1.318.1.1.1.13.5.3',
    upsDiagTransformerStatus => '1.3.6.1.4.1.318.1.1.1.13.5.3.1.0',
    upsDiagnosticComBus => '1.3.6.1.4.1.318.1.1.1.13.6',
    upsDiagComBusInternalMIMStatus => '1.3.6.1.4.1.318.1.1.1.13.6.1.0',
    upsDiagComBusInternalRIMStatus => '1.3.6.1.4.1.318.1.1.1.13.6.2.0',
    upsDiagComBusMIMtoRIMStatus => '1.3.6.1.4.1.318.1.1.1.13.6.3.0',
    upsDiagComBusExternalMIMStatus => '1.3.6.1.4.1.318.1.1.1.13.6.4.0',
    upsDiagComBusExternalRIMStatus => '1.3.6.1.4.1.318.1.1.1.13.6.5.0',
    upsParallelSystem => '1.3.6.1.4.1.318.1.1.1.14',
    upsParallelSysLocalAddress => '1.3.6.1.4.1.318.1.1.1.14.1.0',
    upsParallelSysRemoteAddress => '1.3.6.1.4.1.318.1.1.1.14.2.0',
    upsParallelSysRedundancy => '1.3.6.1.4.1.318.1.1.1.14.3.0',
    upsPhysicalLayout => '1.3.6.1.4.1.318.1.1.1.15',
    upsIOFrameLayoutPositionID => '1.3.6.1.4.1.318.1.1.1.15.1.0',
    upsBottomFeedFrameLayoutPositionID => '1.3.6.1.4.1.318.1.1.1.15.2.0',
    upsSwitchGearLayoutPositionID => '1.3.6.1.4.1.318.1.1.1.15.3.0',
    upsBatteryFrameLayoutTableSize => '1.3.6.1.4.1.318.1.1.1.15.4.0',
    upsBatteryFrameLayoutTable => '1.3.6.1.4.1.318.1.1.1.15.5',
    upsBatteryFrameLayoutEntry => '1.3.6.1.4.1.318.1.1.1.15.5.1',
    batteryFrameIndex => '1.3.6.1.4.1.318.1.1.1.15.5.1.1',
    batteryFramePositionID => '1.3.6.1.4.1.318.1.1.1.15.5.1.2',
    upsSideCarFrameLayoutTableSize => '1.3.6.1.4.1.318.1.1.1.15.6.0',
    upsSideCarFrameLayoutTable => '1.3.6.1.4.1.318.1.1.1.15.7',
    upsSideCarFrameLayoutEntry => '1.3.6.1.4.1.318.1.1.1.15.7.1',
    sideCarFrameIndex => '1.3.6.1.4.1.318.1.1.1.15.7.1.1',
    sideCarFramePositionID => '1.3.6.1.4.1.318.1.1.1.15.7.1.2',
    upsPowerFrameLayoutTableSize => '1.3.6.1.4.1.318.1.1.1.15.8.0',
    upsPowerFrameLayoutTable => '1.3.6.1.4.1.318.1.1.1.15.9',
    upsPowerFrameLayoutEntry => '1.3.6.1.4.1.318.1.1.1.15.9.1',
    powerFrameIndex => '1.3.6.1.4.1.318.1.1.1.15.9.1.1',
    powerFramePositionID => '1.3.6.1.4.1.318.1.1.1.15.9.1.2',
    upsIntegratedATS => '1.3.6.1.4.1.318.1.1.1.16',
    upsIntegratedATSSelectedSource => '1.3.6.1.4.1.318.1.1.1.16.1.0',
    upsIntegratedATSPreferredSource => '1.3.6.1.4.1.318.1.1.1.16.2.0',
    upsIntegratedATSUpsReturnStaggering => '1.3.6.1.4.1.318.1.1.1.16.3.0',
    upsIntegratedATSSourceTableSize => '1.3.6.1.4.1.318.1.1.1.16.4.0',
    upsIntegratedATSSourceTable => '1.3.6.1.4.1.318.1.1.1.16.5',
    upsIntegratedATSSourceEntry => '1.3.6.1.4.1.318.1.1.1.16.5.1',
    upsIntegratedATSSourceIndex => '1.3.6.1.4.1.318.1.1.1.16.5.1.1',
    upsIntegratedATSSourceName => '1.3.6.1.4.1.318.1.1.1.16.5.1.2',
    upsIntegratedATSSourceStatus => '1.3.6.1.4.1.318.1.1.1.16.5.1.3',
    upsIntegratedATSLineFailDelay => '1.3.6.1.4.1.318.1.1.1.16.5.1.4',
    upsIntegratedATSLineStabilityDelay => '1.3.6.1.4.1.318.1.1.1.16.5.1.5',
    serialPort2Config => '1.3.6.1.4.1.318.1.1.3.1.2.1',
    serialPort2Mode => '1.3.6.1.4.1.318.1.1.3.1.2.1.1.0',
    serialPort2Control => '1.3.6.1.4.1.318.1.1.3.1.2.2',
    setPulseOnTXD => '1.3.6.1.4.1.318.1.1.3.1.2.2.1.0',
    sPDUIdent => '1.3.6.1.4.1.318.1.1.4.1',
    sPDUIdentHardwareRev => '1.3.6.1.4.1.318.1.1.4.1.1.0',
    sPDUIdentFirmwareRev => '1.3.6.1.4.1.318.1.1.4.1.2.0',
    sPDUIdentDateOfManufacture => '1.3.6.1.4.1.318.1.1.4.1.3.0',
    sPDUIdentModelNumber => '1.3.6.1.4.1.318.1.1.4.1.4.0',
    sPDUIdentSerialNumber => '1.3.6.1.4.1.318.1.1.4.1.5.0',
    sPDUMasterControl => '1.3.6.1.4.1.318.1.1.4.2',
    sPDUMasterControlSwitch => '1.3.6.1.4.1.318.1.1.4.2.1.0',
    sPDUMasterState => '1.3.6.1.4.1.318.1.1.4.2.2.0',
    sPDUMasterPending => '1.3.6.1.4.1.318.1.1.4.2.3.0',
    sPDUMasterConfig => '1.3.6.1.4.1.318.1.1.4.3',
    sPDUMasterConfigPowerOn => '1.3.6.1.4.1.318.1.1.4.3.1.0',
    sPDUMasterConfigReboot => '1.3.6.1.4.1.318.1.1.4.3.2.0',
    sPDUMasterConfigPDUName => '1.3.6.1.4.1.318.1.1.4.3.3.0',
    sPDUOutletControl => '1.3.6.1.4.1.318.1.1.4.4',
    sPDUOutletControlTableSize => '1.3.6.1.4.1.318.1.1.4.4.1.0',
    sPDUOutletControlTable => '1.3.6.1.4.1.318.1.1.4.4.2',
    sPDUOutletControlEntry => '1.3.6.1.4.1.318.1.1.4.4.2.1',
    sPDUOutletControlIndex => '1.3.6.1.4.1.318.1.1.4.4.2.1.1',
    sPDUOutletPending => '1.3.6.1.4.1.318.1.1.4.4.2.1.2',
    sPDUOutletCtl => '1.3.6.1.4.1.318.1.1.4.4.2.1.3',
    sPDUOutletCtlName => '1.3.6.1.4.1.318.1.1.4.4.2.1.4',
    sPDUOutletConfig => '1.3.6.1.4.1.318.1.1.4.5',
    sPDUOutletConfigTableSize => '1.3.6.1.4.1.318.1.1.4.5.1.0',
    sPDUOutletConfigTable => '1.3.6.1.4.1.318.1.1.4.5.2',
    sPDUOutletConfigEntry => '1.3.6.1.4.1.318.1.1.4.5.2.1',
    sPDUOutletConfigIndex => '1.3.6.1.4.1.318.1.1.4.5.2.1.1',
    sPDUOutletPowerOnTime => '1.3.6.1.4.1.318.1.1.4.5.2.1.2',
    sPDUOutletName => '1.3.6.1.4.1.318.1.1.4.5.2.1.3',
    sPDUOutletPowerOffTime => '1.3.6.1.4.1.318.1.1.4.5.2.1.4',
    sPDUOutletRebootDuration => '1.3.6.1.4.1.318.1.1.4.5.2.1.5',
    sPDUIdentVM => '1.3.6.1.4.1.318.1.1.5.1',
    sPDUIdentVMTableSize => '1.3.6.1.4.1.318.1.1.5.1.1.0',
    sPDUIdentVMTable => '1.3.6.1.4.1.318.1.1.5.1.2',
    sPDUIdentVMEntry => '1.3.6.1.4.1.318.1.1.5.1.2.1',
    sPDUIdentVMIndex => '1.3.6.1.4.1.318.1.1.5.1.2.1.1',
    sPDUIdentNameVM => '1.3.6.1.4.1.318.1.1.5.1.2.1.2',
    sPDUIdentHardwareRevVM => '1.3.6.1.4.1.318.1.1.5.1.2.1.3',
    sPDUIdentFirmwareRevVM => '1.3.6.1.4.1.318.1.1.5.1.2.1.4',
    sPDUIdentDateOfManufactureVM => '1.3.6.1.4.1.318.1.1.5.1.2.1.5',
    sPDUIdentModelNumberVM => '1.3.6.1.4.1.318.1.1.5.1.2.1.6',
    sPDUIdentSerialNumberVM => '1.3.6.1.4.1.318.1.1.5.1.2.1.7',
    sPDUMasterControlVM => '1.3.6.1.4.1.318.1.1.5.2',
    sPDUMasterControlVMTableSize => '1.3.6.1.4.1.318.1.1.5.2.1.0',
    sPDUMasterControlVMTable => '1.3.6.1.4.1.318.1.1.5.2.2',
    sPDUMasterControlVMEntry => '1.3.6.1.4.1.318.1.1.5.2.2.1',
    sPDUMasterControlVMIndex => '1.3.6.1.4.1.318.1.1.5.2.2.1.1',
    sPDUMasterControlVMName => '1.3.6.1.4.1.318.1.1.5.2.2.1.2',
    sPDUMasterControlVMCommand => '1.3.6.1.4.1.318.1.1.5.2.2.1.3',
    sPDUMasterConfigVM => '1.3.6.1.4.1.318.1.1.5.3',
    sPDUMasterConfigVMTableSize => '1.3.6.1.4.1.318.1.1.5.3.1.0',
    sPDUMasterConfigVMTable => '1.3.6.1.4.1.318.1.1.5.3.2',
    sPDUMasterConfigVMEntry => '1.3.6.1.4.1.318.1.1.5.3.2.1',
    sPDUMasterConfigVMIndex => '1.3.6.1.4.1.318.1.1.5.3.2.1.1',
    sPDUMasterConfigVMName => '1.3.6.1.4.1.318.1.1.5.3.2.1.2',
    sPDUMasterConfigVMColdstartDelay => '1.3.6.1.4.1.318.1.1.5.3.2.1.3',
    sPDUMasterConfigVMAudioAlarmActivated => '1.3.6.1.4.1.318.1.1.5.3.2.1.4',
    sPDUMasterConfigVMHighLoadWarningThreshold => '1.3.6.1.4.1.318.1.1.5.3.2.1.5',
    sPDUMasterConfigVMLowLoadWarningThreshold => '1.3.6.1.4.1.318.1.1.5.3.2.1.6',
    sPDUMasterConfigVMOverloadRestriction => '1.3.6.1.4.1.318.1.1.5.3.2.1.7',
    sPDUMasterStatusVM => '1.3.6.1.4.1.318.1.1.5.4',
    sPDUMasterStatusVMTableSize => '1.3.6.1.4.1.318.1.1.5.4.1.0',
    sPDUMasterStatusVMTable => '1.3.6.1.4.1.318.1.1.5.4.2',
    sPDUMasterStatusVMEntry => '1.3.6.1.4.1.318.1.1.5.4.2.1',
    sPDUMasterStatusVMIndex => '1.3.6.1.4.1.318.1.1.5.4.2.1.1',
    sPDUMasterStatusVMName => '1.3.6.1.4.1.318.1.1.5.4.2.1.2',
    sPDUMasterStatusVMCommandPending => '1.3.6.1.4.1.318.1.1.5.4.2.1.3',
    sPDUMasterStatusVMOverloadCondition => '1.3.6.1.4.1.318.1.1.5.4.2.1.4',
    sPDUMasterStatusVMLowLoadCondition => '1.3.6.1.4.1.318.1.1.5.4.2.1.5',
    sPDUMasterStatusVMCurrentLoad => '1.3.6.1.4.1.318.1.1.5.4.2.1.6',
    sPDUMasterStatusVMMaxLoad => '1.3.6.1.4.1.318.1.1.5.4.2.1.7',
    sPDUMasterStatusVMOutletCount => '1.3.6.1.4.1.318.1.1.5.4.2.1.8',
    sPDUMasterStatusVMRebootDuration => '1.3.6.1.4.1.318.1.1.5.4.2.1.9',
    sPDUOutletControlVM => '1.3.6.1.4.1.318.1.1.5.5',
    sPDUOutletControlVMTable => '1.3.6.1.4.1.318.1.1.5.5.1',
    sPDUOutletControlVMEntry => '1.3.6.1.4.1.318.1.1.5.5.1.1',
    sPDUOutletControlVMIndex => '1.3.6.1.4.1.318.1.1.5.5.1.1.1',
    sPDUOutletControlVMName => '1.3.6.1.4.1.318.1.1.5.5.1.1.2',
    sPDUOutletControlVMOutletIndex => '1.3.6.1.4.1.318.1.1.5.5.1.1.3',
    sPDUOutletControlVMOutletName => '1.3.6.1.4.1.318.1.1.5.5.1.1.4',
    sPDUOutletControlVMOutletCommand => '1.3.6.1.4.1.318.1.1.5.5.1.1.5',
    sPDUOutletConfigVM => '1.3.6.1.4.1.318.1.1.5.6',
    sPDUOutletConfigVMTable => '1.3.6.1.4.1.318.1.1.5.6.1',
    sPDUOutletConfigVMEntry => '1.3.6.1.4.1.318.1.1.5.6.1.1',
    sPDUOutletConfigVMIndex => '1.3.6.1.4.1.318.1.1.5.6.1.1.1',
    sPDUOutletConfigVMName => '1.3.6.1.4.1.318.1.1.5.6.1.1.2',
    sPDUOutletConfigVMOutletIndex => '1.3.6.1.4.1.318.1.1.5.6.1.1.3',
    sPDUOutletConfigVMOutletName => '1.3.6.1.4.1.318.1.1.5.6.1.1.4',
    sPDUOutletConfigVMPowerOnTime => '1.3.6.1.4.1.318.1.1.5.6.1.1.5',
    sPDUOutletConfigVMPowerOffTime => '1.3.6.1.4.1.318.1.1.5.6.1.1.6',
    sPDUOutletConfigVMRebootDuration => '1.3.6.1.4.1.318.1.1.5.6.1.1.7',
    sPDUOutletStatusVM => '1.3.6.1.4.1.318.1.1.5.7',
    sPDUOutletStatusVMTable => '1.3.6.1.4.1.318.1.1.5.7.1',
    sPDUOutletStatusVMEntry => '1.3.6.1.4.1.318.1.1.5.7.1.1',
    sPDUOutletStatusVMIndex => '1.3.6.1.4.1.318.1.1.5.7.1.1.1',
    sPDUOutletStatusVMName => '1.3.6.1.4.1.318.1.1.5.7.1.1.2',
    sPDUOutletStatusVMOutletIndex => '1.3.6.1.4.1.318.1.1.5.7.1.1.3',
    sPDUOutletStatusVMOutletName => '1.3.6.1.4.1.318.1.1.5.7.1.1.4',
    sPDUOutletStatusVMOutletState => '1.3.6.1.4.1.318.1.1.5.7.1.1.5',
    sPDUOutletStatusVMCommandPending => '1.3.6.1.4.1.318.1.1.5.7.1.1.6',
    sPDUIdentMSP => '1.3.6.1.4.1.318.1.1.6.1',
    sPDUIdentMSPTableSize => '1.3.6.1.4.1.318.1.1.6.1.1.0',
    sPDUIdentMSPTable => '1.3.6.1.4.1.318.1.1.6.1.2',
    sPDUIdentMSPEntry => '1.3.6.1.4.1.318.1.1.6.1.2.1',
    sPDUIdentMSPIndex => '1.3.6.1.4.1.318.1.1.6.1.2.1.1',
    sPDUIdentNameMSP => '1.3.6.1.4.1.318.1.1.6.1.2.1.2',
    sPDUIdentHardwareRevMSP => '1.3.6.1.4.1.318.1.1.6.1.2.1.3',
    sPDUIdentFirmwareRevMSP => '1.3.6.1.4.1.318.1.1.6.1.2.1.4',
    sPDUIdentDateOfManufactureMSP => '1.3.6.1.4.1.318.1.1.6.1.2.1.5',
    sPDUIdentModelNumberMSP => '1.3.6.1.4.1.318.1.1.6.1.2.1.6',
    sPDUIdentSerialNumberMSP => '1.3.6.1.4.1.318.1.1.6.1.2.1.7',
    sPDUMasterControlMSP => '1.3.6.1.4.1.318.1.1.6.2',
    sPDUMasterControlMSPTableSize => '1.3.6.1.4.1.318.1.1.6.2.1.0',
    sPDUMasterControlMSPTable => '1.3.6.1.4.1.318.1.1.6.2.2',
    sPDUMasterControlMSPEntry => '1.3.6.1.4.1.318.1.1.6.2.2.1',
    sPDUMasterControlMSPIndex => '1.3.6.1.4.1.318.1.1.6.2.2.1.1',
    sPDUMasterControlMSPName => '1.3.6.1.4.1.318.1.1.6.2.2.1.2',
    sPDUMasterControlMSPCommand => '1.3.6.1.4.1.318.1.1.6.2.2.1.3',
    sPDUMasterConfigMSP => '1.3.6.1.4.1.318.1.1.6.3',
    sPDUMasterConfigMSPTableSize => '1.3.6.1.4.1.318.1.1.6.3.1.0',
    sPDUMasterConfigMSPTable => '1.3.6.1.4.1.318.1.1.6.3.2',
    sPDUMasterConfigMSPEntry => '1.3.6.1.4.1.318.1.1.6.3.2.1',
    sPDUMasterConfigMSPIndex => '1.3.6.1.4.1.318.1.1.6.3.2.1.1',
    sPDUMasterConfigMSPName => '1.3.6.1.4.1.318.1.1.6.3.2.1.2',
    sPDUMasterConfigMSPPowerOnTimeDelay => '1.3.6.1.4.1.318.1.1.6.3.2.1.3',
    sPDUMasterConfigMSPManualButton => '1.3.6.1.4.1.318.1.1.6.3.2.1.4',
    sPDUMasterStatusMSP => '1.3.6.1.4.1.318.1.1.6.4',
    sPDUMasterStatusMSPTableSize => '1.3.6.1.4.1.318.1.1.6.4.1.0',
    sPDUMasterStatusMSPTable => '1.3.6.1.4.1.318.1.1.6.4.2',
    sPDUMasterStatusMSPEntry => '1.3.6.1.4.1.318.1.1.6.4.2.1',
    sPDUMasterStatusMSPIndex => '1.3.6.1.4.1.318.1.1.6.4.2.1.1',
    sPDUMasterStatusMSPName => '1.3.6.1.4.1.318.1.1.6.4.2.1.2',
    sPDUMasterStatusMSPOutletCount => '1.3.6.1.4.1.318.1.1.6.4.2.1.3',
    sPDUOutletControlMSP => '1.3.6.1.4.1.318.1.1.6.5',
    sPDUOutletControlMSPTable => '1.3.6.1.4.1.318.1.1.6.5.1',
    sPDUOutletControlMSPEntry => '1.3.6.1.4.1.318.1.1.6.5.1.1',
    sPDUOutletControlMSPIndex => '1.3.6.1.4.1.318.1.1.6.5.1.1.1',
    sPDUOutletControlMSPName => '1.3.6.1.4.1.318.1.1.6.5.1.1.2',
    sPDUOutletControlMSPOutletIndex => '1.3.6.1.4.1.318.1.1.6.5.1.1.3',
    sPDUOutletControlMSPOutletName => '1.3.6.1.4.1.318.1.1.6.5.1.1.4',
    sPDUOutletControlMSPOutletCommand => '1.3.6.1.4.1.318.1.1.6.5.1.1.5',
    sPDUOutletConfigMSPall => '1.3.6.1.4.1.318.1.1.6.6.1',
    sPDUOutletConfigMSPallTable => '1.3.6.1.4.1.318.1.1.6.6.1.1',
    sPDUOutletConfigMSPallEntry => '1.3.6.1.4.1.318.1.1.6.6.1.1.1',
    sPDUOutletConfigMSPallIndex => '1.3.6.1.4.1.318.1.1.6.6.1.1.1.1',
    sPDUOutletConfigMSPallName => '1.3.6.1.4.1.318.1.1.6.6.1.1.1.2',
    sPDUOutletConfigMSPallOutletIndex => '1.3.6.1.4.1.318.1.1.6.6.1.1.1.3',
    sPDUOutletConfigMSPallOutletName => '1.3.6.1.4.1.318.1.1.6.6.1.1.1.4',
    sPDUOutletConfigMSPallOutletCtrlMode => '1.3.6.1.4.1.318.1.1.6.6.1.1.1.5',
    sPDUOutletConfigMSPgs => '1.3.6.1.4.1.318.1.1.6.6.2',
    sPDUOutletConfigMSPgsTable => '1.3.6.1.4.1.318.1.1.6.6.2.1',
    sPDUOutletConfigMSPgsEntry => '1.3.6.1.4.1.318.1.1.6.6.2.1.1',
    sPDUOutletConfigMSPgsIndex => '1.3.6.1.4.1.318.1.1.6.6.2.1.1.1',
    sPDUOutletConfigMSPgsName => '1.3.6.1.4.1.318.1.1.6.6.2.1.1.2',
    sPDUOutletConfigMSPgsOutletIndex => '1.3.6.1.4.1.318.1.1.6.6.2.1.1.3',
    sPDUOutletConfigMSPgsOutletName => '1.3.6.1.4.1.318.1.1.6.6.2.1.1.4',
    sPDUOutletConfigMSPgsOutletCtrlMode => '1.3.6.1.4.1.318.1.1.6.6.2.1.1.5',
    sPDUOutletConfigMSPgsDeviceConfirm => '1.3.6.1.4.1.318.1.1.6.6.2.1.1.6',
    sPDUOutletConfigMSPgsLowBattWarning => '1.3.6.1.4.1.318.1.1.6.6.2.1.1.7',
    sPDUOutletConfigMSPgsLowBattMult => '1.3.6.1.4.1.318.1.1.6.6.2.1.1.8',
    sPDUOutletConfigMSPgsRestartDelay => '1.3.6.1.4.1.318.1.1.6.6.2.1.1.9',
    sPDUOutletConfigMSPgsPowerOnDelay => '1.3.6.1.4.1.318.1.1.6.6.2.1.1.10',
    sPDUOutletConfigMSPgsPowerOffDelay => '1.3.6.1.4.1.318.1.1.6.6.2.1.1.11',
    sPDUOutletConfigMSPgsBattCapThresh => '1.3.6.1.4.1.318.1.1.6.6.2.1.1.12',
    sPDUOutletConfigMSPgsRebootDuration => '1.3.6.1.4.1.318.1.1.6.6.2.1.1.13',
    sPDUOutletConfigMSPannun => '1.3.6.1.4.1.318.1.1.6.6.3',
    sPDUOutletConfigMSPannunTable => '1.3.6.1.4.1.318.1.1.6.6.3.1',
    sPDUOutletConfigMSPannunEntry => '1.3.6.1.4.1.318.1.1.6.6.3.1.1',
    sPDUOutletConfigMSPannunIndex => '1.3.6.1.4.1.318.1.1.6.6.3.1.1.1',
    sPDUOutletConfigMSPannunName => '1.3.6.1.4.1.318.1.1.6.6.3.1.1.2',
    sPDUOutletConfigMSPannunOutletIndex => '1.3.6.1.4.1.318.1.1.6.6.3.1.1.3',
    sPDUOutletConfigMSPannunOutletName => '1.3.6.1.4.1.318.1.1.6.6.3.1.1.4',
    sPDUOutletConfigMSPannunOutletCtrlMode => '1.3.6.1.4.1.318.1.1.6.6.3.1.1.5',
    sPDUOutletConfigMSPannunInitialState => '1.3.6.1.4.1.318.1.1.6.6.3.1.1.6',
    sPDUOutletConfigMSPannunAlarmActionDly => '1.3.6.1.4.1.318.1.1.6.6.3.1.1.7',
    sPDUOutletConfigMSPmups => '1.3.6.1.4.1.318.1.1.6.6.4',
    sPDUOutletConfigMSPmupsTable => '1.3.6.1.4.1.318.1.1.6.6.4.1',
    sPDUOutletConfigMSPmupsEntry => '1.3.6.1.4.1.318.1.1.6.6.4.1.1',
    sPDUOutletConfigMSPmupsIndex => '1.3.6.1.4.1.318.1.1.6.6.4.1.1.1',
    sPDUOutletConfigMSPmupsName => '1.3.6.1.4.1.318.1.1.6.6.4.1.1.2',
    sPDUOutletConfigMSPmupsOutletIndex => '1.3.6.1.4.1.318.1.1.6.6.4.1.1.3',
    sPDUOutletConfigMSPmupsOutletName => '1.3.6.1.4.1.318.1.1.6.6.4.1.1.4',
    sPDUOutletConfigMSPmupsZone1 => '1.3.6.1.4.1.318.1.1.6.6.4.1.1.5',
    sPDUOutletConfigMSPmupsZone2 => '1.3.6.1.4.1.318.1.1.6.6.4.1.1.6',
    sPDUOutletConfigMSPmupsZone3 => '1.3.6.1.4.1.318.1.1.6.6.4.1.1.7',
    sPDUOutletConfigMSPmupsZone4 => '1.3.6.1.4.1.318.1.1.6.6.4.1.1.8',
    sPDUOutletConfigMSPmupsP1LowHum => '1.3.6.1.4.1.318.1.1.6.6.4.1.1.9',
    sPDUOutletConfigMSPmupsP1HiHum => '1.3.6.1.4.1.318.1.1.6.6.4.1.1.10',
    sPDUOutletConfigMSPmupsP1LowTemp => '1.3.6.1.4.1.318.1.1.6.6.4.1.1.11',
    sPDUOutletConfigMSPmupsP1HiTemp => '1.3.6.1.4.1.318.1.1.6.6.4.1.1.12',
    sPDUOutletConfigMSPmupsP2LowHum => '1.3.6.1.4.1.318.1.1.6.6.4.1.1.13',
    sPDUOutletConfigMSPmupsP2HiHum => '1.3.6.1.4.1.318.1.1.6.6.4.1.1.14',
    sPDUOutletConfigMSPmupsP2LowTemp => '1.3.6.1.4.1.318.1.1.6.6.4.1.1.15',
    sPDUOutletConfigMSPmupsP2HiTemp => '1.3.6.1.4.1.318.1.1.6.6.4.1.1.16',
    sPDUOutletStatusMSP => '1.3.6.1.4.1.318.1.1.6.7',
    sPDUOutletStatusMSPTable => '1.3.6.1.4.1.318.1.1.6.7.1',
    sPDUOutletStatusMSPEntry => '1.3.6.1.4.1.318.1.1.6.7.1.1',
    sPDUOutletStatusMSPIndex => '1.3.6.1.4.1.318.1.1.6.7.1.1.1',
    sPDUOutletStatusMSPName => '1.3.6.1.4.1.318.1.1.6.7.1.1.2',
    sPDUOutletStatusMSPOutletIndex => '1.3.6.1.4.1.318.1.1.6.7.1.1.3',
    sPDUOutletStatusMSPOutletName => '1.3.6.1.4.1.318.1.1.6.7.1.1.4',
    sPDUOutletStatusMSPOutletState => '1.3.6.1.4.1.318.1.1.6.7.1.1.5',
    sPDUOutletStatusMSPCommandPending => '1.3.6.1.4.1.318.1.1.6.7.1.1.6',
    sPDUOutletStatusMSPOutletCtrlMode => '1.3.6.1.4.1.318.1.1.6.7.1.1.7',
    rPDUIdent => '1.3.6.1.4.1.318.1.1.12.1',
    rPDUIdentName => '1.3.6.1.4.1.318.1.1.12.1.1.0',
    rPDUIdentHardwareRev => '1.3.6.1.4.1.318.1.1.12.1.2.0',
    rPDUIdentFirmwareRev => '1.3.6.1.4.1.318.1.1.12.1.3.0',
    rPDUIdentDateOfManufacture => '1.3.6.1.4.1.318.1.1.12.1.4.0',
    rPDUIdentModelNumber => '1.3.6.1.4.1.318.1.1.12.1.5.0',
    rPDUIdentSerialNumber => '1.3.6.1.4.1.318.1.1.12.1.6.0',
    rPDUIdentDeviceRating => '1.3.6.1.4.1.318.1.1.12.1.7.0',
    rPDUIdentDeviceNumOutlets => '1.3.6.1.4.1.318.1.1.12.1.8.0',
    rPDUIdentDeviceNumPhases => '1.3.6.1.4.1.318.1.1.12.1.9.0',
    rPDUIdentDeviceNumBreakers => '1.3.6.1.4.1.318.1.1.12.1.10.0',
    rPDUIdentDeviceBreakerRating => '1.3.6.1.4.1.318.1.1.12.1.11.0',
    rPDUIdentDeviceOrientation => '1.3.6.1.4.1.318.1.1.12.1.12.0',
    rPDUIdentDeviceOutletLayout => '1.3.6.1.4.1.318.1.1.12.1.13.0',
    rPDUIdentDeviceDisplayOrientation => '1.3.6.1.4.1.318.1.1.12.1.14.0',
    rPDUIdentDeviceLinetoLineVoltage => '1.3.6.1.4.1.318.1.1.12.1.15.0',
    rPDUIdentDevicePowerWatts => '1.3.6.1.4.1.318.1.1.12.1.16.0',
    rPDUIdentDevicePowerFactor => '1.3.6.1.4.1.318.1.1.12.1.17.0',
    rPDUIdentDevicePowerVA => '1.3.6.1.4.1.318.1.1.12.1.18.0',
    rPDULoadDevice => '1.3.6.1.4.1.318.1.1.12.2.1',
    rPDULoadDevMaxPhaseLoad => '1.3.6.1.4.1.318.1.1.12.2.1.1.0',
    rPDULoadDevNumPhases => '1.3.6.1.4.1.318.1.1.12.2.1.2.0',
    rPDULoadDevMaxBankLoad => '1.3.6.1.4.1.318.1.1.12.2.1.3.0',
    rPDULoadDevNumBanks => '1.3.6.1.4.1.318.1.1.12.2.1.4.0',
    rPDULoadDevBankTableSize => '1.3.6.1.4.1.318.1.1.12.2.1.5.0',
    rPDULoadDevBankTable => '1.3.6.1.4.1.318.1.1.12.2.1.6',
    rPDULoadDevBankEntry => '1.3.6.1.4.1.318.1.1.12.2.1.6.1',
    rPDULoadDevBankIndex => '1.3.6.1.4.1.318.1.1.12.2.1.6.1.1',
    rPDULoadDevBankNumber => '1.3.6.1.4.1.318.1.1.12.2.1.6.1.2',
    rPDULoadDevBankMaxLoad => '1.3.6.1.4.1.318.1.1.12.2.1.6.1.3',
    rPDULoadDevMaxOutletTableSize => '1.3.6.1.4.1.318.1.1.12.2.1.7.0',
    rPDULoadDevMaxOutletTable => '1.3.6.1.4.1.318.1.1.12.2.1.8',
    rPDULoadDevMaxOutletEntry => '1.3.6.1.4.1.318.1.1.12.2.1.8.1',
    rPDULoadDevOutletIndex => '1.3.6.1.4.1.318.1.1.12.2.1.8.1.1',
    rPDULoadDevOutletNumber => '1.3.6.1.4.1.318.1.1.12.2.1.8.1.2',
    rPDULoadDevMaxOutletLoad => '1.3.6.1.4.1.318.1.1.12.2.1.8.1.3',
    rPDULoadPhaseConfig => '1.3.6.1.4.1.318.1.1.12.2.2',
    rPDULoadPhaseConfigTable => '1.3.6.1.4.1.318.1.1.12.2.2.1',
    rPDULoadPhaseConfigEntry => '1.3.6.1.4.1.318.1.1.12.2.2.1.1',
    rPDULoadPhaseConfigIndex => '1.3.6.1.4.1.318.1.1.12.2.2.1.1.1',
    rPDULoadPhaseConfigLowLoadThreshold => '1.3.6.1.4.1.318.1.1.12.2.2.1.1.2',
    rPDULoadPhaseConfigNearOverloadThreshold => '1.3.6.1.4.1.318.1.1.12.2.2.1.1.3',
    rPDULoadPhaseConfigOverloadThreshold => '1.3.6.1.4.1.318.1.1.12.2.2.1.1.4',
    rPDULoadPhaseConfigAlarm => '1.3.6.1.4.1.318.1.1.12.2.2.1.1.5',
    rPDULoadStatus => '1.3.6.1.4.1.318.1.1.12.2.3',
    rPDULoadStatusTable => '1.3.6.1.4.1.318.1.1.12.2.3.1',
    rPDULoadStatusEntry => '1.3.6.1.4.1.318.1.1.12.2.3.1.1',
    rPDULoadStatusIndex => '1.3.6.1.4.1.318.1.1.12.2.3.1.1.1',
    rPDULoadStatusLoad => '1.3.6.1.4.1.318.1.1.12.2.3.1.1.2',
    rPDULoadStatusLoadState => '1.3.6.1.4.1.318.1.1.12.2.3.1.1.3',
    rPDULoadStatusPhaseNumber => '1.3.6.1.4.1.318.1.1.12.2.3.1.1.4',
    rPDULoadStatusBankNumber => '1.3.6.1.4.1.318.1.1.12.2.3.1.1.5',
    rPDULoadBankConfig => '1.3.6.1.4.1.318.1.1.12.2.4',
    rPDULoadBankConfigTable => '1.3.6.1.4.1.318.1.1.12.2.4.1',
    rPDULoadBankConfigEntry => '1.3.6.1.4.1.318.1.1.12.2.4.1.1',
    rPDULoadBankConfigIndex => '1.3.6.1.4.1.318.1.1.12.2.4.1.1.1',
    rPDULoadBankConfigLowLoadThreshold => '1.3.6.1.4.1.318.1.1.12.2.4.1.1.2',
    rPDULoadBankConfigNearOverloadThreshold => '1.3.6.1.4.1.318.1.1.12.2.4.1.1.3',
    rPDULoadBankConfigOverloadThreshold => '1.3.6.1.4.1.318.1.1.12.2.4.1.1.4',
    rPDULoadBankConfigAlarm => '1.3.6.1.4.1.318.1.1.12.2.4.1.1.5',
    rPDUOutletDevice => '1.3.6.1.4.1.318.1.1.12.3.1',
    rPDUOutletDevCommand => '1.3.6.1.4.1.318.1.1.12.3.1.1.0',
    rPDUOutletDevColdstartDelay => '1.3.6.1.4.1.318.1.1.12.3.1.2.0',
    rPDUOutletDevNumCntrlOutlets => '1.3.6.1.4.1.318.1.1.12.3.1.3.0',
    rPDUOutletDevNumTotalOutlets => '1.3.6.1.4.1.318.1.1.12.3.1.4.0',
    rPDUOutletDevMonitoredOutlets => '1.3.6.1.4.1.318.1.1.12.3.1.5.0',
    rPDUOutletPhase => '1.3.6.1.4.1.318.1.1.12.3.2',
    rPDUOutletPhaseTable => '1.3.6.1.4.1.318.1.1.12.3.2.1',
    rPDUOutletPhaseEntry => '1.3.6.1.4.1.318.1.1.12.3.2.1.1',
    rPDUOutletPhaseIndex => '1.3.6.1.4.1.318.1.1.12.3.2.1.1.1',
    rPDUOutletPhaseOverloadRestriction => '1.3.6.1.4.1.318.1.1.12.3.2.1.1.2',
    rPDUOutletControl => '1.3.6.1.4.1.318.1.1.12.3.3',
    rPDUOutletControlTable => '1.3.6.1.4.1.318.1.1.12.3.3.1',
    rPDUOutletControlEntry => '1.3.6.1.4.1.318.1.1.12.3.3.1.1',
    rPDUOutletControlIndex => '1.3.6.1.4.1.318.1.1.12.3.3.1.1.1',
    rPDUOutletControlOutletName => '1.3.6.1.4.1.318.1.1.12.3.3.1.1.2',
    rPDUOutletControlOutletPhase => '1.3.6.1.4.1.318.1.1.12.3.3.1.1.3',
    rPDUOutletControlOutletCommand => '1.3.6.1.4.1.318.1.1.12.3.3.1.1.4',
    rPDUOutletControlOutletBank => '1.3.6.1.4.1.318.1.1.12.3.3.1.1.5',
    rPDUOutletConfig => '1.3.6.1.4.1.318.1.1.12.3.4',
    rPDUOutletConfigTable => '1.3.6.1.4.1.318.1.1.12.3.4.1',
    rPDUOutletConfigEntry => '1.3.6.1.4.1.318.1.1.12.3.4.1.1',
    rPDUOutletConfigIndex => '1.3.6.1.4.1.318.1.1.12.3.4.1.1.1',
    rPDUOutletConfigOutletName => '1.3.6.1.4.1.318.1.1.12.3.4.1.1.2',
    rPDUOutletConfigOutletPhase => '1.3.6.1.4.1.318.1.1.12.3.4.1.1.3',
    rPDUOutletConfigPowerOnTime => '1.3.6.1.4.1.318.1.1.12.3.4.1.1.4',
    rPDUOutletConfigPowerOffTime => '1.3.6.1.4.1.318.1.1.12.3.4.1.1.5',
    rPDUOutletConfigRebootDuration => '1.3.6.1.4.1.318.1.1.12.3.4.1.1.6',
    rPDUOutletConfigOutletBank => '1.3.6.1.4.1.318.1.1.12.3.4.1.1.7',
    rPDUOutletConfigMonitoredTableSize => '1.3.6.1.4.1.318.1.1.12.3.4.2.0',
    rPDUOutletConfigMonitoredTable => '1.3.6.1.4.1.318.1.1.12.3.4.3',
    rPDUOutletConfigMonitoredEntry => '1.3.6.1.4.1.318.1.1.12.3.4.3.1',
    rPDUOutletConfigMonitoredIndex => '1.3.6.1.4.1.318.1.1.12.3.4.3.1.1',
    rPDUOutletConfigMonitoredName => '1.3.6.1.4.1.318.1.1.12.3.4.3.1.2',
    rPDUOutletConfigMonitoredNumber => '1.3.6.1.4.1.318.1.1.12.3.4.3.1.3',
    rPDUOutletConfigMonitoredLowLoadThreshold => '1.3.6.1.4.1.318.1.1.12.3.4.3.1.4',
    rPDUOutletConfigMonitoredNearOverloadThreshold => '1.3.6.1.4.1.318.1.1.12.3.4.3.1.5',
    rPDUOutletConfigMonitoredOverloadThreshold => '1.3.6.1.4.1.318.1.1.12.3.4.3.1.6',
    rPDUOutletStatus => '1.3.6.1.4.1.318.1.1.12.3.5',
    rPDUOutletStatusTable => '1.3.6.1.4.1.318.1.1.12.3.5.1',
    rPDUOutletStatusEntry => '1.3.6.1.4.1.318.1.1.12.3.5.1.1',
    rPDUOutletStatusIndex => '1.3.6.1.4.1.318.1.1.12.3.5.1.1.1',
    rPDUOutletStatusOutletName => '1.3.6.1.4.1.318.1.1.12.3.5.1.1.2',
    rPDUOutletStatusOutletPhase => '1.3.6.1.4.1.318.1.1.12.3.5.1.1.3',
    rPDUOutletStatusOutletState => '1.3.6.1.4.1.318.1.1.12.3.5.1.1.4',
    rPDUOutletStatusCommandPending => '1.3.6.1.4.1.318.1.1.12.3.5.1.1.5',
    rPDUOutletStatusOutletBank => '1.3.6.1.4.1.318.1.1.12.3.5.1.1.6',
    rPDUOutletStatusLoad => '1.3.6.1.4.1.318.1.1.12.3.5.1.1.7',
    rPDUOutletBank => '1.3.6.1.4.1.318.1.1.12.3.6',
    rPDUOutletBankTable => '1.3.6.1.4.1.318.1.1.12.3.6.1',
    rPDUOutletBankEntry => '1.3.6.1.4.1.318.1.1.12.3.6.1.1',
    rPDUOutletBankIndex => '1.3.6.1.4.1.318.1.1.12.3.6.1.1.1',
    rPDUOutletBankOverloadRestriction => '1.3.6.1.4.1.318.1.1.12.3.6.1.1.2',
    rPDUPowerSupplyDevice => '1.3.6.1.4.1.318.1.1.12.4.1',
    rPDUPowerSupply1Status => '1.3.6.1.4.1.318.1.1.12.4.1.1.0',
    rPDUPowerSupply2Status => '1.3.6.1.4.1.318.1.1.12.4.1.2.0',
    rPDUPowerSupplyAlarm => '1.3.6.1.4.1.318.1.1.12.4.1.3.0',
    rPDUStatus => '1.3.6.1.4.1.318.1.1.12.5',
    rPDUStatusBankTableSize => '1.3.6.1.4.1.318.1.1.12.5.1.0',
    rPDUStatusBankTable => '1.3.6.1.4.1.318.1.1.12.5.2',
    rPDUStatusBankEntry => '1.3.6.1.4.1.318.1.1.12.5.2.1',
    rPDUStatusBankIndex => '1.3.6.1.4.1.318.1.1.12.5.2.1.1',
    rPDUStatusBankNumber => '1.3.6.1.4.1.318.1.1.12.5.2.1.2',
    rPDUStatusBankState => '1.3.6.1.4.1.318.1.1.12.5.2.1.3',
    rPDUStatusPhaseTableSize => '1.3.6.1.4.1.318.1.1.12.5.3.0',
    rPDUStatusPhaseTable => '1.3.6.1.4.1.318.1.1.12.5.4',
    rPDUStatusPhaseEntry => '1.3.6.1.4.1.318.1.1.12.5.4.1',
    rPDUStatusPhaseIndex => '1.3.6.1.4.1.318.1.1.12.5.4.1.1',
    rPDUStatusPhaseNumber => '1.3.6.1.4.1.318.1.1.12.5.4.1.2',
    rPDUStatusPhaseState => '1.3.6.1.4.1.318.1.1.12.5.4.1.3',
    rPDUStatusOutletTableSize => '1.3.6.1.4.1.318.1.1.12.5.5.0',
    rPDUStatusOutletTable => '1.3.6.1.4.1.318.1.1.12.5.6',
    rPDUStatusOutletEntry => '1.3.6.1.4.1.318.1.1.12.5.6.1',
    rPDUStatusOutletIndex => '1.3.6.1.4.1.318.1.1.12.5.6.1.1',
    rPDUStatusOutletNumber => '1.3.6.1.4.1.318.1.1.12.5.6.1.2',
    rPDUStatusOutletState => '1.3.6.1.4.1.318.1.1.12.5.6.1.3',
    rPDU2 => '1.3.6.1.4.1.318.1.1.26',
    rPDU2IdentTableSize => '1.3.6.1.4.1.318.1.1.26.1.0',
    rPDU2IdentTable => '1.3.6.1.4.1.318.1.1.26.2',
    rPDU2IdentEntry => '1.3.6.1.4.1.318.1.1.26.2.1',
    rPDU2IdentIndex => '1.3.6.1.4.1.318.1.1.26.2.1.1',
    rPDU2IdentModule => '1.3.6.1.4.1.318.1.1.26.2.1.2',
    rPDU2IdentName => '1.3.6.1.4.1.318.1.1.26.2.1.3',
    rPDU2IdentLocation => '1.3.6.1.4.1.318.1.1.26.2.1.4',
    rPDU2IdentHardwareRev => '1.3.6.1.4.1.318.1.1.26.2.1.5',
    rPDU2IdentFirmwareRev => '1.3.6.1.4.1.318.1.1.26.2.1.6',
    rPDU2IdentDateOfManufacture => '1.3.6.1.4.1.318.1.1.26.2.1.7',
    rPDU2IdentModelNumber => '1.3.6.1.4.1.318.1.1.26.2.1.8',
    rPDU2IdentSerialNumber => '1.3.6.1.4.1.318.1.1.26.2.1.9',
    rPDU2DeviceTableSize => '1.3.6.1.4.1.318.1.1.26.3.0',
    rPDU2Device => '1.3.6.1.4.1.318.1.1.26.4',
    rPDU2Device => '1.3.6.1.4.1.318.1.1.26.4',
    rPDU2DeviceConfigTable => '1.3.6.1.4.1.318.1.1.26.4.1',
    rPDU2DeviceConfigEntry => '1.3.6.1.4.1.318.1.1.26.4.1.1',
    rPDU2DeviceConfigIndex => '1.3.6.1.4.1.318.1.1.26.4.1.1.1',
    rPDU2DeviceConfigModule => '1.3.6.1.4.1.318.1.1.26.4.1.1.2',
    rPDU2DeviceConfigName => '1.3.6.1.4.1.318.1.1.26.4.1.1.3',
    rPDU2DeviceConfigLocation => '1.3.6.1.4.1.318.1.1.26.4.1.1.4',
    rPDU2DeviceConfigDisplayOrientation => '1.3.6.1.4.1.318.1.1.26.4.1.1.5',
    rPDU2DeviceConfigColdstartDelay => '1.3.6.1.4.1.318.1.1.26.4.1.1.6',
    rPDU2DeviceConfigLowLoadPowerThreshold => '1.3.6.1.4.1.318.1.1.26.4.1.1.7',
    rPDU2DeviceConfigNearOverloadPowerThreshold => '1.3.6.1.4.1.318.1.1.26.4.1.1.8',
    rPDU2DeviceConfigOverloadPowerThreshold => '1.3.6.1.4.1.318.1.1.26.4.1.1.9',
    rPDU2DeviceConfigDevicePeakPowerReset => '1.3.6.1.4.1.318.1.1.26.4.1.1.10',
    rPDU2DeviceConfigDeviceEnergyReset => '1.3.6.1.4.1.318.1.1.26.4.1.1.11',
    rPDU2DeviceConfigOutletsEnergyReset => '1.3.6.1.4.1.318.1.1.26.4.1.1.12',
    rPDU2DevicePropertiesTable => '1.3.6.1.4.1.318.1.1.26.4.2',
    rPDU2DevicePropertiesEntry => '1.3.6.1.4.1.318.1.1.26.4.2.1',
    rPDU2DevicePropertiesIndex => '1.3.6.1.4.1.318.1.1.26.4.2.1.1',
    rPDU2DevicePropertiesModule => '1.3.6.1.4.1.318.1.1.26.4.2.1.2',
    rPDU2DevicePropertiesName => '1.3.6.1.4.1.318.1.1.26.4.2.1.3',
    rPDU2DevicePropertiesNumOutlets => '1.3.6.1.4.1.318.1.1.26.4.2.1.4',
    rPDU2DevicePropertiesNumSwitchedOutlets => '1.3.6.1.4.1.318.1.1.26.4.2.1.5',
    rPDU2DevicePropertiesNumMeteredOutlets => '1.3.6.1.4.1.318.1.1.26.4.2.1.6',
    rPDU2DevicePropertiesNumPhases => '1.3.6.1.4.1.318.1.1.26.4.2.1.7',
    rPDU2DevicePropertiesNumMeteredBanks => '1.3.6.1.4.1.318.1.1.26.4.2.1.8',
    rPDU2DevicePropertiesMaxCurrentRating => '1.3.6.1.4.1.318.1.1.26.4.2.1.9',
    rPDU2DevicePropertiesOrientation => '1.3.6.1.4.1.318.1.1.26.4.2.1.10',
    rPDU2DevicePropertiesOutletLayout => '1.3.6.1.4.1.318.1.1.26.4.2.1.11',
    rPDU2DevicePropertiesMaxPhaseCurrentRating => '1.3.6.1.4.1.318.1.1.26.4.2.1.12',
    rPDU2DeviceStatusTable => '1.3.6.1.4.1.318.1.1.26.4.3',
    rPDU2DeviceStatusEntry => '1.3.6.1.4.1.318.1.1.26.4.3.1',
    rPDU2DeviceStatusIndex => '1.3.6.1.4.1.318.1.1.26.4.3.1.1',
    rPDU2DeviceStatusModule => '1.3.6.1.4.1.318.1.1.26.4.3.1.2',
    rPDU2DeviceStatusName => '1.3.6.1.4.1.318.1.1.26.4.3.1.3',
    rPDU2DeviceStatusLoadState => '1.3.6.1.4.1.318.1.1.26.4.3.1.4',
    rPDU2DeviceStatusPower => '1.3.6.1.4.1.318.1.1.26.4.3.1.5',
    rPDU2DeviceStatusPeakPower => '1.3.6.1.4.1.318.1.1.26.4.3.1.6',
    rPDU2DeviceStatusPeakPowerTimestamp => '1.3.6.1.4.1.318.1.1.26.4.3.1.7',
    rPDU2DeviceStatusPeakPowerStartTime => '1.3.6.1.4.1.318.1.1.26.4.3.1.8',
    rPDU2DeviceStatusEnergy => '1.3.6.1.4.1.318.1.1.26.4.3.1.9',
    rPDU2DeviceStatusEnergyStartTime => '1.3.6.1.4.1.318.1.1.26.4.3.1.10',
    rPDU2DeviceStatusCommandPending => '1.3.6.1.4.1.318.1.1.26.4.3.1.11',
    rPDU2DeviceStatusPowerSupplyAlarm => '1.3.6.1.4.1.318.1.1.26.4.3.1.12',
    rPDU2DeviceStatusPowerSupply1Status => '1.3.6.1.4.1.318.1.1.26.4.3.1.13',
    rPDU2DeviceStatusPowerSupply2Status => '1.3.6.1.4.1.318.1.1.26.4.3.1.14',
    rPDU2DeviceStatusOutletsEnergyStartTime => '1.3.6.1.4.1.318.1.1.26.4.3.1.15',
    rPDU2DeviceControlTable => '1.3.6.1.4.1.318.1.1.26.4.4',
    rPDU2DeviceControlEntry => '1.3.6.1.4.1.318.1.1.26.4.4.1',
    rPDU2DeviceControlIndex => '1.3.6.1.4.1.318.1.1.26.4.4.1.1',
    rPDU2DeviceControlModule => '1.3.6.1.4.1.318.1.1.26.4.4.1.2',
    rPDU2DeviceControlName => '1.3.6.1.4.1.318.1.1.26.4.4.1.3',
    rPDU2DeviceControlCommand => '1.3.6.1.4.1.318.1.1.26.4.4.1.4',
    rPDU2 => '1.3.6.1.4.1.318.1.1.26',
    rPDU2PhaseTableSize => '1.3.6.1.4.1.318.1.1.26.5.0',
    rPDU2Phase => '1.3.6.1.4.1.318.1.1.26.6',
    rPDU2Phase => '1.3.6.1.4.1.318.1.1.26.6',
    rPDU2PhaseConfigTable => '1.3.6.1.4.1.318.1.1.26.6.1',
    rPDU2PhaseConfigEntry => '1.3.6.1.4.1.318.1.1.26.6.1.1',
    rPDU2PhaseConfigIndex => '1.3.6.1.4.1.318.1.1.26.6.1.1.1',
    rPDU2PhaseConfigModule => '1.3.6.1.4.1.318.1.1.26.6.1.1.2',
    rPDU2PhaseConfigNumber => '1.3.6.1.4.1.318.1.1.26.6.1.1.3',
    rPDU2PhaseConfigOverloadRestriction => '1.3.6.1.4.1.318.1.1.26.6.1.1.4',
    rPDU2PhaseConfigLowLoadCurrentThreshold => '1.3.6.1.4.1.318.1.1.26.6.1.1.5',
    rPDU2PhaseConfigNearOverloadCurrentThreshold => '1.3.6.1.4.1.318.1.1.26.6.1.1.6',
    rPDU2PhaseConfigOverloadCurrentThreshold => '1.3.6.1.4.1.318.1.1.26.6.1.1.7',
    rPDU2PhasePropertiesTable => '1.3.6.1.4.1.318.1.1.26.6.2',
    rPDU2PhasePropertiesEntry => '1.3.6.1.4.1.318.1.1.26.6.2.1',
    rPDU2PhasePropertiesIndex => '1.3.6.1.4.1.318.1.1.26.6.2.1.1',
    rPDU2PhasePropertiesModule => '1.3.6.1.4.1.318.1.1.26.6.2.1.2',
    rPDU2PhasePropertiesNumber => '1.3.6.1.4.1.318.1.1.26.6.2.1.3',
    rPDU2PhaseStatusTable => '1.3.6.1.4.1.318.1.1.26.6.3',
    rPDU2PhaseStatusEntry => '1.3.6.1.4.1.318.1.1.26.6.3.1',
    rPDU2PhaseStatusIndex => '1.3.6.1.4.1.318.1.1.26.6.3.1.1',
    rPDU2PhaseStatusModule => '1.3.6.1.4.1.318.1.1.26.6.3.1.2',
    rPDU2PhaseStatusNumber => '1.3.6.1.4.1.318.1.1.26.6.3.1.3',
    rPDU2PhaseStatusLoadState => '1.3.6.1.4.1.318.1.1.26.6.3.1.4',
    rPDU2PhaseStatusCurrent => '1.3.6.1.4.1.318.1.1.26.6.3.1.5',
    rPDU2PhaseStatusVoltage => '1.3.6.1.4.1.318.1.1.26.6.3.1.6',
    rPDU2PhaseStatusPower => '1.3.6.1.4.1.318.1.1.26.6.3.1.7',
    rPDU2 => '1.3.6.1.4.1.318.1.1.26',
    rPDU2BankTableSize => '1.3.6.1.4.1.318.1.1.26.7.0',
    rPDU2Bank => '1.3.6.1.4.1.318.1.1.26.8',
    rPDU2Bank => '1.3.6.1.4.1.318.1.1.26.8',
    rPDU2BankConfigTable => '1.3.6.1.4.1.318.1.1.26.8.1',
    rPDU2BankConfigEntry => '1.3.6.1.4.1.318.1.1.26.8.1.1',
    rPDU2BankConfigIndex => '1.3.6.1.4.1.318.1.1.26.8.1.1.1',
    rPDU2BankConfigModule => '1.3.6.1.4.1.318.1.1.26.8.1.1.2',
    rPDU2BankConfigNumber => '1.3.6.1.4.1.318.1.1.26.8.1.1.3',
    rPDU2BankConfigOverloadRestriction => '1.3.6.1.4.1.318.1.1.26.8.1.1.4',
    rPDU2BankConfigLowLoadCurrentThreshold => '1.3.6.1.4.1.318.1.1.26.8.1.1.5',
    rPDU2BankConfigNearOverloadCurrentThreshold => '1.3.6.1.4.1.318.1.1.26.8.1.1.6',
    rPDU2BankConfigOverloadCurrentThreshold => '1.3.6.1.4.1.318.1.1.26.8.1.1.7',
    rPDU2BankPropertiesTable => '1.3.6.1.4.1.318.1.1.26.8.2',
    rPDU2BankPropertiesEntry => '1.3.6.1.4.1.318.1.1.26.8.2.1',
    rPDU2BankPropertiesIndex => '1.3.6.1.4.1.318.1.1.26.8.2.1.1',
    rPDU2BankPropertiesModule => '1.3.6.1.4.1.318.1.1.26.8.2.1.2',
    rPDU2BankPropertiesNumber => '1.3.6.1.4.1.318.1.1.26.8.2.1.3',
    rPDU2BankPropertiesPhaseLayout => '1.3.6.1.4.1.318.1.1.26.8.2.1.4',
    rPDU2BankStatusTable => '1.3.6.1.4.1.318.1.1.26.8.3',
    rPDU2BankStatusEntry => '1.3.6.1.4.1.318.1.1.26.8.3.1',
    rPDU2BankStatusIndex => '1.3.6.1.4.1.318.1.1.26.8.3.1.1',
    rPDU2BankStatusModule => '1.3.6.1.4.1.318.1.1.26.8.3.1.2',
    rPDU2BankStatusNumber => '1.3.6.1.4.1.318.1.1.26.8.3.1.3',
    rPDU2BankStatusLoadState => '1.3.6.1.4.1.318.1.1.26.8.3.1.4',
    rPDU2BankStatusCurrent => '1.3.6.1.4.1.318.1.1.26.8.3.1.5',
    rPDU2Outlet => '1.3.6.1.4.1.318.1.1.26.9',
    rPDU2Outlet => '1.3.6.1.4.1.318.1.1.26.9',
    rPDU2OutletSwitchedTableSize => '1.3.6.1.4.1.318.1.1.26.9.1.0',
    rPDU2OutletSwitched => '1.3.6.1.4.1.318.1.1.26.9.2',
    rPDU2OutletSwitched => '1.3.6.1.4.1.318.1.1.26.9.2',
    rPDU2OutletSwitchedConfigTable => '1.3.6.1.4.1.318.1.1.26.9.2.1',
    rPDU2OutletSwitchedConfigEntry => '1.3.6.1.4.1.318.1.1.26.9.2.1.1',
    rPDU2OutletSwitchedConfigIndex => '1.3.6.1.4.1.318.1.1.26.9.2.1.1.1',
    rPDU2OutletSwitchedConfigModule => '1.3.6.1.4.1.318.1.1.26.9.2.1.1.2',
    rPDU2OutletSwitchedConfigName => '1.3.6.1.4.1.318.1.1.26.9.2.1.1.3',
    rPDU2OutletSwitchedConfigNumber => '1.3.6.1.4.1.318.1.1.26.9.2.1.1.4',
    rPDU2OutletSwitchedConfigPowerOnTime => '1.3.6.1.4.1.318.1.1.26.9.2.1.1.5',
    rPDU2OutletSwitchedConfigPowerOffTime => '1.3.6.1.4.1.318.1.1.26.9.2.1.1.6',
    rPDU2OutletSwitchedConfigRebootDuration => '1.3.6.1.4.1.318.1.1.26.9.2.1.1.7',
    rPDU2OutletSwitchedPropertiesTable => '1.3.6.1.4.1.318.1.1.26.9.2.2',
    rPDU2OutletSwitchedPropertiesEntry => '1.3.6.1.4.1.318.1.1.26.9.2.2.1',
    rPDU2OutletSwitchedPropertiesIndex => '1.3.6.1.4.1.318.1.1.26.9.2.2.1.1',
    rPDU2OutletSwitchedPropertiesModule => '1.3.6.1.4.1.318.1.1.26.9.2.2.1.2',
    rPDU2OutletSwitchedPropertiesName => '1.3.6.1.4.1.318.1.1.26.9.2.2.1.3',
    rPDU2OutletSwitchedPropertiesNumber => '1.3.6.1.4.1.318.1.1.26.9.2.2.1.4',
    rPDU2OutletSwitchedPropertiesPhaseLayout => '1.3.6.1.4.1.318.1.1.26.9.2.2.1.5',
    rPDU2OutletSwitchedPropertiesBank => '1.3.6.1.4.1.318.1.1.26.9.2.2.1.6',
    rPDU2OutletSwitchedStatusTable => '1.3.6.1.4.1.318.1.1.26.9.2.3',
    rPDU2OutletSwitchedStatusEntry => '1.3.6.1.4.1.318.1.1.26.9.2.3.1',
    rPDU2OutletSwitchedStatusIndex => '1.3.6.1.4.1.318.1.1.26.9.2.3.1.1',
    rPDU2OutletSwitchedStatusModule => '1.3.6.1.4.1.318.1.1.26.9.2.3.1.2',
    rPDU2OutletSwitchedStatusName => '1.3.6.1.4.1.318.1.1.26.9.2.3.1.3',
    rPDU2OutletSwitchedStatusNumber => '1.3.6.1.4.1.318.1.1.26.9.2.3.1.4',
    rPDU2OutletSwitchedStatusState => '1.3.6.1.4.1.318.1.1.26.9.2.3.1.5',
    rPDU2OutletSwitchedStatusCommandPending => '1.3.6.1.4.1.318.1.1.26.9.2.3.1.6',
    rPDU2OutletSwitchedControlTable => '1.3.6.1.4.1.318.1.1.26.9.2.4',
    rPDU2OutletSwitchedControlEntry => '1.3.6.1.4.1.318.1.1.26.9.2.4.1',
    rPDU2OutletSwitchedControlIndex => '1.3.6.1.4.1.318.1.1.26.9.2.4.1.1',
    rPDU2OutletSwitchedControlModule => '1.3.6.1.4.1.318.1.1.26.9.2.4.1.2',
    rPDU2OutletSwitchedControlName => '1.3.6.1.4.1.318.1.1.26.9.2.4.1.3',
    rPDU2OutletSwitchedControlNumber => '1.3.6.1.4.1.318.1.1.26.9.2.4.1.4',
    rPDU2OutletSwitchedControlCommand => '1.3.6.1.4.1.318.1.1.26.9.2.4.1.5',
    rPDU2Sensor => '1.3.6.1.4.1.318.1.1.26.10',
    rPDU2Sensor => '1.3.6.1.4.1.318.1.1.26.10',
    rPDU2SensorTempHumidityTableSize => '1.3.6.1.4.1.318.1.1.26.10.1.0',
    rPDU2SensorTempHumidity => '1.3.6.1.4.1.318.1.1.26.10.2',
    rPDU2SensorTempHumidity => '1.3.6.1.4.1.318.1.1.26.10.2',
    rPDU2SensorTempHumidityConfigTable => '1.3.6.1.4.1.318.1.1.26.10.2.1',
    rPDU2SensorTempHumidityConfigEntry => '1.3.6.1.4.1.318.1.1.26.10.2.1.1',
    rPDU2SensorTempHumidityConfigIndex => '1.3.6.1.4.1.318.1.1.26.10.2.1.1.1',
    rPDU2SensorTempHumidityConfigModule => '1.3.6.1.4.1.318.1.1.26.10.2.1.1.2',
    rPDU2SensorTempHumidityConfigName => '1.3.6.1.4.1.318.1.1.26.10.2.1.1.3',
    rPDU2SensorTempHumidityConfigNumber => '1.3.6.1.4.1.318.1.1.26.10.2.1.1.4',
    rPDU2SensorTempHumidityConfigTemperatureAlarmEnable => '1.3.6.1.4.1.318.1.1.26.10.2.1.1.5',
    rPDU2SensorTempHumidityConfigHumidityAlarmEnable => '1.3.6.1.4.1.318.1.1.26.10.2.1.1.6',
    rPDU2SensorTempHumidityConfigTempMaxThreshF => '1.3.6.1.4.1.318.1.1.26.10.2.1.1.7',
    rPDU2SensorTempHumidityConfigTempHighThreshF => '1.3.6.1.4.1.318.1.1.26.10.2.1.1.8',
    rPDU2SensorTempHumidityConfigTempHysteresisF => '1.3.6.1.4.1.318.1.1.26.10.2.1.1.9',
    rPDU2SensorTempHumidityConfigTempMaxThreshC => '1.3.6.1.4.1.318.1.1.26.10.2.1.1.10',
    rPDU2SensorTempHumidityConfigTempHighThreshC => '1.3.6.1.4.1.318.1.1.26.10.2.1.1.11',
    rPDU2SensorTempHumidityConfigTempHysteresisC => '1.3.6.1.4.1.318.1.1.26.10.2.1.1.12',
    rPDU2SensorTempHumidityConfigHumidityLowThresh => '1.3.6.1.4.1.318.1.1.26.10.2.1.1.13',
    rPDU2SensorTempHumidityConfigHumidityMinThresh => '1.3.6.1.4.1.318.1.1.26.10.2.1.1.14',
    rPDU2SensorTempHumidityConfigHumidityHysteresis => '1.3.6.1.4.1.318.1.1.26.10.2.1.1.15',
    rPDU2SensorTempHumidityStatusTable => '1.3.6.1.4.1.318.1.1.26.10.2.2',
    rPDU2SensorTempHumidityStatusEntry => '1.3.6.1.4.1.318.1.1.26.10.2.2.1',
    rPDU2SensorTempHumidityStatusIndex => '1.3.6.1.4.1.318.1.1.26.10.2.2.1.1',
    rPDU2SensorTempHumidityStatusModule => '1.3.6.1.4.1.318.1.1.26.10.2.2.1.2',
    rPDU2SensorTempHumidityStatusName => '1.3.6.1.4.1.318.1.1.26.10.2.2.1.3',
    rPDU2SensorTempHumidityStatusNumber => '1.3.6.1.4.1.318.1.1.26.10.2.2.1.4',
    rPDU2SensorTempHumidityStatusType => '1.3.6.1.4.1.318.1.1.26.10.2.2.1.5',
    rPDU2SensorTempHumidityStatusCommStatus => '1.3.6.1.4.1.318.1.1.26.10.2.2.1.6',
    rPDU2SensorTempHumidityStatusTempF => '1.3.6.1.4.1.318.1.1.26.10.2.2.1.7',
    rPDU2SensorTempHumidityStatusTempC => '1.3.6.1.4.1.318.1.1.26.10.2.2.1.8',
    rPDU2SensorTempHumidityStatusTempStatus => '1.3.6.1.4.1.318.1.1.26.10.2.2.1.9',
    rPDU2SensorTempHumidityStatusRelativeHumidity => '1.3.6.1.4.1.318.1.1.26.10.2.2.1.10',
    rPDU2SensorTempHumidityStatusHumidityStatus => '1.3.6.1.4.1.318.1.1.26.10.2.2.1.11',
    dm3IdentSystem => '1.3.6.1.4.1.318.1.1.7.1.1',
    dm3IdentSysDescriptionTableSize => '1.3.6.1.4.1.318.1.1.7.1.1.1.0',
    dm3IdentSysDescriptionTable => '1.3.6.1.4.1.318.1.1.7.1.1.2',
    dm3IdentSysDescriptionEntry => '1.3.6.1.4.1.318.1.1.7.1.1.2.1',
    dm3IdentSysDescriptionIndex => '1.3.6.1.4.1.318.1.1.7.1.1.2.1.1',
    dm3IdentSysDescriptionText => '1.3.6.1.4.1.318.1.1.7.1.1.2.1.2',
    dm3IdentSysModel => '1.3.6.1.4.1.318.1.1.7.1.1.3.0',
    dm3IdentSysCntrlRev => '1.3.6.1.4.1.318.1.1.7.1.1.4.0',
    dm3IdentSysFWVersion => '1.3.6.1.4.1.318.1.1.7.1.1.5.0',
    dm3ConfigSystem => '1.3.6.1.4.1.318.1.1.7.2.1',
    dm3ConfigSysDescriptionTableSize => '1.3.6.1.4.1.318.1.1.7.2.1.1.0',
    dm3ConfigSysDescriptionTable => '1.3.6.1.4.1.318.1.1.7.2.1.2',
    dm3ConfigSysDescriptionEntry => '1.3.6.1.4.1.318.1.1.7.2.1.2.1',
    dm3ConfigSysDescriptionIndex => '1.3.6.1.4.1.318.1.1.7.2.1.2.1.1',
    dm3ConfigSysDescriptionText => '1.3.6.1.4.1.318.1.1.7.2.1.2.1.2',
    dm3ConfigSysHighTempThresh => '1.3.6.1.4.1.318.1.1.7.2.1.3.0',
    dm3ConfigSysHighTempAlarm => '1.3.6.1.4.1.318.1.1.7.2.1.4.0',
    dm3ConfigSysLowTempThresh => '1.3.6.1.4.1.318.1.1.7.2.1.5.0',
    dm3ConfigSysLowTempAlarm => '1.3.6.1.4.1.318.1.1.7.2.1.6.0',
    dm3ConfigSysHardwareTempAlarm => '1.3.6.1.4.1.318.1.1.7.2.1.7.0',
    dm3ConfigSysRemoteAccess => '1.3.6.1.4.1.318.1.1.7.2.1.8.0',
    dm3ConfigLVD => '1.3.6.1.4.1.318.1.1.7.2.2',
    dm3ConfigLVDTableSize => '1.3.6.1.4.1.318.1.1.7.2.2.1.0',
    dm3ConfigLVDTable => '1.3.6.1.4.1.318.1.1.7.2.2.2',
    dm3ConfigLVDEntry => '1.3.6.1.4.1.318.1.1.7.2.2.2.1',
    dm3ConfigLVDIndex => '1.3.6.1.4.1.318.1.1.7.2.2.2.1.1',
    dm3ConfigLVDName => '1.3.6.1.4.1.318.1.1.7.2.2.2.1.2',
    dm3ConfigLVDEnable => '1.3.6.1.4.1.318.1.1.7.2.2.2.1.3',
    dm3ConfigLVDTripThresh => '1.3.6.1.4.1.318.1.1.7.2.2.2.1.4',
    dm3ConfigLVDResetThresh => '1.3.6.1.4.1.318.1.1.7.2.2.2.1.5',
    dm3ConfigLVDOpenAlarm => '1.3.6.1.4.1.318.1.1.7.2.2.2.1.6',
    dm3ConfigLVDHWAlarm => '1.3.6.1.4.1.318.1.1.7.2.2.2.1.7',
    dm3ConfigBattery => '1.3.6.1.4.1.318.1.1.7.2.3',
    dm3ConfigBattFloatVolt => '1.3.6.1.4.1.318.1.1.7.2.3.1.0',
    dm3ConfigBattMaxRecharge => '1.3.6.1.4.1.318.1.1.7.2.3.2.0',
    dm3ConfigBattDischargeThresh => '1.3.6.1.4.1.318.1.1.7.2.3.3.0',
    dm3ConfigBattDischargeAlarm => '1.3.6.1.4.1.318.1.1.7.2.3.4.0',
    dm3ConfigBattHighVoltThresh => '1.3.6.1.4.1.318.1.1.7.2.3.5.0',
    dm3ConfigBattHighVoltAlarm => '1.3.6.1.4.1.318.1.1.7.2.3.6.0',
    dm3ConfigBattLowVoltThresh => '1.3.6.1.4.1.318.1.1.7.2.3.7.0',
    dm3ConfigBattLowVoltAlarm => '1.3.6.1.4.1.318.1.1.7.2.3.8.0',
    dm3ConfigBattHighTempThresh => '1.3.6.1.4.1.318.1.1.7.2.3.9.0',
    dm3ConfigBattHighTempAlarm => '1.3.6.1.4.1.318.1.1.7.2.3.10.0',
    dm3ConfigBattLowTempThresh => '1.3.6.1.4.1.318.1.1.7.2.3.11.0',
    dm3ConfigBattLowTempAlarm => '1.3.6.1.4.1.318.1.1.7.2.3.12.0',
    dm3ConfigBattAmpHour => '1.3.6.1.4.1.318.1.1.7.2.3.13.0',
    dm3ConfigCompMethod => '1.3.6.1.4.1.318.1.1.7.2.3.14.0',
    dm3ConfigCompTempCoeff => '1.3.6.1.4.1.318.1.1.7.2.3.15.0',
    dm3ConfigHighKneeTemp => '1.3.6.1.4.1.318.1.1.7.2.3.16.0',
    dm3ConfigLowKneeTemp => '1.3.6.1.4.1.318.1.1.7.2.3.17.0',
    dm3ConfigBattHwCurrentAlarm => '1.3.6.1.4.1.318.1.1.7.2.3.18.0',
    dm3ConfigBattHwTempAlarm => '1.3.6.1.4.1.318.1.1.7.2.3.19.0',
    dm3ConfigRectThresh => '1.3.6.1.4.1.318.1.1.7.2.4.1.1',
    dm3ConfigRectHighVoltThresh => '1.3.6.1.4.1.318.1.1.7.2.4.1.1.1.0',
    dm3ConfigRectLowVoltThresh => '1.3.6.1.4.1.318.1.1.7.2.4.1.1.2.0',
    dm3ConfigRectFailSafe => '1.3.6.1.4.1.318.1.1.7.2.4.1.1.3.0',
    dm3ConfigRectFailComm => '1.3.6.1.4.1.318.1.1.7.2.4.1.1.4.0',
    dm3ConfigRectAlarms => '1.3.6.1.4.1.318.1.1.7.2.4.1.2',
    dm3ConfigRectHighVoltAlarm => '1.3.6.1.4.1.318.1.1.7.2.4.1.2.1.0',
    dm3ConfigRectLowVoltAlarm => '1.3.6.1.4.1.318.1.1.7.2.4.1.2.2.0',
    dm3ConfigRectConfigAlarm => '1.3.6.1.4.1.318.1.1.7.2.4.1.2.3.0',
    dm3ConfigRect1ofNAlarm => '1.3.6.1.4.1.318.1.1.7.2.4.1.2.4.0',
    dm3ConfigRect2ofNAlarm => '1.3.6.1.4.1.318.1.1.7.2.4.1.2.5.0',
    dm3ConfigRectDiagAlarm => '1.3.6.1.4.1.318.1.1.7.2.4.1.2.6.0',
    dm3ConfigRectImbalanceAlarm => '1.3.6.1.4.1.318.1.1.7.2.4.1.2.7.0',
    dm3ConfigRectCurrLimitAlarm => '1.3.6.1.4.1.318.1.1.7.2.4.1.2.8.0',
    dm3ConfigRectStandbyAlarm => '1.3.6.1.4.1.318.1.1.7.2.4.1.2.9.0',
    dm3ConfigRectFanFailAlarm => '1.3.6.1.4.1.318.1.1.7.2.4.1.2.10.0',
    dm3ConfigRectFailAlarm => '1.3.6.1.4.1.318.1.1.7.2.4.1.2.11.0',
    dm3ConfigRectHwVoltAlarm => '1.3.6.1.4.1.318.1.1.7.2.4.1.2.12.0',
    dm3ConfigConvThresh => '1.3.6.1.4.1.318.1.1.7.2.4.2.1',
    dm3ConfigConvHighVoltThresh => '1.3.6.1.4.1.318.1.1.7.2.4.2.1.1.0',
    dm3ConfigConvLowVoltThresh => '1.3.6.1.4.1.318.1.1.7.2.4.2.1.2.0',
    dm3ConfigConvFailSafe => '1.3.6.1.4.1.318.1.1.7.2.4.2.1.3.0',
    dm3ConfigConvSetPoint => '1.3.6.1.4.1.318.1.1.7.2.4.2.1.4.0',
    dm3ConfigConvFailMax => '1.3.6.1.4.1.318.1.1.7.2.4.2.1.5.0',
    dm3ConfigConvFailMin => '1.3.6.1.4.1.318.1.1.7.2.4.2.1.6.0',
    dm3ConfigConvFailComm => '1.3.6.1.4.1.318.1.1.7.2.4.2.1.7.0',
    dm3ConfigConvAlarms => '1.3.6.1.4.1.318.1.1.7.2.4.2.2',
    dm3ConfigConvHighVoltAlarm => '1.3.6.1.4.1.318.1.1.7.2.4.2.2.1.0',
    dm3ConfigConvLowVoltAlarm => '1.3.6.1.4.1.318.1.1.7.2.4.2.2.2.0',
    dm3ConfigConvConfigAlarm => '1.3.6.1.4.1.318.1.1.7.2.4.2.2.3.0',
    dm3ConfigConv1ofNAlarm => '1.3.6.1.4.1.318.1.1.7.2.4.2.2.4.0',
    dm3ConfigConv2ofNAlarm => '1.3.6.1.4.1.318.1.1.7.2.4.2.2.5.0',
    dm3ConfigConvDiagAlarm => '1.3.6.1.4.1.318.1.1.7.2.4.2.2.6.0',
    dm3ConfigConvImbalanceAlarm => '1.3.6.1.4.1.318.1.1.7.2.4.2.2.7.0',
    dm3ConfigConvCurrLimitAlarm => '1.3.6.1.4.1.318.1.1.7.2.4.2.2.8.0',
    dm3ConfigConvStandbyAlarm => '1.3.6.1.4.1.318.1.1.7.2.4.2.2.9.0',
    dm3ConfigConvFanFailAlarm => '1.3.6.1.4.1.318.1.1.7.2.4.2.2.10.0',
    dm3ConfigConvFailAlarm => '1.3.6.1.4.1.318.1.1.7.2.4.2.2.11.0',
    dm3ConfigConvHwVoltAlarm => '1.3.6.1.4.1.318.1.1.7.2.4.2.2.12.0',
    dm3ConfigOutputRelays => '1.3.6.1.4.1.318.1.1.7.2.5.1',
    dm3ConfigOutRlyTableSize => '1.3.6.1.4.1.318.1.1.7.2.5.1.1.0',
    dm3ConfigOutRlyTable => '1.3.6.1.4.1.318.1.1.7.2.5.1.2',
    dm3ConfigOutRlyEntry => '1.3.6.1.4.1.318.1.1.7.2.5.1.2.1',
    dm3ConfigOutRlyIndex => '1.3.6.1.4.1.318.1.1.7.2.5.1.2.1.1',
    dm3ConfigOutRlyName => '1.3.6.1.4.1.318.1.1.7.2.5.1.2.1.2',
    dm3ConfigOutRlyDelay => '1.3.6.1.4.1.318.1.1.7.2.5.1.2.1.3',
    dm3ConfigOutRlyAlarm => '1.3.6.1.4.1.318.1.1.7.2.5.1.2.1.4',
    dm3ConfigInputRelays => '1.3.6.1.4.1.318.1.1.7.2.5.2',
    dm3ConfigInRlyTableSize => '1.3.6.1.4.1.318.1.1.7.2.5.2.1.0',
    dm3ConfigInRlyTable => '1.3.6.1.4.1.318.1.1.7.2.5.2.2',
    dm3ConfigInRlyEntry => '1.3.6.1.4.1.318.1.1.7.2.5.2.2.1',
    dm3ConfigInRlyIndex => '1.3.6.1.4.1.318.1.1.7.2.5.2.2.1.1',
    dm3ConfigInRlyName => '1.3.6.1.4.1.318.1.1.7.2.5.2.2.1.2',
    dm3ConfigInRlyDelay => '1.3.6.1.4.1.318.1.1.7.2.5.2.2.1.3',
    dm3ConfigInRlyAlarm => '1.3.6.1.4.1.318.1.1.7.2.5.2.2.1.4',
    dm3ConfigBreakers => '1.3.6.1.4.1.318.1.1.7.2.6.1',
    dm3ConfigBreakersTableSize => '1.3.6.1.4.1.318.1.1.7.2.6.1.1.0',
    dm3ConfigBreakersTable => '1.3.6.1.4.1.318.1.1.7.2.6.1.2',
    dm3ConfigBreakersEntry => '1.3.6.1.4.1.318.1.1.7.2.6.1.2.1',
    dm3ConfigBreakersIndex => '1.3.6.1.4.1.318.1.1.7.2.6.1.2.1.1',
    dm3ConfigBreakersName => '1.3.6.1.4.1.318.1.1.7.2.6.1.2.1.2',
    dm3ConfigBreakersAlarm => '1.3.6.1.4.1.318.1.1.7.2.6.1.2.1.3',
    dm3ConfigFuses => '1.3.6.1.4.1.318.1.1.7.2.6.2',
    dm3ConfigFusesTableSize => '1.3.6.1.4.1.318.1.1.7.2.6.2.1.0',
    dm3ConfigFusesTable => '1.3.6.1.4.1.318.1.1.7.2.6.2.2',
    dm3ConfigFusesEntry => '1.3.6.1.4.1.318.1.1.7.2.6.2.2.1',
    dm3ConfigFusesIndex => '1.3.6.1.4.1.318.1.1.7.2.6.2.2.1.1',
    dm3ConfigFusesName => '1.3.6.1.4.1.318.1.1.7.2.6.2.2.1.2',
    dm3ConfigFusesAlarm => '1.3.6.1.4.1.318.1.1.7.2.6.2.2.1.3',
    dm3StatusSystem => '1.3.6.1.4.1.318.1.1.7.3.1',
    dm3StatusSystemTemp => '1.3.6.1.4.1.318.1.1.7.3.1.1.0',
    dm3StatusSystemStart => '1.3.6.1.4.1.318.1.1.7.3.1.2.0',
    dm3StatusSysRemoteAccess => '1.3.6.1.4.1.318.1.1.7.3.1.3.0',
    dm3StatusSysSecurityLevel => '1.3.6.1.4.1.318.1.1.7.3.1.4.0',
    dm3StatusSysTempSanity => '1.3.6.1.4.1.318.1.1.7.3.1.5.0',
    dm3StatusSysAlarmState => '1.3.6.1.4.1.318.1.1.7.3.1.6.0',
    dm3StatusSysTempUnits => '1.3.6.1.4.1.318.1.1.7.3.1.7.0',
    dm3StatusAlarms => '1.3.6.1.4.1.318.1.1.7.3.2',
    dm3StatusAlarmsTableSize => '1.3.6.1.4.1.318.1.1.7.3.2.1.0',
    dm3StatusAlarmsTable => '1.3.6.1.4.1.318.1.1.7.3.2.2',
    dm3StatusAlarmsEntry => '1.3.6.1.4.1.318.1.1.7.3.2.2.1',
    dm3StatusAlarmsIndex => '1.3.6.1.4.1.318.1.1.7.3.2.2.1.1',
    dm3StatusAlarmsText => '1.3.6.1.4.1.318.1.1.7.3.2.2.1.2',
    dm3StatusBattery => '1.3.6.1.4.1.318.1.1.7.3.3',
    dm3StatusBattCurrent => '1.3.6.1.4.1.318.1.1.7.3.3.1.0',
    dm3StatusBattTemp => '1.3.6.1.4.1.318.1.1.7.3.3.2.0',
    dm3StatusBattCurrentSanity => '1.3.6.1.4.1.318.1.1.7.3.3.3.0',
    dm3StatusBattTempSanity => '1.3.6.1.4.1.318.1.1.7.3.3.4.0',
    dm3StatusOEM => '1.3.6.1.4.1.318.1.1.7.3.4',
    dm3StatusOEMrectOffset => '1.3.6.1.4.1.318.1.1.7.3.4.1.0',
    dm3StatusOEMrectGain => '1.3.6.1.4.1.318.1.1.7.3.4.2.0',
    dm3StatusOEMconvOffset => '1.3.6.1.4.1.318.1.1.7.3.4.3.0',
    dm3StatusOEMconvGain => '1.3.6.1.4.1.318.1.1.7.3.4.4.0',
    dm3StatusOEMshuntOffset => '1.3.6.1.4.1.318.1.1.7.3.4.5.0',
    dm3StatusOEMshuntGain => '1.3.6.1.4.1.318.1.1.7.3.4.6.0',
    dm3StatusLVD => '1.3.6.1.4.1.318.1.1.7.3.5',
    dm3StatusLVDTableSize => '1.3.6.1.4.1.318.1.1.7.3.5.1.0',
    dm3StatusLVDTable => '1.3.6.1.4.1.318.1.1.7.3.5.2',
    dm3StatusLVDEntry => '1.3.6.1.4.1.318.1.1.7.3.5.2.1',
    dm3StatusLVDIndex => '1.3.6.1.4.1.318.1.1.7.3.5.2.1.1',
    dm3StatusLVDName => '1.3.6.1.4.1.318.1.1.7.3.5.2.1.2',
    dm3StatusLVDState => '1.3.6.1.4.1.318.1.1.7.3.5.2.1.3',
    dm3StatusLVDHwFault => '1.3.6.1.4.1.318.1.1.7.3.5.2.1.4',
    dm3StatusRectifier => '1.3.6.1.4.1.318.1.1.7.3.6.1',
    dm3StatusRectTableSize => '1.3.6.1.4.1.318.1.1.7.3.6.1.1.0',
    dm3StatusRectTable => '1.3.6.1.4.1.318.1.1.7.3.6.1.2',
    dm3StatusRectEntry => '1.3.6.1.4.1.318.1.1.7.3.6.1.2.1',
    dm3StatusRectIndex => '1.3.6.1.4.1.318.1.1.7.3.6.1.2.1.1',
    dm3StatusRectID => '1.3.6.1.4.1.318.1.1.7.3.6.1.2.1.2',
    dm3StatusRectDesc => '1.3.6.1.4.1.318.1.1.7.3.6.1.2.1.3',
    dm3StatusRectCurrent => '1.3.6.1.4.1.318.1.1.7.3.6.1.2.1.4',
    dm3StatusRectCurrentLimit => '1.3.6.1.4.1.318.1.1.7.3.6.1.2.1.5',
    dm3StatusRectStandby => '1.3.6.1.4.1.318.1.1.7.3.6.1.2.1.6',
    dm3StatusRectFanFail => '1.3.6.1.4.1.318.1.1.7.3.6.1.2.1.7',
    dm3StatusRectFail => '1.3.6.1.4.1.318.1.1.7.3.6.1.2.1.8',
    dm3StatusRectDevType => '1.3.6.1.4.1.318.1.1.7.3.6.1.2.1.9',
    dm3StatusRectPhyAddr => '1.3.6.1.4.1.318.1.1.7.3.6.1.2.1.10',
    dm3StatusRectCfg => '1.3.6.1.4.1.318.1.1.7.3.6.1.2.1.11',
    dm3StatusRectPcbRev => '1.3.6.1.4.1.318.1.1.7.3.6.1.2.1.12',
    dm3StatusRectFwVer => '1.3.6.1.4.1.318.1.1.7.3.6.1.2.1.13',
    dm3StatusRectPresent => '1.3.6.1.4.1.318.1.1.7.3.6.1.2.1.14',
    dm3StatusRectDiagPass => '1.3.6.1.4.1.318.1.1.7.3.6.1.2.1.15',
    dm3StatusRectState => '1.3.6.1.4.1.318.1.1.7.3.6.1.2.1.16',
    dm3StatusSysRectVoltSanity => '1.3.6.1.4.1.318.1.1.7.3.6.1.3.0',
    dm3StatusSysRectAvailable => '1.3.6.1.4.1.318.1.1.7.3.6.1.4.0',
    dm3StatusSysRectType => '1.3.6.1.4.1.318.1.1.7.3.6.1.5.0',
    dm3StatusSysRectVoltage => '1.3.6.1.4.1.318.1.1.7.3.6.1.6.0',
    dm3StatusSysRectCurrent => '1.3.6.1.4.1.318.1.1.7.3.6.1.7.0',
    dm3StatusConverter => '1.3.6.1.4.1.318.1.1.7.3.6.2',
    dm3StatusConvTableSize => '1.3.6.1.4.1.318.1.1.7.3.6.2.1.0',
    dm3StatusConvTable => '1.3.6.1.4.1.318.1.1.7.3.6.2.2',
    dm3StatusConvEntry => '1.3.6.1.4.1.318.1.1.7.3.6.2.2.1',
    dm3StatusConvIndex => '1.3.6.1.4.1.318.1.1.7.3.6.2.2.1.1',
    dm3StatusConvID => '1.3.6.1.4.1.318.1.1.7.3.6.2.2.1.2',
    dm3StatusConvDesc => '1.3.6.1.4.1.318.1.1.7.3.6.2.2.1.3',
    dm3StatusConvCurrent => '1.3.6.1.4.1.318.1.1.7.3.6.2.2.1.4',
    dm3StatusConvCurrentLimit => '1.3.6.1.4.1.318.1.1.7.3.6.2.2.1.5',
    dm3StatusConvStandby => '1.3.6.1.4.1.318.1.1.7.3.6.2.2.1.6',
    dm3StatusConvFanFail => '1.3.6.1.4.1.318.1.1.7.3.6.2.2.1.7',
    dm3StatusConvFail => '1.3.6.1.4.1.318.1.1.7.3.6.2.2.1.8',
    dm3StatusConvDevType => '1.3.6.1.4.1.318.1.1.7.3.6.2.2.1.9',
    dm3StatusConvPhyAddr => '1.3.6.1.4.1.318.1.1.7.3.6.2.2.1.10',
    dm3StatusConvCfg => '1.3.6.1.4.1.318.1.1.7.3.6.2.2.1.11',
    dm3StatusConvPcbRev => '1.3.6.1.4.1.318.1.1.7.3.6.2.2.1.12',
    dm3StatusConvFwVer => '1.3.6.1.4.1.318.1.1.7.3.6.2.2.1.13',
    dm3StatusConvPresent => '1.3.6.1.4.1.318.1.1.7.3.6.2.2.1.14',
    dm3StatusConvDiagPass => '1.3.6.1.4.1.318.1.1.7.3.6.2.2.1.15',
    dm3StatusConvState => '1.3.6.1.4.1.318.1.1.7.3.6.2.2.1.16',
    dm3StatusSysConvVoltSanity => '1.3.6.1.4.1.318.1.1.7.3.6.2.3.0',
    dm3StatusSysConvAvailable => '1.3.6.1.4.1.318.1.1.7.3.6.2.4.0',
    dm3StatusSysConvType => '1.3.6.1.4.1.318.1.1.7.3.6.2.5.0',
    dm3StatusSysConvVoltage => '1.3.6.1.4.1.318.1.1.7.3.6.2.6.0',
    dm3StatusSysConvCurrent => '1.3.6.1.4.1.318.1.1.7.3.6.2.7.0',
    dm3StatusOutputRelays => '1.3.6.1.4.1.318.1.1.7.3.7.1',
    dm3StatusOutRlyTableSize => '1.3.6.1.4.1.318.1.1.7.3.7.1.1.0',
    dm3StatusOutRlyTable => '1.3.6.1.4.1.318.1.1.7.3.7.1.2',
    dm3StatusOutRlyEntry => '1.3.6.1.4.1.318.1.1.7.3.7.1.2.1',
    dm3StatusOutRlyIndex => '1.3.6.1.4.1.318.1.1.7.3.7.1.2.1.1',
    dm3StatusOutRlyName => '1.3.6.1.4.1.318.1.1.7.3.7.1.2.1.2',
    dm3StatusOutRlyStatus => '1.3.6.1.4.1.318.1.1.7.3.7.1.2.1.3',
    dm3StatusInputRelays => '1.3.6.1.4.1.318.1.1.7.3.7.2',
    dm3StatusInRlyTableSize => '1.3.6.1.4.1.318.1.1.7.3.7.2.1.0',
    dm3StatusInRlyTable => '1.3.6.1.4.1.318.1.1.7.3.7.2.2',
    dm3StatusInRlyEntry => '1.3.6.1.4.1.318.1.1.7.3.7.2.2.1',
    dm3StatusInRlyIndex => '1.3.6.1.4.1.318.1.1.7.3.7.2.2.1.1',
    dm3StatusInRlyName => '1.3.6.1.4.1.318.1.1.7.3.7.2.2.1.2',
    dm3StatusInRlyStatus => '1.3.6.1.4.1.318.1.1.7.3.7.2.2.1.3',
    dm3StatusBreakers => '1.3.6.1.4.1.318.1.1.7.3.8.1',
    dm3StatusBreakersTableSize => '1.3.6.1.4.1.318.1.1.7.3.8.1.1.0',
    dm3StatusBreakersTable => '1.3.6.1.4.1.318.1.1.7.3.8.1.2',
    dm3StatusBreakersEntry => '1.3.6.1.4.1.318.1.1.7.3.8.1.2.1',
    dm3StatusBreakersIndex => '1.3.6.1.4.1.318.1.1.7.3.8.1.2.1.1',
    dm3StatusBreakersName => '1.3.6.1.4.1.318.1.1.7.3.8.1.2.1.2',
    dm3StatusBreakersStatus => '1.3.6.1.4.1.318.1.1.7.3.8.1.2.1.3',
    dm3StatusFuses => '1.3.6.1.4.1.318.1.1.7.3.8.2',
    dm3StatusFusesTableSize => '1.3.6.1.4.1.318.1.1.7.3.8.2.1.0',
    dm3StatusFusesTable => '1.3.6.1.4.1.318.1.1.7.3.8.2.2',
    dm3StatusFusesEntry => '1.3.6.1.4.1.318.1.1.7.3.8.2.2.1',
    dm3StatusFusesIndex => '1.3.6.1.4.1.318.1.1.7.3.8.2.2.1.1',
    dm3StatusFusesName => '1.3.6.1.4.1.318.1.1.7.3.8.2.2.1.2',
    dm3StatusFusesStatus => '1.3.6.1.4.1.318.1.1.7.3.8.2.2.1.3',
    atsIdent => '1.3.6.1.4.1.318.1.1.8.1',
    atsIdentHardwareRev => '1.3.6.1.4.1.318.1.1.8.1.1.0',
    atsIdentFirmwareRev => '1.3.6.1.4.1.318.1.1.8.1.2.0',
    atsIdentFirmwareDate => '1.3.6.1.4.1.318.1.1.8.1.3.0',
    atsIdentDateOfManufacture => '1.3.6.1.4.1.318.1.1.8.1.4.0',
    atsIdentModelNumber => '1.3.6.1.4.1.318.1.1.8.1.5.0',
    atsIdentSerialNumber => '1.3.6.1.4.1.318.1.1.8.1.6.0',
    atsIdentNominalLineVoltage => '1.3.6.1.4.1.318.1.1.8.1.7.0',
    atsIdentNominalLineFrequency => '1.3.6.1.4.1.318.1.1.8.1.8.0',
    atsIdentDeviceRating => '1.3.6.1.4.1.318.1.1.8.1.9.0',
    atsCalibrationInput => '1.3.6.1.4.1.318.1.1.8.2.1',
    atsCalibrationNumInputs => '1.3.6.1.4.1.318.1.1.8.2.1.1.0',
    atsCalibrationNumInputPhases => '1.3.6.1.4.1.318.1.1.8.2.1.2.0',
    atsCalibrationInputPhaseTable => '1.3.6.1.4.1.318.1.1.8.2.1.3',
    atsCalibrationInputPhaseEntry => '1.3.6.1.4.1.318.1.1.8.2.1.3.1',
    atsCalibrationInputTableIndex => '1.3.6.1.4.1.318.1.1.8.2.1.3.1.1',
    atsCalibrationInputPhaseTableIndex => '1.3.6.1.4.1.318.1.1.8.2.1.3.1.2',
    atsLineVoltageCalibrationFactor => '1.3.6.1.4.1.318.1.1.8.2.1.3.1.3',
    atsCalibrationPowerSupply => '1.3.6.1.4.1.318.1.1.8.2.2',
    atsCalibrationPowerSupplyVoltages => '1.3.6.1.4.1.318.1.1.8.2.2.1.0',
    atsCalibrationPowerSupplyVoltageTable => '1.3.6.1.4.1.318.1.1.8.2.2.2',
    atsCalibrationPowerSupplyVoltageEntry => '1.3.6.1.4.1.318.1.1.8.2.2.2.1',
    atsCalibrationPowerSupplyVoltageTableIndex => '1.3.6.1.4.1.318.1.1.8.2.2.2.1.1',
    atsCalibrationPowerSupplyVoltage => '1.3.6.1.4.1.318.1.1.8.2.2.2.1.2',
    atsPowerSupplyVoltageCalibrationFactor => '1.3.6.1.4.1.318.1.1.8.2.2.2.1.3',
    atsCalibrationOutput => '1.3.6.1.4.1.318.1.1.8.2.3',
    atsCalibrationNumOutputs => '1.3.6.1.4.1.318.1.1.8.2.3.1.0',
    atsCalibrationNumOutputPhases => '1.3.6.1.4.1.318.1.1.8.2.3.2.0',
    atsCalibrationOutputTable => '1.3.6.1.4.1.318.1.1.8.2.3.3',
    atsCalibrationOutputEntry => '1.3.6.1.4.1.318.1.1.8.2.3.3.1',
    atsCalibrationOutputTableIndex => '1.3.6.1.4.1.318.1.1.8.2.3.3.1.1',
    atsCalibrationOutputPhasesTableIndex => '1.3.6.1.4.1.318.1.1.8.2.3.3.1.2',
    atsOutputCurrentCalibrationFactor => '1.3.6.1.4.1.318.1.1.8.2.3.3.1.3',
    atsControl => '1.3.6.1.4.1.318.1.1.8.3',
    atsControlResetATS => '1.3.6.1.4.1.318.1.1.8.3.1.0',
    atsControlClearAllAlarms => '1.3.6.1.4.1.318.1.1.8.3.2.0',
    atsConfig => '1.3.6.1.4.1.318.1.1.8.4',
    atsConfigProductName => '1.3.6.1.4.1.318.1.1.8.4.1.0',
    atsConfigPreferredSource => '1.3.6.1.4.1.318.1.1.8.4.2.0',
    atsConfigFrontPanelLockout => '1.3.6.1.4.1.318.1.1.8.4.3.0',
    atsConfigVoltageSensitivity => '1.3.6.1.4.1.318.1.1.8.4.4.0',
    atsConfigTransferVoltageRange => '1.3.6.1.4.1.318.1.1.8.4.5.0',
    atsConfigCurrentLimit => '1.3.6.1.4.1.318.1.1.8.4.6.0',
    atsConfigResetValues => '1.3.6.1.4.1.318.1.1.8.4.7.0',
    atsConfigLineVRMS => '1.3.6.1.4.1.318.1.1.8.4.8.0',
    atsConfigLineVRMSNarrowLimit => '1.3.6.1.4.1.318.1.1.8.4.9.0',
    atsConfigLineVRMSMediumLimit => '1.3.6.1.4.1.318.1.1.8.4.10.0',
    atsConfigLineVRMSWideLimit => '1.3.6.1.4.1.318.1.1.8.4.11.0',
    atsConfigFrequencyDeviation => '1.3.6.1.4.1.318.1.1.8.4.12.0',
    atsConfigBankTableSize => '1.3.6.1.4.1.318.1.1.8.4.13.0',
    atsConfigBankTable => '1.3.6.1.4.1.318.1.1.8.4.14',
    atsConfigBankEntry => '1.3.6.1.4.1.318.1.1.8.4.14.1',
    atsConfigBankTableIndex => '1.3.6.1.4.1.318.1.1.8.4.14.1.1',
    atsConfigBank => '1.3.6.1.4.1.318.1.1.8.4.14.1.2',
    atsConfigBankLowLoadThreshold => '1.3.6.1.4.1.318.1.1.8.4.14.1.3',
    atsConfigBankNearOverLoadThreshold => '1.3.6.1.4.1.318.1.1.8.4.14.1.4',
    atsConfigBankOverLoadThreshold => '1.3.6.1.4.1.318.1.1.8.4.14.1.5',
    atsConfigPhaseTableSize => '1.3.6.1.4.1.318.1.1.8.4.15.0',
    atsConfigPhaseTable => '1.3.6.1.4.1.318.1.1.8.4.16',
    atsConfigPhaseEntry => '1.3.6.1.4.1.318.1.1.8.4.16.1',
    atsConfigPhaseTableIndex => '1.3.6.1.4.1.318.1.1.8.4.16.1.1',
    atsConfigPhase => '1.3.6.1.4.1.318.1.1.8.4.16.1.2',
    atsConfigPhaseLowLoadThreshold => '1.3.6.1.4.1.318.1.1.8.4.16.1.3',
    atsConfigPhaseNearOverLoadThreshold => '1.3.6.1.4.1.318.1.1.8.4.16.1.4',
    atsConfigPhaseOverLoadThreshold => '1.3.6.1.4.1.318.1.1.8.4.16.1.5',
    atsStatusDeviceStatus => '1.3.6.1.4.1.318.1.1.8.5.1',
    atsStatusCommStatus => '1.3.6.1.4.1.318.1.1.8.5.1.1.0',
    atsStatusSelectedSource => '1.3.6.1.4.1.318.1.1.8.5.1.2.0',
    atsStatusRedundancyState => '1.3.6.1.4.1.318.1.1.8.5.1.3.0',
    atsStatusOverCurrentState => '1.3.6.1.4.1.318.1.1.8.5.1.4.0',
    atsStatus5VPowerSupply => '1.3.6.1.4.1.318.1.1.8.5.1.5.0',
    atsStatus24VPowerSupply => '1.3.6.1.4.1.318.1.1.8.5.1.6.0',
    atsStatus24VSourceBPowerSupply => '1.3.6.1.4.1.318.1.1.8.5.1.7.0',
    atsStatusPlus12VPowerSupply => '1.3.6.1.4.1.318.1.1.8.5.1.8.0',
    atsStatusMinus12VPowerSupply => '1.3.6.1.4.1.318.1.1.8.5.1.9.0',
    atsStatusSwitchStatus => '1.3.6.1.4.1.318.1.1.8.5.1.10.0',
    atsStatusFrontPanel => '1.3.6.1.4.1.318.1.1.8.5.1.11.0',
    atsStatusSourceAStatus => '1.3.6.1.4.1.318.1.1.8.5.1.12.0',
    atsStatusSourceBStatus => '1.3.6.1.4.1.318.1.1.8.5.1.13.0',
    atsStatusPhaseSyncStatus => '1.3.6.1.4.1.318.1.1.8.5.1.14.0',
    atsStatusVoltageOutStatus => '1.3.6.1.4.1.318.1.1.8.5.1.15.0',
    atsStatusHardwareStatus => '1.3.6.1.4.1.318.1.1.8.5.1.16.0',
    atsStatusResetValues => '1.3.6.1.4.1.318.1.1.8.5.2',
    atsStatusResetMaxMinValues => '1.3.6.1.4.1.318.1.1.8.5.2.1.0',
    atsStatusInput => '1.3.6.1.4.1.318.1.1.8.5.3',
    atsNumInputs => '1.3.6.1.4.1.318.1.1.8.5.3.1.0',
    atsInputTable => '1.3.6.1.4.1.318.1.1.8.5.3.2',
    atsInputEntry => '1.3.6.1.4.1.318.1.1.8.5.3.2.1',
    atsInputTableIndex => '1.3.6.1.4.1.318.1.1.8.5.3.2.1.1',
    atsNumInputPhases => '1.3.6.1.4.1.318.1.1.8.5.3.2.1.2',
    atsInputVoltageOrientation => '1.3.6.1.4.1.318.1.1.8.5.3.2.1.3',
    atsInputFrequency => '1.3.6.1.4.1.318.1.1.8.5.3.2.1.4',
    atsInputType => '1.3.6.1.4.1.318.1.1.8.5.3.2.1.5',
    atsInputName => '1.3.6.1.4.1.318.1.1.8.5.3.2.1.6',
    atsInputPhaseTable => '1.3.6.1.4.1.318.1.1.8.5.3.3',
    atsInputPhaseEntry => '1.3.6.1.4.1.318.1.1.8.5.3.3.1',
    atsInputPhaseTableIndex => '1.3.6.1.4.1.318.1.1.8.5.3.3.1.1',
    atsInputPhaseIndex => '1.3.6.1.4.1.318.1.1.8.5.3.3.1.2',
    atsInputVoltage => '1.3.6.1.4.1.318.1.1.8.5.3.3.1.3',
    atsInputMaxVoltage => '1.3.6.1.4.1.318.1.1.8.5.3.3.1.4',
    atsInputMinVoltage => '1.3.6.1.4.1.318.1.1.8.5.3.3.1.5',
    atsInputCurrent => '1.3.6.1.4.1.318.1.1.8.5.3.3.1.6',
    atsInputMaxCurrent => '1.3.6.1.4.1.318.1.1.8.5.3.3.1.7',
    atsInputMinCurrent => '1.3.6.1.4.1.318.1.1.8.5.3.3.1.8',
    atsInputPower => '1.3.6.1.4.1.318.1.1.8.5.3.3.1.9',
    atsInputMaxPower => '1.3.6.1.4.1.318.1.1.8.5.3.3.1.10',
    atsInputMinPower => '1.3.6.1.4.1.318.1.1.8.5.3.3.1.11',
    atsStatusOutput => '1.3.6.1.4.1.318.1.1.8.5.4',
    atsNumOutputs => '1.3.6.1.4.1.318.1.1.8.5.4.1.0',
    atsOutputTable => '1.3.6.1.4.1.318.1.1.8.5.4.2',
    atsOutputEntry => '1.3.6.1.4.1.318.1.1.8.5.4.2.1',
    atsOutputTableIndex => '1.3.6.1.4.1.318.1.1.8.5.4.2.1.1',
    atsNumOutputPhases => '1.3.6.1.4.1.318.1.1.8.5.4.2.1.2',
    atsOutputVoltageOrientation => '1.3.6.1.4.1.318.1.1.8.5.4.2.1.3',
    atsOutputFrequency => '1.3.6.1.4.1.318.1.1.8.5.4.2.1.4',
    atsOutputPhaseTable => '1.3.6.1.4.1.318.1.1.8.5.4.3',
    atsOutputPhaseEntry => '1.3.6.1.4.1.318.1.1.8.5.4.3.1',
    atsOutputPhaseTableIndex => '1.3.6.1.4.1.318.1.1.8.5.4.3.1.1',
    atsOutputPhaseIndex => '1.3.6.1.4.1.318.1.1.8.5.4.3.1.2',
    atsOutputVoltage => '1.3.6.1.4.1.318.1.1.8.5.4.3.1.3',
    atsOutputCurrent => '1.3.6.1.4.1.318.1.1.8.5.4.3.1.4',
    atsOutputMaxCurrent => '1.3.6.1.4.1.318.1.1.8.5.4.3.1.5',
    atsOutputMinCurrent => '1.3.6.1.4.1.318.1.1.8.5.4.3.1.6',
    atsOutputLoad => '1.3.6.1.4.1.318.1.1.8.5.4.3.1.7',
    atsOutputMaxLoad => '1.3.6.1.4.1.318.1.1.8.5.4.3.1.8',
    atsOutputMinLoad => '1.3.6.1.4.1.318.1.1.8.5.4.3.1.9',
    atsOutputPercentLoad => '1.3.6.1.4.1.318.1.1.8.5.4.3.1.10',
    atsOutputMaxPercentLoad => '1.3.6.1.4.1.318.1.1.8.5.4.3.1.11',
    atsOutputMinPercentLoad => '1.3.6.1.4.1.318.1.1.8.5.4.3.1.12',
    atsOutputPower => '1.3.6.1.4.1.318.1.1.8.5.4.3.1.13',
    atsOutputMaxPower => '1.3.6.1.4.1.318.1.1.8.5.4.3.1.14',
    atsOutputMinPower => '1.3.6.1.4.1.318.1.1.8.5.4.3.1.15',
    atsOutputPercentPower => '1.3.6.1.4.1.318.1.1.8.5.4.3.1.16',
    atsOutputMaxPercentPower => '1.3.6.1.4.1.318.1.1.8.5.4.3.1.17',
    atsOutputMinPercentPower => '1.3.6.1.4.1.318.1.1.8.5.4.3.1.18',
    atsOutputPhaseState => '1.3.6.1.4.1.318.1.1.8.5.4.3.1.19',
    atsOutputBankTableSize => '1.3.6.1.4.1.318.1.1.8.5.4.4.0',
    atsOutputBankTable => '1.3.6.1.4.1.318.1.1.8.5.4.5',
    atsOutputBankEntry => '1.3.6.1.4.1.318.1.1.8.5.4.5.1',
    atsOutputBankTableIndex => '1.3.6.1.4.1.318.1.1.8.5.4.5.1.1',
    atsOutputPhase => '1.3.6.1.4.1.318.1.1.8.5.4.5.1.2',
    atsOutputBank => '1.3.6.1.4.1.318.1.1.8.5.4.5.1.3',
    atsOutputBankCurrent => '1.3.6.1.4.1.318.1.1.8.5.4.5.1.4',
    atsOutputBankState => '1.3.6.1.4.1.318.1.1.8.5.4.5.1.5',
    atsOutputBankOutputVoltage => '1.3.6.1.4.1.318.1.1.8.5.4.5.1.6',
    atsOutputBankMaxCurrent => '1.3.6.1.4.1.318.1.1.8.5.4.5.1.7',
    atsOutputBankMinCurrent => '1.3.6.1.4.1.318.1.1.8.5.4.5.1.8',
    atsOutputBankLoad => '1.3.6.1.4.1.318.1.1.8.5.4.5.1.9',
    atsOutputBankMaxLoad => '1.3.6.1.4.1.318.1.1.8.5.4.5.1.10',
    atsOutputBankMinLoad => '1.3.6.1.4.1.318.1.1.8.5.4.5.1.11',
    atsOutputBankPercentLoad => '1.3.6.1.4.1.318.1.1.8.5.4.5.1.12',
    atsOutputBankMaxPercentLoad => '1.3.6.1.4.1.318.1.1.8.5.4.5.1.13',
    atsOutputBankMinPercentLoad => '1.3.6.1.4.1.318.1.1.8.5.4.5.1.14',
    atsOutputBankPower => '1.3.6.1.4.1.318.1.1.8.5.4.5.1.15',
    atsOutputBankMaxPower => '1.3.6.1.4.1.318.1.1.8.5.4.5.1.16',
    atsOutputBankMinPower => '1.3.6.1.4.1.318.1.1.8.5.4.5.1.17',
    atsOutputBankPercentPower => '1.3.6.1.4.1.318.1.1.8.5.4.5.1.18',
    atsOutputBankMaxPercentPower => '1.3.6.1.4.1.318.1.1.8.5.4.5.1.19',
    atsOutputBankMinPercentPower => '1.3.6.1.4.1.318.1.1.8.5.4.5.1.20',
    dcmim2IdentSystem => '1.3.6.1.4.1.318.1.1.9.1.1',
    dcmim2IdentSysFWVersion => '1.3.6.1.4.1.318.1.1.9.1.1.1.0',
    dcmim2ControlSystem => '1.3.6.1.4.1.318.1.1.9.2.1',
    dcmim2ControlRunFunctBatteryTest => '1.3.6.1.4.1.318.1.1.9.2.1.1.0',
    dcmim2ControlRunCapacityBatteryTest => '1.3.6.1.4.1.318.1.1.9.2.1.2.0',
    dcmim2ConfigSystem => '1.3.6.1.4.1.318.1.1.9.3.1',
    dcmim2ConfigSysHighTempTrip => '1.3.6.1.4.1.318.1.1.9.3.1.1.0',
    dcmim2ConfigSysHighTempReset => '1.3.6.1.4.1.318.1.1.9.3.1.2.0',
    dcmim2ConfigSysLowTempTrip => '1.3.6.1.4.1.318.1.1.9.3.1.3.0',
    dcmim2ConfigSysLowTempReset => '1.3.6.1.4.1.318.1.1.9.3.1.4.0',
    dcmim2ConfigBattery => '1.3.6.1.4.1.318.1.1.9.3.2',
    dcmim2ConfigBattFloatVolt => '1.3.6.1.4.1.318.1.1.9.3.2.1.0',
    dcmim2ConfigBattMaxRecharge => '1.3.6.1.4.1.318.1.1.9.3.2.2.0',
    dcmim2ConfigBattMfgCapacity => '1.3.6.1.4.1.318.1.1.9.3.2.3.0',
    dcmim2ConfigBattType => '1.3.6.1.4.1.318.1.1.9.3.2.4.0',
    dcmim2ConfigBattFunctTestDuration => '1.3.6.1.4.1.318.1.1.9.3.2.5.0',
    dcmim2ConfigBattFunctTestThresh => '1.3.6.1.4.1.318.1.1.9.3.2.6.0',
    dcmim2ConfigBattCapacityTestPercent => '1.3.6.1.4.1.318.1.1.9.3.2.7.0',
    dcmim2ConfigBattCapacityTestEndThresh => '1.3.6.1.4.1.318.1.1.9.3.2.8.0',
    dcmim2ConfigBattCapacityTestCurrent => '1.3.6.1.4.1.318.1.1.9.3.2.9.0',
    dcmim2ConfigLVD => '1.3.6.1.4.1.318.1.1.9.3.3',
    dcmim2ConfigLVDTableSize => '1.3.6.1.4.1.318.1.1.9.3.3.1.0',
    dcmim2ConfigLVDTable => '1.3.6.1.4.1.318.1.1.9.3.3.2',
    dcmim2ConfigLVDEntry => '1.3.6.1.4.1.318.1.1.9.3.3.2.1',
    dcmim2ConfigLVDIndex => '1.3.6.1.4.1.318.1.1.9.3.3.2.1.1',
    dcmim2ConfigLVDTrip => '1.3.6.1.4.1.318.1.1.9.3.3.2.1.2',
    dcmim2ConfigLVDReset => '1.3.6.1.4.1.318.1.1.9.3.3.2.1.3',
    dcmim2ConfigLVDState => '1.3.6.1.4.1.318.1.1.9.3.3.2.1.4',
    dcmim2StatusSystem => '1.3.6.1.4.1.318.1.1.9.4.1',
    dcmim2StatusSysRectCurrent => '1.3.6.1.4.1.318.1.1.9.4.1.1.0',
    dcmim2StatusSysLoadCurrent => '1.3.6.1.4.1.318.1.1.9.4.1.2.0',
    dcmim2StatusSysBusVoltage => '1.3.6.1.4.1.318.1.1.9.4.1.3.0',
    dcmim2StatusSysAmbientTemp => '1.3.6.1.4.1.318.1.1.9.4.1.4.0',
    dcmim2StatusSysUpTime => '1.3.6.1.4.1.318.1.1.9.4.1.5.0',
    dcmim2StatusSysTempUnits => '1.3.6.1.4.1.318.1.1.9.4.1.6.0',
    dcmim2StatusRectifier => '1.3.6.1.4.1.318.1.1.9.4.2',
    dcmim2StatusRectTableSize => '1.3.6.1.4.1.318.1.1.9.4.2.1.0',
    dcmim2StatusRectTable => '1.3.6.1.4.1.318.1.1.9.4.2.2',
    dcmim2StatusRectEntry => '1.3.6.1.4.1.318.1.1.9.4.2.2.1',
    dcmim2StatusRectIndex => '1.3.6.1.4.1.318.1.1.9.4.2.2.1.1',
    dcmim2StatusRectDevType => '1.3.6.1.4.1.318.1.1.9.4.2.2.1.2',
    dcmim2StatusRectID => '1.3.6.1.4.1.318.1.1.9.4.2.2.1.3',
    dcmim2StatusRectPhyAddr => '1.3.6.1.4.1.318.1.1.9.4.2.2.1.4',
    dcmim2StatusRectFail => '1.3.6.1.4.1.318.1.1.9.4.2.2.1.5',
    dcmim2StatusRectCurrent => '1.3.6.1.4.1.318.1.1.9.4.2.2.1.6',
    dcmim2StatusBattery => '1.3.6.1.4.1.318.1.1.9.4.3',
    dcmim2StatusBattFloatVolt => '1.3.6.1.4.1.318.1.1.9.4.3.1.0',
    dcmim2StatusBattCurrent => '1.3.6.1.4.1.318.1.1.9.4.3.2.0',
    dcmim2StatusBattTemp => '1.3.6.1.4.1.318.1.1.9.4.3.3.0',
    dcmim2StatusBattMfgCapacity => '1.3.6.1.4.1.318.1.1.9.4.3.4.0',
    dcmim2StatusBattTestCapacity => '1.3.6.1.4.1.318.1.1.9.4.3.5.0',
    dcmim2StatusBattFunctTestResult => '1.3.6.1.4.1.318.1.1.9.4.3.6.0',
    dcmim2StatusBattCapacityTestResult => '1.3.6.1.4.1.318.1.1.9.4.3.7.0',
    dcmim2StatusLVD => '1.3.6.1.4.1.318.1.1.9.4.4',
    dcmim2StatusLVDTableSize => '1.3.6.1.4.1.318.1.1.9.4.4.1.0',
    dcmim2StatusLVDTable => '1.3.6.1.4.1.318.1.1.9.4.4.2',
    dcmim2StatusLVDEntry => '1.3.6.1.4.1.318.1.1.9.4.4.2.1',
    dcmim2StatusLVDIndex => '1.3.6.1.4.1.318.1.1.9.4.4.2.1.1',
    dcmim2StatusLVDState => '1.3.6.1.4.1.318.1.1.9.4.4.2.1.2',
    dcmim2StatusAlarms => '1.3.6.1.4.1.318.1.1.9.4.5',
    dcmim2StatusAlarmsTableSize => '1.3.6.1.4.1.318.1.1.9.4.5.1.0',
    dcmim2StatusAlarmsTable => '1.3.6.1.4.1.318.1.1.9.4.5.2',
    dcmim2StatusAlarmsEntry => '1.3.6.1.4.1.318.1.1.9.4.5.2.1',
    dcmim2StatusAlarmsIndex => '1.3.6.1.4.1.318.1.1.9.4.5.2.1.1',
    dcmim2StatusAlarmsText => '1.3.6.1.4.1.318.1.1.9.4.5.2.1.2',
    emIdent => '1.3.6.1.4.1.318.1.1.10.1.1',
    emIdentFirmwareRevision => '1.3.6.1.4.1.318.1.1.10.1.1.1.0',
    emConfig => '1.3.6.1.4.1.318.1.1.10.1.2',
    emConfigProbesNumProbes => '1.3.6.1.4.1.318.1.1.10.1.2.1.0',
    emConfigProbesTable => '1.3.6.1.4.1.318.1.1.10.1.2.2',
    emConfigProbesEntry => '1.3.6.1.4.1.318.1.1.10.1.2.2.1',
    emConfigProbeNumber => '1.3.6.1.4.1.318.1.1.10.1.2.2.1.1',
    emConfigProbeName => '1.3.6.1.4.1.318.1.1.10.1.2.2.1.2',
    emConfigProbeHighTempThreshold => '1.3.6.1.4.1.318.1.1.10.1.2.2.1.3',
    emConfigProbeLowTempThreshold => '1.3.6.1.4.1.318.1.1.10.1.2.2.1.4',
    emConfigProbeTempUnits => '1.3.6.1.4.1.318.1.1.10.1.2.2.1.5',
    emConfigProbeHighHumidThreshold => '1.3.6.1.4.1.318.1.1.10.1.2.2.1.6',
    emConfigProbeLowHumidThreshold => '1.3.6.1.4.1.318.1.1.10.1.2.2.1.7',
    emConfigProbeHighTempEnable => '1.3.6.1.4.1.318.1.1.10.1.2.2.1.8',
    emConfigProbeLowTempEnable => '1.3.6.1.4.1.318.1.1.10.1.2.2.1.9',
    emConfigProbeHighHumidEnable => '1.3.6.1.4.1.318.1.1.10.1.2.2.1.10',
    emConfigProbeLowHumidEnable => '1.3.6.1.4.1.318.1.1.10.1.2.2.1.11',
    emConfigProbeMaxTempThreshold => '1.3.6.1.4.1.318.1.1.10.1.2.2.1.12',
    emConfigProbeMinTempThreshold => '1.3.6.1.4.1.318.1.1.10.1.2.2.1.13',
    emConfigProbeMaxHumidThreshold => '1.3.6.1.4.1.318.1.1.10.1.2.2.1.14',
    emConfigProbeMinHumidThreshold => '1.3.6.1.4.1.318.1.1.10.1.2.2.1.15',
    emConfigProbeMaxTempEnable => '1.3.6.1.4.1.318.1.1.10.1.2.2.1.16',
    emConfigProbeMinTempEnable => '1.3.6.1.4.1.318.1.1.10.1.2.2.1.17',
    emConfigProbeMaxHumidEnable => '1.3.6.1.4.1.318.1.1.10.1.2.2.1.18',
    emConfigProbeMinHumidEnable => '1.3.6.1.4.1.318.1.1.10.1.2.2.1.19',
    emConfigProbeTempHysteresis => '1.3.6.1.4.1.318.1.1.10.1.2.2.1.20',
    emConfigProbeHumidHysteresis => '1.3.6.1.4.1.318.1.1.10.1.2.2.1.21',
    emConfigProbeLocation => '1.3.6.1.4.1.318.1.1.10.1.2.2.1.22',
    emConfigContactsNumContacts => '1.3.6.1.4.1.318.1.1.10.1.2.3.0',
    emConfigContactsTable => '1.3.6.1.4.1.318.1.1.10.1.2.4',
    emConfigContactsEntry => '1.3.6.1.4.1.318.1.1.10.1.2.4.1',
    emConfigContactNumber => '1.3.6.1.4.1.318.1.1.10.1.2.4.1.1',
    emConfigContactName => '1.3.6.1.4.1.318.1.1.10.1.2.4.1.2',
    emConfigContactEnable => '1.3.6.1.4.1.318.1.1.10.1.2.4.1.3',
    emConfigContactSeverity => '1.3.6.1.4.1.318.1.1.10.1.2.4.1.4',
    emConfigContactNormalState => '1.3.6.1.4.1.318.1.1.10.1.2.4.1.5',
    emConfigContactLocation => '1.3.6.1.4.1.318.1.1.10.1.2.4.1.6',
    emStatus => '1.3.6.1.4.1.318.1.1.10.1.3',
    emStatusCommStatus => '1.3.6.1.4.1.318.1.1.10.1.3.1.0',
    emStatusProbesNumProbes => '1.3.6.1.4.1.318.1.1.10.1.3.2.0',
    emStatusProbesTable => '1.3.6.1.4.1.318.1.1.10.1.3.3',
    emStatusProbesEntry => '1.3.6.1.4.1.318.1.1.10.1.3.3.1',
    emStatusProbeNumber => '1.3.6.1.4.1.318.1.1.10.1.3.3.1.1',
    emStatusProbeName => '1.3.6.1.4.1.318.1.1.10.1.3.3.1.2',
    emStatusProbeStatus => '1.3.6.1.4.1.318.1.1.10.1.3.3.1.3',
    emStatusProbeCurrentTemp => '1.3.6.1.4.1.318.1.1.10.1.3.3.1.4',
    emStatusProbeTempUnits => '1.3.6.1.4.1.318.1.1.10.1.3.3.1.5',
    emStatusProbeCurrentHumid => '1.3.6.1.4.1.318.1.1.10.1.3.3.1.6',
    emStatusProbeHighTempViolation => '1.3.6.1.4.1.318.1.1.10.1.3.3.1.7',
    emStatusProbeLowTempViolation => '1.3.6.1.4.1.318.1.1.10.1.3.3.1.8',
    emStatusProbeHighHumidViolation => '1.3.6.1.4.1.318.1.1.10.1.3.3.1.9',
    emStatusProbeLowHumidViolation => '1.3.6.1.4.1.318.1.1.10.1.3.3.1.10',
    emStatusProbeMaxTempViolation => '1.3.6.1.4.1.318.1.1.10.1.3.3.1.11',
    emStatusProbeMinTempViolation => '1.3.6.1.4.1.318.1.1.10.1.3.3.1.12',
    emStatusProbeMaxHumidViolation => '1.3.6.1.4.1.318.1.1.10.1.3.3.1.13',
    emStatusProbeMinHumidViolation => '1.3.6.1.4.1.318.1.1.10.1.3.3.1.14',
    emStatusContactsNumContacts => '1.3.6.1.4.1.318.1.1.10.1.3.4.0',
    emStatusContactsTable => '1.3.6.1.4.1.318.1.1.10.1.3.5',
    emStatusContactsEntry => '1.3.6.1.4.1.318.1.1.10.1.3.5.1',
    emStatusContactNumber => '1.3.6.1.4.1.318.1.1.10.1.3.5.1.1',
    emStatusContactName => '1.3.6.1.4.1.318.1.1.10.1.3.5.1.2',
    emStatusContactStatus => '1.3.6.1.4.1.318.1.1.10.1.3.5.1.3',
    memModules => '1.3.6.1.4.1.318.1.1.10.4.1',
    memModulesStatusTableSize => '1.3.6.1.4.1.318.1.1.10.4.1.1.0',
    memModulesStatusTable => '1.3.6.1.4.1.318.1.1.10.4.1.2',
    memModulesStatusEntry => '1.3.6.1.4.1.318.1.1.10.4.1.2.1',
    memModulesStatusModuleNumber => '1.3.6.1.4.1.318.1.1.10.4.1.2.1.1',
    memModulesStatusModuleName => '1.3.6.1.4.1.318.1.1.10.4.1.2.1.2',
    memModulesStatusModuleLocation => '1.3.6.1.4.1.318.1.1.10.4.1.2.1.3',
    memModulesStatusModelNumber => '1.3.6.1.4.1.318.1.1.10.4.1.2.1.4',
    memModulesStatusSerialNumber => '1.3.6.1.4.1.318.1.1.10.4.1.2.1.5',
    memModulesStatusFirmwareRev => '1.3.6.1.4.1.318.1.1.10.4.1.2.1.6',
    memModulesStatusHardwareRev => '1.3.6.1.4.1.318.1.1.10.4.1.2.1.7',
    memModulesConfigTableSize => '1.3.6.1.4.1.318.1.1.10.4.1.3.0',
    memModulesConfigTable => '1.3.6.1.4.1.318.1.1.10.4.1.4',
    memModulesConfigEntry => '1.3.6.1.4.1.318.1.1.10.4.1.4.1',
    memModulesConfigModuleNumber => '1.3.6.1.4.1.318.1.1.10.4.1.4.1.1',
    memModulesConfigModuleName => '1.3.6.1.4.1.318.1.1.10.4.1.4.1.2',
    memModulesConfigModuleLocation => '1.3.6.1.4.1.318.1.1.10.4.1.4.1.3',
    memSensors => '1.3.6.1.4.1.318.1.1.10.4.2',
    memSensorsStatusSysTempUnits => '1.3.6.1.4.1.318.1.1.10.4.2.1.0',
    memSensorsStatusTableSize => '1.3.6.1.4.1.318.1.1.10.4.2.2.0',
    memSensorsStatusTable => '1.3.6.1.4.1.318.1.1.10.4.2.3',
    memSensorsStatusEntry => '1.3.6.1.4.1.318.1.1.10.4.2.3.1',
    memSensorsStatusModuleNumber => '1.3.6.1.4.1.318.1.1.10.4.2.3.1.1',
    memSensorsStatusSensorNumber => '1.3.6.1.4.1.318.1.1.10.4.2.3.1.2',
    memSensorsStatusSensorName => '1.3.6.1.4.1.318.1.1.10.4.2.3.1.3',
    memSensorsStatusSensorLocation => '1.3.6.1.4.1.318.1.1.10.4.2.3.1.4',
    memSensorsTemperature => '1.3.6.1.4.1.318.1.1.10.4.2.3.1.5',
    memSensorsHumidity => '1.3.6.1.4.1.318.1.1.10.4.2.3.1.6',
    memSensorsCommStatus => '1.3.6.1.4.1.318.1.1.10.4.2.3.1.7',
    memSensorsAlarmStatus => '1.3.6.1.4.1.318.1.1.10.4.2.3.1.8',
    memSensorsConfigTableSize => '1.3.6.1.4.1.318.1.1.10.4.2.4.0',
    memSensorsConfigTable => '1.3.6.1.4.1.318.1.1.10.4.2.5',
    memSensorsConfigEntry => '1.3.6.1.4.1.318.1.1.10.4.2.5.1',
    memSensorsConfigModuleNumber => '1.3.6.1.4.1.318.1.1.10.4.2.5.1.1',
    memSensorsConfigSensorNumber => '1.3.6.1.4.1.318.1.1.10.4.2.5.1.2',
    memSensorsName => '1.3.6.1.4.1.318.1.1.10.4.2.5.1.3',
    memSensorsLocation => '1.3.6.1.4.1.318.1.1.10.4.2.5.1.4',
    memSensorsAlarmGeneration => '1.3.6.1.4.1.318.1.1.10.4.2.5.1.5',
    memSensorsTempMaxThresh => '1.3.6.1.4.1.318.1.1.10.4.2.5.1.6',
    memSensorsTempHighThresh => '1.3.6.1.4.1.318.1.1.10.4.2.5.1.7',
    memSensorsTempLowThresh => '1.3.6.1.4.1.318.1.1.10.4.2.5.1.8',
    memSensorsTempMinThresh => '1.3.6.1.4.1.318.1.1.10.4.2.5.1.9',
    memSensorsTempThreshHysteresis => '1.3.6.1.4.1.318.1.1.10.4.2.5.1.10',
    memSensorsTempShortDecRateThreshValue => '1.3.6.1.4.1.318.1.1.10.4.2.5.1.11',
    memSensorsTempShortDecRateThreshTime => '1.3.6.1.4.1.318.1.1.10.4.2.5.1.12',
    memSensorsTempShortIncRateThreshValue => '1.3.6.1.4.1.318.1.1.10.4.2.5.1.13',
    memSensorsTempShortIncRateThreshTime => '1.3.6.1.4.1.318.1.1.10.4.2.5.1.14',
    memSensorsTempLongDecRateThreshValue => '1.3.6.1.4.1.318.1.1.10.4.2.5.1.15',
    memSensorsTempLongDecRateThreshTime => '1.3.6.1.4.1.318.1.1.10.4.2.5.1.16',
    memSensorsTempLongIncRateThreshValue => '1.3.6.1.4.1.318.1.1.10.4.2.5.1.17',
    memSensorsTempLongIncRateThreshTime => '1.3.6.1.4.1.318.1.1.10.4.2.5.1.18',
    memSensorsHumidityMaxThresh => '1.3.6.1.4.1.318.1.1.10.4.2.5.1.19',
    memSensorsHumidityHighThresh => '1.3.6.1.4.1.318.1.1.10.4.2.5.1.20',
    memSensorsHumidityLowThresh => '1.3.6.1.4.1.318.1.1.10.4.2.5.1.21',
    memSensorsHumidityMinThresh => '1.3.6.1.4.1.318.1.1.10.4.2.5.1.22',
    memSensorsHumidityThreshHysteresis => '1.3.6.1.4.1.318.1.1.10.4.2.5.1.23',
    memInputs => '1.3.6.1.4.1.318.1.1.10.4.3',
    memInputsStatusTableSize => '1.3.6.1.4.1.318.1.1.10.4.3.1.0',
    memInputsStatusTable => '1.3.6.1.4.1.318.1.1.10.4.3.2',
    memInputsStatusEntry => '1.3.6.1.4.1.318.1.1.10.4.3.2.1',
    memInputsStatusModuleNumber => '1.3.6.1.4.1.318.1.1.10.4.3.2.1.1',
    memInputsStatusInputNumber => '1.3.6.1.4.1.318.1.1.10.4.3.2.1.2',
    memInputsStatusInputName => '1.3.6.1.4.1.318.1.1.10.4.3.2.1.3',
    memInputsStatusInputLocation => '1.3.6.1.4.1.318.1.1.10.4.3.2.1.4',
    memInputsStatusCurrentState => '1.3.6.1.4.1.318.1.1.10.4.3.2.1.5',
    memInputsStatusCurrentAnalogValue => '1.3.6.1.4.1.318.1.1.10.4.3.2.1.6',
    memInputsStatusAlarmStatus => '1.3.6.1.4.1.318.1.1.10.4.3.2.1.7',
    memInputsCommStatus => '1.3.6.1.4.1.318.1.1.10.4.3.2.1.8',
    memInputsConfigTableSize => '1.3.6.1.4.1.318.1.1.10.4.3.3.0',
    memInputsConfigTable => '1.3.6.1.4.1.318.1.1.10.4.3.4',
    memInputsConfigEntry => '1.3.6.1.4.1.318.1.1.10.4.3.4.1',
    memInputsConfigModuleNumber => '1.3.6.1.4.1.318.1.1.10.4.3.4.1.1',
    memInputsConfigInputNumber => '1.3.6.1.4.1.318.1.1.10.4.3.4.1.2',
    memInputName => '1.3.6.1.4.1.318.1.1.10.4.3.4.1.3',
    memInputLocation => '1.3.6.1.4.1.318.1.1.10.4.3.4.1.4',
    memInputType => '1.3.6.1.4.1.318.1.1.10.4.3.4.1.5',
    memInputAlarmGeneration => '1.3.6.1.4.1.318.1.1.10.4.3.4.1.6',
    memInputNormalState => '1.3.6.1.4.1.318.1.1.10.4.3.4.1.7',
    memInputAbnormalSeverity => '1.3.6.1.4.1.318.1.1.10.4.3.4.1.8',
    memInputNumberCalibrationPoints => '1.3.6.1.4.1.318.1.1.10.4.3.4.1.9',
    memInputAnalogCalibrationPoint1 => '1.3.6.1.4.1.318.1.1.10.4.3.4.1.10',
    memInputAnalogCalibrationPoint2 => '1.3.6.1.4.1.318.1.1.10.4.3.4.1.11',
    memInputAnalogCalibrationPoint3 => '1.3.6.1.4.1.318.1.1.10.4.3.4.1.12',
    memInputAnalogCalibrationPoint4 => '1.3.6.1.4.1.318.1.1.10.4.3.4.1.13',
    memInputAnalogCalibrationPoint5 => '1.3.6.1.4.1.318.1.1.10.4.3.4.1.14',
    memInputAnalogCalibrationPoint1Value => '1.3.6.1.4.1.318.1.1.10.4.3.4.1.15',
    memInputAnalogCalibrationPoint2Value => '1.3.6.1.4.1.318.1.1.10.4.3.4.1.16',
    memInputAnalogCalibrationPoint3Value => '1.3.6.1.4.1.318.1.1.10.4.3.4.1.17',
    memInputAnalogCalibrationPoint4Value => '1.3.6.1.4.1.318.1.1.10.4.3.4.1.18',
    memInputAnalogCalibrationPoint5Value => '1.3.6.1.4.1.318.1.1.10.4.3.4.1.19',
    memInputAnalogMeasurementUnits => '1.3.6.1.4.1.318.1.1.10.4.3.4.1.20',
    memInputAnalogMaxThresh => '1.3.6.1.4.1.318.1.1.10.4.3.4.1.21',
    memInputAnalogHighThresh => '1.3.6.1.4.1.318.1.1.10.4.3.4.1.22',
    memInputAnalogLowThresh => '1.3.6.1.4.1.318.1.1.10.4.3.4.1.23',
    memInputAnalogMinThresh => '1.3.6.1.4.1.318.1.1.10.4.3.4.1.24',
    memInputAnalogThreshHysteresis => '1.3.6.1.4.1.318.1.1.10.4.3.4.1.25',
    memOutputs => '1.3.6.1.4.1.318.1.1.10.4.4',
    memOutputStatusTableSize => '1.3.6.1.4.1.318.1.1.10.4.4.1.0',
    memOutputStatusTable => '1.3.6.1.4.1.318.1.1.10.4.4.2',
    memOutputStatusEntry => '1.3.6.1.4.1.318.1.1.10.4.4.2.1',
    memOutputStatusModuleNumber => '1.3.6.1.4.1.318.1.1.10.4.4.2.1.1',
    memOutputStatusOutputNumber => '1.3.6.1.4.1.318.1.1.10.4.4.2.1.2',
    memOutputStatusOutputName => '1.3.6.1.4.1.318.1.1.10.4.4.2.1.3',
    memOutputStatusOutputLocation => '1.3.6.1.4.1.318.1.1.10.4.4.2.1.4',
    memOutputStatusCurrentState => '1.3.6.1.4.1.318.1.1.10.4.4.2.1.5',
    memOutputConfigTableSize => '1.3.6.1.4.1.318.1.1.10.4.4.3.0',
    memOutputConfigTable => '1.3.6.1.4.1.318.1.1.10.4.4.4',
    memOutputConfigEntry => '1.3.6.1.4.1.318.1.1.10.4.4.4.1',
    memOutputConfigModuleNumber => '1.3.6.1.4.1.318.1.1.10.4.4.4.1.1',
    memOutputConfigOutputNumber => '1.3.6.1.4.1.318.1.1.10.4.4.4.1.2',
    memOutputName => '1.3.6.1.4.1.318.1.1.10.4.4.4.1.3',
    memOutputLocation => '1.3.6.1.4.1.318.1.1.10.4.4.4.1.4',
    memOutputNormalState => '1.3.6.1.4.1.318.1.1.10.4.4.4.1.5',
    memOutputAction => '1.3.6.1.4.1.318.1.1.10.4.4.4.1.6',
    memOutlets => '1.3.6.1.4.1.318.1.1.10.4.5',
    memOutletStatusTableSize => '1.3.6.1.4.1.318.1.1.10.4.5.1.0',
    memOutletStatusTable => '1.3.6.1.4.1.318.1.1.10.4.5.2',
    memOutletStatusEntry => '1.3.6.1.4.1.318.1.1.10.4.5.2.1',
    memOutletStatusModuleNumber => '1.3.6.1.4.1.318.1.1.10.4.5.2.1.1',
    memOutletStatusOutletNumber => '1.3.6.1.4.1.318.1.1.10.4.5.2.1.2',
    memOutletStatusOutletName => '1.3.6.1.4.1.318.1.1.10.4.5.2.1.3',
    memOutletStatusOutletLocation => '1.3.6.1.4.1.318.1.1.10.4.5.2.1.4',
    memOutletStatusCurrentState => '1.3.6.1.4.1.318.1.1.10.4.5.2.1.5',
    memOutletConfigTableSize => '1.3.6.1.4.1.318.1.1.10.4.5.3.0',
    memOutletConfigTable => '1.3.6.1.4.1.318.1.1.10.4.5.4',
    memOutletConfigEntry => '1.3.6.1.4.1.318.1.1.10.4.5.4.1',
    memOutletConfigModuleNumber => '1.3.6.1.4.1.318.1.1.10.4.5.4.1.1',
    memOutletConfigOutletNumber => '1.3.6.1.4.1.318.1.1.10.4.5.4.1.2',
    memOutletName => '1.3.6.1.4.1.318.1.1.10.4.5.4.1.3',
    memOutletLocation => '1.3.6.1.4.1.318.1.1.10.4.5.4.1.4',
    memOutletNormalState => '1.3.6.1.4.1.318.1.1.10.4.5.4.1.5',
    memOutletAction => '1.3.6.1.4.1.318.1.1.10.4.5.4.1.6',
    memBeacons => '1.3.6.1.4.1.318.1.1.10.4.6',
    memBeaconStatusTableSize => '1.3.6.1.4.1.318.1.1.10.4.6.1.0',
    memBeaconStatusTable => '1.3.6.1.4.1.318.1.1.10.4.6.2',
    memBeaconStatusEntry => '1.3.6.1.4.1.318.1.1.10.4.6.2.1',
    memBeaconStatusModuleNumber => '1.3.6.1.4.1.318.1.1.10.4.6.2.1.1',
    memBeaconStatusBeaconNumber => '1.3.6.1.4.1.318.1.1.10.4.6.2.1.2',
    memBeaconStatusBeaconName => '1.3.6.1.4.1.318.1.1.10.4.6.2.1.3',
    memBeaconStatusBeaconLocation => '1.3.6.1.4.1.318.1.1.10.4.6.2.1.4',
    memBeaconStatusCurrentState => '1.3.6.1.4.1.318.1.1.10.4.6.2.1.5',
    memBeaconConfigTableSize => '1.3.6.1.4.1.318.1.1.10.4.6.3.0',
    memBeaconConfigTable => '1.3.6.1.4.1.318.1.1.10.4.6.4',
    memBeaconConfigEntry => '1.3.6.1.4.1.318.1.1.10.4.6.4.1',
    memBeaconConfigModuleNumber => '1.3.6.1.4.1.318.1.1.10.4.6.4.1.1',
    memBeaconConfigBeaconNumber => '1.3.6.1.4.1.318.1.1.10.4.6.4.1.2',
    memBeaconConfigName => '1.3.6.1.4.1.318.1.1.10.4.6.4.1.3',
    memBeaconConfigLocation => '1.3.6.1.4.1.318.1.1.10.4.6.4.1.4',
    memBeaconAction => '1.3.6.1.4.1.318.1.1.10.4.6.4.1.5',
    iemIdent => '1.3.6.1.4.1.318.1.1.10.2.1',
    iemIdentHardwareRevision => '1.3.6.1.4.1.318.1.1.10.2.1.1.0',
    iemConfig => '1.3.6.1.4.1.318.1.1.10.2.2',
    iemConfigProbesNumProbes => '1.3.6.1.4.1.318.1.1.10.2.2.1.0',
    iemConfigProbesTable => '1.3.6.1.4.1.318.1.1.10.2.2.2',
    iemConfigProbesEntry => '1.3.6.1.4.1.318.1.1.10.2.2.2.1',
    iemConfigProbeNumber => '1.3.6.1.4.1.318.1.1.10.2.2.2.1.1',
    iemConfigProbeName => '1.3.6.1.4.1.318.1.1.10.2.2.2.1.2',
    iemConfigProbeHighTempThreshold => '1.3.6.1.4.1.318.1.1.10.2.2.2.1.3',
    iemConfigProbeLowTempThreshold => '1.3.6.1.4.1.318.1.1.10.2.2.2.1.4',
    iemConfigProbeTempUnits => '1.3.6.1.4.1.318.1.1.10.2.2.2.1.5',
    iemConfigProbeHighHumidThreshold => '1.3.6.1.4.1.318.1.1.10.2.2.2.1.6',
    iemConfigProbeLowHumidThreshold => '1.3.6.1.4.1.318.1.1.10.2.2.2.1.7',
    iemConfigProbeHighTempEnable => '1.3.6.1.4.1.318.1.1.10.2.2.2.1.8',
    iemConfigProbeLowTempEnable => '1.3.6.1.4.1.318.1.1.10.2.2.2.1.9',
    iemConfigProbeHighHumidEnable => '1.3.6.1.4.1.318.1.1.10.2.2.2.1.10',
    iemConfigProbeLowHumidEnable => '1.3.6.1.4.1.318.1.1.10.2.2.2.1.11',
    iemConfigProbeMaxTempThreshold => '1.3.6.1.4.1.318.1.1.10.2.2.2.1.12',
    iemConfigProbeMinTempThreshold => '1.3.6.1.4.1.318.1.1.10.2.2.2.1.13',
    iemConfigProbeMaxHumidThreshold => '1.3.6.1.4.1.318.1.1.10.2.2.2.1.14',
    iemConfigProbeMinHumidThreshold => '1.3.6.1.4.1.318.1.1.10.2.2.2.1.15',
    iemConfigProbeMaxTempEnable => '1.3.6.1.4.1.318.1.1.10.2.2.2.1.16',
    iemConfigProbeMinTempEnable => '1.3.6.1.4.1.318.1.1.10.2.2.2.1.17',
    iemConfigProbeMaxHumidEnable => '1.3.6.1.4.1.318.1.1.10.2.2.2.1.18',
    iemConfigProbeMinHumidEnable => '1.3.6.1.4.1.318.1.1.10.2.2.2.1.19',
    iemConfigProbeTempHysteresis => '1.3.6.1.4.1.318.1.1.10.2.2.2.1.20',
    iemConfigProbeHumidHysteresis => '1.3.6.1.4.1.318.1.1.10.2.2.2.1.21',
    iemConfigProbeLocation => '1.3.6.1.4.1.318.1.1.10.2.2.2.1.22',
    iemConfigContactsNumContacts => '1.3.6.1.4.1.318.1.1.10.2.2.3.0',
    iemConfigContactsTable => '1.3.6.1.4.1.318.1.1.10.2.2.4',
    iemConfigContactsEntry => '1.3.6.1.4.1.318.1.1.10.2.2.4.1',
    iemConfigContactNumber => '1.3.6.1.4.1.318.1.1.10.2.2.4.1.1',
    iemConfigContactName => '1.3.6.1.4.1.318.1.1.10.2.2.4.1.2',
    iemConfigContactEnable => '1.3.6.1.4.1.318.1.1.10.2.2.4.1.3',
    iemConfigContactSeverity => '1.3.6.1.4.1.318.1.1.10.2.2.4.1.4',
    iemConfigContactNormalState => '1.3.6.1.4.1.318.1.1.10.2.2.4.1.5',
    iemConfigContactLocation => '1.3.6.1.4.1.318.1.1.10.2.2.4.1.6',
    iemConfigConfigRelaysNumRelays => '1.3.6.1.4.1.318.1.1.10.2.2.5.0',
    iemConfigRelaysTable => '1.3.6.1.4.1.318.1.1.10.2.2.6',
    iemConfigRelaysEntry => '1.3.6.1.4.1.318.1.1.10.2.2.6.1',
    iemConfigRelayNumber => '1.3.6.1.4.1.318.1.1.10.2.2.6.1.1',
    iemConfigRelayName => '1.3.6.1.4.1.318.1.1.10.2.2.6.1.2',
    iemConfigRelayNormalState => '1.3.6.1.4.1.318.1.1.10.2.2.6.1.3',
    iemConfigRelayFaultCondition => '1.3.6.1.4.1.318.1.1.10.2.2.6.1.4',
    iemStatus => '1.3.6.1.4.1.318.1.1.10.2.3',
    iemStatusProbesNumProbes => '1.3.6.1.4.1.318.1.1.10.2.3.1.0',
    iemStatusProbesTable => '1.3.6.1.4.1.318.1.1.10.2.3.2',
    iemStatusProbesEntry => '1.3.6.1.4.1.318.1.1.10.2.3.2.1',
    iemStatusProbeNumber => '1.3.6.1.4.1.318.1.1.10.2.3.2.1.1',
    iemStatusProbeName => '1.3.6.1.4.1.318.1.1.10.2.3.2.1.2',
    iemStatusProbeStatus => '1.3.6.1.4.1.318.1.1.10.2.3.2.1.3',
    iemStatusProbeCurrentTemp => '1.3.6.1.4.1.318.1.1.10.2.3.2.1.4',
    iemStatusProbeTempUnits => '1.3.6.1.4.1.318.1.1.10.2.3.2.1.5',
    iemStatusProbeCurrentHumid => '1.3.6.1.4.1.318.1.1.10.2.3.2.1.6',
    iemStatusProbeHighTempViolation => '1.3.6.1.4.1.318.1.1.10.2.3.2.1.7',
    iemStatusProbeLowTempViolation => '1.3.6.1.4.1.318.1.1.10.2.3.2.1.8',
    iemStatusProbeHighHumidViolation => '1.3.6.1.4.1.318.1.1.10.2.3.2.1.9',
    iemStatusProbeLowHumidViolation => '1.3.6.1.4.1.318.1.1.10.2.3.2.1.10',
    iemStatusProbeMaxTempViolation => '1.3.6.1.4.1.318.1.1.10.2.3.2.1.11',
    iemStatusProbeMinTempViolation => '1.3.6.1.4.1.318.1.1.10.2.3.2.1.12',
    iemStatusProbeMaxHumidViolation => '1.3.6.1.4.1.318.1.1.10.2.3.2.1.13',
    iemStatusProbeMinHumidViolation => '1.3.6.1.4.1.318.1.1.10.2.3.2.1.14',
    iemStatusProbeLocation => '1.3.6.1.4.1.318.1.1.10.2.3.2.1.15',
    iemStatusContactsNumContacts => '1.3.6.1.4.1.318.1.1.10.2.3.3.0',
    iemStatusContactsTable => '1.3.6.1.4.1.318.1.1.10.2.3.4',
    iemStatusContactsEntry => '1.3.6.1.4.1.318.1.1.10.2.3.4.1',
    iemStatusContactNumber => '1.3.6.1.4.1.318.1.1.10.2.3.4.1.1',
    iemStatusContactName => '1.3.6.1.4.1.318.1.1.10.2.3.4.1.2',
    iemStatusContactStatus => '1.3.6.1.4.1.318.1.1.10.2.3.4.1.3',
    iemStatusRelaysNumRelays => '1.3.6.1.4.1.318.1.1.10.2.3.6.0',
    iemStatusRelaysTable => '1.3.6.1.4.1.318.1.1.10.2.3.7',
    iemStatusRelaysEntry => '1.3.6.1.4.1.318.1.1.10.2.3.7.1',
    iemStatusRelayNumber => '1.3.6.1.4.1.318.1.1.10.2.3.7.1.1',
    iemStatusRelayName => '1.3.6.1.4.1.318.1.1.10.2.3.7.1.2',
    iemStatusRelayStatus => '1.3.6.1.4.1.318.1.1.10.2.3.7.1.3',
    emsIdent => '1.3.6.1.4.1.318.1.1.10.3.1',
    emsIdentEMSName => '1.3.6.1.4.1.318.1.1.10.3.1.1.0',
    emsIdentProductNumber => '1.3.6.1.4.1.318.1.1.10.3.1.2.0',
    emsIdentFirmwareRev => '1.3.6.1.4.1.318.1.1.10.3.1.3.0',
    emsIdentHardwareRev => '1.3.6.1.4.1.318.1.1.10.3.1.4.0',
    emsIdentDateOfManufacture => '1.3.6.1.4.1.318.1.1.10.3.1.5.0',
    emsIdentSerialNumber => '1.3.6.1.4.1.318.1.1.10.3.1.6.0',
    emsOutputRelayControl => '1.3.6.1.4.1.318.1.1.10.3.2',
    emsOutputRelayControlTable => '1.3.6.1.4.1.318.1.1.10.3.2.1',
    emsOutputRelayControlEntry => '1.3.6.1.4.1.318.1.1.10.3.2.1.1',
    emsOutputRelayControlOutputRelayIndex => '1.3.6.1.4.1.318.1.1.10.3.2.1.1.1',
    emsOutputRelayControlOutputRelayName => '1.3.6.1.4.1.318.1.1.10.3.2.1.1.2',
    emsOutputRelayControlOutputRelayCommand => '1.3.6.1.4.1.318.1.1.10.3.2.1.1.3',
    emsOutletControl => '1.3.6.1.4.1.318.1.1.10.3.3',
    emsOutletControlTable => '1.3.6.1.4.1.318.1.1.10.3.3.1',
    emsOutletControlEntry => '1.3.6.1.4.1.318.1.1.10.3.3.1.1',
    emsOutletControlOutletIndex => '1.3.6.1.4.1.318.1.1.10.3.3.1.1.1',
    emsOutletControlOutletName => '1.3.6.1.4.1.318.1.1.10.3.3.1.1.2',
    emsOutletControlOutletCommand => '1.3.6.1.4.1.318.1.1.10.3.3.1.1.3',
    emsSensorControl => '1.3.6.1.4.1.318.1.1.10.3.4',
    emsSensorControlTable => '1.3.6.1.4.1.318.1.1.10.3.4.1',
    emsSensorControlEntry => '1.3.6.1.4.1.318.1.1.10.3.4.1.1',
    emsSensorControlSensorIndex => '1.3.6.1.4.1.318.1.1.10.3.4.1.1.1',
    emsSensorControlSensorSystemName => '1.3.6.1.4.1.318.1.1.10.3.4.1.1.2',
    emsSensorControlSensorUserName => '1.3.6.1.4.1.318.1.1.10.3.4.1.1.3',
    emsSensorControlSensorCommand => '1.3.6.1.4.1.318.1.1.10.3.4.1.1.4',
    emsAlarmDeviceControl => '1.3.6.1.4.1.318.1.1.10.3.5',
    emsAlarmDeviceControlTable => '1.3.6.1.4.1.318.1.1.10.3.5.1',
    emsAlarmDeviceControlEntry => '1.3.6.1.4.1.318.1.1.10.3.5.1.1',
    emsAlarmDeviceControlDeviceIndex => '1.3.6.1.4.1.318.1.1.10.3.5.1.1.1',
    emsAlarmDeviceControlDeviceName => '1.3.6.1.4.1.318.1.1.10.3.5.1.1.2',
    emsAlarmDeviceControlDeviceCommand => '1.3.6.1.4.1.318.1.1.10.3.5.1.1.3',
    emsConfig => '1.3.6.1.4.1.318.1.1.10.3.6',
    emsConfigName => '1.3.6.1.4.1.318.1.1.10.3.6.1.0',
    emsConfigCheckLogLight => '1.3.6.1.4.1.318.1.1.10.3.6.2.0',
    emsProbeConfig => '1.3.6.1.4.1.318.1.1.10.3.7',
    emsProbeConfigTable => '1.3.6.1.4.1.318.1.1.10.3.7.1',
    emsProbeConfigEntry => '1.3.6.1.4.1.318.1.1.10.3.7.1.1',
    emsProbeConfigProbeIndex => '1.3.6.1.4.1.318.1.1.10.3.7.1.1.1',
    emsProbeConfigProbeName => '1.3.6.1.4.1.318.1.1.10.3.7.1.1.2',
    emsProbeConfigProbeHighTempThresh => '1.3.6.1.4.1.318.1.1.10.3.7.1.1.3',
    emsProbeConfigProbeLowTempThresh => '1.3.6.1.4.1.318.1.1.10.3.7.1.1.4',
    emsProbeConfigProbeHighHumidityThresh => '1.3.6.1.4.1.318.1.1.10.3.7.1.1.5',
    emsProbeConfigProbeLowHumidityThresh => '1.3.6.1.4.1.318.1.1.10.3.7.1.1.6',
    emsProbeConfigProbeMaxTempThresh => '1.3.6.1.4.1.318.1.1.10.3.7.1.1.7',
    emsProbeConfigProbeMinTempThresh => '1.3.6.1.4.1.318.1.1.10.3.7.1.1.8',
    emsProbeConfigProbeDeltaTemp => '1.3.6.1.4.1.318.1.1.10.3.7.1.1.9',
    emsProbeConfigProbeMaxHumidityThresh => '1.3.6.1.4.1.318.1.1.10.3.7.1.1.10',
    emsProbeConfigProbeMinHumidityThresh => '1.3.6.1.4.1.318.1.1.10.3.7.1.1.11',
    emsProbeConfigProbeDeltaHumidity => '1.3.6.1.4.1.318.1.1.10.3.7.1.1.12',
    emsProbeConfigProbeSTIncTempVariance => '1.3.6.1.4.1.318.1.1.10.3.7.1.1.13',
    emsProbeConfigProbeSTIncTempTime => '1.3.6.1.4.1.318.1.1.10.3.7.1.1.14',
    emsProbeConfigProbeSTDecTempVariance => '1.3.6.1.4.1.318.1.1.10.3.7.1.1.15',
    emsProbeConfigProbeSTDecTempTime => '1.3.6.1.4.1.318.1.1.10.3.7.1.1.16',
    emsProbeConfigProbeLTIncTempVariance => '1.3.6.1.4.1.318.1.1.10.3.7.1.1.17',
    emsProbeConfigProbeLTIncTempTime => '1.3.6.1.4.1.318.1.1.10.3.7.1.1.18',
    emsProbeConfigProbeLTDecTempVariance => '1.3.6.1.4.1.318.1.1.10.3.7.1.1.19',
    emsProbeConfigProbeLTDecTempTime => '1.3.6.1.4.1.318.1.1.10.3.7.1.1.20',
    emsInputContactConfig => '1.3.6.1.4.1.318.1.1.10.3.8',
    emsInputContactConfigTable => '1.3.6.1.4.1.318.1.1.10.3.8.1',
    emsInputContactConfigEntry => '1.3.6.1.4.1.318.1.1.10.3.8.1.1',
    emsInputContactConfigInputContactIndex => '1.3.6.1.4.1.318.1.1.10.3.8.1.1.1',
    emsInputContactConfigInputContactName => '1.3.6.1.4.1.318.1.1.10.3.8.1.1.2',
    emsInputContactConfigInputContactNormalState => '1.3.6.1.4.1.318.1.1.10.3.8.1.1.3',
    emsOutputRelayConfig => '1.3.6.1.4.1.318.1.1.10.3.9',
    emsOutputRelayConfigTable => '1.3.6.1.4.1.318.1.1.10.3.9.1',
    emsOutputRelayConfigEntry => '1.3.6.1.4.1.318.1.1.10.3.9.1.1',
    emsOutputRelayConfigOutputRelayIndex => '1.3.6.1.4.1.318.1.1.10.3.9.1.1.1',
    emsOutputRelayConfigOutputRelayName => '1.3.6.1.4.1.318.1.1.10.3.9.1.1.2',
    emsOutputRelayConfigOutputRelayNormalState => '1.3.6.1.4.1.318.1.1.10.3.9.1.1.3',
    emsOutletConfig => '1.3.6.1.4.1.318.1.1.10.3.10',
    emsOutletConfigTable => '1.3.6.1.4.1.318.1.1.10.3.10.1',
    emsOutletConfigEntry => '1.3.6.1.4.1.318.1.1.10.3.10.1.1',
    emsOutletConfigOutletIndex => '1.3.6.1.4.1.318.1.1.10.3.10.1.1.1',
    emsOutletConfigOutletName => '1.3.6.1.4.1.318.1.1.10.3.10.1.1.2',
    emsOutletConfigOutletNormalState => '1.3.6.1.4.1.318.1.1.10.3.10.1.1.3',
    emsSensorConfig => '1.3.6.1.4.1.318.1.1.10.3.11',
    emsSensorConfigTable => '1.3.6.1.4.1.318.1.1.10.3.11.1',
    emsSensorConfigEntry => '1.3.6.1.4.1.318.1.1.10.3.11.1.1',
    emsSensorConfigSensorIndex => '1.3.6.1.4.1.318.1.1.10.3.11.1.1.1',
    emsSensorConfigSensorSystemName => '1.3.6.1.4.1.318.1.1.10.3.11.1.1.2',
    emsSensorConfigSensorUserName => '1.3.6.1.4.1.318.1.1.10.3.11.1.1.3',
    emsSensorConfigSensorNormalState => '1.3.6.1.4.1.318.1.1.10.3.11.1.1.4',
    emsSensorConfigSensorAlarmDelay => '1.3.6.1.4.1.318.1.1.10.3.11.1.1.5',
    emsStatus => '1.3.6.1.4.1.318.1.1.10.3.12',
    emsStatusEMSName => '1.3.6.1.4.1.318.1.1.10.3.12.1.0',
    emsStatusCommStatus => '1.3.6.1.4.1.318.1.1.10.3.12.2.0',
    emsStatusProbeCount => '1.3.6.1.4.1.318.1.1.10.3.12.3.0',
    emsStatusInputContactCount => '1.3.6.1.4.1.318.1.1.10.3.12.4.0',
    emsStatusOutputRelayCount => '1.3.6.1.4.1.318.1.1.10.3.12.5.0',
    emsStatusOutletCount => '1.3.6.1.4.1.318.1.1.10.3.12.6.0',
    emsStatusSensorCount => '1.3.6.1.4.1.318.1.1.10.3.12.7.0',
    emsStatusAlinkAruDeviceCount => '1.3.6.1.4.1.318.1.1.10.3.12.8.0',
    emsStatusAlinkProbeDeviceCount => '1.3.6.1.4.1.318.1.1.10.3.12.9.0',
    emsStatusAlarmDeviceCount => '1.3.6.1.4.1.318.1.1.10.3.12.10.0',
    emsStatusSysTempUnits => '1.3.6.1.4.1.318.1.1.10.3.12.11.0',
    emsStatusCheckLogLight => '1.3.6.1.4.1.318.1.1.10.3.12.12.0',
    emsStatusHardwareStatus => '1.3.6.1.4.1.318.1.1.10.3.12.13.0',
    emsProbeStatus => '1.3.6.1.4.1.318.1.1.10.3.13',
    emsProbeStatusTable => '1.3.6.1.4.1.318.1.1.10.3.13.1',
    emsProbeStatusEntry => '1.3.6.1.4.1.318.1.1.10.3.13.1.1',
    emsProbeStatusProbeIndex => '1.3.6.1.4.1.318.1.1.10.3.13.1.1.1',
    emsProbeStatusProbeName => '1.3.6.1.4.1.318.1.1.10.3.13.1.1.2',
    emsProbeStatusProbeTemperature => '1.3.6.1.4.1.318.1.1.10.3.13.1.1.3',
    emsProbeStatusProbeHighTempThresh => '1.3.6.1.4.1.318.1.1.10.3.13.1.1.4',
    emsProbeStatusProbeLowTempThresh => '1.3.6.1.4.1.318.1.1.10.3.13.1.1.5',
    emsProbeStatusProbeHumidity => '1.3.6.1.4.1.318.1.1.10.3.13.1.1.6',
    emsProbeStatusProbeHighHumidityThresh => '1.3.6.1.4.1.318.1.1.10.3.13.1.1.7',
    emsProbeStatusProbeLowHumidityThresh => '1.3.6.1.4.1.318.1.1.10.3.13.1.1.8',
    emsProbeStatusProbeSerialNumber => '1.3.6.1.4.1.318.1.1.10.3.13.1.1.9',
    emsProbeStatusProbeCommStatus => '1.3.6.1.4.1.318.1.1.10.3.13.1.1.10',
    emsProbeStatusProbeAlarmStatus => '1.3.6.1.4.1.318.1.1.10.3.13.1.1.11',
    emsProbeStatusProbeMaxTempThresh => '1.3.6.1.4.1.318.1.1.10.3.13.1.1.12',
    emsProbeStatusProbeMinTempThresh => '1.3.6.1.4.1.318.1.1.10.3.13.1.1.13',
    emsProbeStatusProbeMaxHumidityThresh => '1.3.6.1.4.1.318.1.1.10.3.13.1.1.14',
    emsProbeStatusProbeMinHumidityThresh => '1.3.6.1.4.1.318.1.1.10.3.13.1.1.15',
    emsInputContactStatus => '1.3.6.1.4.1.318.1.1.10.3.14',
    emsInputContactStatusTable => '1.3.6.1.4.1.318.1.1.10.3.14.1',
    emsInputContactStatusEntry => '1.3.6.1.4.1.318.1.1.10.3.14.1.1',
    emsInputContactStatusInputContactIndex => '1.3.6.1.4.1.318.1.1.10.3.14.1.1.1',
    emsInputContactStatusInputContactName => '1.3.6.1.4.1.318.1.1.10.3.14.1.1.2',
    emsInputContactStatusInputContactState => '1.3.6.1.4.1.318.1.1.10.3.14.1.1.3',
    emsInputContactStatusInputContactNormalState => '1.3.6.1.4.1.318.1.1.10.3.14.1.1.4',
    emsOutputRelayStatus => '1.3.6.1.4.1.318.1.1.10.3.15',
    emsOutputRelayStatusTable => '1.3.6.1.4.1.318.1.1.10.3.15.1',
    emsOutputRelayStatusEntry => '1.3.6.1.4.1.318.1.1.10.3.15.1.1',
    emsOutputRelayStatusOutputRelayIndex => '1.3.6.1.4.1.318.1.1.10.3.15.1.1.1',
    emsOutputRelayStatusOutputRelayName => '1.3.6.1.4.1.318.1.1.10.3.15.1.1.2',
    emsOutputRelayStatusOutputRelayState => '1.3.6.1.4.1.318.1.1.10.3.15.1.1.3',
    emsOutputRelayStatusOutputRelayNormalState => '1.3.6.1.4.1.318.1.1.10.3.15.1.1.4',
    emsOutletStatus => '1.3.6.1.4.1.318.1.1.10.3.16',
    emsOutletStatusTable => '1.3.6.1.4.1.318.1.1.10.3.16.1',
    emsOutletStatusEntry => '1.3.6.1.4.1.318.1.1.10.3.16.1.1',
    emsOutletStatusOutletIndex => '1.3.6.1.4.1.318.1.1.10.3.16.1.1.1',
    emsOutletStatusOutletName => '1.3.6.1.4.1.318.1.1.10.3.16.1.1.2',
    emsOutletStatusOutletState => '1.3.6.1.4.1.318.1.1.10.3.16.1.1.3',
    emsOutletStatusOutletNormalState => '1.3.6.1.4.1.318.1.1.10.3.16.1.1.4',
    emsAlarmDeviceStatus => '1.3.6.1.4.1.318.1.1.10.3.17',
    emsAlarmDeviceStatusTable => '1.3.6.1.4.1.318.1.1.10.3.17.1',
    emsAlarmDeviceStatusEntry => '1.3.6.1.4.1.318.1.1.10.3.17.1.1',
    emsAlarmDeviceStatusDeviceIndex => '1.3.6.1.4.1.318.1.1.10.3.17.1.1.1',
    emsAlarmDeviceStatusDeviceName => '1.3.6.1.4.1.318.1.1.10.3.17.1.1.2',
    emsAlarmDeviceStatusDeviceState => '1.3.6.1.4.1.318.1.1.10.3.17.1.1.3',
    emsSensorStatus => '1.3.6.1.4.1.318.1.1.10.3.18',
    emsSensorStatusTable => '1.3.6.1.4.1.318.1.1.10.3.18.1',
    emsSensorStatusEntry => '1.3.6.1.4.1.318.1.1.10.3.18.1.1',
    emsSensorStatusSensorIndex => '1.3.6.1.4.1.318.1.1.10.3.18.1.1.1',
    emsSensorStatusSensorSystemName => '1.3.6.1.4.1.318.1.1.10.3.18.1.1.2',
    emsSensorStatusSensorName => '1.3.6.1.4.1.318.1.1.10.3.18.1.1.3',
    emsSensorStatusSensorState => '1.3.6.1.4.1.318.1.1.10.3.18.1.1.4',
    emsSensorStatusSensorNormalState => '1.3.6.1.4.1.318.1.1.10.3.18.1.1.5',
    emsSensorStatusSensorAlarmDelay => '1.3.6.1.4.1.318.1.1.10.3.18.1.1.6',
    airFMIdent => '1.3.6.1.4.1.318.1.1.13.1.1',
    airFMIdentName => '1.3.6.1.4.1.318.1.1.13.1.1.1.0',
    airFMIdentTableSize => '1.3.6.1.4.1.318.1.1.13.1.1.2.0',
    airFMIdentTable => '1.3.6.1.4.1.318.1.1.13.1.1.3',
    airFMIdentEntry => '1.3.6.1.4.1.318.1.1.13.1.1.3.1',
    airFMIdentModuleIndex => '1.3.6.1.4.1.318.1.1.13.1.1.3.1.1',
    airFMIdentModuleModelNumber => '1.3.6.1.4.1.318.1.1.13.1.1.3.1.2',
    airFMIdentModuleDateOfMfg => '1.3.6.1.4.1.318.1.1.13.1.1.3.1.3',
    airFMIdentModuleSerialNumber => '1.3.6.1.4.1.318.1.1.13.1.1.3.1.4',
    airFMIdentModuleFirmwareRev => '1.3.6.1.4.1.318.1.1.13.1.1.3.1.5',
    airFMIdentModuleHardwareRev => '1.3.6.1.4.1.318.1.1.13.1.1.3.1.6',
    airFMIdentLocation => '1.3.6.1.4.1.318.1.1.13.1.1.4.0',
    airFMIdentContact => '1.3.6.1.4.1.318.1.1.13.1.1.5.0',
    airFMStatus => '1.3.6.1.4.1.318.1.1.13.1.2',
    airFMStatusSystemOn => '1.3.6.1.4.1.318.1.1.13.1.2.1.0',
    airFMStatusSystemAverageRetTempC => '1.3.6.1.4.1.318.1.1.13.1.2.2.0',
    airFMStatusSystemAverageRetTempF => '1.3.6.1.4.1.318.1.1.13.1.2.3.0',
    airFMStatusSystemAverageRetHum => '1.3.6.1.4.1.318.1.1.13.1.2.4.0',
    airFMStatusSystemActionTempC => '1.3.6.1.4.1.318.1.1.13.1.2.5.0',
    airFMStatusSystemActionTempF => '1.3.6.1.4.1.318.1.1.13.1.2.6.0',
    airFMStatusSystemActionHum => '1.3.6.1.4.1.318.1.1.13.1.2.7.0',
    airFMStatusSystemRemoteHighTempC => '1.3.6.1.4.1.318.1.1.13.1.2.8.0',
    airFMStatusSystemRemoteHighTempF => '1.3.6.1.4.1.318.1.1.13.1.2.9.0',
    airFMStatusSystemRemoteAvgTempC => '1.3.6.1.4.1.318.1.1.13.1.2.10.0',
    airFMStatusSystemRemoteAvgTempF => '1.3.6.1.4.1.318.1.1.13.1.2.11.0',
    airFMStatusSystemRemoteAvgHum => '1.3.6.1.4.1.318.1.1.13.1.2.12.0',
    airFMStatusSystemRemoteLowTempC => '1.3.6.1.4.1.318.1.1.13.1.2.13.0',
    airFMStatusSystemRemoteLowTempF => '1.3.6.1.4.1.318.1.1.13.1.2.14.0',
    airFMStatusSystemCoolingEnabled => '1.3.6.1.4.1.318.1.1.13.1.2.15.0',
    airFMStatusSystemReheatingEnabled => '1.3.6.1.4.1.318.1.1.13.1.2.16.0',
    airFMStatusSystemHumidifyEnabled => '1.3.6.1.4.1.318.1.1.13.1.2.17.0',
    airFMStatusSystemDehumidifyEnabled => '1.3.6.1.4.1.318.1.1.13.1.2.18.0',
    airFMStatusModuleTableSize => '1.3.6.1.4.1.318.1.1.13.1.2.19.0',
    airFMStatusModuleTable => '1.3.6.1.4.1.318.1.1.13.1.2.20',
    airFMStatusModuleEntry => '1.3.6.1.4.1.318.1.1.13.1.2.20.1',
    airFMStatusModuleIndex => '1.3.6.1.4.1.318.1.1.13.1.2.20.1.1',
    airFMStatusModuleOutputCapacity => '1.3.6.1.4.1.318.1.1.13.1.2.20.1.2',
    airFMStatusModuleSupplyTempC => '1.3.6.1.4.1.318.1.1.13.1.2.20.1.3',
    airFMStatusModuleSupplyTempF => '1.3.6.1.4.1.318.1.1.13.1.2.20.1.4',
    airFMStatusModuleSupplyHum => '1.3.6.1.4.1.318.1.1.13.1.2.20.1.5',
    airFMStatusModuleReturnTempC => '1.3.6.1.4.1.318.1.1.13.1.2.20.1.6',
    airFMStatusModuleReturnTempF => '1.3.6.1.4.1.318.1.1.13.1.2.20.1.7',
    airFMStatusModuleReturnHum => '1.3.6.1.4.1.318.1.1.13.1.2.20.1.8',
    airFMGroup => '1.3.6.1.4.1.318.1.1.13.1.3',
    airFMGroupSysStatus => '1.3.6.1.4.1.318.1.1.13.1.3.1.0',
    airFMGroupSysRuntime => '1.3.6.1.4.1.318.1.1.13.1.3.2.0',
    airFMGroupSysRole => '1.3.6.1.4.1.318.1.1.13.1.3.3.0',
    airFMGroupSysRoles => '1.3.6.1.4.1.318.1.1.13.1.3.4',
    airFMGroupSysRolesTableSize => '1.3.6.1.4.1.318.1.1.13.1.3.4.1.0',
    airFMGroupSysRolesTable => '1.3.6.1.4.1.318.1.1.13.1.3.4.2',
    airFMGroupSysRolesEntry => '1.3.6.1.4.1.318.1.1.13.1.3.4.2.1',
    airFMGroupSysIndex => '1.3.6.1.4.1.318.1.1.13.1.3.4.2.1.1',
    airFMGroupSysRoleStatus => '1.3.6.1.4.1.318.1.1.13.1.3.4.2.1.2',
    airFMGroupSysPresentRole => '1.3.6.1.4.1.318.1.1.13.1.3.4.2.1.3',
    airFMGroupSysManualRoleSetting => '1.3.6.1.4.1.318.1.1.13.1.3.4.2.1.4',
    airFMGroupSysRunHours => '1.3.6.1.4.1.318.1.1.13.1.3.4.2.1.5',
    airFMGroupSysComm => '1.3.6.1.4.1.318.1.1.13.1.3.4.2.1.6',
    airFMGroupSysIPAddress => '1.3.6.1.4.1.318.1.1.13.1.3.4.2.1.7',
    airFMGroupSysRoleAssignment => '1.3.6.1.4.1.318.1.1.13.1.3.4.3.0',
    airFMGroupAutoRoleNumPrimary => '1.3.6.1.4.1.318.1.1.13.1.3.4.4.0',
    airFMGroupCfg => '1.3.6.1.4.1.318.1.1.13.1.3.5',
    airFMGroupCfgName => '1.3.6.1.4.1.318.1.1.13.1.3.5.1.0',
    airFMGroupCfgNumSystems => '1.3.6.1.4.1.318.1.1.13.1.3.5.2.0',
    airFMGroupCfgIdleBlower => '1.3.6.1.4.1.318.1.1.13.1.3.5.3.0',
    airFMGroupCfgShutdownSmoke => '1.3.6.1.4.1.318.1.1.13.1.3.5.4.0',
    airFMGroupCfgShutdownFire => '1.3.6.1.4.1.318.1.1.13.1.3.5.5.0',
    airFMGroupCfgFailoverCommLoss => '1.3.6.1.4.1.318.1.1.13.1.3.5.6.0',
    airFMGroupCfgDmdFightStatus => '1.3.6.1.4.1.318.1.1.13.1.3.5.7.0',
    airFMGroupCfgDmdFightSetting => '1.3.6.1.4.1.318.1.1.13.1.3.5.8.0',
    airFMGroupCfgSetpointShareStatus => '1.3.6.1.4.1.318.1.1.13.1.3.5.9.0',
    airFMGroupCfgSetpointShareSetting => '1.3.6.1.4.1.318.1.1.13.1.3.5.10.0',
    airFMGroupCfgResetFieldServiceDefaults => '1.3.6.1.4.1.318.1.1.13.1.3.5.11.0',
    airFMGroupLoadShare => '1.3.6.1.4.1.318.1.1.13.1.3.6',
    airFMGroupLoadShareCoolRequests => '1.3.6.1.4.1.318.1.1.13.1.3.6.1.0',
    airFMGroupLoadShareCoolThreshC => '1.3.6.1.4.1.318.1.1.13.1.3.6.2.0',
    airFMGroupLoadShareCoolThreshF => '1.3.6.1.4.1.318.1.1.13.1.3.6.3.0',
    airFMGroupLoadShareReheatRequests => '1.3.6.1.4.1.318.1.1.13.1.3.6.4.0',
    airFMGroupLoadShareReheatThreshC => '1.3.6.1.4.1.318.1.1.13.1.3.6.5.0',
    airFMGroupLoadShareReheatThreshF => '1.3.6.1.4.1.318.1.1.13.1.3.6.6.0',
    airFMGroupLoadShareHumRequests => '1.3.6.1.4.1.318.1.1.13.1.3.6.7.0',
    airFMGroupLoadShareHumThresh => '1.3.6.1.4.1.318.1.1.13.1.3.6.8.0',
    airFMGroupLoadShareDehumRequests => '1.3.6.1.4.1.318.1.1.13.1.3.6.9.0',
    airFMGroupLoadShareDehumThresh => '1.3.6.1.4.1.318.1.1.13.1.3.6.10.0',
    airFMGroupFailoverSys => '1.3.6.1.4.1.318.1.1.13.1.3.7.1',
    airFMGroupFailoverSysAnyMinorAlarm => '1.3.6.1.4.1.318.1.1.13.1.3.7.1.1.0',
    airFMGroupFailoverSysAnyMajorAlarm => '1.3.6.1.4.1.318.1.1.13.1.3.7.1.2.0',
    airFMGroupFailoverSysHighEnvTemp => '1.3.6.1.4.1.318.1.1.13.1.3.7.1.3.0',
    airFMGroupFailoverSysLowEnvTemp => '1.3.6.1.4.1.318.1.1.13.1.3.7.1.4.0',
    airFMGroupFailoverSysHighEnvHum => '1.3.6.1.4.1.318.1.1.13.1.3.7.1.5.0',
    airFMGroupFailoverSysLowEnvHum => '1.3.6.1.4.1.318.1.1.13.1.3.7.1.6.0',
    airFMGroupFailoverSysFireAlarm => '1.3.6.1.4.1.318.1.1.13.1.3.7.1.7.0',
    airFMGroupFailoverSysSmokeAlarm => '1.3.6.1.4.1.318.1.1.13.1.3.7.1.8.0',
    airFMGroupFailoverSysCommLost => '1.3.6.1.4.1.318.1.1.13.1.3.7.1.9.0',
    airFMGroupFailoverSysSupplySensorFail => '1.3.6.1.4.1.318.1.1.13.1.3.7.1.10.0',
    airFMGroupFailoverSysReturnSensorFail => '1.3.6.1.4.1.318.1.1.13.1.3.7.1.11.0',
    airFMGroupFailoverSysPrimarySensorFail => '1.3.6.1.4.1.318.1.1.13.1.3.7.1.12.0',
    airFMGroupFailoverSysSecondarySensorFail => '1.3.6.1.4.1.318.1.1.13.1.3.7.1.13.0',
    airFMGroupFailoverSysNoSensorsAvailable => '1.3.6.1.4.1.318.1.1.13.1.3.7.1.14.0',
    airFMGroupFailoverMod => '1.3.6.1.4.1.318.1.1.13.1.3.7.2',
    airFMGroupFailoverModMaintRequired => '1.3.6.1.4.1.318.1.1.13.1.3.7.2.1.0',
    airFMGroupFailoverModCoolFail => '1.3.6.1.4.1.318.1.1.13.1.3.7.2.2.0',
    airFMGroupFailoverModHumFail => '1.3.6.1.4.1.318.1.1.13.1.3.7.2.3.0',
    airFMGroupFailoverModBlwrCntrl1Fail => '1.3.6.1.4.1.318.1.1.13.1.3.7.2.4.0',
    airFMGroupFailoverModBlwrCntrl2Fail => '1.3.6.1.4.1.318.1.1.13.1.3.7.2.5.0',
    airFMGroupFailoverModHighFilterDP => '1.3.6.1.4.1.318.1.1.13.1.3.7.2.6.0',
    airFMGroupFailoverModHighSupplyTemp => '1.3.6.1.4.1.318.1.1.13.1.3.7.2.7.0',
    airFMGroupFailoverModLowSupplyTemp => '1.3.6.1.4.1.318.1.1.13.1.3.7.2.8.0',
    airFMGroupFailoverModLossOrLowAirFlow => '1.3.6.1.4.1.318.1.1.13.1.3.7.2.9.0',
    airFMGroupFailoverModHumReplaceCylinder => '1.3.6.1.4.1.318.1.1.13.1.3.7.2.10.0',
    airFMGroupFailoverModAirBlockInterlockOpen => '1.3.6.1.4.1.318.1.1.13.1.3.7.2.11.0',
    airFMGroupFailoverModWaterDetected => '1.3.6.1.4.1.318.1.1.13.1.3.7.2.12.0',
    airFMGroupFailoverModCondensatePumpFail => '1.3.6.1.4.1.318.1.1.13.1.3.7.2.13.0',
    airFMSysStatus => '1.3.6.1.4.1.318.1.1.13.1.4.1',
    airFMSysNumber => '1.3.6.1.4.1.318.1.1.13.1.4.1.1.0',
    airFMSysPresentStatus => '1.3.6.1.4.1.318.1.1.13.1.4.1.2.0',
    airFMSysPresentRole => '1.3.6.1.4.1.318.1.1.13.1.4.1.3.0',
    airFMSysRunHours => '1.3.6.1.4.1.318.1.1.13.1.4.1.4.0',
    airFMSysCoilFluidTempC => '1.3.6.1.4.1.318.1.1.13.1.4.1.5.0',
    airFMSysCoilFluidTempF => '1.3.6.1.4.1.318.1.1.13.1.4.1.6.0',
    airFMSysHotWaterTempC => '1.3.6.1.4.1.318.1.1.13.1.4.1.7.0',
    airFMSysHotWaterTempF => '1.3.6.1.4.1.318.1.1.13.1.4.1.8.0',
    airFMSysAvgReturnTempC => '1.3.6.1.4.1.318.1.1.13.1.4.1.9.0',
    airFMSysAvgReturnTempF => '1.3.6.1.4.1.318.1.1.13.1.4.1.10.0',
    airFMSysAvgReturnHum => '1.3.6.1.4.1.318.1.1.13.1.4.1.11.0',
    airFMSysAvgRemoteTempC => '1.3.6.1.4.1.318.1.1.13.1.4.1.12.0',
    airFMSysAvgRemoteTempF => '1.3.6.1.4.1.318.1.1.13.1.4.1.13.0',
    airFMSysAvgRemoteHum => '1.3.6.1.4.1.318.1.1.13.1.4.1.14.0',
    airFMSysMaxRemoteTempC => '1.3.6.1.4.1.318.1.1.13.1.4.1.15.0',
    airFMSysMaxRemoteTempF => '1.3.6.1.4.1.318.1.1.13.1.4.1.16.0',
    airFMSysMinRemoteTempC => '1.3.6.1.4.1.318.1.1.13.1.4.1.17.0',
    airFMSysMinRemoteTempF => '1.3.6.1.4.1.318.1.1.13.1.4.1.18.0',
    airFMSysTempCtrlMethod => '1.3.6.1.4.1.318.1.1.13.1.4.1.19.0',
    airFMSysActualTempCtrlMethod => '1.3.6.1.4.1.318.1.1.13.1.4.1.20.0',
    airFMSysHumCtrlMethod => '1.3.6.1.4.1.318.1.1.13.1.4.1.21.0',
    airFMSysActualHumCtrlMethod => '1.3.6.1.4.1.318.1.1.13.1.4.1.22.0',
    airFMSysCtrlTempC => '1.3.6.1.4.1.318.1.1.13.1.4.1.23.0',
    airFMSysCtrlTempF => '1.3.6.1.4.1.318.1.1.13.1.4.1.24.0',
    airFMSysCtrlHum => '1.3.6.1.4.1.318.1.1.13.1.4.1.25.0',
    airFMSysDemands => '1.3.6.1.4.1.318.1.1.13.1.4.2',
    airFMSysDXCoolingDmd => '1.3.6.1.4.1.318.1.1.13.1.4.2.1.0',
    airFMSysDXDehumDmd => '1.3.6.1.4.1.318.1.1.13.1.4.2.2.0',
    airFMSysDXActualCoolDehum => '1.3.6.1.4.1.318.1.1.13.1.4.2.3.0',
    airFMSysCoilFluidCoolDmd => '1.3.6.1.4.1.318.1.1.13.1.4.2.4.0',
    airFMSysCoilFluidDehumDmd => '1.3.6.1.4.1.318.1.1.13.1.4.2.5.0',
    airFMSysCoilFluidActualCoolDehum => '1.3.6.1.4.1.318.1.1.13.1.4.2.6.0',
    airFMSysElectricReheatDmd => '1.3.6.1.4.1.318.1.1.13.1.4.2.7.0',
    airFMSysActualElectricReheat => '1.3.6.1.4.1.318.1.1.13.1.4.2.8.0',
    airFMSysSteamHotGasReheatDmd => '1.3.6.1.4.1.318.1.1.13.1.4.2.9.0',
    airFMSysActualSteamHotGasReheat => '1.3.6.1.4.1.318.1.1.13.1.4.2.10.0',
    airFMSysSteamElectrodeHumDmd => '1.3.6.1.4.1.318.1.1.13.1.4.2.11.0',
    airFMSysActualSteamElectrodeHum => '1.3.6.1.4.1.318.1.1.13.1.4.2.12.0',
    airFMSysSteamHumDmd => '1.3.6.1.4.1.318.1.1.13.1.4.2.13.0',
    airFMSysActualSteamHum => '1.3.6.1.4.1.318.1.1.13.1.4.2.14.0',
    airFMSysSetup => '1.3.6.1.4.1.318.1.1.13.1.4.3',
    airFMSysNumModules => '1.3.6.1.4.1.318.1.1.13.1.4.3.1.0',
    airFMSysNumPCIOMs => '1.3.6.1.4.1.318.1.1.13.1.4.3.2.0',
    airFMSysMainsVlt => '1.3.6.1.4.1.318.1.1.13.1.4.3.3.0',
    airFMSysUPSVlt => '1.3.6.1.4.1.318.1.1.13.1.4.3.4.0',
    airFMSysCoilCfg => '1.3.6.1.4.1.318.1.1.13.1.4.3.5.0',
    airFMSysRefrigType => '1.3.6.1.4.1.318.1.1.13.1.4.3.6.0',
    airFMSysHeatRejection => '1.3.6.1.4.1.318.1.1.13.1.4.3.7.0',
    airFMSysDischAirPtrn => '1.3.6.1.4.1.318.1.1.13.1.4.3.8.0',
    airFMSysAirFltr => '1.3.6.1.4.1.318.1.1.13.1.4.3.9.0',
    airFMSysFlowSwitch => '1.3.6.1.4.1.318.1.1.13.1.4.3.10.0',
    airFMSysCoilFluidVlvAct => '1.3.6.1.4.1.318.1.1.13.1.4.3.11.0',
    airFMSysCoilFluidVlvType => '1.3.6.1.4.1.318.1.1.13.1.4.3.12.0',
    airFMSysCndsrFluidVlvAct => '1.3.6.1.4.1.318.1.1.13.1.4.3.13.0',
    airFMSysCndsrFluidVlvType => '1.3.6.1.4.1.318.1.1.13.1.4.3.14.0',
    airFMSysHotWaterVlvAct => '1.3.6.1.4.1.318.1.1.13.1.4.3.15.0',
    airFMSysNumRemoteSensors => '1.3.6.1.4.1.318.1.1.13.1.4.3.16.0',
    airFMSysConfig => '1.3.6.1.4.1.318.1.1.13.1.4.4',
    airFMSysPrimaryControlSensor => '1.3.6.1.4.1.318.1.1.13.1.4.4.1.0',
    airFMSysRemoteSensorData => '1.3.6.1.4.1.318.1.1.13.1.4.4.2.0',
    airFMSysFastStartup => '1.3.6.1.4.1.318.1.1.13.1.4.4.3.0',
    airFMSysStartupDelay => '1.3.6.1.4.1.318.1.1.13.1.4.4.4.0',
    airFMSysModeDelay => '1.3.6.1.4.1.318.1.1.13.1.4.4.5.0',
    airFMSysCommLossShutdownDelay => '1.3.6.1.4.1.318.1.1.13.1.4.4.6.0',
    airFMSysResetSysFailure => '1.3.6.1.4.1.318.1.1.13.1.4.4.7.0',
    airFMSysResetUserDflts => '1.3.6.1.4.1.318.1.1.13.1.4.4.8.0',
    airFMSysResetFldSrvcDflts => '1.3.6.1.4.1.318.1.1.13.1.4.4.9.0',
    airFMSysResetRunHours => '1.3.6.1.4.1.318.1.1.13.1.4.4.10.0',
    airFMSysCooling => '1.3.6.1.4.1.318.1.1.13.1.4.5',
    airFMSysCompMinOnTime => '1.3.6.1.4.1.318.1.1.13.1.4.5.1.0',
    airFMSysCompMinOffTime => '1.3.6.1.4.1.318.1.1.13.1.4.5.2.0',
    airFMSysCompRotPeriod => '1.3.6.1.4.1.318.1.1.13.1.4.5.3.0',
    airFMSysEconIsolVlvOpenDelay => '1.3.6.1.4.1.318.1.1.13.1.4.5.4.0',
    airFMSysEconIsolVlvCloseDelay => '1.3.6.1.4.1.318.1.1.13.1.4.5.5.0',
    airFMSysCndsrFluidVlvCloseDelay => '1.3.6.1.4.1.318.1.1.13.1.4.5.6.0',
    airFMSysInterstageDelay => '1.3.6.1.4.1.318.1.1.13.1.4.5.7.0',
    airFMSysCoolState => '1.3.6.1.4.1.318.1.1.13.1.4.5.8.0',
    airFMSysCoolEssFunction => '1.3.6.1.4.1.318.1.1.13.1.4.5.9.0',
    airFMSysCoolSetpointC => '1.3.6.1.4.1.318.1.1.13.1.4.5.10.0',
    airFMSysCoolSetpointF => '1.3.6.1.4.1.318.1.1.13.1.4.5.11.0',
    airFMSysCoolDeadbandC => '1.3.6.1.4.1.318.1.1.13.1.4.5.12.0',
    airFMSysCoolDeadbandF => '1.3.6.1.4.1.318.1.1.13.1.4.5.13.0',
    airFMSysCoolEconIsolFunction => '1.3.6.1.4.1.318.1.1.13.1.4.5.14.0',
    airFMSysSuctPresCompensation => '1.3.6.1.4.1.318.1.1.13.1.4.5.15.0',
    airFMSysCoilFluidActivThreshC => '1.3.6.1.4.1.318.1.1.13.1.4.5.16.0',
    airFMSysCoilFluidActivThreshF => '1.3.6.1.4.1.318.1.1.13.1.4.5.17.0',
    airFMSysCoilFluidActivDeadbandC => '1.3.6.1.4.1.318.1.1.13.1.4.5.18.0',
    airFMSysCoilFluidActivDeadbandF => '1.3.6.1.4.1.318.1.1.13.1.4.5.19.0',
    airFMSysCoolPIDMethod => '1.3.6.1.4.1.318.1.1.13.1.4.5.20.0',
    airFMSysCoolPIDGainP => '1.3.6.1.4.1.318.1.1.13.1.4.5.21.0',
    airFMSysCoolPIDResetRateI => '1.3.6.1.4.1.318.1.1.13.1.4.5.22.0',
    airFMSysCoolPIDDerivativeD => '1.3.6.1.4.1.318.1.1.13.1.4.5.23.0',
    airFMSysHumidify => '1.3.6.1.4.1.318.1.1.13.1.4.6',
    airFMSysHumState => '1.3.6.1.4.1.318.1.1.13.1.4.6.1.0',
    airFMSysHumEssFunction => '1.3.6.1.4.1.318.1.1.13.1.4.6.2.0',
    airFMSysHumSetpoint => '1.3.6.1.4.1.318.1.1.13.1.4.6.3.0',
    airFMSysHumDeadband => '1.3.6.1.4.1.318.1.1.13.1.4.6.4.0',
    airFMSysHumCtrlSetting => '1.3.6.1.4.1.318.1.1.13.1.4.6.5.0',
    airFMSysActualHumCtrl => '1.3.6.1.4.1.318.1.1.13.1.4.6.6.0',
    airFMSysHumSensBand => '1.3.6.1.4.1.318.1.1.13.1.4.6.7.0',
    airFMSysDehumidify => '1.3.6.1.4.1.318.1.1.13.1.4.7',
    airFMSysDehumState => '1.3.6.1.4.1.318.1.1.13.1.4.7.1.0',
    airFMSysDehumEssFunction => '1.3.6.1.4.1.318.1.1.13.1.4.7.2.0',
    airFMSysDehumSetpoint => '1.3.6.1.4.1.318.1.1.13.1.4.7.3.0',
    airFMSysDehumDeadband => '1.3.6.1.4.1.318.1.1.13.1.4.7.4.0',
    airFMSysDehumCapacity => '1.3.6.1.4.1.318.1.1.13.1.4.7.5.0',
    airFMSysDehumPIDMethod => '1.3.6.1.4.1.318.1.1.13.1.4.7.6.0',
    airFMSysDehumPIDGainP => '1.3.6.1.4.1.318.1.1.13.1.4.7.7.0',
    airFMSysDehumPIDResetRateI => '1.3.6.1.4.1.318.1.1.13.1.4.7.8.0',
    airFMSysDehumPIDDerivativeD => '1.3.6.1.4.1.318.1.1.13.1.4.7.9.0',
    airFMSysReheat => '1.3.6.1.4.1.318.1.1.13.1.4.8',
    airFMSysReheatState => '1.3.6.1.4.1.318.1.1.13.1.4.8.1.0',
    airFMSysReheatEssFunction => '1.3.6.1.4.1.318.1.1.13.1.4.8.2.0',
    airFMSysReheatSetpointC => '1.3.6.1.4.1.318.1.1.13.1.4.8.3.0',
    airFMSysReheatSetpointF => '1.3.6.1.4.1.318.1.1.13.1.4.8.4.0',
    airFMSysReheatDeadbandC => '1.3.6.1.4.1.318.1.1.13.1.4.8.5.0',
    airFMSysReheatDeadbandF => '1.3.6.1.4.1.318.1.1.13.1.4.8.6.0',
    airFMSysReheatPIDMethod => '1.3.6.1.4.1.318.1.1.13.1.4.8.7.0',
    airFMSysReheatPIDGainP => '1.3.6.1.4.1.318.1.1.13.1.4.8.8.0',
    airFMSysReheatPIDResetRateI => '1.3.6.1.4.1.318.1.1.13.1.4.8.9.0',
    airFMSysReheatPIDDerivativeD => '1.3.6.1.4.1.318.1.1.13.1.4.8.10.0',
    airFMSysThresholds => '1.3.6.1.4.1.318.1.1.13.1.4.9',
    airFMSysHighSplyTempC => '1.3.6.1.4.1.318.1.1.13.1.4.9.1.0',
    airFMSysHighSplyTempF => '1.3.6.1.4.1.318.1.1.13.1.4.9.2.0',
    airFMSysLowSplyTempC => '1.3.6.1.4.1.318.1.1.13.1.4.9.3.0',
    airFMSysLowSplyTempF => '1.3.6.1.4.1.318.1.1.13.1.4.9.4.0',
    airFMSysHighCoilFluidTempC => '1.3.6.1.4.1.318.1.1.13.1.4.9.5.0',
    airFMSysHighCoilFluidTempF => '1.3.6.1.4.1.318.1.1.13.1.4.9.6.0',
    airFMSysLowCoilFluidTempC => '1.3.6.1.4.1.318.1.1.13.1.4.9.7.0',
    airFMSysLowCoilFluidTempF => '1.3.6.1.4.1.318.1.1.13.1.4.9.8.0',
    airFMSysHighCtrlTempC => '1.3.6.1.4.1.318.1.1.13.1.4.9.9.0',
    airFMSysHighCtrlTempF => '1.3.6.1.4.1.318.1.1.13.1.4.9.10.0',
    airFMSysLowCtrlTempC => '1.3.6.1.4.1.318.1.1.13.1.4.9.11.0',
    airFMSysLowCtrlTempF => '1.3.6.1.4.1.318.1.1.13.1.4.9.12.0',
    airFMSysHighCtrlHum => '1.3.6.1.4.1.318.1.1.13.1.4.9.13.0',
    airFMSysLowCtrlHum => '1.3.6.1.4.1.318.1.1.13.1.4.9.14.0',
    airFMSysTempAlarmDelay => '1.3.6.1.4.1.318.1.1.13.1.4.9.15.0',
    airFMSysHumAlarmDelay => '1.3.6.1.4.1.318.1.1.13.1.4.9.16.0',
    airFMSysInputs => '1.3.6.1.4.1.318.1.1.13.1.4.10',
    airFMSysInputTableSize => '1.3.6.1.4.1.318.1.1.13.1.4.10.1.0',
    airFMSysInputTable => '1.3.6.1.4.1.318.1.1.13.1.4.10.2',
    airFMSysInputEntry => '1.3.6.1.4.1.318.1.1.13.1.4.10.2.1',
    airFMSysInputIndex => '1.3.6.1.4.1.318.1.1.13.1.4.10.2.1.1',
    airFMSysInputName => '1.3.6.1.4.1.318.1.1.13.1.4.10.2.1.2',
    airFMSysInputStatus => '1.3.6.1.4.1.318.1.1.13.1.4.10.2.1.3',
    airFMSysInputNormalState => '1.3.6.1.4.1.318.1.1.13.1.4.10.2.1.4',
    airFMSysInputDelay => '1.3.6.1.4.1.318.1.1.13.1.4.10.2.1.5',
    airFMSysInputAlarmAction => '1.3.6.1.4.1.318.1.1.13.1.4.10.2.1.6',
    airFMSysOutputs => '1.3.6.1.4.1.318.1.1.13.1.4.11',
    airFMSysOutputTableSize => '1.3.6.1.4.1.318.1.1.13.1.4.11.1.0',
    airFMSysOutputTable => '1.3.6.1.4.1.318.1.1.13.1.4.11.2',
    airFMSysOutputEntry => '1.3.6.1.4.1.318.1.1.13.1.4.11.2.1',
    airFMSysOutputIndex => '1.3.6.1.4.1.318.1.1.13.1.4.11.2.1.1',
    airFMSysOutputStatus => '1.3.6.1.4.1.318.1.1.13.1.4.11.2.1.2',
    airFMSysOutputNormalState => '1.3.6.1.4.1.318.1.1.13.1.4.11.2.1.3',
    airFMSysAlarmMapSys => '1.3.6.1.4.1.318.1.1.13.1.4.12.1',
    airFMSysAlarmMapSysTableSize => '1.3.6.1.4.1.318.1.1.13.1.4.12.1.1.0',
    airFMSysAlarmMapSysTable => '1.3.6.1.4.1.318.1.1.13.1.4.12.1.2',
    airFMSysAlarmMapSysEntry => '1.3.6.1.4.1.318.1.1.13.1.4.12.1.2.1',
    airFMSysAlarmMapSysOutputIndex => '1.3.6.1.4.1.318.1.1.13.1.4.12.1.2.1.1',
    airFMSysAlarmMapSysAnyAlarm => '1.3.6.1.4.1.318.1.1.13.1.4.12.1.2.1.2',
    airFMSysAlarmMapSystemOn => '1.3.6.1.4.1.318.1.1.13.1.4.12.1.2.1.3',
    airFMSysAlarmMapSystemOffline => '1.3.6.1.4.1.318.1.1.13.1.4.12.1.2.1.4',
    airFMSysAlarmMapSysHighEnvTemp => '1.3.6.1.4.1.318.1.1.13.1.4.12.1.2.1.5',
    airFMSysAlarmMapSysLowEnvTemp => '1.3.6.1.4.1.318.1.1.13.1.4.12.1.2.1.6',
    airFMSysAlarmMapSysHighEnvHum => '1.3.6.1.4.1.318.1.1.13.1.4.12.1.2.1.7',
    airFMSysAlarmMapSysLowEnvHum => '1.3.6.1.4.1.318.1.1.13.1.4.12.1.2.1.8',
    airFMSysAlarmMapSysFireDet => '1.3.6.1.4.1.318.1.1.13.1.4.12.1.2.1.9',
    airFMSysAlarmMapSysSmokeDet => '1.3.6.1.4.1.318.1.1.13.1.4.12.1.2.1.10',
    airFMSysAlarmMapSysEconIsol => '1.3.6.1.4.1.318.1.1.13.1.4.12.1.2.1.11',
    airFMSysAlarmMapSysSupplySensFail => '1.3.6.1.4.1.318.1.1.13.1.4.12.1.2.1.12',
    airFMSysAlarmMapSysReturnSensFail => '1.3.6.1.4.1.318.1.1.13.1.4.12.1.2.1.13',
    airFMSysAlarmMapSysRemSensRemoved => '1.3.6.1.4.1.318.1.1.13.1.4.12.1.2.1.14',
    airFMSysAlarmMapSysPrimSensFail => '1.3.6.1.4.1.318.1.1.13.1.4.12.1.2.1.15',
    airFMSysAlarmMapSysSecSensFail => '1.3.6.1.4.1.318.1.1.13.1.4.12.1.2.1.16',
    airFMSysAlarmMapSysSecSensActive => '1.3.6.1.4.1.318.1.1.13.1.4.12.1.2.1.17',
    airFMSysAlarmMapMainMod => '1.3.6.1.4.1.318.1.1.13.1.4.12.2',
    airFMSysAlarmMapMainModTableSize => '1.3.6.1.4.1.318.1.1.13.1.4.12.2.1.0',
    airFMSysAlarmMapMainModTable => '1.3.6.1.4.1.318.1.1.13.1.4.12.2.2',
    airFMSysAlarmMapMainModEntry => '1.3.6.1.4.1.318.1.1.13.1.4.12.2.2.1',
    airFMSysAlarmMapMainModOutputIndex => '1.3.6.1.4.1.318.1.1.13.1.4.12.2.2.1.1',
    airFMSysAlarmMapMainModAnyAlarm => '1.3.6.1.4.1.318.1.1.13.1.4.12.2.2.1.2',
    airFMSysAlarmMapMainModMaintReq => '1.3.6.1.4.1.318.1.1.13.1.4.12.2.2.1.3',
    airFMSysAlarmMapMainModCoolFail => '1.3.6.1.4.1.318.1.1.13.1.4.12.2.2.1.4',
    airFMSysAlarmMapMainModHighSupplyTemp => '1.3.6.1.4.1.318.1.1.13.1.4.12.2.2.1.5',
    airFMSysAlarmMapMainModLowSupplyTemp => '1.3.6.1.4.1.318.1.1.13.1.4.12.2.2.1.6',
    airFMSysAlarmMapMainModHumFail => '1.3.6.1.4.1.318.1.1.13.1.4.12.2.2.1.7',
    airFMSysAlarmMapMainModHumReplCyl => '1.3.6.1.4.1.318.1.1.13.1.4.12.2.2.1.8',
    airFMSysAlarmMapMainModCondPumpFail => '1.3.6.1.4.1.318.1.1.13.1.4.12.2.2.1.9',
    airFMSysAlarmMapMainModBlwrCntl1Fail => '1.3.6.1.4.1.318.1.1.13.1.4.12.2.2.1.10',
    airFMSysAlarmMapMainModBlwrCntl2Fail => '1.3.6.1.4.1.318.1.1.13.1.4.12.2.2.1.11',
    airFMSysAlarmMapMainModHighFltrDP => '1.3.6.1.4.1.318.1.1.13.1.4.12.2.2.1.12',
    airFMSysAlarmMapMainModLowAirFlow => '1.3.6.1.4.1.318.1.1.13.1.4.12.2.2.1.13',
    airFMSysAlarmMapMainModAirBlckIntOpen => '1.3.6.1.4.1.318.1.1.13.1.4.12.2.2.1.14',
    airFMSysAlarmMapMainModWaterDetected => '1.3.6.1.4.1.318.1.1.13.1.4.12.2.2.1.15',
    airFMSysAlarmMapExpMod1 => '1.3.6.1.4.1.318.1.1.13.1.4.12.3',
    airFMSysAlarmMapExpMod1TableSize => '1.3.6.1.4.1.318.1.1.13.1.4.12.3.1.0',
    airFMSysAlarmMapExpMod1Table => '1.3.6.1.4.1.318.1.1.13.1.4.12.3.2',
    airFMSysAlarmMapExpMod1Entry => '1.3.6.1.4.1.318.1.1.13.1.4.12.3.2.1',
    airFMSysAlarmMapExpMod1OutputIndex => '1.3.6.1.4.1.318.1.1.13.1.4.12.3.2.1.1',
    airFMSysAlarmMapExpMod1AnyAlarm => '1.3.6.1.4.1.318.1.1.13.1.4.12.3.2.1.2',
    airFMSysAlarmMapExpMod1MaintReq => '1.3.6.1.4.1.318.1.1.13.1.4.12.3.2.1.3',
    airFMSysAlarmMapExpMod1CoolFail => '1.3.6.1.4.1.318.1.1.13.1.4.12.3.2.1.4',
    airFMSysAlarmMapExpMod1HighSupplyTemp => '1.3.6.1.4.1.318.1.1.13.1.4.12.3.2.1.5',
    airFMSysAlarmMapExpMod1LowSupplyTemp => '1.3.6.1.4.1.318.1.1.13.1.4.12.3.2.1.6',
    airFMSysAlarmMapExpMod1HumFail => '1.3.6.1.4.1.318.1.1.13.1.4.12.3.2.1.7',
    airFMSysAlarmMapExpMod1HumReplCyl => '1.3.6.1.4.1.318.1.1.13.1.4.12.3.2.1.8',
    airFMSysAlarmMapExpMod1CondPumpFail => '1.3.6.1.4.1.318.1.1.13.1.4.12.3.2.1.9',
    airFMSysAlarmMapExpMod1BlwrCntl1Fail => '1.3.6.1.4.1.318.1.1.13.1.4.12.3.2.1.10',
    airFMSysAlarmMapExpMod1BlwrCntl2Fail => '1.3.6.1.4.1.318.1.1.13.1.4.12.3.2.1.11',
    airFMSysAlarmMapExpMod1HighFltrDP => '1.3.6.1.4.1.318.1.1.13.1.4.12.3.2.1.12',
    airFMSysAlarmMapExpMod1LowAirFlow => '1.3.6.1.4.1.318.1.1.13.1.4.12.3.2.1.13',
    airFMSysAlarmMapExpMod1AirBlckIntOpen => '1.3.6.1.4.1.318.1.1.13.1.4.12.3.2.1.14',
    airFMSysAlarmMapExpMod1WaterDetected => '1.3.6.1.4.1.318.1.1.13.1.4.12.3.2.1.15',
    airFMSysAlarmMapExpMod2 => '1.3.6.1.4.1.318.1.1.13.1.4.12.4',
    airFMSysAlarmMapExpMod2TableSize => '1.3.6.1.4.1.318.1.1.13.1.4.12.4.1.0',
    airFMSysAlarmMapExpMod2Table => '1.3.6.1.4.1.318.1.1.13.1.4.12.4.2',
    airFMSysAlarmMapExpMod2Entry => '1.3.6.1.4.1.318.1.1.13.1.4.12.4.2.1',
    airFMSysAlarmMapExpMod2OutputIndex => '1.3.6.1.4.1.318.1.1.13.1.4.12.4.2.1.1',
    airFMSysAlarmMapExpMod2AnyAlarm => '1.3.6.1.4.1.318.1.1.13.1.4.12.4.2.1.2',
    airFMSysAlarmMapExpMod2MaintReq => '1.3.6.1.4.1.318.1.1.13.1.4.12.4.2.1.3',
    airFMSysAlarmMapExpMod2CoolFail => '1.3.6.1.4.1.318.1.1.13.1.4.12.4.2.1.4',
    airFMSysAlarmMapExpMod2HighSupplyTemp => '1.3.6.1.4.1.318.1.1.13.1.4.12.4.2.1.5',
    airFMSysAlarmMapExpMod2LowSupplyTemp => '1.3.6.1.4.1.318.1.1.13.1.4.12.4.2.1.6',
    airFMSysAlarmMapExpMod2HumFail => '1.3.6.1.4.1.318.1.1.13.1.4.12.4.2.1.7',
    airFMSysAlarmMapExpMod2HumReplCyl => '1.3.6.1.4.1.318.1.1.13.1.4.12.4.2.1.8',
    airFMSysAlarmMapExpMod2CondPumpFail => '1.3.6.1.4.1.318.1.1.13.1.4.12.4.2.1.9',
    airFMSysAlarmMapExpMod2BlwrCntl1Fail => '1.3.6.1.4.1.318.1.1.13.1.4.12.4.2.1.10',
    airFMSysAlarmMapExpMod2BlwrCntl2Fail => '1.3.6.1.4.1.318.1.1.13.1.4.12.4.2.1.11',
    airFMSysAlarmMapExpMod2HighFltrDP => '1.3.6.1.4.1.318.1.1.13.1.4.12.4.2.1.12',
    airFMSysAlarmMapExpMod2LowAirFlow => '1.3.6.1.4.1.318.1.1.13.1.4.12.4.2.1.13',
    airFMSysAlarmMapExpMod2AirBlckIntOpen => '1.3.6.1.4.1.318.1.1.13.1.4.12.4.2.1.14',
    airFMSysAlarmMapExpMod2WaterDetected => '1.3.6.1.4.1.318.1.1.13.1.4.12.4.2.1.15',
    airFMSysAlarmMapInput => '1.3.6.1.4.1.318.1.1.13.1.4.12.5',
    airFMSysAlarmMapInputTableSize => '1.3.6.1.4.1.318.1.1.13.1.4.12.5.1.0',
    airFMSysAlarmMapInputTable => '1.3.6.1.4.1.318.1.1.13.1.4.12.5.2',
    airFMSysAlarmMapInputEntry => '1.3.6.1.4.1.318.1.1.13.1.4.12.5.2.1',
    airFMSysAlarmMapInputOutputIndex => '1.3.6.1.4.1.318.1.1.13.1.4.12.5.2.1.1',
    airFMSysAlarmMapInput1 => '1.3.6.1.4.1.318.1.1.13.1.4.12.5.2.1.2',
    airFMSysAlarmMapInput2 => '1.3.6.1.4.1.318.1.1.13.1.4.12.5.2.1.3',
    airFMSysAlarmMapInput3 => '1.3.6.1.4.1.318.1.1.13.1.4.12.5.2.1.4',
    airFMSysAlarmMapInput4 => '1.3.6.1.4.1.318.1.1.13.1.4.12.5.2.1.5',
    airFMSysAlarmMapInput5 => '1.3.6.1.4.1.318.1.1.13.1.4.12.5.2.1.6',
    airFMSysAlarmMapInput6 => '1.3.6.1.4.1.318.1.1.13.1.4.12.5.2.1.7',
    airFMSysAlarmMapInput7 => '1.3.6.1.4.1.318.1.1.13.1.4.12.5.2.1.8',
    airFMSysAlarmMapInput8 => '1.3.6.1.4.1.318.1.1.13.1.4.12.5.2.1.9',
    airFMSysAlarmMapInput9 => '1.3.6.1.4.1.318.1.1.13.1.4.12.5.2.1.10',
    airFMSysAlarmMapInput10 => '1.3.6.1.4.1.318.1.1.13.1.4.12.5.2.1.11',
    airFMSysAlarmMapInput11 => '1.3.6.1.4.1.318.1.1.13.1.4.12.5.2.1.12',
    airFMSysAlarmMapInput12 => '1.3.6.1.4.1.318.1.1.13.1.4.12.5.2.1.13',
    airFMSysAlarmMapInput13 => '1.3.6.1.4.1.318.1.1.13.1.4.12.5.2.1.14',
    airFMSysAlarmMapInput14 => '1.3.6.1.4.1.318.1.1.13.1.4.12.5.2.1.15',
    airFMSysAlarmMapInput15 => '1.3.6.1.4.1.318.1.1.13.1.4.12.5.2.1.16',
    airFMSysAlarmMapInput16 => '1.3.6.1.4.1.318.1.1.13.1.4.12.5.2.1.17',
    airFMSysAlarmMapOutput => '1.3.6.1.4.1.318.1.1.13.1.4.12.6',
    airFMSysAlarmMapOutputTableSize => '1.3.6.1.4.1.318.1.1.13.1.4.12.6.1.0',
    airFMSysAlarmMapOutputTable => '1.3.6.1.4.1.318.1.1.13.1.4.12.6.2',
    airFMSysAlarmMapOutputEntry => '1.3.6.1.4.1.318.1.1.13.1.4.12.6.2.1',
    airFMSysAlarmMapOutputIndex => '1.3.6.1.4.1.318.1.1.13.1.4.12.6.2.1.1',
    airFMSysAlarmMapOutput1 => '1.3.6.1.4.1.318.1.1.13.1.4.12.6.2.1.2',
    airFMSysAlarmMapOutput2 => '1.3.6.1.4.1.318.1.1.13.1.4.12.6.2.1.3',
    airFMSysAlarmMapOutput3 => '1.3.6.1.4.1.318.1.1.13.1.4.12.6.2.1.4',
    airFMSysAlarmMapOutput4 => '1.3.6.1.4.1.318.1.1.13.1.4.12.6.2.1.5',
    airFMSysAlarmMapOutput5 => '1.3.6.1.4.1.318.1.1.13.1.4.12.6.2.1.6',
    airFMSysAlarmMapOutput6 => '1.3.6.1.4.1.318.1.1.13.1.4.12.6.2.1.7',
    airFMSysAlarmMapOutput7 => '1.3.6.1.4.1.318.1.1.13.1.4.12.6.2.1.8',
    airFMSysAlarmMapOutput8 => '1.3.6.1.4.1.318.1.1.13.1.4.12.6.2.1.9',
    airFMSysAlarmMapOutput9 => '1.3.6.1.4.1.318.1.1.13.1.4.12.6.2.1.10',
    airFMSysAlarmMapOutput10 => '1.3.6.1.4.1.318.1.1.13.1.4.12.6.2.1.11',
    airFMSysAlarmMapOutput11 => '1.3.6.1.4.1.318.1.1.13.1.4.12.6.2.1.12',
    airFMSysAlarmMapOutput12 => '1.3.6.1.4.1.318.1.1.13.1.4.12.6.2.1.13',
    airFMSysAlarmMapOutput13 => '1.3.6.1.4.1.318.1.1.13.1.4.12.6.2.1.14',
    airFMSysAlarmMapOutput14 => '1.3.6.1.4.1.318.1.1.13.1.4.12.6.2.1.15',
    airFMSysAlarmMapOutput15 => '1.3.6.1.4.1.318.1.1.13.1.4.12.6.2.1.16',
    airFMSysAlarmMapOutput16 => '1.3.6.1.4.1.318.1.1.13.1.4.12.6.2.1.17',
    airFMModIdent => '1.3.6.1.4.1.318.1.1.13.1.5.1',
    airFMModIdentTableSize => '1.3.6.1.4.1.318.1.1.13.1.5.1.1.0',
    airFMModIdentTable => '1.3.6.1.4.1.318.1.1.13.1.5.1.2',
    airFMModIdentEntry => '1.3.6.1.4.1.318.1.1.13.1.5.1.2.1',
    airFMModIdentModuleIndex => '1.3.6.1.4.1.318.1.1.13.1.5.1.2.1.1',
    airFMModModelNumber => '1.3.6.1.4.1.318.1.1.13.1.5.1.2.1.2',
    airFMModSerialNumber => '1.3.6.1.4.1.318.1.1.13.1.5.1.2.1.3',
    airFMModManufactureDate => '1.3.6.1.4.1.318.1.1.13.1.5.1.2.1.4',
    airFMModFirmwareRev => '1.3.6.1.4.1.318.1.1.13.1.5.1.2.1.5',
    airFMModHardwareRev => '1.3.6.1.4.1.318.1.1.13.1.5.1.2.1.6',
    airFMModStatus => '1.3.6.1.4.1.318.1.1.13.1.5.2',
    airFMModStatusTableSize => '1.3.6.1.4.1.318.1.1.13.1.5.2.1.0',
    airFMModStatusTable => '1.3.6.1.4.1.318.1.1.13.1.5.2.2',
    airFMModStatusEntry => '1.3.6.1.4.1.318.1.1.13.1.5.2.2.1',
    airFMModStatusModuleIndex => '1.3.6.1.4.1.318.1.1.13.1.5.2.2.1.1',
    airFMModSupplyTempC => '1.3.6.1.4.1.318.1.1.13.1.5.2.2.1.2',
    airFMModSupplyTempF => '1.3.6.1.4.1.318.1.1.13.1.5.2.2.1.3',
    airFMModSupplyHum => '1.3.6.1.4.1.318.1.1.13.1.5.2.2.1.4',
    airFMModReturnTempC => '1.3.6.1.4.1.318.1.1.13.1.5.2.2.1.5',
    airFMModReturnTempF => '1.3.6.1.4.1.318.1.1.13.1.5.2.2.1.6',
    airFMModReturnHum => '1.3.6.1.4.1.318.1.1.13.1.5.2.2.1.7',
    airFMModFilterDiffPresPa => '1.3.6.1.4.1.318.1.1.13.1.5.2.2.1.8',
    airFMModFilterDiffPresInWC => '1.3.6.1.4.1.318.1.1.13.1.5.2.2.1.9',
    airFMModCoilDiffPresPa => '1.3.6.1.4.1.318.1.1.13.1.5.2.2.1.10',
    airFMModCoilDiffPresInWC => '1.3.6.1.4.1.318.1.1.13.1.5.2.2.1.11',
    airFMModProperties => '1.3.6.1.4.1.318.1.1.13.1.5.3',
    airFMModPropTableSize => '1.3.6.1.4.1.318.1.1.13.1.5.3.1.0',
    airFMModPropTable => '1.3.6.1.4.1.318.1.1.13.1.5.3.2',
    airFMModPropEntry => '1.3.6.1.4.1.318.1.1.13.1.5.3.2.1',
    airFMModPropModuleIndex => '1.3.6.1.4.1.318.1.1.13.1.5.3.2.1.1',
    airFMModOutputCapacity => '1.3.6.1.4.1.318.1.1.13.1.5.3.2.1.2',
    airFMModCapacityCtrl => '1.3.6.1.4.1.318.1.1.13.1.5.3.2.1.3',
    airFMModHeaterType => '1.3.6.1.4.1.318.1.1.13.1.5.3.2.1.4',
    airFMModElectricHeaterType => '1.3.6.1.4.1.318.1.1.13.1.5.3.2.1.5',
    airFMModHumidifierType => '1.3.6.1.4.1.318.1.1.13.1.5.3.2.1.6',
    airFMModBlwrFreqSetting => '1.3.6.1.4.1.318.1.1.13.1.5.3.2.1.7',
    airFMModNomCoilDiffPresPa => '1.3.6.1.4.1.318.1.1.13.1.5.3.2.1.8',
    airFMModNomCoilDiffPresInWC => '1.3.6.1.4.1.318.1.1.13.1.5.3.2.1.9',
    airFMModCondPump => '1.3.6.1.4.1.318.1.1.13.1.5.3.2.1.10',
    airFMModFireDetector => '1.3.6.1.4.1.318.1.1.13.1.5.3.2.1.11',
    airFMModSmokeDetector => '1.3.6.1.4.1.318.1.1.13.1.5.3.2.1.12',
    airFMModWaterDetector => '1.3.6.1.4.1.318.1.1.13.1.5.3.2.1.13',
    airFMModCooling => '1.3.6.1.4.1.318.1.1.13.1.5.4',
    airFMModCoolTableSize => '1.3.6.1.4.1.318.1.1.13.1.5.4.1.0',
    airFMModCoolTable => '1.3.6.1.4.1.318.1.1.13.1.5.4.2',
    airFMModCoolEntry => '1.3.6.1.4.1.318.1.1.13.1.5.4.2.1',
    airFMModCoolModuleIndex => '1.3.6.1.4.1.318.1.1.13.1.5.4.2.1.1',
    airFMModComp1 => '1.3.6.1.4.1.318.1.1.13.1.5.4.2.1.2',
    airFMModComp2 => '1.3.6.1.4.1.318.1.1.13.1.5.4.2.1.3',
    airFMModSuctPresKPa => '1.3.6.1.4.1.318.1.1.13.1.5.4.2.1.4',
    airFMModSuctPresPSI => '1.3.6.1.4.1.318.1.1.13.1.5.4.2.1.5',
    airFMModDischPresKPa => '1.3.6.1.4.1.318.1.1.13.1.5.4.2.1.6',
    airFMModDischPresPSI => '1.3.6.1.4.1.318.1.1.13.1.5.4.2.1.7',
    airFMModCondFluidVlvPos => '1.3.6.1.4.1.318.1.1.13.1.5.4.2.1.8',
    airFMModCoilFluidVlvPos => '1.3.6.1.4.1.318.1.1.13.1.5.4.2.1.9',
    airFMModHumidity => '1.3.6.1.4.1.318.1.1.13.1.5.5',
    airFMModHumTableSize => '1.3.6.1.4.1.318.1.1.13.1.5.5.1.0',
    airFMModHumTable => '1.3.6.1.4.1.318.1.1.13.1.5.5.2',
    airFMModHumEntry => '1.3.6.1.4.1.318.1.1.13.1.5.5.2.1',
    airFMModHumModuleIndex => '1.3.6.1.4.1.318.1.1.13.1.5.5.2.1.1',
    airFMModHumidifier => '1.3.6.1.4.1.318.1.1.13.1.5.5.2.1.2',
    airFMModElectrodeCurrent => '1.3.6.1.4.1.318.1.1.13.1.5.5.2.1.3',
    airFMModHumActualOutput => '1.3.6.1.4.1.318.1.1.13.1.5.5.2.1.4',
    airFMModWaterConductivity => '1.3.6.1.4.1.318.1.1.13.1.5.5.2.1.5',
    airFMModHotWaterVlvPos => '1.3.6.1.4.1.318.1.1.13.1.5.5.2.1.6',
    airFMModStmElectHumMode => '1.3.6.1.4.1.318.1.1.13.1.5.5.2.1.7',
    airFMModBlower1 => '1.3.6.1.4.1.318.1.1.13.1.5.6',
    airFMModBlwr1TableSize => '1.3.6.1.4.1.318.1.1.13.1.5.6.1.0',
    airFMModBlwr1Table => '1.3.6.1.4.1.318.1.1.13.1.5.6.2',
    airFMModBlwr1Entry => '1.3.6.1.4.1.318.1.1.13.1.5.6.2.1',
    airFMModBlwr1ModuleIndex => '1.3.6.1.4.1.318.1.1.13.1.5.6.2.1.1',
    airFMModBlwr1CtrlType => '1.3.6.1.4.1.318.1.1.13.1.5.6.2.1.2',
    airFMModBlwr1CmdFreq => '1.3.6.1.4.1.318.1.1.13.1.5.6.2.1.3',
    airFMModBlwr1ActFreq => '1.3.6.1.4.1.318.1.1.13.1.5.6.2.1.4',
    airFMModBlwr1Poles => '1.3.6.1.4.1.318.1.1.13.1.5.6.2.1.5',
    airFMModBlwr1RatedHorsePower => '1.3.6.1.4.1.318.1.1.13.1.5.6.2.1.6',
    airFMModBlwr1RatedCurrent => '1.3.6.1.4.1.318.1.1.13.1.5.6.2.1.7',
    airFMModBlwr1ActTorq => '1.3.6.1.4.1.318.1.1.13.1.5.6.2.1.8',
    airFMModBlwr1Current => '1.3.6.1.4.1.318.1.1.13.1.5.6.2.1.9',
    airFMModBlwr1Vlt => '1.3.6.1.4.1.318.1.1.13.1.5.6.2.1.10',
    airFMModBlwr1DCLinkVlt => '1.3.6.1.4.1.318.1.1.13.1.5.6.2.1.11',
    airFMModBlwr1AccTime => '1.3.6.1.4.1.318.1.1.13.1.5.6.2.1.12',
    airFMModBlwr1DecTime => '1.3.6.1.4.1.318.1.1.13.1.5.6.2.1.13',
    airFMModBlwr1CapLife => '1.3.6.1.4.1.318.1.1.13.1.5.6.2.1.14',
    airFMModBlwr1CtrlCoolFanLife => '1.3.6.1.4.1.318.1.1.13.1.5.6.2.1.15',
    airFMModBlwr1ElOvMode => '1.3.6.1.4.1.318.1.1.13.1.5.6.2.1.16',
    airFMModBlwr1ElOvSetting => '1.3.6.1.4.1.318.1.1.13.1.5.6.2.1.17',
    airFMModBlwr1ElOvTimeConst => '1.3.6.1.4.1.318.1.1.13.1.5.6.2.1.18',
    airFMModBlwr1FanPower => '1.3.6.1.4.1.318.1.1.13.1.5.6.2.1.19',
    airFMModBlwr1HeatsinkTempC => '1.3.6.1.4.1.318.1.1.13.1.5.6.2.1.20',
    airFMModBlwr1HeatsinkTempF => '1.3.6.1.4.1.318.1.1.13.1.5.6.2.1.21',
    airFMModBlwr1ChokeTempC => '1.3.6.1.4.1.318.1.1.13.1.5.6.2.1.22',
    airFMModBlwr1ChokeTempF => '1.3.6.1.4.1.318.1.1.13.1.5.6.2.1.23',
    airFMModBlwr1InverterTempC => '1.3.6.1.4.1.318.1.1.13.1.5.6.2.1.24',
    airFMModBlwr1InverterTempF => '1.3.6.1.4.1.318.1.1.13.1.5.6.2.1.25',
    airFMModBlower2 => '1.3.6.1.4.1.318.1.1.13.1.5.7',
    airFMModBlwr2TableSize => '1.3.6.1.4.1.318.1.1.13.1.5.7.1.0',
    airFMModBlwr2Table => '1.3.6.1.4.1.318.1.1.13.1.5.7.2',
    airFMModBlwr2Entry => '1.3.6.1.4.1.318.1.1.13.1.5.7.2.1',
    airFMModBlwr2ModuleIndex => '1.3.6.1.4.1.318.1.1.13.1.5.7.2.1.1',
    airFMModBlwr2CtrlType => '1.3.6.1.4.1.318.1.1.13.1.5.7.2.1.2',
    airFMModBlwr2CmdFreq => '1.3.6.1.4.1.318.1.1.13.1.5.7.2.1.3',
    airFMModBlwr2ActFreq => '1.3.6.1.4.1.318.1.1.13.1.5.7.2.1.4',
    airFMModBlwr2Poles => '1.3.6.1.4.1.318.1.1.13.1.5.7.2.1.5',
    airFMModBlwr2RatedHorsePower => '1.3.6.1.4.1.318.1.1.13.1.5.7.2.1.6',
    airFMModBlwr2RatedCurrent => '1.3.6.1.4.1.318.1.1.13.1.5.7.2.1.7',
    airFMModBlwr2ActTorq => '1.3.6.1.4.1.318.1.1.13.1.5.7.2.1.8',
    airFMModBlwr2Current => '1.3.6.1.4.1.318.1.1.13.1.5.7.2.1.9',
    airFMModBlwr2Vlt => '1.3.6.1.4.1.318.1.1.13.1.5.7.2.1.10',
    airFMModBlwr2DCLinkVlt => '1.3.6.1.4.1.318.1.1.13.1.5.7.2.1.11',
    airFMModBlwr2AccTime => '1.3.6.1.4.1.318.1.1.13.1.5.7.2.1.12',
    airFMModBlwr2DecTime => '1.3.6.1.4.1.318.1.1.13.1.5.7.2.1.13',
    airFMModBlwr2CapLife => '1.3.6.1.4.1.318.1.1.13.1.5.7.2.1.14',
    airFMModBlwr2CtrlCoolFanLife => '1.3.6.1.4.1.318.1.1.13.1.5.7.2.1.15',
    airFMModBlwr2ElOvMode => '1.3.6.1.4.1.318.1.1.13.1.5.7.2.1.16',
    airFMModBlwr2ElOvSetting => '1.3.6.1.4.1.318.1.1.13.1.5.7.2.1.17',
    airFMModBlwr2ElOvTimeConst => '1.3.6.1.4.1.318.1.1.13.1.5.7.2.1.18',
    airFMModBlwr2FanPower => '1.3.6.1.4.1.318.1.1.13.1.5.7.2.1.19',
    airFMModBlwr2HeatsinkTempC => '1.3.6.1.4.1.318.1.1.13.1.5.7.2.1.20',
    airFMModBlwr2HeatsinkTempF => '1.3.6.1.4.1.318.1.1.13.1.5.7.2.1.21',
    airFMModBlwr2ChokeTempC => '1.3.6.1.4.1.318.1.1.13.1.5.7.2.1.22',
    airFMModBlwr2ChokeTempF => '1.3.6.1.4.1.318.1.1.13.1.5.7.2.1.23',
    airFMModBlwr2InverterTempC => '1.3.6.1.4.1.318.1.1.13.1.5.7.2.1.24',
    airFMModBlwr2InverterTempF => '1.3.6.1.4.1.318.1.1.13.1.5.7.2.1.25',
    airFMModRunHours => '1.3.6.1.4.1.318.1.1.13.1.5.8',
    airFMModRHTableSize => '1.3.6.1.4.1.318.1.1.13.1.5.8.1.0',
    airFMModRHTable => '1.3.6.1.4.1.318.1.1.13.1.5.8.2',
    airFMModRHEntry => '1.3.6.1.4.1.318.1.1.13.1.5.8.2.1',
    airFMModRHModuleIndex => '1.3.6.1.4.1.318.1.1.13.1.5.8.2.1.1',
    airFMModRHComp1 => '1.3.6.1.4.1.318.1.1.13.1.5.8.2.1.2',
    airFMModRHComp2 => '1.3.6.1.4.1.318.1.1.13.1.5.8.2.1.3',
    airFMModRHHeater => '1.3.6.1.4.1.318.1.1.13.1.5.8.2.1.4',
    airFMModRHHum => '1.3.6.1.4.1.318.1.1.13.1.5.8.2.1.5',
    airFMModRHBlwr1 => '1.3.6.1.4.1.318.1.1.13.1.5.8.2.1.6',
    airFMModRHBlwr2 => '1.3.6.1.4.1.318.1.1.13.1.5.8.2.1.7',
    airFMModRHBlwrCtrl1 => '1.3.6.1.4.1.318.1.1.13.1.5.8.2.1.8',
    airFMModRHBlwrCtrl2 => '1.3.6.1.4.1.318.1.1.13.1.5.8.2.1.9',
    airFMModRHComp1Reset => '1.3.6.1.4.1.318.1.1.13.1.5.8.2.1.10',
    airFMModRHComp2Reset => '1.3.6.1.4.1.318.1.1.13.1.5.8.2.1.11',
    airFMModRHHeaterReset => '1.3.6.1.4.1.318.1.1.13.1.5.8.2.1.12',
    airFMModRHHumReset => '1.3.6.1.4.1.318.1.1.13.1.5.8.2.1.13',
    airFMModRHBlwr1Reset => '1.3.6.1.4.1.318.1.1.13.1.5.8.2.1.14',
    airFMModRHBlwr2Reset => '1.3.6.1.4.1.318.1.1.13.1.5.8.2.1.15',
    airFMModServIntervals => '1.3.6.1.4.1.318.1.1.13.1.5.9',
    airFMModServIntComp1 => '1.3.6.1.4.1.318.1.1.13.1.5.9.1.0',
    airFMModServIntComp2 => '1.3.6.1.4.1.318.1.1.13.1.5.9.2.0',
    airFMModServIntHeater => '1.3.6.1.4.1.318.1.1.13.1.5.9.3.0',
    airFMModServIntHum => '1.3.6.1.4.1.318.1.1.13.1.5.9.4.0',
    airFMModServIntBlwr1 => '1.3.6.1.4.1.318.1.1.13.1.5.9.5.0',
    airFMModServIntBlwr2 => '1.3.6.1.4.1.318.1.1.13.1.5.9.6.0',
    airFMModServIntBlwrCtrl1 => '1.3.6.1.4.1.318.1.1.13.1.5.9.7.0',
    airFMModServIntBlwrCtrl2 => '1.3.6.1.4.1.318.1.1.13.1.5.9.8.0',
    airFMModServIntResets => '1.3.6.1.4.1.318.1.1.13.1.5.10',
    airFMModServIntResetTableSize => '1.3.6.1.4.1.318.1.1.13.1.5.10.1.0',
    airFMModServIntResetTable => '1.3.6.1.4.1.318.1.1.13.1.5.10.2',
    airFMModServIntResetEntry => '1.3.6.1.4.1.318.1.1.13.1.5.10.2.1',
    airFMModServIntResetModuleIndex => '1.3.6.1.4.1.318.1.1.13.1.5.10.2.1.1',
    airFMModServIntComp1Reset => '1.3.6.1.4.1.318.1.1.13.1.5.10.2.1.2',
    airFMModServIntComp2Reset => '1.3.6.1.4.1.318.1.1.13.1.5.10.2.1.3',
    airFMModServIntHeaterReset => '1.3.6.1.4.1.318.1.1.13.1.5.10.2.1.4',
    airFMModServIntHumReset => '1.3.6.1.4.1.318.1.1.13.1.5.10.2.1.5',
    airFMModServIntBlwr1Reset => '1.3.6.1.4.1.318.1.1.13.1.5.10.2.1.6',
    airFMModServIntBlwr2Reset => '1.3.6.1.4.1.318.1.1.13.1.5.10.2.1.7',
    airFMModServIntBlwrCtrl1Reset => '1.3.6.1.4.1.318.1.1.13.1.5.10.2.1.8',
    airFMModServIntBlwrCtrl2Reset => '1.3.6.1.4.1.318.1.1.13.1.5.10.2.1.9',
    airFMAlarms => '1.3.6.1.4.1.318.1.1.13.1.6',
    airFMAlarmClearActiveGroupAlarms => '1.3.6.1.4.1.318.1.1.13.1.6.1.0',
    airFMAlarmClearActiveSysModAlarms => '1.3.6.1.4.1.318.1.1.13.1.6.2.0',
    airFMAlarmConditionsTableSize => '1.3.6.1.4.1.318.1.1.13.1.6.3.0',
    airFMAlarmConditionsTable => '1.3.6.1.4.1.318.1.1.13.1.6.4',
    airFMAlarmConditionsEntry => '1.3.6.1.4.1.318.1.1.13.1.6.4.1',
    airFMAlarmConditionsIndex => '1.3.6.1.4.1.318.1.1.13.1.6.4.1.1',
    airFMAlarmSeverity => '1.3.6.1.4.1.318.1.1.13.1.6.4.1.2',
    airFMAlarmType => '1.3.6.1.4.1.318.1.1.13.1.6.4.1.3',
    airFMEventCode => '1.3.6.1.4.1.318.1.1.13.1.6.4.1.4',
    airFMAlarmDate => '1.3.6.1.4.1.318.1.1.13.1.6.4.1.5',
    airFMAlarmTime => '1.3.6.1.4.1.318.1.1.13.1.6.4.1.6',
    airFMAlarmDescription => '1.3.6.1.4.1.318.1.1.13.1.6.4.1.7',
    airPAIdent => '1.3.6.1.4.1.318.1.1.13.2.1',
    airPAIdentName => '1.3.6.1.4.1.318.1.1.13.2.1.1.0',
    airPAModelNumber => '1.3.6.1.4.1.318.1.1.13.2.1.2.0',
    airPADateOfManufacture => '1.3.6.1.4.1.318.1.1.13.2.1.3.0',
    airPASerialNumber => '1.3.6.1.4.1.318.1.1.13.2.1.4.0',
    airPAFirmwareRevision => '1.3.6.1.4.1.318.1.1.13.2.1.5.0',
    airPAHardwareRevision => '1.3.6.1.4.1.318.1.1.13.2.1.6.0',
    airPAStatus => '1.3.6.1.4.1.318.1.1.13.2.2',
    airPASystemPower => '1.3.6.1.4.1.318.1.1.13.2.2.1.0',
    airPAOperatingMode => '1.3.6.1.4.1.318.1.1.13.2.2.2.0',
    airPASetpointTempF => '1.3.6.1.4.1.318.1.1.13.2.2.3.0',
    airPASetpointTempC => '1.3.6.1.4.1.318.1.1.13.2.2.4.0',
    airPABlowerSpeed => '1.3.6.1.4.1.318.1.1.13.2.2.5.0',
    airPACompressor => '1.3.6.1.4.1.318.1.1.13.2.2.6.0',
    airPACondenserFan => '1.3.6.1.4.1.318.1.1.13.2.2.7.0',
    airPACondensatePump => '1.3.6.1.4.1.318.1.1.13.2.2.8.0',
    airPASupplyTempF => '1.3.6.1.4.1.318.1.1.13.2.2.9.0',
    airPASupplyTempC => '1.3.6.1.4.1.318.1.1.13.2.2.10.0',
    airPAReturnTempF => '1.3.6.1.4.1.318.1.1.13.2.2.11.0',
    airPAReturnTempC => '1.3.6.1.4.1.318.1.1.13.2.2.12.0',
    airPARemoteTempF => '1.3.6.1.4.1.318.1.1.13.2.2.13.0',
    airPARemoteTempC => '1.3.6.1.4.1.318.1.1.13.2.2.14.0',
    airPARemoteHumidity => '1.3.6.1.4.1.318.1.1.13.2.2.15.0',
    airIRAlarms => '1.3.6.1.4.1.318.1.1.13.3.1',
    airIRAlarmConditionsTableSize => '1.3.6.1.4.1.318.1.1.13.3.1.1.0',
    airIRAlarmConditionsTable => '1.3.6.1.4.1.318.1.1.13.3.1.2',
    airIRAlarmConditionsEntry => '1.3.6.1.4.1.318.1.1.13.3.1.2.1',
    airIRAlarmConditionsIndex => '1.3.6.1.4.1.318.1.1.13.3.1.2.1.1',
    airIREventCode => '1.3.6.1.4.1.318.1.1.13.3.1.2.1.2',
    airIRAlarmDescription => '1.3.6.1.4.1.318.1.1.13.3.1.2.1.3',
    airIRRCGroupStatus => '1.3.6.1.4.1.318.1.1.13.3.2.1.1',
    airIRRCGroupStatusCoolOutput => '1.3.6.1.4.1.318.1.1.13.3.2.1.1.1.0',
    airIRRCGroupStatusCoolDemand => '1.3.6.1.4.1.318.1.1.13.3.2.1.1.2.0',
    airIRRCGroupStatusAirFlowUS => '1.3.6.1.4.1.318.1.1.13.3.2.1.1.3.0',
    airIRRCGroupStatusAirFlowMetric => '1.3.6.1.4.1.318.1.1.13.3.2.1.1.4.0',
    airIRRCGroupStatusMaxRackInletTempUS => '1.3.6.1.4.1.318.1.1.13.3.2.1.1.5.0',
    airIRRCGroupStatusMaxRackInletTempMetric => '1.3.6.1.4.1.318.1.1.13.3.2.1.1.6.0',
    airIRRCGroupStatusMinRackInletTempUS => '1.3.6.1.4.1.318.1.1.13.3.2.1.1.7.0',
    airIRRCGroupStatusMinRackInletTempMetric => '1.3.6.1.4.1.318.1.1.13.3.2.1.1.8.0',
    airIRRCGroupSetpoints => '1.3.6.1.4.1.318.1.1.13.3.2.1.2',
    airIRRCGroupSetpointsCoolUS => '1.3.6.1.4.1.318.1.1.13.3.2.1.2.1.0',
    airIRRCGroupSetpointsCoolMetric => '1.3.6.1.4.1.318.1.1.13.3.2.1.2.2.0',
    airIRRCGroupSetpointsSupplyAirUS => '1.3.6.1.4.1.318.1.1.13.3.2.1.2.3.0',
    airIRRCGroupSetpointsSupplyAirMetric => '1.3.6.1.4.1.318.1.1.13.3.2.1.2.4.0',
    airIRRCGroupSetpointsFanSpeedPreference => '1.3.6.1.4.1.318.1.1.13.3.2.1.2.5.0',
    airIRRCGroupConfig => '1.3.6.1.4.1.318.1.1.13.3.2.1.3',
    airIRRCGroupConfigNumberofCoolingUnits => '1.3.6.1.4.1.318.1.1.13.3.2.1.3.1.0',
    airIRRCGroupConfigConfigurationType => '1.3.6.1.4.1.318.1.1.13.3.2.1.3.2.0',
    airIRRCGroupConfigPctGlycol => '1.3.6.1.4.1.318.1.1.13.3.2.1.3.3.0',
    airIRRCGroupConfigCoolGainP => '1.3.6.1.4.1.318.1.1.13.3.2.1.3.4.0',
    airIRRCGroupConfigCoolResetRateI => '1.3.6.1.4.1.318.1.1.13.3.2.1.3.5.0',
    airIRRCGroupConfigCoolDerivativeD => '1.3.6.1.4.1.318.1.1.13.3.2.1.3.6.0',
    airIRRCGroupConfigMaxFanSpeed => '1.3.6.1.4.1.318.1.1.13.3.2.1.3.7.0',
    airIRRCUnitStatus => '1.3.6.1.4.1.318.1.1.13.3.2.2.2',
    airIRRCUnitStatusOperateMode => '1.3.6.1.4.1.318.1.1.13.3.2.2.2.1.0',
    airIRRCUnitStatusCoolOutput => '1.3.6.1.4.1.318.1.1.13.3.2.2.2.2.0',
    airIRRCUnitStatusCoolDemand => '1.3.6.1.4.1.318.1.1.13.3.2.2.2.3.0',
    airIRRCUnitStatusAirFlowUS => '1.3.6.1.4.1.318.1.1.13.3.2.2.2.4.0',
    airIRRCUnitStatusAirFlowMetric => '1.3.6.1.4.1.318.1.1.13.3.2.2.2.5.0',
    airIRRCUnitStatusRackInletTempUS => '1.3.6.1.4.1.318.1.1.13.3.2.2.2.6.0',
    airIRRCUnitStatusRackInletTempMetric => '1.3.6.1.4.1.318.1.1.13.3.2.2.2.7.0',
    airIRRCUnitStatusSupplyAirTempUS => '1.3.6.1.4.1.318.1.1.13.3.2.2.2.8.0',
    airIRRCUnitStatusSupplyAirTempMetric => '1.3.6.1.4.1.318.1.1.13.3.2.2.2.9.0',
    airIRRCUnitStatusReturnAirTempUS => '1.3.6.1.4.1.318.1.1.13.3.2.2.2.10.0',
    airIRRCUnitStatusReturnAirTempMetric => '1.3.6.1.4.1.318.1.1.13.3.2.2.2.11.0',
    airIRRCUnitStatusContainmtDPUS => '1.3.6.1.4.1.318.1.1.13.3.2.2.2.12.0',
    airIRRCUnitStatusContainmtDPMetric => '1.3.6.1.4.1.318.1.1.13.3.2.2.2.13.0',
    airIRRCUnitStatusFilterDPUS => '1.3.6.1.4.1.318.1.1.13.3.2.2.2.14.0',
    airIRRCUnitStatusFilterDPMetric => '1.3.6.1.4.1.318.1.1.13.3.2.2.2.15.0',
    airIRRCUnitStatusFanSpeed => '1.3.6.1.4.1.318.1.1.13.3.2.2.2.16.0',
    airIRRCUnitStatusInputState => '1.3.6.1.4.1.318.1.1.13.3.2.2.2.17.0',
    airIRRCUnitStatusOutputState => '1.3.6.1.4.1.318.1.1.13.3.2.2.2.18.0',
    airIRRCUnitStatusActivePowerSource => '1.3.6.1.4.1.318.1.1.13.3.2.2.2.19.0',
    airIRRCUnitStatusFluidValvePosition => '1.3.6.1.4.1.318.1.1.13.3.2.2.2.20.0',
    airIRRCUnitStatusFluidFlowUS => '1.3.6.1.4.1.318.1.1.13.3.2.2.2.21.0',
    airIRRCUnitStatusFluidFlowMetric => '1.3.6.1.4.1.318.1.1.13.3.2.2.2.22.0',
    airIRRCUnitStatusEnteringFluidTemperatureUS => '1.3.6.1.4.1.318.1.1.13.3.2.2.2.23.0',
    airIRRCUnitStatusEnteringFluidTemperatureMetric => '1.3.6.1.4.1.318.1.1.13.3.2.2.2.24.0',
    airIRRCUnitStatusLeavingFluidTemperatureUS => '1.3.6.1.4.1.318.1.1.13.3.2.2.2.25.0',
    airIRRCUnitStatusLeavingFluidTemperatureMetric => '1.3.6.1.4.1.318.1.1.13.3.2.2.2.26.0',
    airIRRCUnitIdent => '1.3.6.1.4.1.318.1.1.13.3.2.2.1',
    airIRRCUnitIdentID => '1.3.6.1.4.1.318.1.1.13.3.2.2.1.1.0',
    airIRRCUnitIdentName => '1.3.6.1.4.1.318.1.1.13.3.2.2.1.2.0',
    airIRRCUnitIdentLocation => '1.3.6.1.4.1.318.1.1.13.3.2.2.1.3.0',
    airIRRCUnitIdentModelNumber => '1.3.6.1.4.1.318.1.1.13.3.2.2.1.4.0',
    airIRRCUnitIdentSerialNumber => '1.3.6.1.4.1.318.1.1.13.3.2.2.1.5.0',
    airIRRCUnitIdentFirmwareRevision => '1.3.6.1.4.1.318.1.1.13.3.2.2.1.6.0',
    airIRRCUnitIdentHardwareRevision => '1.3.6.1.4.1.318.1.1.13.3.2.2.1.7.0',
    airIRRCUnitIdentManufactureDate => '1.3.6.1.4.1.318.1.1.13.3.2.2.1.8.0',
    airIRRCUnitRunHours => '1.3.6.1.4.1.318.1.1.13.3.2.2.3',
    airIRRCUnitRunHoursAirFilter => '1.3.6.1.4.1.318.1.1.13.3.2.2.3.1.0',
    airIRRCUnitRunHoursFan1 => '1.3.6.1.4.1.318.1.1.13.3.2.2.3.2.0',
    airIRRCUnitRunHoursFan2 => '1.3.6.1.4.1.318.1.1.13.3.2.2.3.3.0',
    airIRRCUnitRunHoursFan3 => '1.3.6.1.4.1.318.1.1.13.3.2.2.3.4.0',
    airIRRCUnitRunHoursFan4 => '1.3.6.1.4.1.318.1.1.13.3.2.2.3.5.0',
    airIRRCUnitRunHoursFan5 => '1.3.6.1.4.1.318.1.1.13.3.2.2.3.6.0',
    airIRRCUnitRunHoursFan6 => '1.3.6.1.4.1.318.1.1.13.3.2.2.3.7.0',
    airIRRCUnitRunHoursFan7 => '1.3.6.1.4.1.318.1.1.13.3.2.2.3.8.0',
    airIRRCUnitRunHoursFan8 => '1.3.6.1.4.1.318.1.1.13.3.2.2.3.9.0',
    airIRRCUnitRunHoursFanPowerSupplyLeft => '1.3.6.1.4.1.318.1.1.13.3.2.2.3.10.0',
    airIRRCUnitRunHoursFanPowerSupplyRight => '1.3.6.1.4.1.318.1.1.13.3.2.2.3.11.0',
    airIRRCUnitRunHoursCondensatePump => '1.3.6.1.4.1.318.1.1.13.3.2.2.3.12.0',
    airIRRCUnitServiceIntervals => '1.3.6.1.4.1.318.1.1.13.3.2.2.4',
    airIRRCUnitServiceIntervalsAirFilter => '1.3.6.1.4.1.318.1.1.13.3.2.2.4.1.0',
    airIRRCUnitServiceIntervalsAirFilterAlarm => '1.3.6.1.4.1.318.1.1.13.3.2.2.4.2.0',
    airIRRCUnitThresholds => '1.3.6.1.4.1.318.1.1.13.3.2.2.5',
    airIRRCUnitThresholdsRackInletHighTempUS => '1.3.6.1.4.1.318.1.1.13.3.2.2.5.1.0',
    airIRRCUnitThresholdsRackInletHighTempMetric => '1.3.6.1.4.1.318.1.1.13.3.2.2.5.2.0',
    airIRRCUnitThresholdsSupplyAirHighTempUS => '1.3.6.1.4.1.318.1.1.13.3.2.2.5.3.0',
    airIRRCUnitThresholdsSupplyAirHighTempMetric => '1.3.6.1.4.1.318.1.1.13.3.2.2.5.4.0',
    airIRRCUnitThresholdsReturnAirHighTempUS => '1.3.6.1.4.1.318.1.1.13.3.2.2.5.5.0',
    airIRRCUnitThresholdsReturnAirHighTempMetric => '1.3.6.1.4.1.318.1.1.13.3.2.2.5.6.0',
    airIRRCUnitThresholdsEnteringFluidHighTempUS => '1.3.6.1.4.1.318.1.1.13.3.2.2.5.7.0',
    airIRRCUnitThresholdsEnteringFluidHighTempMetric => '1.3.6.1.4.1.318.1.1.13.3.2.2.5.8.0',
    airIRRCUnitConfig => '1.3.6.1.4.1.318.1.1.13.3.2.2.6',
    airIRRCUnitConfigCoolCapacity => '1.3.6.1.4.1.318.1.1.13.3.2.2.6.1.0',
    airIRRCUnitConfigStartupDelay => '1.3.6.1.4.1.318.1.1.13.3.2.2.6.2.0',
    airIRRCUnitConfigIdleOnLeakDetect => '1.3.6.1.4.1.318.1.1.13.3.2.2.6.3.0',
    airIRRCUnitConfigPowerSource => '1.3.6.1.4.1.318.1.1.13.3.2.2.6.4.0',
    airIRRCUnitConfigInputNormalState => '1.3.6.1.4.1.318.1.1.13.3.2.2.6.5.0',
    airIRRCUnitConfigOutputNormalState => '1.3.6.1.4.1.318.1.1.13.3.2.2.6.6.0',
    airIRRCUnitConfigOutputSource => '1.3.6.1.4.1.318.1.1.13.3.2.2.6.7.0',
    airIRRP100GroupStatus => '1.3.6.1.4.1.318.1.1.13.3.3.1.1.1',
    airIRRP100GroupStatusAirFlowUS => '1.3.6.1.4.1.318.1.1.13.3.3.1.1.1.1.0',
    airIRRP100GroupStatusAirFlowMetric => '1.3.6.1.4.1.318.1.1.13.3.3.1.1.1.2.0',
    airIRRP100GroupStatusMaxRackInletTempUS => '1.3.6.1.4.1.318.1.1.13.3.3.1.1.1.3.0',
    airIRRP100GroupStatusMaxRackInletTempMetric => '1.3.6.1.4.1.318.1.1.13.3.3.1.1.1.4.0',
    airIRRP100GroupStatusMinRackInletTempUS => '1.3.6.1.4.1.318.1.1.13.3.3.1.1.1.5.0',
    airIRRP100GroupStatusMinRackInletTempMetric => '1.3.6.1.4.1.318.1.1.13.3.3.1.1.1.6.0',
    airIRRP100GroupStatusCoolDemand => '1.3.6.1.4.1.318.1.1.13.3.3.1.1.1.7.0',
    airIRRP100GroupStatusCoolOutput => '1.3.6.1.4.1.318.1.1.13.3.3.1.1.1.8.0',
    airIRRP100GroupStatusHumidifyDemand => '1.3.6.1.4.1.318.1.1.13.3.3.1.1.1.9.0',
    airIRRP100GroupStatusHumidifyOutput => '1.3.6.1.4.1.318.1.1.13.3.3.1.1.1.10.0',
    airIRRP100GroupStatusDehumidifyDemand => '1.3.6.1.4.1.318.1.1.13.3.3.1.1.1.11.0',
    airIRRP100GroupStatusDehumidifyOutput => '1.3.6.1.4.1.318.1.1.13.3.3.1.1.1.12.0',
    airIRRP100GroupStatusReheatDemand => '1.3.6.1.4.1.318.1.1.13.3.3.1.1.1.13.0',
    airIRRP100GroupStatusReheatOutput => '1.3.6.1.4.1.318.1.1.13.3.3.1.1.1.14.0',
    airIRRP100GroupSetpoints => '1.3.6.1.4.1.318.1.1.13.3.3.1.1.2',
    airIRRP100GroupSetpointsCoolUS => '1.3.6.1.4.1.318.1.1.13.3.3.1.1.2.1.0',
    airIRRP100GroupSetpointsCoolMetric => '1.3.6.1.4.1.318.1.1.13.3.3.1.1.2.2.0',
    airIRRP100GroupSetpointsSupplyAirUS => '1.3.6.1.4.1.318.1.1.13.3.3.1.1.2.3.0',
    airIRRP100GroupSetpointsSupplyAirMetric => '1.3.6.1.4.1.318.1.1.13.3.3.1.1.2.4.0',
    airIRRP100GroupSetpointsHumidify => '1.3.6.1.4.1.318.1.1.13.3.3.1.1.2.5.0',
    airIRRP100GroupSetpointsDehumidify => '1.3.6.1.4.1.318.1.1.13.3.3.1.1.2.6.0',
    airIRRP100GroupSetpointsDehumidifyDeadband => '1.3.6.1.4.1.318.1.1.13.3.3.1.1.2.7.0',
    airIRRP100GroupSetpointsReheatUS => '1.3.6.1.4.1.318.1.1.13.3.3.1.1.2.8.0',
    airIRRP100GroupSetpointsReheatMetric => '1.3.6.1.4.1.318.1.1.13.3.3.1.1.2.9.0',
    airIRRP100GroupSetpointsFanSpeedPreference => '1.3.6.1.4.1.318.1.1.13.3.3.1.1.2.10.0',
    airIRRP100GroupSetpointsFanSpeedControl => '1.3.6.1.4.1.318.1.1.13.3.3.1.1.2.11.0',
    airIRRP100GroupConfig => '1.3.6.1.4.1.318.1.1.13.3.3.1.1.3',
    airIRRP100GroupConfigNumberofCoolingUnits => '1.3.6.1.4.1.318.1.1.13.3.3.1.1.3.1.0',
    airIRRP100GroupConfigConfigurationType => '1.3.6.1.4.1.318.1.1.13.3.3.1.1.3.2.0',
    airIRRP100GroupConfigCoolGainP => '1.3.6.1.4.1.318.1.1.13.3.3.1.1.3.3.0',
    airIRRP100GroupConfigCoolResetRateI => '1.3.6.1.4.1.318.1.1.13.3.3.1.1.3.4.0',
    airIRRP100GroupConfigCoolDerivativeD => '1.3.6.1.4.1.318.1.1.13.3.3.1.1.3.5.0',
    airIRRP100GroupConfigHumidifySensitivityBand => '1.3.6.1.4.1.318.1.1.13.3.3.1.1.3.6.0',
    airIRRP100GroupConfigReheatGainP => '1.3.6.1.4.1.318.1.1.13.3.3.1.1.3.7.0',
    airIRRP100GroupConfigReheatResetRateI => '1.3.6.1.4.1.318.1.1.13.3.3.1.1.3.8.0',
    airIRRP100GroupConfigReheatDerivativeD => '1.3.6.1.4.1.318.1.1.13.3.3.1.1.3.9.0',
    airIRRP100UnitStatus => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.2',
    airIRRP100UnitStatusOperateMode => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.2.1.0',
    airIRRP100UnitStatusRackInletTempUS => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.2.2.0',
    airIRRP100UnitStatusRackInletTempMetric => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.2.3.0',
    airIRRP100UnitStatusSupplyAirTempUS => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.2.4.0',
    airIRRP100UnitStatusSupplyAirTempMetric => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.2.5.0',
    airIRRP100UnitStatusReturnAirTempUS => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.2.6.0',
    airIRRP100UnitStatusReturnAirTempMetric => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.2.7.0',
    airIRRP100UnitStatusSupplyHumidity => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.2.8.0',
    airIRRP100UnitStatusReturnHumidity => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.2.9.0',
    airIRRP100UnitStatusAirFlowUS => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.2.10.0',
    airIRRP100UnitStatusAirFlowMetric => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.2.11.0',
    airIRRP100UnitStatusFanSpeed => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.2.12.0',
    airIRRP100UnitStatusCoolDemand => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.2.13.0',
    airIRRP100UnitStatusCoolOutput => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.2.14.0',
    airIRRP100UnitStatusHumidifyDemand => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.2.15.0',
    airIRRP100UnitStatusHumidifyOutput => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.2.16.0',
    airIRRP100UnitStatusDehumidifyDemand => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.2.17.0',
    airIRRP100UnitStatusDehumidifyOutput => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.2.18.0',
    airIRRP100UnitStatusReheatDemand => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.2.19.0',
    airIRRP100UnitStatusReheatOutput => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.2.20.0',
    airIRRP100UnitStatusInputState => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.2.21.0',
    airIRRP100UnitStatusOutputState => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.2.22.0',
    airIRRP100UnitStatusRackInletTemperature1US => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.2.23.0',
    airIRRP100UnitStatusRackInletTemperature1Metric => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.2.24.0',
    airIRRP100UnitStatusRackInletTemperature2US => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.2.25.0',
    airIRRP100UnitStatusRackInletTemperature2Metric => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.2.26.0',
    airIRRP100UnitStatusRackInletTemperature3US => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.2.27.0',
    airIRRP100UnitStatusRackInletTemperature3Metric => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.2.28.0',
    airIRRP100UnitStatusFilterDPUS => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.2.29.0',
    airIRRP100UnitStatusFilterDPMetric => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.2.30.0',
    airIRRP100UnitStatusContainmtDPUS => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.2.31.0',
    airIRRP100UnitStatusContainmtDPMetric => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.2.32.0',
    airIRRP100UnitStatusHumidifierCurrent => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.2.33.0',
    airIRRP100UnitStatusHumidifierWaterConductivity => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.2.34.0',
    airIRRP100UnitStatusCompressorDriveSpeed => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.2.35.0',
    airIRRP100UnitStatusCompressorDrivePower => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.2.36.0',
    airIRRP100UnitStatusCompressorDriveVoltage => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.2.37.0',
    airIRRP100UnitStatusCompressorDriveCurrent => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.2.38.0',
    airIRRP100UnitStatusCompressorDriveDCLinkVoltage => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.2.39.0',
    airIRRP100UnitStatusCompressorDriveHeatSinkTempUS => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.2.40.0',
    airIRRP100UnitStatusCompressorDriveHeatSinkTempMetric => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.2.41.0',
    airIRRP100UnitStatusCompressorDriveControlCardTempUS => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.2.42.0',
    airIRRP100UnitStatusCompressorDriveControlCardTempMetric => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.2.43.0',
    airIRRP100UnitStatusCompressorDriveWarningStatus => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.2.44.0',
    airIRRP100UnitStatusCompressorDriveAlarmStatus => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.2.45.0',
    airIRRP100UnitStatusSuctionPressureUS => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.2.46.0',
    airIRRP100UnitStatusSuctionPressureMetric => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.2.47.0',
    airIRRP100UnitStatusDischargePressureUS => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.2.48.0',
    airIRRP100UnitStatusDischargePressureMetric => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.2.49.0',
    airIRRP100UnitIdent => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.1',
    airIRRP100UnitIdentID => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.1.1.0',
    airIRRP100UnitIdentName => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.1.2.0',
    airIRRP100UnitIdentLocation => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.1.3.0',
    airIRRP100UnitIdentModelNumber => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.1.4.0',
    airIRRP100UnitIdentSerialNumber => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.1.5.0',
    airIRRP100UnitIdentFirmwareRevision => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.1.6.0',
    airIRRP100UnitIdentHardwareRevision => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.1.7.0',
    airIRRP100UnitIdentManufactureDate => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.1.8.0',
    airIRRP100UnitRunHours => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.3',
    airIRRP100UnitRunHoursAirFilter => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.3.1.0',
    airIRRP100UnitRunHoursCondensatePump => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.3.2.0',
    airIRRP100UnitRunHoursHumidifier => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.3.3.0',
    airIRRP100UnitRunHoursFan1 => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.3.4.0',
    airIRRP100UnitRunHoursHeater1 => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.3.5.0',
    airIRRP100UnitRunHoursFan2 => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.3.6.0',
    airIRRP100UnitRunHoursHeater2 => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.3.7.0',
    airIRRP100UnitRunHoursCompressor => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.3.8.0',
    airIRRP100UnitServiceIntervals => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.4',
    airIRRP100UnitServiceIntervalAirFilter => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.4.1.0',
    airIRRP100UnitServiceIntervalAirFilterAlarm => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.4.2.0',
    airIRRP100UnitServiceIntervalHumidifier => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.4.3.0',
    airIRRP100UnitServiceIntervalHumidifierAlarm => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.4.4.0',
    airIRRP100UnitServiceIntervalHeater => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.4.5.0',
    airIRRP100UnitServiceIntervalHeaterAlarm => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.4.6.0',
    airIRRP100UnitServiceIntervalCompressor => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.4.7.0',
    airIRRP100UnitServiceIntervalCompressorAlarm => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.4.8.0',
    airIRRP100UnitServiceIntervalCondensatePump => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.4.9.0',
    airIRRP100UnitServiceIntervalCondensatePumpAlarm => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.4.10.0',
    airIRRP100UnitServiceIntervalFans => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.4.11.0',
    airIRRP100UnitServiceIntervalFansAlarm => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.4.12.0',
    airIRRP100UnitThresholds => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.5',
    airIRRP100UnitThresholdsRackInletHighTempUS => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.5.1.0',
    airIRRP100UnitThresholdsRackInletHighTempMetric => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.5.2.0',
    airIRRP100UnitThresholdsSupplyAirHighTempUS => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.5.3.0',
    airIRRP100UnitThresholdsSupplyAirHighTempMetric => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.5.4.0',
    airIRRP100UnitThresholdsReturnAirHighTempUS => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.5.5.0',
    airIRRP100UnitThresholdsReturnAirHighTempMetric => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.5.6.0',
    airIRRP100UnitThresholdsSupplyHumidityHigh => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.5.7.0',
    airIRRP100UnitThresholdsSupplyHumidityLow => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.5.8.0',
    airIRRP100UnitConfig => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.6',
    airIRRP100UnitConfigStartupDelay => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.6.1.0',
    airIRRP100UnitConfigCoolCapacity => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.6.2.0',
    airIRRP100UnitConfigIdleOnLeakDetect => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.6.3.0',
    airIRRP100UnitConfigInputNormalState => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.6.4.0',
    airIRRP100UnitConfigOutputNormalState => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.6.5.0',
    airIRRP100UnitConfigOutputSource => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.6.6.0',
    airIRRP100UnitConfigHumidifyEnable => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.6.7.0',
    airIRRP100UnitConfigHumidifierControl => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.6.8.0',
    airIRRP100UnitConfigDehumidifyEnable => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.6.9.0',
    airIRRP100UnitConfigReheatEnable => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.6.10.0',
    airIRRP100UnitConfigHeatAssistEnable => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.6.11.0',
    airIRRP500GroupStatus => '1.3.6.1.4.1.318.1.1.13.3.3.2.1.1',
    airIRRP500GroupStatusAirFlowUS => '1.3.6.1.4.1.318.1.1.13.3.3.2.1.1.1.0',
    airIRRP500GroupStatusAirFlowMetric => '1.3.6.1.4.1.318.1.1.13.3.3.2.1.1.2.0',
    airIRRP500GroupStatusMaxRackInletTempUS => '1.3.6.1.4.1.318.1.1.13.3.3.2.1.1.3.0',
    airIRRP500GroupStatusMaxRackInletTempMetric => '1.3.6.1.4.1.318.1.1.13.3.3.2.1.1.4.0',
    airIRRP500GroupStatusMinRackInletTempUS => '1.3.6.1.4.1.318.1.1.13.3.3.2.1.1.5.0',
    airIRRP500GroupStatusMinRackInletTempMetric => '1.3.6.1.4.1.318.1.1.13.3.3.2.1.1.6.0',
    airIRRP500GroupStatusCoolDemand => '1.3.6.1.4.1.318.1.1.13.3.3.2.1.1.7.0',
    airIRRP500GroupStatusCoolOutput => '1.3.6.1.4.1.318.1.1.13.3.3.2.1.1.8.0',
    airIRRP500GroupStatusHumidifyDemand => '1.3.6.1.4.1.318.1.1.13.3.3.2.1.1.9.0',
    airIRRP500GroupStatusHumidifyOutput => '1.3.6.1.4.1.318.1.1.13.3.3.2.1.1.10.0',
    airIRRP500GroupStatusDehumidifyDemand => '1.3.6.1.4.1.318.1.1.13.3.3.2.1.1.11.0',
    airIRRP500GroupStatusDehumidifyOutput => '1.3.6.1.4.1.318.1.1.13.3.3.2.1.1.12.0',
    airIRRP500GroupStatusReheatDemand => '1.3.6.1.4.1.318.1.1.13.3.3.2.1.1.13.0',
    airIRRP500GroupStatusReheatOutput => '1.3.6.1.4.1.318.1.1.13.3.3.2.1.1.14.0',
    airIRRP500GroupSetpoints => '1.3.6.1.4.1.318.1.1.13.3.3.2.1.2',
    airIRRP500GroupSetpointsCoolUS => '1.3.6.1.4.1.318.1.1.13.3.3.2.1.2.1.0',
    airIRRP500GroupSetpointsCoolMetric => '1.3.6.1.4.1.318.1.1.13.3.3.2.1.2.2.0',
    airIRRP500GroupSetpointsSupplyAirUS => '1.3.6.1.4.1.318.1.1.13.3.3.2.1.2.3.0',
    airIRRP500GroupSetpointsSupplyAirMetric => '1.3.6.1.4.1.318.1.1.13.3.3.2.1.2.4.0',
    airIRRP500GroupSetpointsHumidify => '1.3.6.1.4.1.318.1.1.13.3.3.2.1.2.5.0',
    airIRRP500GroupSetpointsDehumidify => '1.3.6.1.4.1.318.1.1.13.3.3.2.1.2.6.0',
    airIRRP500GroupSetpointsDehumidifyDeadband => '1.3.6.1.4.1.318.1.1.13.3.3.2.1.2.7.0',
    airIRRP500GroupSetpointsReheatUS => '1.3.6.1.4.1.318.1.1.13.3.3.2.1.2.8.0',
    airIRRP500GroupSetpointsReheatMetric => '1.3.6.1.4.1.318.1.1.13.3.3.2.1.2.9.0',
    airIRRP500GroupSetpointsFanSpeedPreference => '1.3.6.1.4.1.318.1.1.13.3.3.2.1.2.10.0',
    airIRRP500GroupSetpointsFanSpeedControl => '1.3.6.1.4.1.318.1.1.13.3.3.2.1.2.11.0',
    airIRRP500GroupConfig => '1.3.6.1.4.1.318.1.1.13.3.3.2.1.3',
    airIRRP500GroupConfigNumberofCoolingUnits => '1.3.6.1.4.1.318.1.1.13.3.3.2.1.3.1.0',
    airIRRP500GroupConfigConfigurationType => '1.3.6.1.4.1.318.1.1.13.3.3.2.1.3.2.0',
    airIRRP500GroupConfigPercentGlycol => '1.3.6.1.4.1.318.1.1.13.3.3.2.1.3.3.0',
    airIRRP500GroupConfigCoolGainP => '1.3.6.1.4.1.318.1.1.13.3.3.2.1.3.4.0',
    airIRRP500GroupConfigCoolResetRateI => '1.3.6.1.4.1.318.1.1.13.3.3.2.1.3.5.0',
    airIRRP500GroupConfigCoolDerivativeD => '1.3.6.1.4.1.318.1.1.13.3.3.2.1.3.6.0',
    airIRRP500GroupConfigHumidifySensitivityBand => '1.3.6.1.4.1.318.1.1.13.3.3.2.1.3.7.0',
    airIRRP500GroupConfigReheatGainP => '1.3.6.1.4.1.318.1.1.13.3.3.2.1.3.8.0',
    airIRRP500GroupConfigReheatResetRateI => '1.3.6.1.4.1.318.1.1.13.3.3.2.1.3.9.0',
    airIRRP500GroupConfigReheatDerivativeD => '1.3.6.1.4.1.318.1.1.13.3.3.2.1.3.10.0',
    airIRRP500UnitStatus => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.2',
    airIRRP500UnitStatusOperateMode => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.2.1.0',
    airIRRP500UnitStatusMaximumRackInletTempUS => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.2.2.0',
    airIRRP500UnitStatusMaximumRackInletTempMetric => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.2.3.0',
    airIRRP500UnitStatusSupplyAirTempUS => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.2.4.0',
    airIRRP500UnitStatusSupplyAirTempMetric => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.2.5.0',
    airIRRP500UnitStatusReturnAirTempUS => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.2.6.0',
    airIRRP500UnitStatusReturnAirTempMetric => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.2.7.0',
    airIRRP500UnitStatusSupplyHumidity => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.2.8.0',
    airIRRP500UnitStatusReturnHumidity => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.2.9.0',
    airIRRP500UnitStatusAirFlowUS => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.2.10.0',
    airIRRP500UnitStatusAirFlowMetric => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.2.11.0',
    airIRRP500UnitStatusFanSpeed => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.2.12.0',
    airIRRP500UnitStatusCoolDemand => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.2.13.0',
    airIRRP500UnitStatusCoolOutput => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.2.14.0',
    airIRRP500UnitStatusHumidifyDemand => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.2.15.0',
    airIRRP500UnitStatusHumidifyOutput => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.2.16.0',
    airIRRP500UnitStatusDehumidifyDemand => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.2.17.0',
    airIRRP500UnitStatusDehumidifyOutput => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.2.18.0',
    airIRRP500UnitStatusReheatDemand => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.2.19.0',
    airIRRP500UnitStatusReheatOutput => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.2.20.0',
    airIRRP500UnitStatusInputState => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.2.21.0',
    airIRRP500UnitStatusOutputState => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.2.22.0',
    airIRRP500UnitStatusRackInletTemperature1US => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.2.23.0',
    airIRRP500UnitStatusRackInletTemperature1Metric => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.2.24.0',
    airIRRP500UnitStatusRackInletTemperature2US => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.2.25.0',
    airIRRP500UnitStatusRackInletTemperature2Metric => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.2.26.0',
    airIRRP500UnitStatusRackInletTemperature3US => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.2.27.0',
    airIRRP500UnitStatusRackInletTemperature3Metric => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.2.28.0',
    airIRRP500UnitStatusContainmtDPUS => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.2.29.0',
    airIRRP500UnitStatusContainmtDPMetric => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.2.30.0',
    airIRRP500UnitStatusFilterDPUS => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.2.31.0',
    airIRRP500UnitStatusFilterDPMetric => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.2.32.0',
    airIRRP500UnitStatusHumidifierCurrent => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.2.33.0',
    airIRRP500UnitStatusHumidifierWaterConductivity => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.2.34.0',
    airIRRP500UnitStatusActivePowerSource => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.2.35.0',
    airIRRP500UnitStatusFluidValvePosition => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.2.36.0',
    airIRRP500UnitStatusFluidFlowUS => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.2.37.0',
    airIRRP500UnitStatusFluidFlowMetric => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.2.38.0',
    airIRRP500UnitStatusEnteringFluidTemperatureUS => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.2.39.0',
    airIRRP500UnitStatusEnteringFluidTemperatureMetric => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.2.40.0',
    airIRRP500UnitStatusLeavingFluidTemperatureUS => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.2.41.0',
    airIRRP500UnitStatusLeavingFluidTemperatureMetric => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.2.42.0',
    airIRRP500UnitIdent => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.1',
    airIRRP500UnitIdentID => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.1.1.0',
    airIRRP500UnitIdentName => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.1.2.0',
    airIRRP500UnitIdentLocation => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.1.3.0',
    airIRRP500UnitIdentModelNumber => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.1.4.0',
    airIRRP500UnitIdentSerialNumber => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.1.5.0',
    airIRRP500UnitIdentFirmwareRevision => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.1.6.0',
    airIRRP500UnitIdentHardwareRevision => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.1.7.0',
    airIRRP500UnitIdentManufactureDate => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.1.8.0',
    airIRRP500UnitRunHours => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.3',
    airIRRP500UnitRunHoursAirFilter => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.3.1.0',
    airIRRP500UnitRunHoursCondensatePump => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.3.2.0',
    airIRRP500UnitRunHoursHumidifier => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.3.3.0',
    airIRRP500UnitRunHoursFan1 => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.3.4.0',
    airIRRP500UnitRunHoursHeater1 => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.3.5.0',
    airIRRP500UnitRunHoursFan2 => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.3.6.0',
    airIRRP500UnitRunHoursHeater2 => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.3.7.0',
    airIRRP500UnitRunHoursFan3 => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.3.8.0',
    airIRRP500UnitRunHoursHeater3 => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.3.9.0',
    airIRRP500UnitServiceIntervals => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.4',
    airIRRP500UnitServiceIntervalAirFilter => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.4.1.0',
    airIRRP500UnitServiceIntervalAirFilterAlarm => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.4.2.0',
    airIRRP500UnitServiceIntervalHumidifier => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.4.3.0',
    airIRRP500UnitServiceIntervalHumidifierAlarm => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.4.4.0',
    airIRRP500UnitServiceIntervalHeater => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.4.5.0',
    airIRRP500UnitServiceIntervalHeaterAlarm => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.4.6.0',
    airIRRP500UnitServiceIntervalCondensatePump => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.4.7.0',
    airIRRP500UnitServiceIntervalCondensatePumpAlarm => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.4.8.0',
    airIRRP500UnitServiceIntervalFans => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.4.9.0',
    airIRRP500UnitServiceIntervalFansAlarm => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.4.10.0',
    airIRRP500UnitThresholds => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.5',
    airIRRP500UnitThresholdsRackInletHighTempUS => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.5.1.0',
    airIRRP500UnitThresholdsRackInletHighTempMetric => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.5.2.0',
    airIRRP500UnitThresholdsSupplyAirHighTempUS => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.5.3.0',
    airIRRP500UnitThresholdsSupplyAirHighTempMetric => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.5.4.0',
    airIRRP500UnitThresholdsReturnAirHighTempUS => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.5.5.0',
    airIRRP500UnitThresholdsReturnAirHighTempMetric => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.5.6.0',
    airIRRP500UnitThresholdsSupplyHumidityHigh => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.5.7.0',
    airIRRP500UnitThresholdsSupplyHumidityLow => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.5.8.0',
    airIRRP500UnitThresholdsEnteringFluidHighTempUS => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.5.9.0',
    airIRRP500UnitThresholdsEnteringFluidHighTempMetric => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.5.10.0',
    airIRRP500UnitConfig => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.6',
    airIRRP500UnitConfigStartupDelay => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.6.1.0',
    airIRRP500UnitConfigCoolCapacity => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.6.2.0',
    airIRRP500UnitConfigIdleOnLeakDetect => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.6.3.0',
    airIRRP500UnitConfigInputNormalState => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.6.4.0',
    airIRRP500UnitConfigOutputNormalState => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.6.5.0',
    airIRRP500UnitConfigOutputSource => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.6.6.0',
    airIRRP500UnitConfigHumidifyEnable => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.6.7.0',
    airIRRP500UnitConfigHumidifierControl => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.6.8.0',
    airIRRP500UnitConfigDehumidifyEnable => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.6.9.0',
    airIRRP500UnitConfigReheatEnable => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.6.10.0',
    airIRRP500UnitConfigHeatAssistEnable => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.6.11.0',
    airIRSCUnitStatus => '1.3.6.1.4.1.318.1.1.13.3.4.1.2',
    airIRSCUnitStatusOperateMode => '1.3.6.1.4.1.318.1.1.13.3.4.1.2.1.0',
    airIRSCUnitStatusCoolOutput => '1.3.6.1.4.1.318.1.1.13.3.4.1.2.2.0',
    airIRSCUnitStatusCoolDemand => '1.3.6.1.4.1.318.1.1.13.3.4.1.2.3.0',
    airIRSCUnitStatusAirFlowUS => '1.3.6.1.4.1.318.1.1.13.3.4.1.2.4.0',
    airIRSCUnitStatusAirFlowMetric => '1.3.6.1.4.1.318.1.1.13.3.4.1.2.5.0',
    airIRSCUnitStatusRackInletTempUS => '1.3.6.1.4.1.318.1.1.13.3.4.1.2.6.0',
    airIRSCUnitStatusRackInletTempMetric => '1.3.6.1.4.1.318.1.1.13.3.4.1.2.7.0',
    airIRSCUnitStatusSupplyAirTempUS => '1.3.6.1.4.1.318.1.1.13.3.4.1.2.8.0',
    airIRSCUnitStatusSupplyAirTempMetric => '1.3.6.1.4.1.318.1.1.13.3.4.1.2.9.0',
    airIRSCUnitStatusReturnAirTempUS => '1.3.6.1.4.1.318.1.1.13.3.4.1.2.10.0',
    airIRSCUnitStatusReturnAirTempMetric => '1.3.6.1.4.1.318.1.1.13.3.4.1.2.11.0',
    airIRSCUnitStatusSuctionTempUS => '1.3.6.1.4.1.318.1.1.13.3.4.1.2.12.0',
    airIRSCUnitStatusSuctionTempMetric => '1.3.6.1.4.1.318.1.1.13.3.4.1.2.13.0',
    airIRSCUnitStatusSuperheatTempUS => '1.3.6.1.4.1.318.1.1.13.3.4.1.2.14.0',
    airIRSCUnitStatusSuperheatTempMetric => '1.3.6.1.4.1.318.1.1.13.3.4.1.2.15.0',
    airIRSCUnitStatusContainmtDPUS => '1.3.6.1.4.1.318.1.1.13.3.4.1.2.16.0',
    airIRSCUnitStatusContainmtDPMetric => '1.3.6.1.4.1.318.1.1.13.3.4.1.2.17.0',
    airIRSCUnitStatusFilterDPUS => '1.3.6.1.4.1.318.1.1.13.3.4.1.2.18.0',
    airIRSCUnitStatusFilterDPMetric => '1.3.6.1.4.1.318.1.1.13.3.4.1.2.19.0',
    airIRSCUnitStatusSuctionPressureUS => '1.3.6.1.4.1.318.1.1.13.3.4.1.2.20.0',
    airIRSCUnitStatusSuctionPressureMetric => '1.3.6.1.4.1.318.1.1.13.3.4.1.2.21.0',
    airIRSCUnitStatusDischargePressureUS => '1.3.6.1.4.1.318.1.1.13.3.4.1.2.22.0',
    airIRSCUnitStatusDischargePressureMetric => '1.3.6.1.4.1.318.1.1.13.3.4.1.2.23.0',
    airIRSCUnitStatusEvaporatorFanSpeed => '1.3.6.1.4.1.318.1.1.13.3.4.1.2.24.0',
    airIRSCUnitStatusCondenserFanSpeed => '1.3.6.1.4.1.318.1.1.13.3.4.1.2.25.0',
    airIRSCUnitStatusInputState => '1.3.6.1.4.1.318.1.1.13.3.4.1.2.26.0',
    airIRSCUnitStatusOutputState => '1.3.6.1.4.1.318.1.1.13.3.4.1.2.27.0',
    airIRSCUnitStatusCondOutletTempUS => '1.3.6.1.4.1.318.1.1.13.3.4.1.2.28.0',
    airIRSCUnitStatusCondOutletTempMetric => '1.3.6.1.4.1.318.1.1.13.3.4.1.2.29.0',
    airIRSCUnitStatusCondInletTempUS => '1.3.6.1.4.1.318.1.1.13.3.4.1.2.30.0',
    airIRSCUnitStatusCondInletTempMetric => '1.3.6.1.4.1.318.1.1.13.3.4.1.2.31.0',
    airIRSCUnitStatusCompressor => '1.3.6.1.4.1.318.1.1.13.3.4.1.2.32.0',
    airIRSCUnitIdent => '1.3.6.1.4.1.318.1.1.13.3.4.1.1',
    airIRSCUnitIdentName => '1.3.6.1.4.1.318.1.1.13.3.4.1.1.1.0',
    airIRSCUnitIdentLocation => '1.3.6.1.4.1.318.1.1.13.3.4.1.1.2.0',
    airIRSCUnitIdentModelNumber => '1.3.6.1.4.1.318.1.1.13.3.4.1.1.3.0',
    airIRSCUnitIdentSerialNumber => '1.3.6.1.4.1.318.1.1.13.3.4.1.1.4.0',
    airIRSCUnitIdentFirmwareRevision => '1.3.6.1.4.1.318.1.1.13.3.4.1.1.5.0',
    airIRSCUnitIdentHardwareRevision => '1.3.6.1.4.1.318.1.1.13.3.4.1.1.6.0',
    airIRSCUnitIdentManufactureDate => '1.3.6.1.4.1.318.1.1.13.3.4.1.1.7.0',
    airIRSCUnitRunHours => '1.3.6.1.4.1.318.1.1.13.3.4.1.3',
    airIRSCUnitRunHoursAirFilter => '1.3.6.1.4.1.318.1.1.13.3.4.1.3.1.0',
    airIRSCUnitRunHoursEvaporatorFan1 => '1.3.6.1.4.1.318.1.1.13.3.4.1.3.2.0',
    airIRSCUnitRunHoursEvaporatorFan2 => '1.3.6.1.4.1.318.1.1.13.3.4.1.3.3.0',
    airIRSCUnitRunHoursEvaporatorFan3 => '1.3.6.1.4.1.318.1.1.13.3.4.1.3.4.0',
    airIRSCUnitRunHoursCondenserFan1 => '1.3.6.1.4.1.318.1.1.13.3.4.1.3.5.0',
    airIRSCUnitRunHoursCondenserFan2 => '1.3.6.1.4.1.318.1.1.13.3.4.1.3.6.0',
    airIRSCUnitRunHoursCondenserFan3 => '1.3.6.1.4.1.318.1.1.13.3.4.1.3.7.0',
    airIRSCUnitRunHoursFanPowerSupplyLeft => '1.3.6.1.4.1.318.1.1.13.3.4.1.3.8.0',
    airIRSCUnitRunHoursFanPowerSupplyRight => '1.3.6.1.4.1.318.1.1.13.3.4.1.3.9.0',
    airIRSCUnitRunHoursCondensatePump => '1.3.6.1.4.1.318.1.1.13.3.4.1.3.10.0',
    airIRSCUnitRunHoursCompressor => '1.3.6.1.4.1.318.1.1.13.3.4.1.3.11.0',
    airIRSCUnitServiceIntervals => '1.3.6.1.4.1.318.1.1.13.3.4.1.4',
    airIRSCUnitServiceIntervalsAirFilter => '1.3.6.1.4.1.318.1.1.13.3.4.1.4.1.0',
    airIRSCUnitServiceIntervalsAirFilterAlarm => '1.3.6.1.4.1.318.1.1.13.3.4.1.4.2.0',
    airIRSCUnitThresholds => '1.3.6.1.4.1.318.1.1.13.3.4.1.5',
    airIRSCUnitThresholdsRackInletHighTempUS => '1.3.6.1.4.1.318.1.1.13.3.4.1.5.1.0',
    airIRSCUnitThresholdsRackInletHighTempMetric => '1.3.6.1.4.1.318.1.1.13.3.4.1.5.2.0',
    airIRSCUnitThresholdsSupplyAirHighTempUS => '1.3.6.1.4.1.318.1.1.13.3.4.1.5.3.0',
    airIRSCUnitThresholdsSupplyAirHighTempMetric => '1.3.6.1.4.1.318.1.1.13.3.4.1.5.4.0',
    airIRSCUnitThresholdsReturnAirHighTempUS => '1.3.6.1.4.1.318.1.1.13.3.4.1.5.5.0',
    airIRSCUnitThresholdsReturnAirHighTempMetric => '1.3.6.1.4.1.318.1.1.13.3.4.1.5.6.0',
    airIRSCUnitSetpoints => '1.3.6.1.4.1.318.1.1.13.3.4.1.6',
    airIRSCUnitSetptsCoolSetpointUS => '1.3.6.1.4.1.318.1.1.13.3.4.1.6.1.0',
    airIRSCUnitSetptsCoolSetpointMetric => '1.3.6.1.4.1.318.1.1.13.3.4.1.6.2.0',
    airIRSCUnitSetptsCoolDeadbandUS => '1.3.6.1.4.1.318.1.1.13.3.4.1.6.3.0',
    airIRSCUnitSetptsCoolDeadbandMetric => '1.3.6.1.4.1.318.1.1.13.3.4.1.6.4.0',
    airIRSCUnitSetptsFanSpeedPreference => '1.3.6.1.4.1.318.1.1.13.3.4.1.6.5.0',
    airIRSCUnitSetptsSupplyAirSetpointUS => '1.3.6.1.4.1.318.1.1.13.3.4.1.6.6.0',
    airIRSCUnitSetptsSupplyAirSetpointMetric => '1.3.6.1.4.1.318.1.1.13.3.4.1.6.7.0',
    airIRSCUnitConfig => '1.3.6.1.4.1.318.1.1.13.3.4.1.7',
    airIRSCUnitConfigConfigurationType => '1.3.6.1.4.1.318.1.1.13.3.4.1.7.1.0',
    airIRSCUnitConfigCapacityControlType => '1.3.6.1.4.1.318.1.1.13.3.4.1.7.2.0',
    airIRSCUnitConfigStartupDelay => '1.3.6.1.4.1.318.1.1.13.3.4.1.7.3.0',
    airIRSCUnitConfigIdleOnLeakDetect => '1.3.6.1.4.1.318.1.1.13.3.4.1.7.4.0',
    airIRSCUnitConfigInputNormalState => '1.3.6.1.4.1.318.1.1.13.3.4.1.7.5.0',
    airIRSCUnitConfigOutputNormalState => '1.3.6.1.4.1.318.1.1.13.3.4.1.7.6.0',
    airIRSCUnitConfigOutputSource => '1.3.6.1.4.1.318.1.1.13.3.4.1.7.7.0',
    airIRSCUnitConfigAltitudeUS => '1.3.6.1.4.1.318.1.1.13.3.4.1.7.8.0',
    airIRSCUnitConfigAltitudeMetric => '1.3.6.1.4.1.318.1.1.13.3.4.1.7.9.0',
    airIRSCUnitConfigOpControl => '1.3.6.1.4.1.318.1.1.13.3.4.1.7.10.0',
    airIRSCGroupStatus => '1.3.6.1.4.1.318.1.1.13.3.4.2.1',
    airIRSCGroupStatusCoolOutput => '1.3.6.1.4.1.318.1.1.13.3.4.2.1.1.0',
    airIRSCGroupStatusCoolDemand => '1.3.6.1.4.1.318.1.1.13.3.4.2.1.2.0',
    airIRSCGroupStatusAirFlowUS => '1.3.6.1.4.1.318.1.1.13.3.4.2.1.3.0',
    airIRSCGroupStatusAirFlowMetric => '1.3.6.1.4.1.318.1.1.13.3.4.2.1.4.0',
    airIRSCGroupStatusMaxRackInletTempUS => '1.3.6.1.4.1.318.1.1.13.3.4.2.1.5.0',
    airIRSCGroupStatusMaxRackInletTempMetric => '1.3.6.1.4.1.318.1.1.13.3.4.2.1.6.0',
    airIRSCGroupStatusMinRackInletTempUS => '1.3.6.1.4.1.318.1.1.13.3.4.2.1.7.0',
    airIRSCGroupStatusMinRackInletTempMetric => '1.3.6.1.4.1.318.1.1.13.3.4.2.1.8.0',
    airIRSCGroupStatusMaxReturnAirTempUS => '1.3.6.1.4.1.318.1.1.13.3.4.2.1.9.0',
    airIRSCGroupStatusMaxReturnAirTempMetric => '1.3.6.1.4.1.318.1.1.13.3.4.2.1.10.0',
    airIRSCGroupStatusMinReturnAirTempUS => '1.3.6.1.4.1.318.1.1.13.3.4.2.1.11.0',
    airIRSCGroupStatusMinReturnAirTempMetric => '1.3.6.1.4.1.318.1.1.13.3.4.2.1.12.0',
    airIRSCGroupSetpoints => '1.3.6.1.4.1.318.1.1.13.3.4.2.2',
    airIRSCGroupSetptsCoolSetpointUS => '1.3.6.1.4.1.318.1.1.13.3.4.2.2.1.0',
    airIRSCGroupSetptsCoolSetpointMetric => '1.3.6.1.4.1.318.1.1.13.3.4.2.2.2.0',
    airIRSCGroupSetptsCoolDeadbandUS => '1.3.6.1.4.1.318.1.1.13.3.4.2.2.3.0',
    airIRSCGroupSetptsCoolDeadbandMetric => '1.3.6.1.4.1.318.1.1.13.3.4.2.2.4.0',
    airIRSCGroupSetptsFanSpeedPreference => '1.3.6.1.4.1.318.1.1.13.3.4.2.2.5.0',
    airIRSCGroupSetptsSupplyAirSetpointUS => '1.3.6.1.4.1.318.1.1.13.3.4.2.2.6.0',
    airIRSCGroupSetptsSupplyAirSetpointMetric => '1.3.6.1.4.1.318.1.1.13.3.4.2.2.7.0',
    airIRSCGroupConfig => '1.3.6.1.4.1.318.1.1.13.3.4.2.3',
    airIRSCGroupConfigNumberofCoolingUnits => '1.3.6.1.4.1.318.1.1.13.3.4.2.3.1.0',
    airIRSCGroupConfigConfigurationType => '1.3.6.1.4.1.318.1.1.13.3.4.2.3.2.0',
    airIRSCGroupConfigCapacityControlType => '1.3.6.1.4.1.318.1.1.13.3.4.2.3.3.0',
    airIRSCGroupConfigAltitudeUS => '1.3.6.1.4.1.318.1.1.13.3.4.2.3.4.0',
    airIRSCGroupConfigAltitudeMetric => '1.3.6.1.4.1.318.1.1.13.3.4.2.3.5.0',
    airIRSCGroupConfigFanSpeedControl => '1.3.6.1.4.1.318.1.1.13.3.4.2.3.6.0',
    airIRG2Ident => '1.3.6.1.4.1.318.1.1.13.4.1',
    airIRG2IdentName => '1.3.6.1.4.1.318.1.1.13.4.1.1.0',
    airIRG2IdentLocation => '1.3.6.1.4.1.318.1.1.13.4.1.2.0',
    airIRG2IdentModelNumber => '1.3.6.1.4.1.318.1.1.13.4.1.3.0',
    airIRG2IdentSerialNumber => '1.3.6.1.4.1.318.1.1.13.4.1.4.0',
    airIRG2IdentFirmwareRevision => '1.3.6.1.4.1.318.1.1.13.4.1.5.0',
    airIRG2IdentHardwareRevision => '1.3.6.1.4.1.318.1.1.13.4.1.6.0',
    airIRG2IdentManufactureDate => '1.3.6.1.4.1.318.1.1.13.4.1.7.0',
    airIRG2IdentUnitSysOID => '1.3.6.1.4.1.318.1.1.13.4.1.8.0',
    airIRG2IdentGroupSysOID => '1.3.6.1.4.1.318.1.1.13.4.1.9.0',
    airIRG2GroupStatus => '1.3.6.1.4.1.318.1.1.13.4.2.1',
    airIRG2GroupStatusCoolOutput => '1.3.6.1.4.1.318.1.1.13.4.2.1.1.0',
    airIRG2GroupStatusCoolDemand => '1.3.6.1.4.1.318.1.1.13.4.2.1.2.0',
    airIRG2GroupStatusAirFlowUS => '1.3.6.1.4.1.318.1.1.13.4.2.1.3.0',
    airIRG2GroupStatusAirFlowMetric => '1.3.6.1.4.1.318.1.1.13.4.2.1.4.0',
    airIRG2GroupStatusMaxRackInletTempUS => '1.3.6.1.4.1.318.1.1.13.4.2.1.5.0',
    airIRG2GroupStatusMaxRackInletTempMetric => '1.3.6.1.4.1.318.1.1.13.4.2.1.6.0',
    airIRG2GroupStatusMinRackInletTempUS => '1.3.6.1.4.1.318.1.1.13.4.2.1.7.0',
    airIRG2GroupStatusMinRackInletTempMetric => '1.3.6.1.4.1.318.1.1.13.4.2.1.8.0',
    airIRG2GroupStatusMaxReturnAirTempUS => '1.3.6.1.4.1.318.1.1.13.4.2.1.9.0',
    airIRG2GroupStatusMaxReturnAirTempMetric => '1.3.6.1.4.1.318.1.1.13.4.2.1.10.0',
    airIRG2GroupStatusMinReturnAirTempUS => '1.3.6.1.4.1.318.1.1.13.4.2.1.11.0',
    airIRG2GroupStatusMinReturnAirTempMetric => '1.3.6.1.4.1.318.1.1.13.4.2.1.12.0',
    airIRG2GroupSetpoints => '1.3.6.1.4.1.318.1.1.13.4.2.2',
    airIRG2GroupSetptsCoolSetpointUS => '1.3.6.1.4.1.318.1.1.13.4.2.2.1.0',
    airIRG2GroupSetptsCoolSetpointMetric => '1.3.6.1.4.1.318.1.1.13.4.2.2.2.0',
    airIRG2GroupSetptsCoolDeadbandUS => '1.3.6.1.4.1.318.1.1.13.4.2.2.3.0',
    airIRG2GroupSetptsCoolDeadbandMetric => '1.3.6.1.4.1.318.1.1.13.4.2.2.4.0',
    airIRG2GroupSetptsFanSpeedPreference => '1.3.6.1.4.1.318.1.1.13.4.2.2.5.0',
    airIRG2GroupSetptsSupplyAirSetpointUS => '1.3.6.1.4.1.318.1.1.13.4.2.2.6.0',
    airIRG2GroupSetptsSupplyAirSetpointMetric => '1.3.6.1.4.1.318.1.1.13.4.2.2.7.0',
    airIRG2GroupConfig => '1.3.6.1.4.1.318.1.1.13.4.2.3',
    airIRG2GroupConfigNumberofCoolingUnits => '1.3.6.1.4.1.318.1.1.13.4.2.3.1.0',
    airIRG2GroupConfigConfigurationType => '1.3.6.1.4.1.318.1.1.13.4.2.3.2.0',
    airIRG2GroupConfigCapacityControlType => '1.3.6.1.4.1.318.1.1.13.4.2.3.3.0',
    airIRG2GroupConfigFanSpeedControl => '1.3.6.1.4.1.318.1.1.13.4.2.3.4.0',
    airIRG2GroupConfigCoolGainP => '1.3.6.1.4.1.318.1.1.13.4.2.3.5.0',
    airIRG2GroupConfigCoolResetRateI => '1.3.6.1.4.1.318.1.1.13.4.2.3.6.0',
    airIRG2GroupConfigCoolDerivativeD => '1.3.6.1.4.1.318.1.1.13.4.2.3.7.0',
    airIRG2GroupConfigCoolPIDReset => '1.3.6.1.4.1.318.1.1.13.4.2.3.8.0',
    airIRG2GroupConfigNumberofBackupUnits => '1.3.6.1.4.1.318.1.1.13.4.2.3.9.0',
    airIRG2GroupConfigRuntimeBalancingEnable => '1.3.6.1.4.1.318.1.1.13.4.2.3.10.0',
    airIRG2GroupConfigLoadAssistEnable => '1.3.6.1.4.1.318.1.1.13.4.2.3.11.0',
    airIRG2Alarms => '1.3.6.1.4.1.318.1.1.13.4.3',
    airIRG2AlarmsTableSize => '1.3.6.1.4.1.318.1.1.13.4.3.1.0',
    airIRG2AlarmsTable => '1.3.6.1.4.1.318.1.1.13.4.3.2',
    airIRG2AlarmsEntry => '1.3.6.1.4.1.318.1.1.13.4.3.2.1',
    airIRG2AlarmsIndex => '1.3.6.1.4.1.318.1.1.13.4.3.2.1.1',
    airIRG2AlarmsEventCode => '1.3.6.1.4.1.318.1.1.13.4.3.2.1.2',
    airIRG2AlarmsDescription => '1.3.6.1.4.1.318.1.1.13.4.3.2.1.3',
    airIRG2RDT2Status => '1.3.6.1.4.1.318.1.1.13.4.5.2.1',
    airIRG2RDT2StatusOperateMode => '1.3.6.1.4.1.318.1.1.13.4.5.2.1.1.0',
    airIRG2RDT2StatusCoolOutput => '1.3.6.1.4.1.318.1.1.13.4.5.2.1.2.0',
    airIRG2RDT2StatusCoolDemand => '1.3.6.1.4.1.318.1.1.13.4.5.2.1.3.0',
    airIRG2RDT2StatusAirFlowUS => '1.3.6.1.4.1.318.1.1.13.4.5.2.1.4.0',
    airIRG2RDT2StatusAirFlowMetric => '1.3.6.1.4.1.318.1.1.13.4.5.2.1.5.0',
    airIRG2RDT2StatusRackInletTempUS => '1.3.6.1.4.1.318.1.1.13.4.5.2.1.6.0',
    airIRG2RDT2StatusRackInletTempMetric => '1.3.6.1.4.1.318.1.1.13.4.5.2.1.7.0',
    airIRG2RDT2StatusSupplyAirTempUS => '1.3.6.1.4.1.318.1.1.13.4.5.2.1.8.0',
    airIRG2RDT2StatusSupplyAirTempMetric => '1.3.6.1.4.1.318.1.1.13.4.5.2.1.9.0',
    airIRG2RDT2StatusReturnAirTempUS => '1.3.6.1.4.1.318.1.1.13.4.5.2.1.10.0',
    airIRG2RDT2StatusReturnAirTempMetric => '1.3.6.1.4.1.318.1.1.13.4.5.2.1.11.0',
    airIRG2RDT2StatusSuctionTempUS => '1.3.6.1.4.1.318.1.1.13.4.5.2.1.12.0',
    airIRG2RDT2StatusSuctionTempMetric => '1.3.6.1.4.1.318.1.1.13.4.5.2.1.13.0',
    airIRG2RDT2StatusSuperheatTempUS => '1.3.6.1.4.1.318.1.1.13.4.5.2.1.14.0',
    airIRG2RDT2StatusSuperheatTempMetric => '1.3.6.1.4.1.318.1.1.13.4.5.2.1.15.0',
    airIRG2RDT2StatusFilterDPUS => '1.3.6.1.4.1.318.1.1.13.4.5.2.1.16.0',
    airIRG2RDT2StatusFilterDPMetric => '1.3.6.1.4.1.318.1.1.13.4.5.2.1.17.0',
    airIRG2RDT2StatusSuctionPressureUS => '1.3.6.1.4.1.318.1.1.13.4.5.2.1.18.0',
    airIRG2RDT2StatusSuctionPressureMetric => '1.3.6.1.4.1.318.1.1.13.4.5.2.1.19.0',
    airIRG2RDT2StatusDischargePressureUS => '1.3.6.1.4.1.318.1.1.13.4.5.2.1.20.0',
    airIRG2RDT2StatusDischargePressureMetric => '1.3.6.1.4.1.318.1.1.13.4.5.2.1.21.0',
    airIRG2RDT2StatusEvaporatorFanSpeed => '1.3.6.1.4.1.318.1.1.13.4.5.2.1.22.0',
    airIRG2RDT2StatusInputState => '1.3.6.1.4.1.318.1.1.13.4.5.2.1.23.0',
    airIRG2RDT2StatusOutputState => '1.3.6.1.4.1.318.1.1.13.4.5.2.1.24.0',
    airIRG2RDT2StatusOHEInputState => '1.3.6.1.4.1.318.1.1.13.4.5.2.1.25.0',
    airIRG2RDT2StatusOHEOutputState => '1.3.6.1.4.1.318.1.1.13.4.5.2.1.26.0',
    airIRG2RDT2StatusCompressor => '1.3.6.1.4.1.318.1.1.13.4.5.2.1.27.0',
    airIRG2RDT2StatusFluidValvePos => '1.3.6.1.4.1.318.1.1.13.4.5.2.1.28.0',
    airIRG2RDT2StatusHotGasBypassValvePos => '1.3.6.1.4.1.318.1.1.13.4.5.2.1.29.0',
    airIRG2RDT2RunHours => '1.3.6.1.4.1.318.1.1.13.4.5.2.2',
    airIRG2RDT2RunHoursAirFilter => '1.3.6.1.4.1.318.1.1.13.4.5.2.2.1.0',
    airIRG2RDT2RunHoursCondensatePump => '1.3.6.1.4.1.318.1.1.13.4.5.2.2.2.0',
    airIRG2RDT2RunHoursCompressor => '1.3.6.1.4.1.318.1.1.13.4.5.2.2.3.0',
    airIRG2RDT2RunHoursFanPSTableSize => '1.3.6.1.4.1.318.1.1.13.4.5.2.2.4.0',
    airIRG2RDT2RunHoursFanPSTable => '1.3.6.1.4.1.318.1.1.13.4.5.2.2.5',
    airIRG2RDT2RunHoursFanPSEntry => '1.3.6.1.4.1.318.1.1.13.4.5.2.2.5.1',
    airIRG2RDT2RunHoursFanPSIndex => '1.3.6.1.4.1.318.1.1.13.4.5.2.2.5.1.1',
    airIRG2RDT2RunHoursFanPSHours => '1.3.6.1.4.1.318.1.1.13.4.5.2.2.5.1.2',
    airIRG2RDT2RunHoursFanPSPosition => '1.3.6.1.4.1.318.1.1.13.4.5.2.2.5.1.3',
    airIRG2RDT2RunHoursEvapFanTableSize => '1.3.6.1.4.1.318.1.1.13.4.5.2.2.6.0',
    airIRG2RDT2RunHoursEvapFanTable => '1.3.6.1.4.1.318.1.1.13.4.5.2.2.7',
    airIRG2RDT2RunHoursEvapFanEntry => '1.3.6.1.4.1.318.1.1.13.4.5.2.2.7.1',
    airIRG2RDT2RunHoursEvapFanIndex => '1.3.6.1.4.1.318.1.1.13.4.5.2.2.7.1.1',
    airIRG2RDT2RunHoursEvapFanHours => '1.3.6.1.4.1.318.1.1.13.4.5.2.2.7.1.2',
    airIRG2RDT2RunHoursUnit => '1.3.6.1.4.1.318.1.1.13.4.5.2.2.8.0',
    airIRG2RDT2ServiceIntervals => '1.3.6.1.4.1.318.1.1.13.4.5.2.3',
    airIRG2RDT2ServiceIntervalsAirFilter => '1.3.6.1.4.1.318.1.1.13.4.5.2.3.1.0',
    airIRG2RDT2ServiceIntervalsAirFilterAlarm => '1.3.6.1.4.1.318.1.1.13.4.5.2.3.2.0',
    airIRG2RDT2Thresholds => '1.3.6.1.4.1.318.1.1.13.4.5.2.4',
    airIRG2RDT2ThresholdsRackInletHighTempUS => '1.3.6.1.4.1.318.1.1.13.4.5.2.4.1.0',
    airIRG2RDT2ThresholdsRackInletHighTempMetric => '1.3.6.1.4.1.318.1.1.13.4.5.2.4.2.0',
    airIRG2RDT2ThresholdsSupplyAirHighTempUS => '1.3.6.1.4.1.318.1.1.13.4.5.2.4.3.0',
    airIRG2RDT2ThresholdsSupplyAirHighTempMetric => '1.3.6.1.4.1.318.1.1.13.4.5.2.4.4.0',
    airIRG2RDT2ThresholdsReturnAirHighTempUS => '1.3.6.1.4.1.318.1.1.13.4.5.2.4.5.0',
    airIRG2RDT2ThresholdsReturnAirHighTempMetric => '1.3.6.1.4.1.318.1.1.13.4.5.2.4.6.0',
    airIRG2RDT2Config => '1.3.6.1.4.1.318.1.1.13.4.5.2.6',
    airIRG2RDT2ConfigUnitType => '1.3.6.1.4.1.318.1.1.13.4.5.2.6.1.0',
    airIRG2RDT2ConfigStartupDelay => '1.3.6.1.4.1.318.1.1.13.4.5.2.6.2.0',
    airIRG2RDT2ConfigIdleOnLeakDetect => '1.3.6.1.4.1.318.1.1.13.4.5.2.6.3.0',
    airIRG2RDT2ConfigInputNormalState => '1.3.6.1.4.1.318.1.1.13.4.5.2.6.4.0',
    airIRG2RDT2ConfigOutputNormalState => '1.3.6.1.4.1.318.1.1.13.4.5.2.6.5.0',
    airIRG2RDT2ConfigOutputSource => '1.3.6.1.4.1.318.1.1.13.4.5.2.6.6.0',
    airIRG2RDT2ConfigOHEInputNormalState => '1.3.6.1.4.1.318.1.1.13.4.5.2.6.7.0',
    airIRG2RDT2ConfigUnitRoleOverride => '1.3.6.1.4.1.318.1.1.13.4.5.2.6.8.0',
    airIRG2RDT2ConfigUnitIdleOnCoolFail => '1.3.6.1.4.1.318.1.1.13.4.5.2.6.9.0',
    airIRmIdent => '1.3.6.1.4.1.318.1.1.13.5.1',
    airIRmIdentName => '1.3.6.1.4.1.318.1.1.13.5.1.1.0',
    airIRmIdentLocation => '1.3.6.1.4.1.318.1.1.13.5.1.2.0',
    airIRmIdentModelNumber => '1.3.6.1.4.1.318.1.1.13.5.1.3.0',
    airIRmIdentSerialNumber => '1.3.6.1.4.1.318.1.1.13.5.1.4.0',
    airIRmIdentFirmwareRevision => '1.3.6.1.4.1.318.1.1.13.5.1.5.0',
    airIRmIdentHardwareRevision => '1.3.6.1.4.1.318.1.1.13.5.1.6.0',
    airIRmIdentManufactureDate => '1.3.6.1.4.1.318.1.1.13.5.1.7.0',
    airIRmIdentSysOID => '1.3.6.1.4.1.318.1.1.13.5.1.8.0',
    airIRmAlarms => '1.3.6.1.4.1.318.1.1.13.5.2',
    airIRmAlarmsTableSize => '1.3.6.1.4.1.318.1.1.13.5.2.1.0',
    airIRmAlarmsTable => '1.3.6.1.4.1.318.1.1.13.5.2.2',
    airIRmAlarmsEntry => '1.3.6.1.4.1.318.1.1.13.5.2.2.1',
    airIRmAlarmsIndex => '1.3.6.1.4.1.318.1.1.13.5.2.2.1.1',
    airIRmAlarmsEventCode => '1.3.6.1.4.1.318.1.1.13.5.2.2.1.2',
    airIRmAlarmsDescription => '1.3.6.1.4.1.318.1.1.13.5.2.2.1.3',
    airIRmPmCommon1 => '1.3.6.1.4.1.318.1.1.13.5.3.2',
    airIRmPmUnitType => '1.3.6.1.4.1.318.1.1.13.5.3.2.1.0',
    airIRmPmSwVersion => '1.3.6.1.4.1.318.1.1.13.5.3.2.3.0',
    airIRmPmBusAddress => '1.3.6.1.4.1.318.1.1.13.5.3.2.5.0',
    airIRmPmControllerType => '1.3.6.1.4.1.318.1.1.13.5.3.2.7.0',
    airIRmPmGeneralError => '1.3.6.1.4.1.318.1.1.13.5.3.2.8.0',
    airIRmPmErrorOnBus => '1.3.6.1.4.1.318.1.1.13.5.3.2.9.0',
    airIRmPmCommon2 => '1.3.6.1.4.1.318.1.1.13.5.3.3',
    airIRmPmPCStop => '1.3.6.1.4.1.318.1.1.13.5.3.3.1.0',
    airIRmPmRemoteStop => '1.3.6.1.4.1.318.1.1.13.5.3.3.2.0',
    airIRmPmLocalStop => '1.3.6.1.4.1.318.1.1.13.5.3.3.3.0',
    airIRmPmTimerStop => '1.3.6.1.4.1.318.1.1.13.5.3.3.4.0',
    airIRmPmSeqStop => '1.3.6.1.4.1.318.1.1.13.5.3.3.5.0',
    airIRmPmRemoteUPS => '1.3.6.1.4.1.318.1.1.13.5.3.3.7.0',
    airIRmPmLocalUPS => '1.3.6.1.4.1.318.1.1.13.5.3.3.8.0',
    airIRmPmCommonAlarm => '1.3.6.1.4.1.318.1.1.13.5.3.3.11.0',
    airIRmPmResetAllAlarms => '1.3.6.1.4.1.318.1.1.13.5.3.3.12.0',
    airIRmPmUnitOnOff => '1.3.6.1.4.1.318.1.1.13.5.3.3.14.0',
    airIRmPmMaintenance => '1.3.6.1.4.1.318.1.1.13.5.3.3.15.0',
    airIRmPmUnitTemperatureScale => '1.3.6.1.4.1.318.1.1.13.5.3.3.23.0',
    airIRmPmUnitWinterMode => '1.3.6.1.4.1.318.1.1.13.5.3.3.24.0',
    airIRmPmDayNightMode => '1.3.6.1.4.1.318.1.1.13.5.3.3.25.0',
    airIRmPmCommon3 => '1.3.6.1.4.1.318.1.1.13.5.3.4',
    airIRmPmLastMaintenanceYear => '1.3.6.1.4.1.318.1.1.13.5.3.4.1.0',
    airIRmPmLastMaintenanceMonth => '1.3.6.1.4.1.318.1.1.13.5.3.4.2.0',
    airIRmPmLastMaintenanceDay => '1.3.6.1.4.1.318.1.1.13.5.3.4.3.0',
    airIRmPmUnitMaintenanceInterval => '1.3.6.1.4.1.318.1.1.13.5.3.4.4.0',
    airIRmPmRuntimeUnit => '1.3.6.1.4.1.318.1.1.13.5.3.4.5.0',
    airIRmPmStoptimeUnit => '1.3.6.1.4.1.318.1.1.13.5.3.4.6.0',
    airIRmPmRuntimeCooling => '1.3.6.1.4.1.318.1.1.13.5.3.4.7.0',
    airIRmPmRuntimeHeating => '1.3.6.1.4.1.318.1.1.13.5.3.4.8.0',
    airIRmPmRuntimeHumidification => '1.3.6.1.4.1.318.1.1.13.5.3.4.9.0',
    airIRmPmRuntimeDehumidification => '1.3.6.1.4.1.318.1.1.13.5.3.4.10.0',
    airIRmPmUnitTemperature => '1.3.6.1.4.1.318.1.1.13.5.3.4.11',
    airIRmPmUnitTemperature => '1.3.6.1.4.1.318.1.1.13.5.3.4.11',
    airIRmPmUnitTemperatureC => '1.3.6.1.4.1.318.1.1.13.5.3.4.11.1.0',
    airIRmPmUnitTemperatureF => '1.3.6.1.4.1.318.1.1.13.5.3.4.11.2.0',
    airIRmPmCommon3 => '1.3.6.1.4.1.318.1.1.13.5.3.4',
    airIRmPmUnitHumidity => '1.3.6.1.4.1.318.1.1.13.5.3.4.12.0',
    airIRmPmSetpointTemperatureDay => '1.3.6.1.4.1.318.1.1.13.5.3.4.14',
    airIRmPmSetpointTemperatureDay => '1.3.6.1.4.1.318.1.1.13.5.3.4.14',
    airIRmPmSetpointTemperatureDayC => '1.3.6.1.4.1.318.1.1.13.5.3.4.14.1.0',
    airIRmPmSetpointTemperatureDayF => '1.3.6.1.4.1.318.1.1.13.5.3.4.14.2.0',
    airIRmPmSetpointTemperatureNight => '1.3.6.1.4.1.318.1.1.13.5.3.4.15',
    airIRmPmSetpointTemperatureNight => '1.3.6.1.4.1.318.1.1.13.5.3.4.15',
    airIRmPmSetpointTemperatureNightC => '1.3.6.1.4.1.318.1.1.13.5.3.4.15.1.0',
    airIRmPmSetpointTemperatureNightF => '1.3.6.1.4.1.318.1.1.13.5.3.4.15.2.0',
    airIRmPmCommon3 => '1.3.6.1.4.1.318.1.1.13.5.3.4',
    airIRmPmSetpointHumidity => '1.3.6.1.4.1.318.1.1.13.5.3.4.17.0',
    airIRmPmUnitControlType => '1.3.6.1.4.1.318.1.1.13.5.3.4.24.0',
    airIRmPmWinterModeStartTemp => '1.3.6.1.4.1.318.1.1.13.5.3.4.29',
    airIRmPmWinterModeStartTemp => '1.3.6.1.4.1.318.1.1.13.5.3.4.29',
    airIRmPmWinterModeStartTempC => '1.3.6.1.4.1.318.1.1.13.5.3.4.29.1.0',
    airIRmPmWinterModeStartTempF => '1.3.6.1.4.1.318.1.1.13.5.3.4.29.2.0',
    airIRmPmWinterModeHysteresis => '1.3.6.1.4.1.318.1.1.13.5.3.4.30',
    airIRmPmWinterModeHysteresis => '1.3.6.1.4.1.318.1.1.13.5.3.4.30',
    airIRmPmWinterModeHysteresisK => '1.3.6.1.4.1.318.1.1.13.5.3.4.30.1.0',
    airIRmPmWinterModeHysteresisF => '1.3.6.1.4.1.318.1.1.13.5.3.4.30.2.0',
    airIRmPmWaterTemperature => '1.3.6.1.4.1.318.1.1.13.5.3.4.32',
    airIRmPmWaterTemperature => '1.3.6.1.4.1.318.1.1.13.5.3.4.32',
    airIRmPmWaterTemperatureC => '1.3.6.1.4.1.318.1.1.13.5.3.4.32.1.0',
    airIRmPmWaterTemperatureF => '1.3.6.1.4.1.318.1.1.13.5.3.4.32.2.0',
    airIRmPmReturnAirTemperature => '1.3.6.1.4.1.318.1.1.13.5.3.4.33',
    airIRmPmReturnAirTemperature => '1.3.6.1.4.1.318.1.1.13.5.3.4.33',
    airIRmPmReturnAirTemperatureC => '1.3.6.1.4.1.318.1.1.13.5.3.4.33.1.0',
    airIRmPmReturnAirTemperatureF => '1.3.6.1.4.1.318.1.1.13.5.3.4.33.2.0',
    airIRmPmSupplyAirTemperature => '1.3.6.1.4.1.318.1.1.13.5.3.4.34',
    airIRmPmSupplyAirTemperature => '1.3.6.1.4.1.318.1.1.13.5.3.4.34',
    airIRmPmSupplyAirTemperatureC => '1.3.6.1.4.1.318.1.1.13.5.3.4.34.1.0',
    airIRmPmSupplyAirTemperatureF => '1.3.6.1.4.1.318.1.1.13.5.3.4.34.2.0',
    airIRmPmCommon3 => '1.3.6.1.4.1.318.1.1.13.5.3.4',
    airIRmPmReturnAirHumidity => '1.3.6.1.4.1.318.1.1.13.5.3.4.35.0',
    airIRmPmSupplyAirHumidity => '1.3.6.1.4.1.318.1.1.13.5.3.4.36.0',
    airIRmPmOutsideAirTemperature => '1.3.6.1.4.1.318.1.1.13.5.3.4.37',
    airIRmPmOutsideAirTemperature => '1.3.6.1.4.1.318.1.1.13.5.3.4.37',
    airIRmPmOutsideAirTemperatureC => '1.3.6.1.4.1.318.1.1.13.5.3.4.37.1.0',
    airIRmPmOutsideAirTemperatureF => '1.3.6.1.4.1.318.1.1.13.5.3.4.37.2.0',
    airIRmPmCommon3 => '1.3.6.1.4.1.318.1.1.13.5.3.4',
    airIRmPmOutsideAirHumidity => '1.3.6.1.4.1.318.1.1.13.5.3.4.38.0',
    airIRmPmCoolingPriority => '1.3.6.1.4.1.318.1.1.13.5.3.4.39.0',
    airIRmPmWaterTemperature2 => '1.3.6.1.4.1.318.1.1.13.5.3.4.43',
    airIRmPmWaterTemperature2 => '1.3.6.1.4.1.318.1.1.13.5.3.4.43',
    airIRmPmWaterTemperature2C => '1.3.6.1.4.1.318.1.1.13.5.3.4.43.1.0',
    airIRmPmWaterTemperature2F => '1.3.6.1.4.1.318.1.1.13.5.3.4.43.2.0',
    airIRmPmCommon3 => '1.3.6.1.4.1.318.1.1.13.5.3.4',
    airIRmPmRuntimeFreeCooling => '1.3.6.1.4.1.318.1.1.13.5.3.4.44.0',
    airIRmPmRuntimeMixedModeFreeCooling => '1.3.6.1.4.1.318.1.1.13.5.3.4.45.0',
    airIRmPmCommon4 => '1.3.6.1.4.1.318.1.1.13.5.3.5',
    airIRmPmNumberOfCompressors => '1.3.6.1.4.1.318.1.1.13.5.3.5.4.0',
    airIRmPmNumberOfSuctionValves => '1.3.6.1.4.1.318.1.1.13.5.3.5.5.0',
    airIRmPmNumberOfDryCoolers => '1.3.6.1.4.1.318.1.1.13.5.3.5.6.0',
    airIRmPmNumberOfPumps => '1.3.6.1.4.1.318.1.1.13.5.3.5.7.0',
    airIRmPmNumberOfElectricHeaters => '1.3.6.1.4.1.318.1.1.13.5.3.5.8.0',
    airIRmPmNumberOfHumidifiers => '1.3.6.1.4.1.318.1.1.13.5.3.5.9.0',
    airIRmPmNumberOfFans => '1.3.6.1.4.1.318.1.1.13.5.3.5.10.0',
    airIRmPmNumberOfLouvers => '1.3.6.1.4.1.318.1.1.13.5.3.5.11.0',
    airIRmPmNumberOfSensors => '1.3.6.1.4.1.318.1.1.13.5.3.5.12.0',
    airIRmPmNumberOfExternalAlarmInputs => '1.3.6.1.4.1.318.1.1.13.5.3.5.13.0',
    airIRmPmNumberOfGECWValves => '1.3.6.1.4.1.318.1.1.13.5.3.5.14.0',
    airIRmPmNumberOfHotGasReheat => '1.3.6.1.4.1.318.1.1.13.5.3.5.15.0',
    airIRmPmNumberOfPWWReheat => '1.3.6.1.4.1.318.1.1.13.5.3.5.16.0',
    airIRmPmNumberOfDehumidifiers => '1.3.6.1.4.1.318.1.1.13.5.3.5.17.0',
    airIRmPmUnitEvaporationTemperature1 => '1.3.6.1.4.1.318.1.1.13.5.3.6.1',
    airIRmPmUnitEvaporationTemperature1 => '1.3.6.1.4.1.318.1.1.13.5.3.6.1',
    airIRmPmUnitEvaporationTemperature1C => '1.3.6.1.4.1.318.1.1.13.5.3.6.1.1.0',
    airIRmPmUnitEvaporationTemperature1F => '1.3.6.1.4.1.318.1.1.13.5.3.6.1.2.0',
    airIRmPmCommon5 => '1.3.6.1.4.1.318.1.1.13.5.3.6',
    airIRmPmUnitEvaporationPressure1 => '1.3.6.1.4.1.318.1.1.13.5.3.6.2.0',
    airIRmPmUnitCondensationTemperature1 => '1.3.6.1.4.1.318.1.1.13.5.3.6.3',
    airIRmPmUnitCondensationTemperature1 => '1.3.6.1.4.1.318.1.1.13.5.3.6.3',
    airIRmPmUnitCondensationTemperature1C => '1.3.6.1.4.1.318.1.1.13.5.3.6.3.1.0',
    airIRmPmUnitCondensationTemperature1F => '1.3.6.1.4.1.318.1.1.13.5.3.6.3.2.0',
    airIRmPmCommon5 => '1.3.6.1.4.1.318.1.1.13.5.3.6',
    airIRmPmUnitCondensationPressure1 => '1.3.6.1.4.1.318.1.1.13.5.3.6.4.0',
    airIRmPmMaxLimitReturnAirTemperature => '1.3.6.1.4.1.318.1.1.13.5.3.6.8',
    airIRmPmMaxLimitReturnAirTemperature => '1.3.6.1.4.1.318.1.1.13.5.3.6.8',
    airIRmPmMaxLimitReturnAirTemperatureC => '1.3.6.1.4.1.318.1.1.13.5.3.6.8.1.0',
    airIRmPmMaxLimitReturnAirTemperatureF => '1.3.6.1.4.1.318.1.1.13.5.3.6.8.2.0',
    airIRmPmMinLimitReturnAirTemperature => '1.3.6.1.4.1.318.1.1.13.5.3.6.9',
    airIRmPmMinLimitReturnAirTemperature => '1.3.6.1.4.1.318.1.1.13.5.3.6.9',
    airIRmPmMinLimitReturnAirTemperatureC => '1.3.6.1.4.1.318.1.1.13.5.3.6.9.1.0',
    airIRmPmMinLimitReturnAirTemperatureF => '1.3.6.1.4.1.318.1.1.13.5.3.6.9.2.0',
    airIRmPmMaxLimitSupplyAirTemperature => '1.3.6.1.4.1.318.1.1.13.5.3.6.10',
    airIRmPmMaxLimitSupplyAirTemperature => '1.3.6.1.4.1.318.1.1.13.5.3.6.10',
    airIRmPmMaxLimitSupplyAirTemperatureC => '1.3.6.1.4.1.318.1.1.13.5.3.6.10.1.0',
    airIRmPmMaxLimitSupplyAirTemperatureF => '1.3.6.1.4.1.318.1.1.13.5.3.6.10.2.0',
    airIRmPmMinLimitSupplyAirTemperature => '1.3.6.1.4.1.318.1.1.13.5.3.6.11',
    airIRmPmMinLimitSupplyAirTemperature => '1.3.6.1.4.1.318.1.1.13.5.3.6.11',
    airIRmPmMinLimitSupplyAirTemperatureC => '1.3.6.1.4.1.318.1.1.13.5.3.6.11.1.0',
    airIRmPmMinLimitSupplyAirTemperatureF => '1.3.6.1.4.1.318.1.1.13.5.3.6.11.2.0',
    airIRmPmMaxLimitWaterTemperature => '1.3.6.1.4.1.318.1.1.13.5.3.6.12',
    airIRmPmMaxLimitWaterTemperature => '1.3.6.1.4.1.318.1.1.13.5.3.6.12',
    airIRmPmMaxLimitWaterTemperatureC => '1.3.6.1.4.1.318.1.1.13.5.3.6.12.1.0',
    airIRmPmMaxLimitWaterTemperatureF => '1.3.6.1.4.1.318.1.1.13.5.3.6.12.2.0',
    airIRmPmMinLimitWaterTemperature => '1.3.6.1.4.1.318.1.1.13.5.3.6.13',
    airIRmPmMinLimitWaterTemperature => '1.3.6.1.4.1.318.1.1.13.5.3.6.13',
    airIRmPmMinLimitWaterTemperatureC => '1.3.6.1.4.1.318.1.1.13.5.3.6.13.1.0',
    airIRmPmMinLimitWaterTemperatureF => '1.3.6.1.4.1.318.1.1.13.5.3.6.13.2.0',
    airIRmPmCommon5 => '1.3.6.1.4.1.318.1.1.13.5.3.6',
    airIRmPmMaxLimitReturnAirHumidity => '1.3.6.1.4.1.318.1.1.13.5.3.6.14.0',
    airIRmPmMinLimitReturnAirHumidity => '1.3.6.1.4.1.318.1.1.13.5.3.6.15.0',
    airIRmPmMaxLimitSupplyAirHumidity => '1.3.6.1.4.1.318.1.1.13.5.3.6.16.0',
    airIRmPmMinLimitSupplyAirHumidity => '1.3.6.1.4.1.318.1.1.13.5.3.6.17.0',
    airIRmPmLowPressureWinterDelay => '1.3.6.1.4.1.318.1.1.13.5.3.6.18.0',
    airIRmPmUnitCondensationPressure2 => '1.3.6.1.4.1.318.1.1.13.5.3.6.19.0',
    airIRmPmUnitOverloadSwitch => '1.3.6.1.4.1.318.1.1.13.5.3.6.20.0',
    airIRmPmUnitCondensationTemperature2 => '1.3.6.1.4.1.318.1.1.13.5.3.6.41',
    airIRmPmUnitCondensationTemperature2 => '1.3.6.1.4.1.318.1.1.13.5.3.6.41',
    airIRmPmUnitCondensationTemperature2C => '1.3.6.1.4.1.318.1.1.13.5.3.6.41.1.0',
    airIRmPmUnitCondensationTemperature2F => '1.3.6.1.4.1.318.1.1.13.5.3.6.41.2.0',
    airIRmPmCommon5 => '1.3.6.1.4.1.318.1.1.13.5.3.6',
    airIRmPmUnitEvaporationPressure2 => '1.3.6.1.4.1.318.1.1.13.5.3.6.42.0',
    airIRmPmUnitEvaporationTemperature2 => '1.3.6.1.4.1.318.1.1.13.5.3.6.43',
    airIRmPmUnitEvaporationTemperature2 => '1.3.6.1.4.1.318.1.1.13.5.3.6.43',
    airIRmPmUnitEvaporationTemperature2C => '1.3.6.1.4.1.318.1.1.13.5.3.6.43.1.0',
    airIRmPmUnitEvaporationTemperature2F => '1.3.6.1.4.1.318.1.1.13.5.3.6.43.2.0',
    airIRmPmCompressor1 => '1.3.6.1.4.1.318.1.1.13.5.3.7',
    airIRmPmCmp1ManOperationActive => '1.3.6.1.4.1.318.1.1.13.5.3.7.2.0',
    airIRmPmCmp1ManOperationState => '1.3.6.1.4.1.318.1.1.13.5.3.7.3.0',
    airIRmPmCmp1Running => '1.3.6.1.4.1.318.1.1.13.5.3.7.4.0',
    airIRmPmCmp1StartTempSummer => '1.3.6.1.4.1.318.1.1.13.5.3.7.17',
    airIRmPmCmp1StartTempSummer => '1.3.6.1.4.1.318.1.1.13.5.3.7.17',
    airIRmPmCmp1StartTempSummerK => '1.3.6.1.4.1.318.1.1.13.5.3.7.17.1.0',
    airIRmPmCmp1StartTempSummerF => '1.3.6.1.4.1.318.1.1.13.5.3.7.17.2.0',
    airIRmPmCmp1HysteresisSummer => '1.3.6.1.4.1.318.1.1.13.5.3.7.18',
    airIRmPmCmp1HysteresisSummer => '1.3.6.1.4.1.318.1.1.13.5.3.7.18',
    airIRmPmCmp1HysteresisSummerK => '1.3.6.1.4.1.318.1.1.13.5.3.7.18.1.0',
    airIRmPmCmp1HysteresisSummerF => '1.3.6.1.4.1.318.1.1.13.5.3.7.18.2.0',
    airIRmPmCmp1StartTempWinter => '1.3.6.1.4.1.318.1.1.13.5.3.7.19',
    airIRmPmCmp1StartTempWinter => '1.3.6.1.4.1.318.1.1.13.5.3.7.19',
    airIRmPmCmp1StartTempWinterK => '1.3.6.1.4.1.318.1.1.13.5.3.7.19.1.0',
    airIRmPmCmp1StartTempWinterF => '1.3.6.1.4.1.318.1.1.13.5.3.7.19.2.0',
    airIRmPmCmp1HysteresisWinter => '1.3.6.1.4.1.318.1.1.13.5.3.7.20',
    airIRmPmCmp1HysteresisWinter => '1.3.6.1.4.1.318.1.1.13.5.3.7.20',
    airIRmPmCmp1HysteresisWinterK => '1.3.6.1.4.1.318.1.1.13.5.3.7.20.1.0',
    airIRmPmCmp1HysteresisWinterF => '1.3.6.1.4.1.318.1.1.13.5.3.7.20.2.0',
    airIRmPmCompressor1 => '1.3.6.1.4.1.318.1.1.13.5.3.7',
    airIRmPmCmp1Runtime => '1.3.6.1.4.1.318.1.1.13.5.3.7.29.0',
    airIRmPmCompressor2 => '1.3.6.1.4.1.318.1.1.13.5.3.8',
    airIRmPmCmp2ManOperationActive => '1.3.6.1.4.1.318.1.1.13.5.3.8.2.0',
    airIRmPmCmp2ManOperationState => '1.3.6.1.4.1.318.1.1.13.5.3.8.3.0',
    airIRmPmCmp2Running => '1.3.6.1.4.1.318.1.1.13.5.3.8.4.0',
    airIRmPmCmp2StartTempSummer => '1.3.6.1.4.1.318.1.1.13.5.3.8.17',
    airIRmPmCmp2StartTempSummer => '1.3.6.1.4.1.318.1.1.13.5.3.8.17',
    airIRmPmCmp2StartTempSummerK => '1.3.6.1.4.1.318.1.1.13.5.3.8.17.1.0',
    airIRmPmCmp2StartTempSummerF => '1.3.6.1.4.1.318.1.1.13.5.3.8.17.2.0',
    airIRmPmCmp2HysteresisSummer => '1.3.6.1.4.1.318.1.1.13.5.3.8.18',
    airIRmPmCmp2HysteresisSummer => '1.3.6.1.4.1.318.1.1.13.5.3.8.18',
    airIRmPmCmp2HysteresisSummerK => '1.3.6.1.4.1.318.1.1.13.5.3.8.18.1.0',
    airIRmPmCmp2HysteresisSummerF => '1.3.6.1.4.1.318.1.1.13.5.3.8.18.2.0',
    airIRmPmCmp2StartTempWinter => '1.3.6.1.4.1.318.1.1.13.5.3.8.19',
    airIRmPmCmp2StartTempWinter => '1.3.6.1.4.1.318.1.1.13.5.3.8.19',
    airIRmPmCmp2StartTempWinterK => '1.3.6.1.4.1.318.1.1.13.5.3.8.19.1.0',
    airIRmPmCmp2StartTempWinterF => '1.3.6.1.4.1.318.1.1.13.5.3.8.19.2.0',
    airIRmPmCmp2HysteresisWinter => '1.3.6.1.4.1.318.1.1.13.5.3.8.20',
    airIRmPmCmp2HysteresisWinter => '1.3.6.1.4.1.318.1.1.13.5.3.8.20',
    airIRmPmCmp2HysteresisWinterK => '1.3.6.1.4.1.318.1.1.13.5.3.8.20.1.0',
    airIRmPmCmp2HysteresisWinterF => '1.3.6.1.4.1.318.1.1.13.5.3.8.20.2.0',
    airIRmPmCompressor2 => '1.3.6.1.4.1.318.1.1.13.5.3.8',
    airIRmPmCmp2Runtime => '1.3.6.1.4.1.318.1.1.13.5.3.8.29.0',
    airIRmPmEheating1 => '1.3.6.1.4.1.318.1.1.13.5.3.11',
    airIRmPmEheating1ManOpEnable => '1.3.6.1.4.1.318.1.1.13.5.3.11.2.0',
    airIRmPmEheating1Running => '1.3.6.1.4.1.318.1.1.13.5.3.11.4.0',
    airIRmPmEheating1ManOpRunning => '1.3.6.1.4.1.318.1.1.13.5.3.11.5.0',
    airIRmPmEheating1Type => '1.3.6.1.4.1.318.1.1.13.5.3.11.9.0',
    airIRmPmEheating1StartTemperature => '1.3.6.1.4.1.318.1.1.13.5.3.11.10',
    airIRmPmEheating1StartTemperature => '1.3.6.1.4.1.318.1.1.13.5.3.11.10',
    airIRmPmEheating1StartTemperatureK => '1.3.6.1.4.1.318.1.1.13.5.3.11.10.1.0',
    airIRmPmEheating1StartTemperatureF => '1.3.6.1.4.1.318.1.1.13.5.3.11.10.2.0',
    airIRmPmEheating1Hysteresis => '1.3.6.1.4.1.318.1.1.13.5.3.11.11',
    airIRmPmEheating1Hysteresis => '1.3.6.1.4.1.318.1.1.13.5.3.11.11',
    airIRmPmEheating1HysteresisK => '1.3.6.1.4.1.318.1.1.13.5.3.11.11.1.0',
    airIRmPmEheating1HysteresisF => '1.3.6.1.4.1.318.1.1.13.5.3.11.11.2.0',
    airIRmPmEheating1 => '1.3.6.1.4.1.318.1.1.13.5.3.11',
    airIRmPmEheating1Runtime => '1.3.6.1.4.1.318.1.1.13.5.3.11.17.0',
    airIRmPmEheating2 => '1.3.6.1.4.1.318.1.1.13.5.3.12',
    airIRmPmEheating2ManOpEnable => '1.3.6.1.4.1.318.1.1.13.5.3.12.2.0',
    airIRmPmEheating2Running => '1.3.6.1.4.1.318.1.1.13.5.3.12.4.0',
    airIRmPmEheating2ManOpRunning => '1.3.6.1.4.1.318.1.1.13.5.3.12.5.0',
    airIRmPmEheating2Type => '1.3.6.1.4.1.318.1.1.13.5.3.12.9.0',
    airIRmPmEheating2StartTemperature => '1.3.6.1.4.1.318.1.1.13.5.3.12.10',
    airIRmPmEheating2StartTemperature => '1.3.6.1.4.1.318.1.1.13.5.3.12.10',
    airIRmPmEheating2StartTemperatureK => '1.3.6.1.4.1.318.1.1.13.5.3.12.10.1.0',
    airIRmPmEheating2StartTemperatureF => '1.3.6.1.4.1.318.1.1.13.5.3.12.10.2.0',
    airIRmPmEheating2Hysteresis => '1.3.6.1.4.1.318.1.1.13.5.3.12.11',
    airIRmPmEheating2Hysteresis => '1.3.6.1.4.1.318.1.1.13.5.3.12.11',
    airIRmPmEheating2HysteresisK => '1.3.6.1.4.1.318.1.1.13.5.3.12.11.1.0',
    airIRmPmEheating2HysteresisF => '1.3.6.1.4.1.318.1.1.13.5.3.12.11.2.0',
    airIRmPmEheating2 => '1.3.6.1.4.1.318.1.1.13.5.3.12',
    airIRmPmEheating2Runtime => '1.3.6.1.4.1.318.1.1.13.5.3.12.17.0',
    airIRmPmEheating3 => '1.3.6.1.4.1.318.1.1.13.5.3.13',
    airIRmPmEheating3ManOpEnable => '1.3.6.1.4.1.318.1.1.13.5.3.13.2.0',
    airIRmPmEheating3Running => '1.3.6.1.4.1.318.1.1.13.5.3.13.4.0',
    airIRmPmEheating3ManOpRunning => '1.3.6.1.4.1.318.1.1.13.5.3.13.5.0',
    airIRmPmEheating3Type => '1.3.6.1.4.1.318.1.1.13.5.3.13.9.0',
    airIRmPmEheating3StartTemperature => '1.3.6.1.4.1.318.1.1.13.5.3.13.10',
    airIRmPmEheating3StartTemperature => '1.3.6.1.4.1.318.1.1.13.5.3.13.10',
    airIRmPmEheating3StartTemperatureK => '1.3.6.1.4.1.318.1.1.13.5.3.13.10.1.0',
    airIRmPmEheating3StartTemperatureF => '1.3.6.1.4.1.318.1.1.13.5.3.13.10.2.0',
    airIRmPmEheating3Hysteresis => '1.3.6.1.4.1.318.1.1.13.5.3.13.11',
    airIRmPmEheating3Hysteresis => '1.3.6.1.4.1.318.1.1.13.5.3.13.11',
    airIRmPmEheating3HysteresisK => '1.3.6.1.4.1.318.1.1.13.5.3.13.11.1.0',
    airIRmPmEheating3HysteresisF => '1.3.6.1.4.1.318.1.1.13.5.3.13.11.2.0',
    airIRmPmEheating3 => '1.3.6.1.4.1.318.1.1.13.5.3.13',
    airIRmPmEheating3Runtime => '1.3.6.1.4.1.318.1.1.13.5.3.13.17.0',
    airIRmPmEheating4 => '1.3.6.1.4.1.318.1.1.13.5.3.14',
    airIRmPmEheating4ManOpEnable => '1.3.6.1.4.1.318.1.1.13.5.3.14.2.0',
    airIRmPmEheating4Running => '1.3.6.1.4.1.318.1.1.13.5.3.14.4.0',
    airIRmPmEheating4ManOpRunning => '1.3.6.1.4.1.318.1.1.13.5.3.14.5.0',
    airIRmPmEheating4Type => '1.3.6.1.4.1.318.1.1.13.5.3.14.9.0',
    airIRmPmEheating4StartTemperature => '1.3.6.1.4.1.318.1.1.13.5.3.14.10',
    airIRmPmEheating4StartTemperature => '1.3.6.1.4.1.318.1.1.13.5.3.14.10',
    airIRmPmEheating4StartTemperatureK => '1.3.6.1.4.1.318.1.1.13.5.3.14.10.1.0',
    airIRmPmEheating4StartTemperatureF => '1.3.6.1.4.1.318.1.1.13.5.3.14.10.2.0',
    airIRmPmEheating4Hysteresis => '1.3.6.1.4.1.318.1.1.13.5.3.14.11',
    airIRmPmEheating4Hysteresis => '1.3.6.1.4.1.318.1.1.13.5.3.14.11',
    airIRmPmEheating4HysteresisK => '1.3.6.1.4.1.318.1.1.13.5.3.14.11.1.0',
    airIRmPmEheating4HysteresisF => '1.3.6.1.4.1.318.1.1.13.5.3.14.11.2.0',
    airIRmPmEheating4 => '1.3.6.1.4.1.318.1.1.13.5.3.14',
    airIRmPmEheating4Runtime => '1.3.6.1.4.1.318.1.1.13.5.3.14.17.0',
    airIRmPmGECWvalve => '1.3.6.1.4.1.318.1.1.13.5.3.15',
    airIRmPmGECWvalveManOpEnable => '1.3.6.1.4.1.318.1.1.13.5.3.15.2.0',
    airIRmPmGECWvalveStartTemperature => '1.3.6.1.4.1.318.1.1.13.5.3.15.9',
    airIRmPmGECWvalveStartTemperature => '1.3.6.1.4.1.318.1.1.13.5.3.15.9',
    airIRmPmGECWvalveStartTemperatureK => '1.3.6.1.4.1.318.1.1.13.5.3.15.9.1.0',
    airIRmPmGECWvalveStartTemperatureF => '1.3.6.1.4.1.318.1.1.13.5.3.15.9.2.0',
    airIRmPmGECWvalveLinearRange => '1.3.6.1.4.1.318.1.1.13.5.3.15.10',
    airIRmPmGECWvalveLinearRange => '1.3.6.1.4.1.318.1.1.13.5.3.15.10',
    airIRmPmGECWvalveLinearRangeK => '1.3.6.1.4.1.318.1.1.13.5.3.15.10.1.0',
    airIRmPmGECWvalveLinearRangeF => '1.3.6.1.4.1.318.1.1.13.5.3.15.10.2.0',
    airIRmPmGECWvalveGEOffTemp => '1.3.6.1.4.1.318.1.1.13.5.3.15.12',
    airIRmPmGECWvalveGEOffTemp => '1.3.6.1.4.1.318.1.1.13.5.3.15.12',
    airIRmPmGECWvalveGEOffTempC => '1.3.6.1.4.1.318.1.1.13.5.3.15.12.1.0',
    airIRmPmGECWvalveGEOffTempF => '1.3.6.1.4.1.318.1.1.13.5.3.15.12.2.0',
    airIRmPmGECWvalve => '1.3.6.1.4.1.318.1.1.13.5.3.15',
    airIRmPmGECWvalveOpeningGrade => '1.3.6.1.4.1.318.1.1.13.5.3.15.15.0',
    airIRmPmGECWvalveManOpOpeningGrade => '1.3.6.1.4.1.318.1.1.13.5.3.15.16.0',
    airIRmPmGvalve => '1.3.6.1.4.1.318.1.1.13.5.3.16',
    airIRmPmGvalveManOperationEnable => '1.3.6.1.4.1.318.1.1.13.5.3.16.2.0',
    airIRmPmGvalvePreOpeningTime => '1.3.6.1.4.1.318.1.1.13.5.3.16.11.0',
    airIRmPmGvalvePreOpeningGrade => '1.3.6.1.4.1.318.1.1.13.5.3.16.12.0',
    airIRmPmGvalveOpeningGrade => '1.3.6.1.4.1.318.1.1.13.5.3.16.13.0',
    airIRmPmGvalveManOpOpeningGrade => '1.3.6.1.4.1.318.1.1.13.5.3.16.14.0',
    airIRmPmDrycooler1 => '1.3.6.1.4.1.318.1.1.13.5.3.17',
    airIRmPmDrycooler1ManOpEnable => '1.3.6.1.4.1.318.1.1.13.5.3.17.2.0',
    airIRmPmDrycooler1Running => '1.3.6.1.4.1.318.1.1.13.5.3.17.3.0',
    airIRmPmDrycooler1ManOpRunning => '1.3.6.1.4.1.318.1.1.13.5.3.17.5.0',
    airIRmPmDrycooler1WinterStartTemp => '1.3.6.1.4.1.318.1.1.13.5.3.17.9',
    airIRmPmDrycooler1WinterStartTemp => '1.3.6.1.4.1.318.1.1.13.5.3.17.9',
    airIRmPmDrycooler1WinterStartTempC => '1.3.6.1.4.1.318.1.1.13.5.3.17.9.1.0',
    airIRmPmDrycooler1WinterStartTempF => '1.3.6.1.4.1.318.1.1.13.5.3.17.9.2.0',
    airIRmPmDrycooler1SummerStartTemp => '1.3.6.1.4.1.318.1.1.13.5.3.17.10',
    airIRmPmDrycooler1SummerStartTemp => '1.3.6.1.4.1.318.1.1.13.5.3.17.10',
    airIRmPmDrycooler1SummerStartTempC => '1.3.6.1.4.1.318.1.1.13.5.3.17.10.1.0',
    airIRmPmDrycooler1SummerStartTempF => '1.3.6.1.4.1.318.1.1.13.5.3.17.10.2.0',
    airIRmPmDrycooler1Hysteresis => '1.3.6.1.4.1.318.1.1.13.5.3.17.11',
    airIRmPmDrycooler1Hysteresis => '1.3.6.1.4.1.318.1.1.13.5.3.17.11',
    airIRmPmDrycooler1HysteresisK => '1.3.6.1.4.1.318.1.1.13.5.3.17.11.1.0',
    airIRmPmDrycooler1HysteresisF => '1.3.6.1.4.1.318.1.1.13.5.3.17.11.2.0',
    airIRmPmDrycooler1 => '1.3.6.1.4.1.318.1.1.13.5.3.17',
    airIRmPmDrycooler1Runtime => '1.3.6.1.4.1.318.1.1.13.5.3.17.16.0',
    airIRmPmDrycooler2 => '1.3.6.1.4.1.318.1.1.13.5.3.18',
    airIRmPmDrycooler2ManOpEnable => '1.3.6.1.4.1.318.1.1.13.5.3.18.2.0',
    airIRmPmDrycooler2Running => '1.3.6.1.4.1.318.1.1.13.5.3.18.3.0',
    airIRmPmDrycooler2ManOpRunning => '1.3.6.1.4.1.318.1.1.13.5.3.18.5.0',
    airIRmPmDrycooler2WinterStartTemp => '1.3.6.1.4.1.318.1.1.13.5.3.18.9',
    airIRmPmDrycooler2WinterStartTemp => '1.3.6.1.4.1.318.1.1.13.5.3.18.9',
    airIRmPmDrycooler2WinterStartTempC => '1.3.6.1.4.1.318.1.1.13.5.3.18.9.1.0',
    airIRmPmDrycooler2WinterStartTempF => '1.3.6.1.4.1.318.1.1.13.5.3.18.9.2.0',
    airIRmPmDrycooler2SummerStartTemp => '1.3.6.1.4.1.318.1.1.13.5.3.18.10',
    airIRmPmDrycooler2SummerStartTemp => '1.3.6.1.4.1.318.1.1.13.5.3.18.10',
    airIRmPmDrycooler2SummerStartTempC => '1.3.6.1.4.1.318.1.1.13.5.3.18.10.1.0',
    airIRmPmDrycooler2SummerStartTempF => '1.3.6.1.4.1.318.1.1.13.5.3.18.10.2.0',
    airIRmPmDrycooler2Hysteresis => '1.3.6.1.4.1.318.1.1.13.5.3.18.11',
    airIRmPmDrycooler2Hysteresis => '1.3.6.1.4.1.318.1.1.13.5.3.18.11',
    airIRmPmDrycooler2HysteresisK => '1.3.6.1.4.1.318.1.1.13.5.3.18.11.1.0',
    airIRmPmDrycooler2HysteresisF => '1.3.6.1.4.1.318.1.1.13.5.3.18.11.2.0',
    airIRmPmDrycooler2 => '1.3.6.1.4.1.318.1.1.13.5.3.18',
    airIRmPmDrycooler2Runtime => '1.3.6.1.4.1.318.1.1.13.5.3.18.16.0',
    airIRmPmDrycooler3 => '1.3.6.1.4.1.318.1.1.13.5.3.19',
    airIRmPmDrycooler3ManOpEnable => '1.3.6.1.4.1.318.1.1.13.5.3.19.2.0',
    airIRmPmDrycooler3Running => '1.3.6.1.4.1.318.1.1.13.5.3.19.3.0',
    airIRmPmDrycooler3ManOpRunning => '1.3.6.1.4.1.318.1.1.13.5.3.19.5.0',
    airIRmPmDrycooler3WinterStartTemp => '1.3.6.1.4.1.318.1.1.13.5.3.19.9',
    airIRmPmDrycooler3WinterStartTemp => '1.3.6.1.4.1.318.1.1.13.5.3.19.9',
    airIRmPmDrycooler3WinterStartTempC => '1.3.6.1.4.1.318.1.1.13.5.3.19.9.1.0',
    airIRmPmDrycooler3WinterStartTempF => '1.3.6.1.4.1.318.1.1.13.5.3.19.9.2.0',
    airIRmPmDrycooler3SummerStartTemp => '1.3.6.1.4.1.318.1.1.13.5.3.19.10',
    airIRmPmDrycooler3SummerStartTemp => '1.3.6.1.4.1.318.1.1.13.5.3.19.10',
    airIRmPmDrycooler3SummerStartTempC => '1.3.6.1.4.1.318.1.1.13.5.3.19.10.1.0',
    airIRmPmDrycooler3SummerStartTempF => '1.3.6.1.4.1.318.1.1.13.5.3.19.10.2.0',
    airIRmPmDrycooler3Hysteresis => '1.3.6.1.4.1.318.1.1.13.5.3.19.11',
    airIRmPmDrycooler3Hysteresis => '1.3.6.1.4.1.318.1.1.13.5.3.19.11',
    airIRmPmDrycooler3HysteresisK => '1.3.6.1.4.1.318.1.1.13.5.3.19.11.1.0',
    airIRmPmDrycooler3HysteresisF => '1.3.6.1.4.1.318.1.1.13.5.3.19.11.2.0',
    airIRmPmDrycooler3 => '1.3.6.1.4.1.318.1.1.13.5.3.19',
    airIRmPmDrycooler3Runtime => '1.3.6.1.4.1.318.1.1.13.5.3.19.16.0',
    airIRmPmDrycooler4 => '1.3.6.1.4.1.318.1.1.13.5.3.20',
    airIRmPmDrycooler4ManOpEnable => '1.3.6.1.4.1.318.1.1.13.5.3.20.2.0',
    airIRmPmDrycooler4Running => '1.3.6.1.4.1.318.1.1.13.5.3.20.3.0',
    airIRmPmDrycooler4ManOpRunning => '1.3.6.1.4.1.318.1.1.13.5.3.20.5.0',
    airIRmPmDrycooler4WinterStartTemp => '1.3.6.1.4.1.318.1.1.13.5.3.20.9',
    airIRmPmDrycooler4WinterStartTemp => '1.3.6.1.4.1.318.1.1.13.5.3.20.9',
    airIRmPmDrycooler4WinterStartTempC => '1.3.6.1.4.1.318.1.1.13.5.3.20.9.1.0',
    airIRmPmDrycooler4WinterStartTempF => '1.3.6.1.4.1.318.1.1.13.5.3.20.9.2.0',
    airIRmPmDrycooler4SummerStartTemp => '1.3.6.1.4.1.318.1.1.13.5.3.20.10',
    airIRmPmDrycooler4SummerStartTemp => '1.3.6.1.4.1.318.1.1.13.5.3.20.10',
    airIRmPmDrycooler4SummerStartTempC => '1.3.6.1.4.1.318.1.1.13.5.3.20.10.1.0',
    airIRmPmDrycooler4SummerStartTempF => '1.3.6.1.4.1.318.1.1.13.5.3.20.10.2.0',
    airIRmPmDrycooler4Hysteresis => '1.3.6.1.4.1.318.1.1.13.5.3.20.11',
    airIRmPmDrycooler4Hysteresis => '1.3.6.1.4.1.318.1.1.13.5.3.20.11',
    airIRmPmDrycooler4HysteresisK => '1.3.6.1.4.1.318.1.1.13.5.3.20.11.1.0',
    airIRmPmDrycooler4HysteresisF => '1.3.6.1.4.1.318.1.1.13.5.3.20.11.2.0',
    airIRmPmDrycooler4 => '1.3.6.1.4.1.318.1.1.13.5.3.20',
    airIRmPmDrycooler4Runtime => '1.3.6.1.4.1.318.1.1.13.5.3.20.16.0',
    airIRmPmPump1 => '1.3.6.1.4.1.318.1.1.13.5.3.21',
    airIRmPmPump1ManOpEnable => '1.3.6.1.4.1.318.1.1.13.5.3.21.2.0',
    airIRmPmPump1Running => '1.3.6.1.4.1.318.1.1.13.5.3.21.3.0',
    airIRmPmPump1ManOpRunning => '1.3.6.1.4.1.318.1.1.13.5.3.21.6.0',
    airIRmPmPump1StartTemperature => '1.3.6.1.4.1.318.1.1.13.5.3.21.10',
    airIRmPmPump1StartTemperature => '1.3.6.1.4.1.318.1.1.13.5.3.21.10',
    airIRmPmPump1StartTemperatureK => '1.3.6.1.4.1.318.1.1.13.5.3.21.10.1.0',
    airIRmPmPump1StartTemperatureF => '1.3.6.1.4.1.318.1.1.13.5.3.21.10.2.0',
    airIRmPmPump1Hysteresis => '1.3.6.1.4.1.318.1.1.13.5.3.21.11',
    airIRmPmPump1Hysteresis => '1.3.6.1.4.1.318.1.1.13.5.3.21.11',
    airIRmPmPump1HysteresisK => '1.3.6.1.4.1.318.1.1.13.5.3.21.11.1.0',
    airIRmPmPump1HysteresisF => '1.3.6.1.4.1.318.1.1.13.5.3.21.11.2.0',
    airIRmPmPump1LinearRange => '1.3.6.1.4.1.318.1.1.13.5.3.21.12',
    airIRmPmPump1LinearRange => '1.3.6.1.4.1.318.1.1.13.5.3.21.12',
    airIRmPmPump1LinearRangeK => '1.3.6.1.4.1.318.1.1.13.5.3.21.12.1.0',
    airIRmPmPump1LinearRangeF => '1.3.6.1.4.1.318.1.1.13.5.3.21.12.2.0',
    airIRmPmPump1 => '1.3.6.1.4.1.318.1.1.13.5.3.21',
    airIRmPmPump1PressureSetpoint => '1.3.6.1.4.1.318.1.1.13.5.3.21.13.0',
    airIRmPmPump1Runtime => '1.3.6.1.4.1.318.1.1.13.5.3.21.21.0',
    airIRmPmPump1Speed => '1.3.6.1.4.1.318.1.1.13.5.3.21.22.0',
    airIRmPmPump1ControlCycle => '1.3.6.1.4.1.318.1.1.13.5.3.21.28.0',
    airIRmPmPump1MaxAdjust => '1.3.6.1.4.1.318.1.1.13.5.3.21.29.0',
    airIRmPmPump1ControlFactor => '1.3.6.1.4.1.318.1.1.13.5.3.21.30.0',
    airIRmPmPump2 => '1.3.6.1.4.1.318.1.1.13.5.3.22',
    airIRmPmPump2ManOpEnable => '1.3.6.1.4.1.318.1.1.13.5.3.22.2.0',
    airIRmPmPump2Running => '1.3.6.1.4.1.318.1.1.13.5.3.22.3.0',
    airIRmPmPump2ManOpRunning => '1.3.6.1.4.1.318.1.1.13.5.3.22.6.0',
    airIRmPmPump2StartTemperature => '1.3.6.1.4.1.318.1.1.13.5.3.22.10',
    airIRmPmPump2StartTemperature => '1.3.6.1.4.1.318.1.1.13.5.3.22.10',
    airIRmPmPump2StartTemperatureK => '1.3.6.1.4.1.318.1.1.13.5.3.22.10.1.0',
    airIRmPmPump2StartTemperatureF => '1.3.6.1.4.1.318.1.1.13.5.3.22.10.2.0',
    airIRmPmPump2Hysteresis => '1.3.6.1.4.1.318.1.1.13.5.3.22.11',
    airIRmPmPump2Hysteresis => '1.3.6.1.4.1.318.1.1.13.5.3.22.11',
    airIRmPmPump2HysteresisK => '1.3.6.1.4.1.318.1.1.13.5.3.22.11.1.0',
    airIRmPmPump2HysteresisF => '1.3.6.1.4.1.318.1.1.13.5.3.22.11.2.0',
    airIRmPmPump2LinearRange => '1.3.6.1.4.1.318.1.1.13.5.3.22.12',
    airIRmPmPump2LinearRange => '1.3.6.1.4.1.318.1.1.13.5.3.22.12',
    airIRmPmPump2LinearRangeK => '1.3.6.1.4.1.318.1.1.13.5.3.22.12.1.0',
    airIRmPmPump2LinearRangeF => '1.3.6.1.4.1.318.1.1.13.5.3.22.12.2.0',
    airIRmPmPump2 => '1.3.6.1.4.1.318.1.1.13.5.3.22',
    airIRmPmPump2PressureSetpoint => '1.3.6.1.4.1.318.1.1.13.5.3.22.13.0',
    airIRmPmPump2Runtime => '1.3.6.1.4.1.318.1.1.13.5.3.22.21.0',
    airIRmPmPump2Speed => '1.3.6.1.4.1.318.1.1.13.5.3.22.22.0',
    airIRmPmPump2ControlCycle => '1.3.6.1.4.1.318.1.1.13.5.3.22.28.0',
    airIRmPmPump2MaxAdjust => '1.3.6.1.4.1.318.1.1.13.5.3.22.29.0',
    airIRmPmPump2ControlFactor => '1.3.6.1.4.1.318.1.1.13.5.3.22.30.0',
    airIRmPmPump3 => '1.3.6.1.4.1.318.1.1.13.5.3.23',
    airIRmPmPump3ManOpEnable => '1.3.6.1.4.1.318.1.1.13.5.3.23.2.0',
    airIRmPmPump3Running => '1.3.6.1.4.1.318.1.1.13.5.3.23.3.0',
    airIRmPmPump3ManOpRunning => '1.3.6.1.4.1.318.1.1.13.5.3.23.6.0',
    airIRmPmPump3StartTemperature => '1.3.6.1.4.1.318.1.1.13.5.3.23.10',
    airIRmPmPump3StartTemperature => '1.3.6.1.4.1.318.1.1.13.5.3.23.10',
    airIRmPmPump3StartTemperatureK => '1.3.6.1.4.1.318.1.1.13.5.3.23.10.1.0',
    airIRmPmPump3StartTemperatureF => '1.3.6.1.4.1.318.1.1.13.5.3.23.10.2.0',
    airIRmPmPump3Hysteresis => '1.3.6.1.4.1.318.1.1.13.5.3.23.11',
    airIRmPmPump3Hysteresis => '1.3.6.1.4.1.318.1.1.13.5.3.23.11',
    airIRmPmPump3HysteresisK => '1.3.6.1.4.1.318.1.1.13.5.3.23.11.1.0',
    airIRmPmPump3HysteresisF => '1.3.6.1.4.1.318.1.1.13.5.3.23.11.2.0',
    airIRmPmPump3LinearRange => '1.3.6.1.4.1.318.1.1.13.5.3.23.12',
    airIRmPmPump3LinearRange => '1.3.6.1.4.1.318.1.1.13.5.3.23.12',
    airIRmPmPump3LinearRangeK => '1.3.6.1.4.1.318.1.1.13.5.3.23.12.1.0',
    airIRmPmPump3LinearRangeF => '1.3.6.1.4.1.318.1.1.13.5.3.23.12.2.0',
    airIRmPmPump3 => '1.3.6.1.4.1.318.1.1.13.5.3.23',
    airIRmPmPump3PressureSetpoint => '1.3.6.1.4.1.318.1.1.13.5.3.23.13.0',
    airIRmPmPump3Runtime => '1.3.6.1.4.1.318.1.1.13.5.3.23.21.0',
    airIRmPmPump3Speed => '1.3.6.1.4.1.318.1.1.13.5.3.23.22.0',
    airIRmPmPump3ControlCycle => '1.3.6.1.4.1.318.1.1.13.5.3.23.28.0',
    airIRmPmPump3MaxAdjust => '1.3.6.1.4.1.318.1.1.13.5.3.23.29.0',
    airIRmPmPump3ControlFactor => '1.3.6.1.4.1.318.1.1.13.5.3.23.30.0',
    airIRmPmPump4 => '1.3.6.1.4.1.318.1.1.13.5.3.24',
    airIRmPmPump4ManOpEnable => '1.3.6.1.4.1.318.1.1.13.5.3.24.2.0',
    airIRmPmPump4Running => '1.3.6.1.4.1.318.1.1.13.5.3.24.3.0',
    airIRmPmPump4ManOpRunning => '1.3.6.1.4.1.318.1.1.13.5.3.24.6.0',
    airIRmPmPump4StartTemperature => '1.3.6.1.4.1.318.1.1.13.5.3.24.10',
    airIRmPmPump4StartTemperature => '1.3.6.1.4.1.318.1.1.13.5.3.24.10',
    airIRmPmPump4StartTemperatureK => '1.3.6.1.4.1.318.1.1.13.5.3.24.10.1.0',
    airIRmPmPump4StartTemperatureF => '1.3.6.1.4.1.318.1.1.13.5.3.24.10.2.0',
    airIRmPmPump4Hysteresis => '1.3.6.1.4.1.318.1.1.13.5.3.24.11',
    airIRmPmPump4Hysteresis => '1.3.6.1.4.1.318.1.1.13.5.3.24.11',
    airIRmPmPump4HysteresisK => '1.3.6.1.4.1.318.1.1.13.5.3.24.11.1.0',
    airIRmPmPump4HysteresisF => '1.3.6.1.4.1.318.1.1.13.5.3.24.11.2.0',
    airIRmPmPump4LinearRange => '1.3.6.1.4.1.318.1.1.13.5.3.24.12',
    airIRmPmPump4LinearRange => '1.3.6.1.4.1.318.1.1.13.5.3.24.12',
    airIRmPmPump4LinearRangeK => '1.3.6.1.4.1.318.1.1.13.5.3.24.12.1.0',
    airIRmPmPump4LinearRangeF => '1.3.6.1.4.1.318.1.1.13.5.3.24.12.2.0',
    airIRmPmPump4 => '1.3.6.1.4.1.318.1.1.13.5.3.24',
    airIRmPmPump4PressureSetpoint => '1.3.6.1.4.1.318.1.1.13.5.3.24.13.0',
    airIRmPmPump4Runtime => '1.3.6.1.4.1.318.1.1.13.5.3.24.21.0',
    airIRmPmPump4Speed => '1.3.6.1.4.1.318.1.1.13.5.3.24.22.0',
    airIRmPmPump4ControlCycle => '1.3.6.1.4.1.318.1.1.13.5.3.24.28.0',
    airIRmPmPump4MaxAdjust => '1.3.6.1.4.1.318.1.1.13.5.3.24.29.0',
    airIRmPmPump4ControlFactor => '1.3.6.1.4.1.318.1.1.13.5.3.24.30.0',
    airIRmPmHotgasHeating => '1.3.6.1.4.1.318.1.1.13.5.3.25',
    airIRmPmHotgasHeatRunning => '1.3.6.1.4.1.318.1.1.13.5.3.25.3.0',
    airIRmPmPWWHeating => '1.3.6.1.4.1.318.1.1.13.5.3.26',
    airIRmPmPWWHeatingManOpEnable => '1.3.6.1.4.1.318.1.1.13.5.3.26.2.0',
    airIRmPmPWWHeatingRunning => '1.3.6.1.4.1.318.1.1.13.5.3.26.3.0',
    airIRmPmPWWHeatingManOpRunning => '1.3.6.1.4.1.318.1.1.13.5.3.26.4.0',
    airIRmPmPWWHeatingType => '1.3.6.1.4.1.318.1.1.13.5.3.26.9.0',
    airIRmPmPWWHeatingStartTemp => '1.3.6.1.4.1.318.1.1.13.5.3.26.10',
    airIRmPmPWWHeatingStartTemp => '1.3.6.1.4.1.318.1.1.13.5.3.26.10',
    airIRmPmPWWHeatingStartTempK => '1.3.6.1.4.1.318.1.1.13.5.3.26.10.1.0',
    airIRmPmPWWHeatingStartTempF => '1.3.6.1.4.1.318.1.1.13.5.3.26.10.2.0',
    airIRmPmPWWHeatingHysteresis => '1.3.6.1.4.1.318.1.1.13.5.3.26.12',
    airIRmPmPWWHeatingHysteresis => '1.3.6.1.4.1.318.1.1.13.5.3.26.12',
    airIRmPmPWWHeatingHysteresisK => '1.3.6.1.4.1.318.1.1.13.5.3.26.12.1.0',
    airIRmPmPWWHeatingHysteresisF => '1.3.6.1.4.1.318.1.1.13.5.3.26.12.2.0',
    airIRmPmPWWHeatingLinearRange => '1.3.6.1.4.1.318.1.1.13.5.3.26.13',
    airIRmPmPWWHeatingLinearRange => '1.3.6.1.4.1.318.1.1.13.5.3.26.13',
    airIRmPmPWWHeatingLinearRangeK => '1.3.6.1.4.1.318.1.1.13.5.3.26.13.1.0',
    airIRmPmPWWHeatingLinearRangeF => '1.3.6.1.4.1.318.1.1.13.5.3.26.13.2.0',
    airIRmPmPWWHeating => '1.3.6.1.4.1.318.1.1.13.5.3.26',
    airIRmPmPWWHeatingCurrentValue => '1.3.6.1.4.1.318.1.1.13.5.3.26.16.0',
    airIRmPmPWWHeatingManOpValue => '1.3.6.1.4.1.318.1.1.13.5.3.26.17.0',
    airIRmPmHumidifier1 => '1.3.6.1.4.1.318.1.1.13.5.3.27',
    airIRmPmHumidifier1ManOpEnable => '1.3.6.1.4.1.318.1.1.13.5.3.27.2.0',
    airIRmPmHumidifier1Running => '1.3.6.1.4.1.318.1.1.13.5.3.27.3.0',
    airIRmPmHumidifier1ManOpRunning => '1.3.6.1.4.1.318.1.1.13.5.3.27.5.0',
    airIRmPmHumidifier1Type => '1.3.6.1.4.1.318.1.1.13.5.3.27.17.0',
    airIRmPmHumidifier1StartHumidity => '1.3.6.1.4.1.318.1.1.13.5.3.27.18.0',
    airIRmPmHumidifier1Hysteresis => '1.3.6.1.4.1.318.1.1.13.5.3.27.20.0',
    airIRmPmHumidifier1LinearRange => '1.3.6.1.4.1.318.1.1.13.5.3.27.21.0',
    airIRmPmHumidifier1Runtime => '1.3.6.1.4.1.318.1.1.13.5.3.27.27.0',
    airIRmPmHumidifier1CurrentValue => '1.3.6.1.4.1.318.1.1.13.5.3.27.28.0',
    airIRmPmHumidifier1ManOpValue => '1.3.6.1.4.1.318.1.1.13.5.3.27.29.0',
    airIRmPmHumidifier2 => '1.3.6.1.4.1.318.1.1.13.5.3.28',
    airIRmPmHumidifier2ManOpEnable => '1.3.6.1.4.1.318.1.1.13.5.3.28.2.0',
    airIRmPmHumidifier2Running => '1.3.6.1.4.1.318.1.1.13.5.3.28.3.0',
    airIRmPmHumidifier2ManOpRunning => '1.3.6.1.4.1.318.1.1.13.5.3.28.5.0',
    airIRmPmHumidifier2Type => '1.3.6.1.4.1.318.1.1.13.5.3.28.17.0',
    airIRmPmHumidifier2StartHumidity => '1.3.6.1.4.1.318.1.1.13.5.3.28.18.0',
    airIRmPmHumidifier2Hysteresis => '1.3.6.1.4.1.318.1.1.13.5.3.28.20.0',
    airIRmPmHumidifier2LinearRange => '1.3.6.1.4.1.318.1.1.13.5.3.28.21.0',
    airIRmPmHumidifier2Runtime => '1.3.6.1.4.1.318.1.1.13.5.3.28.27.0',
    airIRmPmHumidifier2CurrentValue => '1.3.6.1.4.1.318.1.1.13.5.3.28.28.0',
    airIRmPmHumidifier2ManOpValue => '1.3.6.1.4.1.318.1.1.13.5.3.28.29.0',
    airIRmPmDehumidification => '1.3.6.1.4.1.318.1.1.13.5.3.31',
    airIRmPmDehumidificManOpEnable => '1.3.6.1.4.1.318.1.1.13.5.3.31.2.0',
    airIRmPmDehumidificRunning => '1.3.6.1.4.1.318.1.1.13.5.3.31.3.0',
    airIRmPmDehumidificManOpRunning => '1.3.6.1.4.1.318.1.1.13.5.3.31.5.0',
    airIRmPmDehumidificStartHumidity => '1.3.6.1.4.1.318.1.1.13.5.3.31.10.0',
    airIRmPmDehumidificHysteresis => '1.3.6.1.4.1.318.1.1.13.5.3.31.12.0',
    airIRmPmDehumidificMinWaterTemp => '1.3.6.1.4.1.318.1.1.13.5.3.31.18',
    airIRmPmDehumidificMinWaterTemp => '1.3.6.1.4.1.318.1.1.13.5.3.31.18',
    airIRmPmDehumidificMinWaterTempC => '1.3.6.1.4.1.318.1.1.13.5.3.31.18.1.0',
    airIRmPmDehumidificMinWaterTempF => '1.3.6.1.4.1.318.1.1.13.5.3.31.18.2.0',
    airIRmPmDehumidificMaxWaterTemp => '1.3.6.1.4.1.318.1.1.13.5.3.31.19',
    airIRmPmDehumidificMaxWaterTemp => '1.3.6.1.4.1.318.1.1.13.5.3.31.19',
    airIRmPmDehumidificMaxWaterTempC => '1.3.6.1.4.1.318.1.1.13.5.3.31.19.1.0',
    airIRmPmDehumidificMaxWaterTempF => '1.3.6.1.4.1.318.1.1.13.5.3.31.19.2.0',
    airIRmPmDehumidification => '1.3.6.1.4.1.318.1.1.13.5.3.31',
    airIRmPmDehumidificRuntime => '1.3.6.1.4.1.318.1.1.13.5.3.31.21.0',
    airIRmPmFan1 => '1.3.6.1.4.1.318.1.1.13.5.3.32',
    airIRmPmFan1ManOpEnable => '1.3.6.1.4.1.318.1.1.13.5.3.32.2.0',
    airIRmPmFan1Running => '1.3.6.1.4.1.318.1.1.13.5.3.32.3.0',
    airIRmPmFan1ManOpRunning => '1.3.6.1.4.1.318.1.1.13.5.3.32.6.0',
    airIRmPmFan1Type => '1.3.6.1.4.1.318.1.1.13.5.3.32.9.0',
    airIRmPmFan1Runtime => '1.3.6.1.4.1.318.1.1.13.5.3.32.32.0',
    airIRmPmFan1Speed => '1.3.6.1.4.1.318.1.1.13.5.3.32.33.0',
    airIRmPmFan1ManOpSpeed => '1.3.6.1.4.1.318.1.1.13.5.3.32.34.0',
    airIRmPmFan2 => '1.3.6.1.4.1.318.1.1.13.5.3.33',
    airIRmPmFan2ManOpEnable => '1.3.6.1.4.1.318.1.1.13.5.3.33.2.0',
    airIRmPmFan2Running => '1.3.6.1.4.1.318.1.1.13.5.3.33.3.0',
    airIRmPmFan2ManOpRunning => '1.3.6.1.4.1.318.1.1.13.5.3.33.6.0',
    airIRmPmFan2Type => '1.3.6.1.4.1.318.1.1.13.5.3.33.9.0',
    airIRmPmFan2Runtime => '1.3.6.1.4.1.318.1.1.13.5.3.33.32.0',
    airIRmPmFan2Speed => '1.3.6.1.4.1.318.1.1.13.5.3.33.33.0',
    airIRmPmFan2ManOpSpeed => '1.3.6.1.4.1.318.1.1.13.5.3.33.34.0',
    airIRmPmFan3 => '1.3.6.1.4.1.318.1.1.13.5.3.34',
    airIRmPmFan3ManOpEnable => '1.3.6.1.4.1.318.1.1.13.5.3.34.2.0',
    airIRmPmFan3Running => '1.3.6.1.4.1.318.1.1.13.5.3.34.3.0',
    airIRmPmFan3ManOpRunning => '1.3.6.1.4.1.318.1.1.13.5.3.34.6.0',
    airIRmPmFan3Type => '1.3.6.1.4.1.318.1.1.13.5.3.34.9.0',
    airIRmPmFan3Runtime => '1.3.6.1.4.1.318.1.1.13.5.3.34.32.0',
    airIRmPmFan3Speed => '1.3.6.1.4.1.318.1.1.13.5.3.34.33.0',
    airIRmPmFan3ManOpSpeed => '1.3.6.1.4.1.318.1.1.13.5.3.34.34.0',
    airIRmPmLouver1 => '1.3.6.1.4.1.318.1.1.13.5.3.35',
    airIRmPmLouver1ManOpEnable => '1.3.6.1.4.1.318.1.1.13.5.3.35.2.0',
    airIRmPmLouver1Position => '1.3.6.1.4.1.318.1.1.13.5.3.35.3.0',
    airIRmPmLouver1ManOpPosition => '1.3.6.1.4.1.318.1.1.13.5.3.35.4.0',
    airIRmPmLouver2 => '1.3.6.1.4.1.318.1.1.13.5.3.36',
    airIRmPmLouver2ManOpEnable => '1.3.6.1.4.1.318.1.1.13.5.3.36.2.0',
    airIRmPmLouver2Position => '1.3.6.1.4.1.318.1.1.13.5.3.36.3.0',
    airIRmPmLouver2ManOpPosition => '1.3.6.1.4.1.318.1.1.13.5.3.36.4.0',
    airIRmPmLouver3 => '1.3.6.1.4.1.318.1.1.13.5.3.37',
    airIRmPmLouver3ManOpEnable => '1.3.6.1.4.1.318.1.1.13.5.3.37.2.0',
    airIRmPmLouver3Position => '1.3.6.1.4.1.318.1.1.13.5.3.37.3.0',
    airIRmPmLouver3ManOpPosition => '1.3.6.1.4.1.318.1.1.13.5.3.37.4.0',
    airIRmPmAlarmBits => '1.3.6.1.4.1.318.1.1.13.5.3.43',
    airIRmPmFan1Failure => '1.3.6.1.4.1.318.1.1.13.5.3.43.1.0',
    airIRmPmFan2Failure => '1.3.6.1.4.1.318.1.1.13.5.3.43.2.0',
    airIRmPmFan3Failure => '1.3.6.1.4.1.318.1.1.13.5.3.43.3.0',
    airIRmPmCompressor1Failure => '1.3.6.1.4.1.318.1.1.13.5.3.43.4.0',
    airIRmPmCompressor2Failure => '1.3.6.1.4.1.318.1.1.13.5.3.43.5.0',
    airIRmPmWaterDetector => '1.3.6.1.4.1.318.1.1.13.5.3.43.6.0',
    airIRmPmPhaseFailure => '1.3.6.1.4.1.318.1.1.13.5.3.43.7.0',
    airIRmPmFireSmokeDetector => '1.3.6.1.4.1.318.1.1.13.5.3.43.8.0',
    airIRmPmReturnAirTemperatureTooHigh => '1.3.6.1.4.1.318.1.1.13.5.3.43.9.0',
    airIRmPmReturnAirHumidityTooHigh => '1.3.6.1.4.1.318.1.1.13.5.3.43.10.0',
    airIRmPmSupplyAirTemperatureTooHigh => '1.3.6.1.4.1.318.1.1.13.5.3.43.11.0',
    airIRmPmSupplyAirHumidityTooHigh => '1.3.6.1.4.1.318.1.1.13.5.3.43.12.0',
    airIRmPmWaterTemperatureTooHigh => '1.3.6.1.4.1.318.1.1.13.5.3.43.13.0',
    airIRmPmReturnAirTemperatureTooLow => '1.3.6.1.4.1.318.1.1.13.5.3.43.14.0',
    airIRmPmReturnAirHumidityTooLow => '1.3.6.1.4.1.318.1.1.13.5.3.43.15.0',
    airIRmPmSupplyAirTemperatureTooLow => '1.3.6.1.4.1.318.1.1.13.5.3.43.16.0',
    airIRmPmSupplyAirHumidityTooLow => '1.3.6.1.4.1.318.1.1.13.5.3.43.17.0',
    airIRmPmWaterTemperatureTooLow => '1.3.6.1.4.1.318.1.1.13.5.3.43.18.0',
    airIRmPmSensor1Failure => '1.3.6.1.4.1.318.1.1.13.5.3.43.19.0',
    airIRmPmSensor2Failure => '1.3.6.1.4.1.318.1.1.13.5.3.43.20.0',
    airIRmPmSensor3Failure => '1.3.6.1.4.1.318.1.1.13.5.3.43.21.0',
    airIRmPmSensor4Failure => '1.3.6.1.4.1.318.1.1.13.5.3.43.22.0',
    airIRmPmSensor5Failure => '1.3.6.1.4.1.318.1.1.13.5.3.43.23.0',
    airIRmPmSensor6Failure => '1.3.6.1.4.1.318.1.1.13.5.3.43.24.0',
    airIRmPmSensor7Failure => '1.3.6.1.4.1.318.1.1.13.5.3.43.25.0',
    airIRmPmSensor8Failure => '1.3.6.1.4.1.318.1.1.13.5.3.43.26.0',
    airIRmPmSensor9Failure => '1.3.6.1.4.1.318.1.1.13.5.3.43.27.0',
    airIRmPmSensor10Failure => '1.3.6.1.4.1.318.1.1.13.5.3.43.28.0',
    airIRmPmSensor11Failure => '1.3.6.1.4.1.318.1.1.13.5.3.43.29.0',
    airIRmPmSensor12Failure => '1.3.6.1.4.1.318.1.1.13.5.3.43.30.0',
    airIRmPmSensor13Failure => '1.3.6.1.4.1.318.1.1.13.5.3.43.31.0',
    airIRmPmSensor14Failure => '1.3.6.1.4.1.318.1.1.13.5.3.43.32.0',
    airIRmPmSensor15Failure => '1.3.6.1.4.1.318.1.1.13.5.3.43.33.0',
    airIRmPmSensor16Failure => '1.3.6.1.4.1.318.1.1.13.5.3.43.34.0',
    airIRmPmSensor17Failure => '1.3.6.1.4.1.318.1.1.13.5.3.43.35.0',
    airIRmPmSensor18Failure => '1.3.6.1.4.1.318.1.1.13.5.3.43.36.0',
    airIRmPmSensor19Failure => '1.3.6.1.4.1.318.1.1.13.5.3.43.37.0',
    airIRmPmSensor20Failure => '1.3.6.1.4.1.318.1.1.13.5.3.43.38.0',
    airIRmPmSensor21Failure => '1.3.6.1.4.1.318.1.1.13.5.3.43.39.0',
    airIRmPmSensor1Defect => '1.3.6.1.4.1.318.1.1.13.5.3.43.40.0',
    airIRmPmSensor2Defect => '1.3.6.1.4.1.318.1.1.13.5.3.43.41.0',
    airIRmPmSensor3Defect => '1.3.6.1.4.1.318.1.1.13.5.3.43.42.0',
    airIRmPmSensor4Defect => '1.3.6.1.4.1.318.1.1.13.5.3.43.43.0',
    airIRmPmSensor5Defect => '1.3.6.1.4.1.318.1.1.13.5.3.43.44.0',
    airIRmPmSensor6Defect => '1.3.6.1.4.1.318.1.1.13.5.3.43.45.0',
    airIRmPmSensor7Defect => '1.3.6.1.4.1.318.1.1.13.5.3.43.46.0',
    airIRmPmSensor8Defect => '1.3.6.1.4.1.318.1.1.13.5.3.43.47.0',
    airIRmPmSensor9Defect => '1.3.6.1.4.1.318.1.1.13.5.3.43.48.0',
    airIRmPmSensor10Defect => '1.3.6.1.4.1.318.1.1.13.5.3.43.49.0',
    airIRmPmSensor11Defect => '1.3.6.1.4.1.318.1.1.13.5.3.43.50.0',
    airIRmPmSensor12Defect => '1.3.6.1.4.1.318.1.1.13.5.3.43.51.0',
    airIRmPmSensor13Defect => '1.3.6.1.4.1.318.1.1.13.5.3.43.52.0',
    airIRmPmSensor14Defect => '1.3.6.1.4.1.318.1.1.13.5.3.43.53.0',
    airIRmPmSensor15Defect => '1.3.6.1.4.1.318.1.1.13.5.3.43.54.0',
    airIRmPmSensor16Defect => '1.3.6.1.4.1.318.1.1.13.5.3.43.55.0',
    airIRmPmSensor17Defect => '1.3.6.1.4.1.318.1.1.13.5.3.43.56.0',
    airIRmPmSensor18Defect => '1.3.6.1.4.1.318.1.1.13.5.3.43.57.0',
    airIRmPmSensor19Defect => '1.3.6.1.4.1.318.1.1.13.5.3.43.58.0',
    airIRmPmSensor20Defect => '1.3.6.1.4.1.318.1.1.13.5.3.43.59.0',
    airIRmPmSensor21Defect => '1.3.6.1.4.1.318.1.1.13.5.3.43.60.0',
    airIRmPmCompressor1Alarm => '1.3.6.1.4.1.318.1.1.13.5.3.43.61.0',
    airIRmPmCompressor2Alarm => '1.3.6.1.4.1.318.1.1.13.5.3.43.62.0',
    airIRmPmCompressor1LowPressure => '1.3.6.1.4.1.318.1.1.13.5.3.43.63.0',
    airIRmPmCompressor2LowPressure => '1.3.6.1.4.1.318.1.1.13.5.3.43.64.0',
    airIRmPmReheat1Failure => '1.3.6.1.4.1.318.1.1.13.5.3.43.65.0',
    airIRmPmReheat2Failure => '1.3.6.1.4.1.318.1.1.13.5.3.43.66.0',
    airIRmPmReheat3Failure => '1.3.6.1.4.1.318.1.1.13.5.3.43.67.0',
    airIRmPmReheat4Failure => '1.3.6.1.4.1.318.1.1.13.5.3.43.68.0',
    airIRmPmDrycooler1Failure => '1.3.6.1.4.1.318.1.1.13.5.3.43.69.0',
    airIRmPmDrycooler2Failure => '1.3.6.1.4.1.318.1.1.13.5.3.43.70.0',
    airIRmPmDrycooler3Failure => '1.3.6.1.4.1.318.1.1.13.5.3.43.71.0',
    airIRmPmDrycooler4Failure => '1.3.6.1.4.1.318.1.1.13.5.3.43.72.0',
    airIRmPmPump1Failure => '1.3.6.1.4.1.318.1.1.13.5.3.43.73.0',
    airIRmPmPump2Failure => '1.3.6.1.4.1.318.1.1.13.5.3.43.74.0',
    airIRmPmPump3Failure => '1.3.6.1.4.1.318.1.1.13.5.3.43.75.0',
    airIRmPmPump4Failure => '1.3.6.1.4.1.318.1.1.13.5.3.43.76.0',
    airIRmPmHumidifier1Failure => '1.3.6.1.4.1.318.1.1.13.5.3.43.77.0',
    airIRmPmHumidifier2Failure => '1.3.6.1.4.1.318.1.1.13.5.3.43.78.0',
    airIRmPmHumidifier3Failure => '1.3.6.1.4.1.318.1.1.13.5.3.43.79.0',
    airIRmPmHumidifier1Alarm5us => '1.3.6.1.4.1.318.1.1.13.5.3.43.80.0',
    airIRmPmHumidifier2Alarm5us => '1.3.6.1.4.1.318.1.1.13.5.3.43.81.0',
    airIRmPmHumidifier3Alarm5us => '1.3.6.1.4.1.318.1.1.13.5.3.43.82.0',
    airIRmPmHumidifier1Alarm20us => '1.3.6.1.4.1.318.1.1.13.5.3.43.83.0',
    airIRmPmHumidifier2Alarm20us => '1.3.6.1.4.1.318.1.1.13.5.3.43.84.0',
    airIRmPmHumidifier3Alarm20us => '1.3.6.1.4.1.318.1.1.13.5.3.43.85.0',
    airIRmPmFan1Alarm => '1.3.6.1.4.1.318.1.1.13.5.3.43.86.0',
    airIRmPmFan2Alarm => '1.3.6.1.4.1.318.1.1.13.5.3.43.87.0',
    airIRmPmFan3Alarm => '1.3.6.1.4.1.318.1.1.13.5.3.43.88.0',
    airIRmPmFilter1Clogged => '1.3.6.1.4.1.318.1.1.13.5.3.43.89.0',
    airIRmPmFilter2Clogged => '1.3.6.1.4.1.318.1.1.13.5.3.43.90.0',
    airIRmPmFilter3Clogged => '1.3.6.1.4.1.318.1.1.13.5.3.43.91.0',
    airIRmPmAuxiliaryAlarm1 => '1.3.6.1.4.1.318.1.1.13.5.3.43.92.0',
    airIRmPmAuxiliaryAlarm2 => '1.3.6.1.4.1.318.1.1.13.5.3.43.93.0',
    airIRmPmAuxiliaryAlarm3 => '1.3.6.1.4.1.318.1.1.13.5.3.43.94.0',
    airIRmPmAuxiliaryAlarm4 => '1.3.6.1.4.1.318.1.1.13.5.3.43.95.0',
    airIRmPmAuxiliaryAlarm5 => '1.3.6.1.4.1.318.1.1.13.5.3.43.96.0',
    airIRmPmAuxiliaryAlarm6 => '1.3.6.1.4.1.318.1.1.13.5.3.43.97.0',
    airIRmPmAuxiliaryAlarm7 => '1.3.6.1.4.1.318.1.1.13.5.3.43.98.0',
    airIRmPmAuxiliaryAlarm8 => '1.3.6.1.4.1.318.1.1.13.5.3.43.99.0',
    airIRmPmAuxiliaryAlarm9 => '1.3.6.1.4.1.318.1.1.13.5.3.43.100.0',
    airIRmPmAuxiliaryAlarm10 => '1.3.6.1.4.1.318.1.1.13.5.3.43.101.0',
    airIRmPmHotGasHeatingAlarm => '1.3.6.1.4.1.318.1.1.13.5.3.43.102.0',
    airIRmPmEEV1PressureSensorError => '1.3.6.1.4.1.318.1.1.13.5.3.43.103.0',
    airIRmPmEEV1TemperatureSensorError => '1.3.6.1.4.1.318.1.1.13.5.3.43.104.0',
    airIRmPmEEV1StepperMotorError => '1.3.6.1.4.1.318.1.1.13.5.3.43.105.0',
    airIRmPmEEV2PressureSensorError => '1.3.6.1.4.1.318.1.1.13.5.3.43.106.0',
    airIRmPmEEV2TemperatureSensorError => '1.3.6.1.4.1.318.1.1.13.5.3.43.107.0',
    airIRmPmEEV2StepperMotorError => '1.3.6.1.4.1.318.1.1.13.5.3.43.108.0',
    airIRmPmMyZone => '1.3.6.1.4.1.318.1.1.13.5.3.44',
    airIRmPmMyZoneNumber => '1.3.6.1.4.1.318.1.1.13.5.3.44.1.0',
    airIRmPmMyZoneRoomTemperature => '1.3.6.1.4.1.318.1.1.13.5.3.44.2',
    airIRmPmMyZoneRoomTemperature => '1.3.6.1.4.1.318.1.1.13.5.3.44.2',
    airIRmPmMyZoneRoomTemperatureC => '1.3.6.1.4.1.318.1.1.13.5.3.44.2.1.0',
    airIRmPmMyZoneRoomTemperatureF => '1.3.6.1.4.1.318.1.1.13.5.3.44.2.2.0',
    airIRmPmMyZone => '1.3.6.1.4.1.318.1.1.13.5.3.44',
    airIRmPmMyZoneRoomHumidity => '1.3.6.1.4.1.318.1.1.13.5.3.44.3.0',
    airIRmPmMyZoneSupplyTemperature => '1.3.6.1.4.1.318.1.1.13.5.3.44.4',
    airIRmPmMyZoneSupplyTemperature => '1.3.6.1.4.1.318.1.1.13.5.3.44.4',
    airIRmPmMyZoneSupplyTemperatureC => '1.3.6.1.4.1.318.1.1.13.5.3.44.4.1.0',
    airIRmPmMyZoneSupplyTemperatureF => '1.3.6.1.4.1.318.1.1.13.5.3.44.4.2.0',
    airIRmPmMyZone => '1.3.6.1.4.1.318.1.1.13.5.3.44',
    airIRmPmMyZoneSupplyHumidity => '1.3.6.1.4.1.318.1.1.13.5.3.44.5.0',
    airIRmPmMyZoneSequencingTime => '1.3.6.1.4.1.318.1.1.13.5.3.44.6.0',
    airIRmPmMyZoneNumberOfErrorUnits => '1.3.6.1.4.1.318.1.1.13.5.3.44.7.0',
    airIRmPmMyZoneEmergencyTemperature => '1.3.6.1.4.1.318.1.1.13.5.3.44.8',
    airIRmPmMyZoneEmergencyTemperature => '1.3.6.1.4.1.318.1.1.13.5.3.44.8',
    airIRmPmMyZoneEmergencyTemperatureC => '1.3.6.1.4.1.318.1.1.13.5.3.44.8.1.0',
    airIRmPmMyZoneEmergencyTemperatureF => '1.3.6.1.4.1.318.1.1.13.5.3.44.8.2.0',
    airIRmPmMyZone => '1.3.6.1.4.1.318.1.1.13.5.3.44',
    airIRmPmMyZoneCWEnergySaveMode => '1.3.6.1.4.1.318.1.1.13.5.3.44.9.0',
    airIRmPmGlobalZoneData => '1.3.6.1.4.1.318.1.1.13.5.3.45',
    airIRmPmGlobalZoneDataEmergencyOpMode => '1.3.6.1.4.1.318.1.1.13.5.3.45.1.0',
    airIRG3Ident => '1.3.6.1.4.1.318.1.1.13.6.1',
    airIRG3IdentTableSize => '1.3.6.1.4.1.318.1.1.13.6.1.1.0',
    airIRG3IdentTable => '1.3.6.1.4.1.318.1.1.13.6.1.2',
    airIRG3IdentEntry => '1.3.6.1.4.1.318.1.1.13.6.1.2.1',
    airIRG3IdentIndex => '1.3.6.1.4.1.318.1.1.13.6.1.2.1.1',
    airIRG3IdentName => '1.3.6.1.4.1.318.1.1.13.6.1.2.1.2',
    airIRG3IdentLocation => '1.3.6.1.4.1.318.1.1.13.6.1.2.1.3',
    airIRG3IdentModelNumber => '1.3.6.1.4.1.318.1.1.13.6.1.2.1.4',
    airIRG3IdentSerialNumber => '1.3.6.1.4.1.318.1.1.13.6.1.2.1.5',
    airIRG3IdentFirmwareRevision => '1.3.6.1.4.1.318.1.1.13.6.1.2.1.6',
    airIRG3IdentHardwareRevision => '1.3.6.1.4.1.318.1.1.13.6.1.2.1.7',
    airIRG3IdentManufactureDate => '1.3.6.1.4.1.318.1.1.13.6.1.2.1.8',
    airIRG3IdentRDUSysOID => '1.3.6.1.4.1.318.1.1.13.6.1.2.1.9',
    airIRG3IdentCMSysOID => '1.3.6.1.4.1.318.1.1.13.6.1.2.1.10',
    airIRG3IdentGroupSysOID => '1.3.6.1.4.1.318.1.1.13.6.1.2.1.11',
    airIRG3Group => '1.3.6.1.4.1.318.1.1.13.6.2',
    airIRG3GroupTableSize => '1.3.6.1.4.1.318.1.1.13.6.2.1.0',
    airIRG3GroupStatusTable => '1.3.6.1.4.1.318.1.1.13.6.2.2',
    airIRG3GroupStatusEntry => '1.3.6.1.4.1.318.1.1.13.6.2.2.1',
    airIRG3GroupStatusIndex => '1.3.6.1.4.1.318.1.1.13.6.2.2.1.1',
    airIRG3GroupStatusCoolOutput => '1.3.6.1.4.1.318.1.1.13.6.2.2.1.2',
    airIRG3GroupStatusCoolDemand => '1.3.6.1.4.1.318.1.1.13.6.2.2.1.3',
    airIRG3GroupStatusAirFlowUS => '1.3.6.1.4.1.318.1.1.13.6.2.2.1.4',
    airIRG3GroupStatusAirFlowMetric => '1.3.6.1.4.1.318.1.1.13.6.2.2.1.5',
    airIRG3GroupStatusMaxRackInletTempUS => '1.3.6.1.4.1.318.1.1.13.6.2.2.1.6',
    airIRG3GroupStatusMaxRackInletTempMetric => '1.3.6.1.4.1.318.1.1.13.6.2.2.1.7',
    airIRG3GroupStatusMinRackInletTempUS => '1.3.6.1.4.1.318.1.1.13.6.2.2.1.8',
    airIRG3GroupStatusMinRackInletTempMetric => '1.3.6.1.4.1.318.1.1.13.6.2.2.1.9',
    airIRG3GroupStatusMaxReturnAirTempUS => '1.3.6.1.4.1.318.1.1.13.6.2.2.1.10',
    airIRG3GroupStatusMaxReturnAirTempMetric => '1.3.6.1.4.1.318.1.1.13.6.2.2.1.11',
    airIRG3GroupStatusMinReturnAirTempUS => '1.3.6.1.4.1.318.1.1.13.6.2.2.1.12',
    airIRG3GroupStatusMinReturnAirTempMetric => '1.3.6.1.4.1.318.1.1.13.6.2.2.1.13',
    airIRG3GroupStatusAvgSupplyTempUS => '1.3.6.1.4.1.318.1.1.13.6.2.2.1.14',
    airIRG3GroupStatusAvgSupplyTempMetric => '1.3.6.1.4.1.318.1.1.13.6.2.2.1.15',
    airIRG3GroupStatusAvgReturnTempUS => '1.3.6.1.4.1.318.1.1.13.6.2.2.1.16',
    airIRG3GroupStatusAvgReturnTempMetric => '1.3.6.1.4.1.318.1.1.13.6.2.2.1.17',
    airIRG3GroupStatusAvgFanSpeed => '1.3.6.1.4.1.318.1.1.13.6.2.2.1.18',
    airIRG3GroupStatusAvgAirFlowUS => '1.3.6.1.4.1.318.1.1.13.6.2.2.1.19',
    airIRG3GroupStatusAvgAirFlowMetric => '1.3.6.1.4.1.318.1.1.13.6.2.2.1.20',
    airIRG3GroupStatusTotalAirFlowUS => '1.3.6.1.4.1.318.1.1.13.6.2.2.1.21',
    airIRG3GroupStatusTotalAirFlowMetric => '1.3.6.1.4.1.318.1.1.13.6.2.2.1.22',
    airIRG3GroupSetpointsTable => '1.3.6.1.4.1.318.1.1.13.6.2.3',
    airIRG3GroupSetpointsEntry => '1.3.6.1.4.1.318.1.1.13.6.2.3.1',
    airIRG3GroupSetpointsIndex => '1.3.6.1.4.1.318.1.1.13.6.2.3.1.1',
    airIRG3GroupSetpointsCoolSetpointUS => '1.3.6.1.4.1.318.1.1.13.6.2.3.1.2',
    airIRG3GroupSetpointsCoolSetpointMetric => '1.3.6.1.4.1.318.1.1.13.6.2.3.1.3',
    airIRG3GroupSetpointsCoolDeadbandUS => '1.3.6.1.4.1.318.1.1.13.6.2.3.1.4',
    airIRG3GroupSetpointsCoolDeadbandMetric => '1.3.6.1.4.1.318.1.1.13.6.2.3.1.5',
    airIRG3GroupSetpointsFanSpeedPreference => '1.3.6.1.4.1.318.1.1.13.6.2.3.1.6',
    airIRG3GroupSetpointsSupplyAirSetpointUS => '1.3.6.1.4.1.318.1.1.13.6.2.3.1.7',
    airIRG3GroupSetpointsSupplyAirSetpointMetric => '1.3.6.1.4.1.318.1.1.13.6.2.3.1.8',
    airIRG3GroupSetpointsAirFlowControl => '1.3.6.1.4.1.318.1.1.13.6.2.3.1.9',
    airIRG3GroupSetpointsLightingOnTime => '1.3.6.1.4.1.318.1.1.13.6.2.3.1.10',
    airIRG3GroupConfigTable => '1.3.6.1.4.1.318.1.1.13.6.2.4',
    airIRG3GroupConfigEntry => '1.3.6.1.4.1.318.1.1.13.6.2.4.1',
    airIRG3GroupConfigIndex => '1.3.6.1.4.1.318.1.1.13.6.2.4.1.1',
    airIRG3GroupConfigNumberofCoolingUnits => '1.3.6.1.4.1.318.1.1.13.6.2.4.1.2',
    airIRG3GroupConfigConfigurationType => '1.3.6.1.4.1.318.1.1.13.6.2.4.1.3',
    airIRG3GroupConfigCapacityControlType => '1.3.6.1.4.1.318.1.1.13.6.2.4.1.4',
    airIRG3GroupConfigFanSpeedControl => '1.3.6.1.4.1.318.1.1.13.6.2.4.1.5',
    airIRG3GroupConfigCoolGainP => '1.3.6.1.4.1.318.1.1.13.6.2.4.1.6',
    airIRG3GroupConfigCoolResetRateI => '1.3.6.1.4.1.318.1.1.13.6.2.4.1.7',
    airIRG3GroupConfigCoolDerivativeD => '1.3.6.1.4.1.318.1.1.13.6.2.4.1.8',
    airIRG3GroupConfigCoolPIDReset => '1.3.6.1.4.1.318.1.1.13.6.2.4.1.9',
    airIRG3GroupConfigNumberofBackupUnits => '1.3.6.1.4.1.318.1.1.13.6.2.4.1.10',
    airIRG3GroupConfigRuntimeBalancingEnable => '1.3.6.1.4.1.318.1.1.13.6.2.4.1.11',
    airIRG3GroupConfigLoadAssistEnable => '1.3.6.1.4.1.318.1.1.13.6.2.4.1.12',
    airIRG3Alarms => '1.3.6.1.4.1.318.1.1.13.6.3',
    airIRG3AlarmsTableSize => '1.3.6.1.4.1.318.1.1.13.6.3.1.0',
    airIRG3AlarmsTable => '1.3.6.1.4.1.318.1.1.13.6.3.2',
    airIRG3AlarmsEntry => '1.3.6.1.4.1.318.1.1.13.6.3.2.1',
    airIRG3AlarmsIndex => '1.3.6.1.4.1.318.1.1.13.6.3.2.1.1',
    airIRG3AlarmsEventCode => '1.3.6.1.4.1.318.1.1.13.6.3.2.1.2',
    airIRG3AlarmsDescription => '1.3.6.1.4.1.318.1.1.13.6.3.2.1.3',
    airIRG3RDU => '1.3.6.1.4.1.318.1.1.13.6.4',
    airIRG3RDUTableSize => '1.3.6.1.4.1.318.1.1.13.6.4.1.0',
    airIRG3RDUStatusTable => '1.3.6.1.4.1.318.1.1.13.6.4.2',
    airIRG3RDUStatusEntry => '1.3.6.1.4.1.318.1.1.13.6.4.2.1',
    airIRG3RDUStatusDeviceIndex => '1.3.6.1.4.1.318.1.1.13.6.4.2.1.1',
    airIRG3RDUID => '1.3.6.1.4.1.318.1.1.13.6.4.2.1.2',
    airIRG3RDUStatusOnReadyStandby => '1.3.6.1.4.1.318.1.1.13.6.4.2.1.3',
    airIRG3RDUStatusOperatingMode => '1.3.6.1.4.1.318.1.1.13.6.4.2.1.4',
    airIRG3RDUStatusLeadPump => '1.3.6.1.4.1.318.1.1.13.6.4.2.1.5',
    airIRG3RDUStatusStartupDelay => '1.3.6.1.4.1.318.1.1.13.6.4.2.1.6',
    airIRG3RDUStatusPumpChangeOverInterval => '1.3.6.1.4.1.318.1.1.13.6.4.2.1.7',
    airIRG3RDUStatusStopOnLeakDetect => '1.3.6.1.4.1.318.1.1.13.6.4.2.1.8',
    airIRG3RDUStatusPowerSource => '1.3.6.1.4.1.318.1.1.13.6.4.2.1.9',
    airIRG3RDUStatusTotalRDUOutputPower => '1.3.6.1.4.1.318.1.1.13.6.4.2.1.10',
    airIRG3RDUStatusInletWaterTempUS => '1.3.6.1.4.1.318.1.1.13.6.4.2.1.11',
    airIRG3RDUStatusInletWaterTempMetric => '1.3.6.1.4.1.318.1.1.13.6.4.2.1.12',
    airIRG3RDUStatusOutletWaterTempUS => '1.3.6.1.4.1.318.1.1.13.6.4.2.1.13',
    airIRG3RDUStatusOutletWaterTempMetric => '1.3.6.1.4.1.318.1.1.13.6.4.2.1.14',
    airIRG3RDUStatusCondenserSaturationTempUS => '1.3.6.1.4.1.318.1.1.13.6.4.2.1.15',
    airIRG3RDUStatusCondenserSaturationTempMetric => '1.3.6.1.4.1.318.1.1.13.6.4.2.1.16',
    airIRG3RDUStatusDewPointTempUS => '1.3.6.1.4.1.318.1.1.13.6.4.2.1.17',
    airIRG3RDUStatusDewPointTempMetric => '1.3.6.1.4.1.318.1.1.13.6.4.2.1.18',
    airIRG3RDUStatusPumpOutletTempUS => '1.3.6.1.4.1.318.1.1.13.6.4.2.1.19',
    airIRG3RDUStatusPumpOutletTempMetric => '1.3.6.1.4.1.318.1.1.13.6.4.2.1.20',
    airIRG3RDUStatusSubcoolerOutletTempUS => '1.3.6.1.4.1.318.1.1.13.6.4.2.1.21',
    airIRG3RDUStatusSubcoolerOutletTempMetric => '1.3.6.1.4.1.318.1.1.13.6.4.2.1.22',
    airIRG3RDUStatusCondenserOutletTempUS => '1.3.6.1.4.1.318.1.1.13.6.4.2.1.23',
    airIRG3RDUStatusCondenserOutletTempMetric => '1.3.6.1.4.1.318.1.1.13.6.4.2.1.24',
    airIRG3RDUStatusCondenserInletTempUS => '1.3.6.1.4.1.318.1.1.13.6.4.2.1.25',
    airIRG3RDUStatusCondenserInletTempMetric => '1.3.6.1.4.1.318.1.1.13.6.4.2.1.26',
    airIRG3RDUStatusCondenserOutletPressureUS => '1.3.6.1.4.1.318.1.1.13.6.4.2.1.27',
    airIRG3RDUStatusCondenserOutletPressureMetric => '1.3.6.1.4.1.318.1.1.13.6.4.2.1.28',
    airIRG3RDUStatusPump1HeadPressureUS => '1.3.6.1.4.1.318.1.1.13.6.4.2.1.29',
    airIRG3RDUStatusPump1HeadPressureMetric => '1.3.6.1.4.1.318.1.1.13.6.4.2.1.30',
    airIRG3RDUStatusPump2HeadPressureUS => '1.3.6.1.4.1.318.1.1.13.6.4.2.1.31',
    airIRG3RDUStatusPump2HeadPressureMetric => '1.3.6.1.4.1.318.1.1.13.6.4.2.1.32',
    airIRG3RDUStatusPump1Speed => '1.3.6.1.4.1.318.1.1.13.6.4.2.1.33',
    airIRG3RDUStatusPump2Speed => '1.3.6.1.4.1.318.1.1.13.6.4.2.1.34',
    airIRG3RDUStatusCWValvePosition => '1.3.6.1.4.1.318.1.1.13.6.4.2.1.35',
    airIRG3RDUStatusReceiverLiquidLevel => '1.3.6.1.4.1.318.1.1.13.6.4.2.1.36',
    airIRG3RDUStatusDCPowerSupply1Current => '1.3.6.1.4.1.318.1.1.13.6.4.2.1.37',
    airIRG3RDUStatusDCPowerSupply2Current => '1.3.6.1.4.1.318.1.1.13.6.4.2.1.38',
    airIRG3RDUStatusTotalDCPowerSupplyCurrent => '1.3.6.1.4.1.318.1.1.13.6.4.2.1.39',
    airIRG3RDUStatusInputState => '1.3.6.1.4.1.318.1.1.13.6.4.2.1.40',
    airIRG3RDUStatusOutputState => '1.3.6.1.4.1.318.1.1.13.6.4.2.1.41',
    airIRG3RDUStatusByPassValvePosition => '1.3.6.1.4.1.318.1.1.13.6.4.2.1.42',
    airIRG3RDUStatusRefrigerantLeakDetector => '1.3.6.1.4.1.318.1.1.13.6.4.2.1.43',
    airIRG3RDURunHoursTable => '1.3.6.1.4.1.318.1.1.13.6.4.3',
    airIRG3RDURunHoursEntry => '1.3.6.1.4.1.318.1.1.13.6.4.3.1',
    airIRG3RDURunHoursDeviceIndex => '1.3.6.1.4.1.318.1.1.13.6.4.3.1.1',
    airIRG3RDURunHoursRDUID => '1.3.6.1.4.1.318.1.1.13.6.4.3.1.2',
    airIRG3RDURunHoursPump1 => '1.3.6.1.4.1.318.1.1.13.6.4.3.1.3',
    airIRG3RDURunHoursPump2 => '1.3.6.1.4.1.318.1.1.13.6.4.3.1.4',
    airIRG3RDURunHoursPowerSupply1 => '1.3.6.1.4.1.318.1.1.13.6.4.3.1.5',
    airIRG3RDURunHoursPowerSupply2 => '1.3.6.1.4.1.318.1.1.13.6.4.3.1.6',
    airIRG3RDUServiceIntervalsTable => '1.3.6.1.4.1.318.1.1.13.6.4.4',
    airIRG3RDUServiceIntervalsEntry => '1.3.6.1.4.1.318.1.1.13.6.4.4.1',
    airIRG3RDUServiceIntervalsDeviceIndex => '1.3.6.1.4.1.318.1.1.13.6.4.4.1.1',
    airIRG3RDUServiceIntervalsRDUID => '1.3.6.1.4.1.318.1.1.13.6.4.4.1.2',
    airIRG3RDUServiceIntervalsAirFilterInterval => '1.3.6.1.4.1.318.1.1.13.6.4.4.1.3',
    airIRG3RDUServiceIntervalsAirFilterAlarm => '1.3.6.1.4.1.318.1.1.13.6.4.4.1.4',
    airIRG3RDUThresholdsTable => '1.3.6.1.4.1.318.1.1.13.6.4.5',
    airIRG3RDUThresholdsEntry => '1.3.6.1.4.1.318.1.1.13.6.4.5.1',
    airIRG3RDUThresholdsDeviceIndex => '1.3.6.1.4.1.318.1.1.13.6.4.5.1.1',
    airIRG3RDUThresholdsRDUID => '1.3.6.1.4.1.318.1.1.13.6.4.5.1.2',
    airIRG3RDUThresholdsEnteringFluidTempHighUS => '1.3.6.1.4.1.318.1.1.13.6.4.5.1.3',
    airIRG3RDUThresholdsEnteringFluidTempHighMetric => '1.3.6.1.4.1.318.1.1.13.6.4.5.1.4',
    airIRG3RDUSetpointsTable => '1.3.6.1.4.1.318.1.1.13.6.4.6',
    airIRG3RDUSetpointsEntry => '1.3.6.1.4.1.318.1.1.13.6.4.6.1',
    airIRG3RDUSetpointsDeviceIndex => '1.3.6.1.4.1.318.1.1.13.6.4.6.1.1',
    airIRG3RDUConfigTable => '1.3.6.1.4.1.318.1.1.13.6.4.7',
    airIRG3RDUConfigEntry => '1.3.6.1.4.1.318.1.1.13.6.4.7.1',
    airIRG3RDUConfigDeviceIndex => '1.3.6.1.4.1.318.1.1.13.6.4.7.1.1',
    airIRG3RDUConfigRDUID => '1.3.6.1.4.1.318.1.1.13.6.4.7.1.2',
    airIRG3RDUConfigStopOnLeakDetect => '1.3.6.1.4.1.318.1.1.13.6.4.7.1.3',
    airIRG3RDUConfigStartupDelay => '1.3.6.1.4.1.318.1.1.13.6.4.7.1.4',
    airIRG3RDUConfigPumpChangeOverInterval => '1.3.6.1.4.1.318.1.1.13.6.4.7.1.5',
    airIRG3RDUConfigPowerSource => '1.3.6.1.4.1.318.1.1.13.6.4.7.1.6',
    airIRG3RDUConfigOutputSource => '1.3.6.1.4.1.318.1.1.13.6.4.7.1.7',
    airIRG3RDUConfigInputNormalState => '1.3.6.1.4.1.318.1.1.13.6.4.7.1.8',
    airIRG3RDUConfigOutputNormalState => '1.3.6.1.4.1.318.1.1.13.6.4.7.1.9',
    airIRG3RDUConfigByPassValveEnabled => '1.3.6.1.4.1.318.1.1.13.6.4.7.1.10',
    airIRG3RDUConfigRefrigerantLeakDetectorEnabled => '1.3.6.1.4.1.318.1.1.13.6.4.7.1.11',
    airIRG3RDUConfigCalibrateRefrigerantLeakDetector => '1.3.6.1.4.1.318.1.1.13.6.4.7.1.12',
    airIRG3RDUConfigOnReadyStandby => '1.3.6.1.4.1.318.1.1.13.6.4.7.1.13',
    airIRG3CM => '1.3.6.1.4.1.318.1.1.13.6.5',
    airIRG3CMTableSize => '1.3.6.1.4.1.318.1.1.13.6.5.1.0',
    airIRG3CMStatusTable => '1.3.6.1.4.1.318.1.1.13.6.5.2',
    airIRG3CMStatusEntry => '1.3.6.1.4.1.318.1.1.13.6.5.2.1',
    airIRG3CMStatusDeviceIndex => '1.3.6.1.4.1.318.1.1.13.6.5.2.1.1',
    airIRG3CMStatusCMID => '1.3.6.1.4.1.318.1.1.13.6.5.2.1.2',
    airIRG3CMStatusOperatingMode => '1.3.6.1.4.1.318.1.1.13.6.5.2.1.3',
    airIRG3CMStatusUnitType => '1.3.6.1.4.1.318.1.1.13.6.5.2.1.4',
    airIRG3CMStatusRackInletTempUS => '1.3.6.1.4.1.318.1.1.13.6.5.2.1.5',
    airIRG3CMStatusRackInletTempMetric => '1.3.6.1.4.1.318.1.1.13.6.5.2.1.6',
    airIRG3CMStatusReturnAirTempUS => '1.3.6.1.4.1.318.1.1.13.6.5.2.1.7',
    airIRG3CMStatusReturnAirTempMetric => '1.3.6.1.4.1.318.1.1.13.6.5.2.1.8',
    airIRG3CMStatusLiquidTempUS => '1.3.6.1.4.1.318.1.1.13.6.5.2.1.9',
    airIRG3CMStatusLiquidTempMetric => '1.3.6.1.4.1.318.1.1.13.6.5.2.1.10',
    airIRG3CMStatusVaporTempUS => '1.3.6.1.4.1.318.1.1.13.6.5.2.1.11',
    airIRG3CMStatusVaporTempMetric => '1.3.6.1.4.1.318.1.1.13.6.5.2.1.12',
    airIRG3CMStatusEvaporatorTempUS => '1.3.6.1.4.1.318.1.1.13.6.5.2.1.13',
    airIRG3CMStatusEvaporatorTempMetric => '1.3.6.1.4.1.318.1.1.13.6.5.2.1.14',
    airIRG3CMStatusLiquidInletPressureUS => '1.3.6.1.4.1.318.1.1.13.6.5.2.1.15',
    airIRG3CMStatusLiquidInletPressureMetric => '1.3.6.1.4.1.318.1.1.13.6.5.2.1.16',
    airIRG3CMStatusVaporOutletPressureUS => '1.3.6.1.4.1.318.1.1.13.6.5.2.1.17',
    airIRG3CMStatusVaporOutletPressureMetric => '1.3.6.1.4.1.318.1.1.13.6.5.2.1.18',
    airIRG3CMStatusExpansionValvePosition => '1.3.6.1.4.1.318.1.1.13.6.5.2.1.19',
    airIRG3CMStatusEPRValvePosition => '1.3.6.1.4.1.318.1.1.13.6.5.2.1.20',
    airIRG3CMStatusLocalDisplayOnOffEnabled => '1.3.6.1.4.1.318.1.1.13.6.5.2.1.21',
    airIRG3CMStatusAverageFanSpeed => '1.3.6.1.4.1.318.1.1.13.6.5.2.1.22',
    airIRG3CMRunHoursTable => '1.3.6.1.4.1.318.1.1.13.6.5.3',
    airIRG3CMRunHoursEntry => '1.3.6.1.4.1.318.1.1.13.6.5.3.1',
    airIRG3CMRunHoursDeviceIndex => '1.3.6.1.4.1.318.1.1.13.6.5.3.1.1',
    airIRG3CMRunHoursCMID => '1.3.6.1.4.1.318.1.1.13.6.5.3.1.2',
    airIRG3CMRunHoursFan1 => '1.3.6.1.4.1.318.1.1.13.6.5.3.1.3',
    airIRG3CMRunHoursFan2 => '1.3.6.1.4.1.318.1.1.13.6.5.3.1.4',
    airIRG3CMRunHoursFan3 => '1.3.6.1.4.1.318.1.1.13.6.5.3.1.5',
    airIRG3CMRunHoursFan4 => '1.3.6.1.4.1.318.1.1.13.6.5.3.1.6',
    airIRG3CMRunHoursFan5 => '1.3.6.1.4.1.318.1.1.13.6.5.3.1.7',
    airIRG3CMRunHoursAirFilter => '1.3.6.1.4.1.318.1.1.13.6.5.3.1.8',
    airIRG3CMServiceIntervalsTable => '1.3.6.1.4.1.318.1.1.13.6.5.4',
    airIRG3CMServiceIntervalsEntry => '1.3.6.1.4.1.318.1.1.13.6.5.4.1',
    airIRG3CMServiceIntervalsDeviceIndex => '1.3.6.1.4.1.318.1.1.13.6.5.4.1.1',
    airIRG3CMServiceIntervalsCMID => '1.3.6.1.4.1.318.1.1.13.6.5.4.1.2',
    airIRG3CMServiceIntervalsAirFilterInterval => '1.3.6.1.4.1.318.1.1.13.6.5.4.1.3',
    airIRG3CMServiceIntervalsAirFilterAlarm => '1.3.6.1.4.1.318.1.1.13.6.5.4.1.4',
    airIRG3CMThresholdsTable => '1.3.6.1.4.1.318.1.1.13.6.5.5',
    airIRG3CMThresholdsEntry => '1.3.6.1.4.1.318.1.1.13.6.5.5.1',
    airIRG3CMThresholdsDeviceIndex => '1.3.6.1.4.1.318.1.1.13.6.5.5.1.1',
    airIRG3CMThresholdsCMID => '1.3.6.1.4.1.318.1.1.13.6.5.5.1.2',
    airIRG3CMThresholdsRackInletTempHighUS => '1.3.6.1.4.1.318.1.1.13.6.5.5.1.3',
    airIRG3CMThresholdsRackInletTempHighMetric => '1.3.6.1.4.1.318.1.1.13.6.5.5.1.4',
    airIRG3CMThresholdsSupplyAirTempHighUS => '1.3.6.1.4.1.318.1.1.13.6.5.5.1.5',
    airIRG3CMThresholdsSupplyAirTempHighMetric => '1.3.6.1.4.1.318.1.1.13.6.5.5.1.6',
    airIRG3CMThresholdsReturnAirTempHighUS => '1.3.6.1.4.1.318.1.1.13.6.5.5.1.7',
    airIRG3CMThresholdsReturnAirTempHighMetric => '1.3.6.1.4.1.318.1.1.13.6.5.5.1.8',
    airIRG3CMSetpointsTable => '1.3.6.1.4.1.318.1.1.13.6.5.6',
    airIRG3CMSetpointsEntry => '1.3.6.1.4.1.318.1.1.13.6.5.6.1',
    airIRG3CMSetpointsDeviceIndex => '1.3.6.1.4.1.318.1.1.13.6.5.6.1.1',
    airIRG3CMConfigTable => '1.3.6.1.4.1.318.1.1.13.6.5.7',
    airIRG3CMConfigEntry => '1.3.6.1.4.1.318.1.1.13.6.5.7.1',
    airIRG3CMConfigDeviceIndex => '1.3.6.1.4.1.318.1.1.13.6.5.7.1.1',
    airIRG3CMConfigCMID => '1.3.6.1.4.1.318.1.1.13.6.5.7.1.2',
    airIRG3CMConfigStopOnCoolFail => '1.3.6.1.4.1.318.1.1.13.6.5.7.1.3',
    airIRG3CMConfigStartupDelay => '1.3.6.1.4.1.318.1.1.13.6.5.7.1.4',
    airIRG3CMConfigRemoteOnStandby => '1.3.6.1.4.1.318.1.1.13.6.5.7.1.5',
    airIRG3CMConfigPowerSource => '1.3.6.1.4.1.318.1.1.13.6.5.7.1.6',
    rARUIdent => '1.3.6.1.4.1.318.1.1.14.1',
    rARUIdentTable => '1.3.6.1.4.1.318.1.1.14.1.1',
    rARUIdentEntry => '1.3.6.1.4.1.318.1.1.14.1.1.1',
    rARUIdentAruIndex => '1.3.6.1.4.1.318.1.1.14.1.1.1.1',
    rARUIdentName => '1.3.6.1.4.1.318.1.1.14.1.1.1.2',
    rARUConfig => '1.3.6.1.4.1.318.1.1.14.2',
    rARUConfigTable => '1.3.6.1.4.1.318.1.1.14.2.1',
    rARUConfigEntry => '1.3.6.1.4.1.318.1.1.14.2.1.1',
    rARUConfigAruIndex => '1.3.6.1.4.1.318.1.1.14.2.1.1.1',
    rARUConfigAruName => '1.3.6.1.4.1.318.1.1.14.2.1.1.2',
    rARUConfigAruRemoteSetpoint => '1.3.6.1.4.1.318.1.1.14.2.1.1.3',
    rARUConfigAruTempOvrdEnableDisable => '1.3.6.1.4.1.318.1.1.14.2.1.1.4',
    rARUConfigAruTempOvrdSetpoint => '1.3.6.1.4.1.318.1.1.14.2.1.1.5',
    rARUConfigAruMasterControl => '1.3.6.1.4.1.318.1.1.14.2.1.1.6',
    rARUStatus => '1.3.6.1.4.1.318.1.1.14.3',
    rARUStatusAruDeviceCount => '1.3.6.1.4.1.318.1.1.14.3.1.0',
    rARUStatusSysTempUnits => '1.3.6.1.4.1.318.1.1.14.3.2.0',
    rARUStatusTable => '1.3.6.1.4.1.318.1.1.14.3.3',
    rARUStatusEntry => '1.3.6.1.4.1.318.1.1.14.3.3.1',
    rARUStatusAruIndex => '1.3.6.1.4.1.318.1.1.14.3.3.1.1',
    rARUStatusAruName => '1.3.6.1.4.1.318.1.1.14.3.3.1.2',
    rARUStatusAruRemoteSetpoint => '1.3.6.1.4.1.318.1.1.14.3.3.1.3',
    rARUStatusAruManualSetpoint => '1.3.6.1.4.1.318.1.1.14.3.3.1.4',
    rARUStatusAruTemp1 => '1.3.6.1.4.1.318.1.1.14.3.3.1.5',
    rARUStatusAruTemp2 => '1.3.6.1.4.1.318.1.1.14.3.3.1.6',
    rARUStatusAruTemp3 => '1.3.6.1.4.1.318.1.1.14.3.3.1.7',
    rARUStatusAruTempOvrdEnableDisable => '1.3.6.1.4.1.318.1.1.14.3.3.1.8',
    rARUStatusAruTempOvrdSetpoint => '1.3.6.1.4.1.318.1.1.14.3.3.1.9',
    rARUStatusAruAlarmState => '1.3.6.1.4.1.318.1.1.14.3.3.1.10',
    rARUStatusAruCommStatus => '1.3.6.1.4.1.318.1.1.14.3.3.1.11',
    rARUStatusAruTempOvrdStatus => '1.3.6.1.4.1.318.1.1.14.3.3.1.12',
    rARUStatusAruMasterControl => '1.3.6.1.4.1.318.1.1.14.3.3.1.13',
    rARUStatusAruTotalAirflow => '1.3.6.1.4.1.318.1.1.14.3.3.1.14',
    rARUFanStatus => '1.3.6.1.4.1.318.1.1.14.4',
    rARUFanStatusTable => '1.3.6.1.4.1.318.1.1.14.4.1',
    rARUFanStatusEntry => '1.3.6.1.4.1.318.1.1.14.4.1.1',
    rARUFanStatusAruIndex => '1.3.6.1.4.1.318.1.1.14.4.1.1.1',
    rARUFanStatusNominalFanSpeed => '1.3.6.1.4.1.318.1.1.14.4.1.1.2',
    rARUFanStatusSelectedFanLevel => '1.3.6.1.4.1.318.1.1.14.4.1.1.3',
    rARUFanStatusReplacementThreshold => '1.3.6.1.4.1.318.1.1.14.4.1.1.4',
    rARUFanStatusFanIndex => '1.3.6.1.4.1.318.1.1.14.4.1.1.5',
    rARUFanStatusFanOperatingStatus => '1.3.6.1.4.1.318.1.1.14.4.1.1.6',
    rARUFanStatusFanRpmSpeed => '1.3.6.1.4.1.318.1.1.14.4.1.1.7',
    rARUFanStatusFanFlowRate => '1.3.6.1.4.1.318.1.1.14.4.1.1.8',
    rARUFanStatusFanInServiceDate => '1.3.6.1.4.1.318.1.1.14.4.1.1.9',
    rARUFanStatusFanRunhourCounter => '1.3.6.1.4.1.318.1.1.14.4.1.1.10',
    rARUFanStatusFanRunhourReset => '1.3.6.1.4.1.318.1.1.14.4.1.1.11',
    rARUPower => '1.3.6.1.4.1.318.1.1.14.5',
    rARUPowerStatusTable => '1.3.6.1.4.1.318.1.1.14.5.1',
    rARUPowerStatusEntry => '1.3.6.1.4.1.318.1.1.14.5.1.1',
    rARUPowerStatusAruIndex => '1.3.6.1.4.1.318.1.1.14.5.1.1.1',
    rARUPowerStatusPrimaryAcPresent => '1.3.6.1.4.1.318.1.1.14.5.1.1.2',
    rARUPowerStatusAuxiliaryAcPresent => '1.3.6.1.4.1.318.1.1.14.5.1.1.3',
    rARUPowerStatusRedundantAcConfig => '1.3.6.1.4.1.318.1.1.14.5.1.1.4',
    rARUSensors => '1.3.6.1.4.1.318.1.1.14.6',
    rARUSensorsStatusTableSize => '1.3.6.1.4.1.318.1.1.14.6.1.0',
    rARUSensorsStatusTable => '1.3.6.1.4.1.318.1.1.14.6.2',
    rARUSensorsStatusEntry => '1.3.6.1.4.1.318.1.1.14.6.2.1',
    rARUSensorsStatusAruIndex => '1.3.6.1.4.1.318.1.1.14.6.2.1.1',
    rARUSensorsStatusSensorNumber => '1.3.6.1.4.1.318.1.1.14.6.2.1.2',
    rARUSensorsTemperature => '1.3.6.1.4.1.318.1.1.14.6.2.1.3',
    rARUSensorsConfigTableSize => '1.3.6.1.4.1.318.1.1.14.6.3.0',
    rARUSensorsConfigTable => '1.3.6.1.4.1.318.1.1.14.6.4',
    rARUSensorsConfigEntry => '1.3.6.1.4.1.318.1.1.14.6.4.1',
    rARUSensorsConfigAruIndex => '1.3.6.1.4.1.318.1.1.14.6.4.1.1',
    rARUSensorsConfigSensorNumber => '1.3.6.1.4.1.318.1.1.14.6.4.1.2',
    rARUSensorsName => '1.3.6.1.4.1.318.1.1.14.6.4.1.3',
    rARUSensorsLocation => '1.3.6.1.4.1.318.1.1.14.6.4.1.4',
    rARUSensorsTempMaxThresh => '1.3.6.1.4.1.318.1.1.14.6.4.1.5',
    rARUSensorsTempHighThresh => '1.3.6.1.4.1.318.1.1.14.6.4.1.6',
    rARUSensorsTempLowThresh => '1.3.6.1.4.1.318.1.1.14.6.4.1.7',
    rARUSensorsTempMinThresh => '1.3.6.1.4.1.318.1.1.14.6.4.1.8',
    rARUSensorsTempThreshHysteresis => '1.3.6.1.4.1.318.1.1.14.6.4.1.9',
    rARUSensorsTempShortDecRateThreshValue => '1.3.6.1.4.1.318.1.1.14.6.4.1.10',
    rARUSensorsTempShortDecRateThreshTime => '1.3.6.1.4.1.318.1.1.14.6.4.1.11',
    rARUSensorsTempShortIncRateThreshValue => '1.3.6.1.4.1.318.1.1.14.6.4.1.12',
    rARUSensorsTempShortIncRateThreshTime => '1.3.6.1.4.1.318.1.1.14.6.4.1.13',
    rARUSensorsTempLongDecRateThreshValue => '1.3.6.1.4.1.318.1.1.14.6.4.1.14',
    rARUSensorsTempLongDecRateThreshTime => '1.3.6.1.4.1.318.1.1.14.6.4.1.15',
    rARUSensorsTempLongIncRateThreshValue => '1.3.6.1.4.1.318.1.1.14.6.4.1.16',
    rARUSensorsTempLongIncRateThreshTime => '1.3.6.1.4.1.318.1.1.14.6.4.1.17',
    isxModularDistInfo => '1.3.6.1.4.1.318.1.1.22.1',
    isxModularDistInfoTableSize => '1.3.6.1.4.1.318.1.1.22.1.1.0',
    isxModularDistInfoTable => '1.3.6.1.4.1.318.1.1.22.1.2',
    isxModularDistInfoEntry => '1.3.6.1.4.1.318.1.1.22.1.2.1',
    isxModularDistInfoSegmentIndex => '1.3.6.1.4.1.318.1.1.22.1.2.1.1',
    isxModularDistInfoMeterModelNumber => '1.3.6.1.4.1.318.1.1.22.1.2.1.2',
    isxModularDistInfoMeterSerialNumber => '1.3.6.1.4.1.318.1.1.22.1.2.1.3',
    isxModularDistInfoMeterDateOfManufacture => '1.3.6.1.4.1.318.1.1.22.1.2.1.4',
    isxModularDistInfoMeterFirmwareRev => '1.3.6.1.4.1.318.1.1.22.1.2.1.5',
    isxModularDistInfoMeterHardwareRev => '1.3.6.1.4.1.318.1.1.22.1.2.1.6',
    isxModularDistModules => '1.3.6.1.4.1.318.1.1.22.2',
    isxModularDistModuleInfoTableSize => '1.3.6.1.4.1.318.1.1.22.2.1.0',
    isxModularDistModuleInfoTable => '1.3.6.1.4.1.318.1.1.22.2.2',
    isxModularDistModuleInfoEntry => '1.3.6.1.4.1.318.1.1.22.2.2.1',
    isxModularDistModuleInfoModIndex => '1.3.6.1.4.1.318.1.1.22.2.2.1.1',
    isxModularDistModuleInfoAlarmStatus => '1.3.6.1.4.1.318.1.1.22.2.2.1.2',
    isxModularDistModuleInfoModelNumber => '1.3.6.1.4.1.318.1.1.22.2.2.1.3',
    isxModularDistModuleInfoSerialNumber => '1.3.6.1.4.1.318.1.1.22.2.2.1.4',
    isxModularDistModuleInfoDateOfManufacture => '1.3.6.1.4.1.318.1.1.22.2.2.1.5',
    isxModularDistModuleInfoNumCables => '1.3.6.1.4.1.318.1.1.22.2.2.1.6',
    isxModularDistModuleBreakerTableSize => '1.3.6.1.4.1.318.1.1.22.2.3.0',
    isxModularDistModuleBreakerTable => '1.3.6.1.4.1.318.1.1.22.2.4',
    isxModularDistModuleBreakerEntry => '1.3.6.1.4.1.318.1.1.22.2.4.1',
    isxModularDistModuleBreakerModIndex => '1.3.6.1.4.1.318.1.1.22.2.4.1.1',
    isxModularDistModuleBreakerPhaseIndex => '1.3.6.1.4.1.318.1.1.22.2.4.1.2',
    isxModularDistModuleBreakerAlarmStatus => '1.3.6.1.4.1.318.1.1.22.2.4.1.3',
    isxModularDistModuleBreakerRating => '1.3.6.1.4.1.318.1.1.22.2.4.1.4',
    isxModularDistModuleBreakerPhysicalGroup => '1.3.6.1.4.1.318.1.1.22.2.4.1.5',
    isxModularDistModuleBreakerCableNum => '1.3.6.1.4.1.318.1.1.22.2.4.1.6',
    isxModularDistModuleBreakerPosition => '1.3.6.1.4.1.318.1.1.22.2.4.1.7',
    isxModularDistModuleBreakerPositionAlarms => '1.3.6.1.4.1.318.1.1.22.2.4.1.8',
    isxModularDistModuleBreakerCurrent => '1.3.6.1.4.1.318.1.1.22.2.4.1.9',
    isxModularDistModuleBreakerPercent => '1.3.6.1.4.1.318.1.1.22.2.4.1.10',
    isxModularDistModuleBreakerPower => '1.3.6.1.4.1.318.1.1.22.2.4.1.11',
    isxModularDistModuleOutputsTableSize => '1.3.6.1.4.1.318.1.1.22.2.5.0',
    isxModularDistModuleOutputTable => '1.3.6.1.4.1.318.1.1.22.2.6',
    isxModularDistModuleOutputEntry => '1.3.6.1.4.1.318.1.1.22.2.6.1',
    isxModularDistModuleOutputModIndex => '1.3.6.1.4.1.318.1.1.22.2.6.1.1',
    isxModularDistModuleOutputNumCables => '1.3.6.1.4.1.318.1.1.22.2.6.1.2',
    isxModularDistModuleOutputCordIndex => '1.3.6.1.4.1.318.1.1.22.2.6.1.3',
    isxModularDistModuleOutputName => '1.3.6.1.4.1.318.1.1.22.2.6.1.4',
    isxModularDistModuleOutputLocation => '1.3.6.1.4.1.318.1.1.22.2.6.1.5',
    isxModularDistModuleOutputStatus => '1.3.6.1.4.1.318.1.1.22.2.6.1.6',
    isxModularDistModuleOutputAlarmGeneration => '1.3.6.1.4.1.318.1.1.22.2.6.1.7',
    isxModularDistModuleOutputBreakerMap => '1.3.6.1.4.1.318.1.1.22.2.6.1.8',
    isxModularDistModuleOutputThresholdMin => '1.3.6.1.4.1.318.1.1.22.2.6.1.9',
    isxModularDistModuleOutputThresholdLow => '1.3.6.1.4.1.318.1.1.22.2.6.1.10',
    isxModularDistModuleOutputThresholdHigh => '1.3.6.1.4.1.318.1.1.22.2.6.1.11',
    isxModularDistModuleOutputThresholdMax => '1.3.6.1.4.1.318.1.1.22.2.6.1.12',
    isxModularDistModuleOutputAlarmMinEnable => '1.3.6.1.4.1.318.1.1.22.2.6.1.13',
    isxModularDistModuleOutputAlarmLowEnable => '1.3.6.1.4.1.318.1.1.22.2.6.1.14',
    isxModularDistModuleOutputAlarmHighEnable => '1.3.6.1.4.1.318.1.1.22.2.6.1.15',
    isxModularDistModuleOutputAlarmMaxEnable => '1.3.6.1.4.1.318.1.1.22.2.6.1.16',
    isxModularDistModuleOutputCableLength => '1.3.6.1.4.1.318.1.1.22.2.6.1.17',
    isxModularDistModuleOutputConnectorType => '1.3.6.1.4.1.318.1.1.22.2.6.1.18',
    isxModularDistModuleOutputAvailableVoltages => '1.3.6.1.4.1.318.1.1.22.2.6.1.19',
    isxModularDistModuleOutputTotalPower => '1.3.6.1.4.1.318.1.1.22.2.6.1.20',
    isxModularDistModuleOutputKwhUsage => '1.3.6.1.4.1.318.1.1.22.2.6.1.21',
    isxModularDistModuleOutputKwhReset => '1.3.6.1.4.1.318.1.1.22.2.6.1.22',
    isxModularDistModuleOutputKwhResetDate => '1.3.6.1.4.1.318.1.1.22.2.6.1.23',
    isxModularDistSubFeeds => '1.3.6.1.4.1.318.1.1.22.3',
    isxModularDistSubFeedInfoTableSize => '1.3.6.1.4.1.318.1.1.22.3.1.0',
    isxModularDistSubFeedInfoTable => '1.3.6.1.4.1.318.1.1.22.3.2',
    isxModularDistSubFeedInfoEntry => '1.3.6.1.4.1.318.1.1.22.3.2.1',
    isxModularDistSubFeedInfoSubIndex => '1.3.6.1.4.1.318.1.1.22.3.2.1.1',
    isxModularDistSubFeedInfoName => '1.3.6.1.4.1.318.1.1.22.3.2.1.2',
    isxModularDistSubFeedInfoLocation => '1.3.6.1.4.1.318.1.1.22.3.2.1.3',
    isxModularDistSubFeedInfoBreakerRating => '1.3.6.1.4.1.318.1.1.22.3.2.1.4',
    isxModularDistSubFeedInfoBreakerPosition => '1.3.6.1.4.1.318.1.1.22.3.2.1.5',
    isxModularDistSubFeedInfoAlarmStatus => '1.3.6.1.4.1.318.1.1.22.3.2.1.6',
    isxModularDistSubFeedInfoAlarmGeneration => '1.3.6.1.4.1.318.1.1.22.3.2.1.7',
    isxModularDistSubFeedInfoThresholdMin => '1.3.6.1.4.1.318.1.1.22.3.2.1.8',
    isxModularDistSubFeedInfoThresholdLow => '1.3.6.1.4.1.318.1.1.22.3.2.1.9',
    isxModularDistSubFeedInfoThresholdHigh => '1.3.6.1.4.1.318.1.1.22.3.2.1.10',
    isxModularDistSubFeedInfoThresholdMax => '1.3.6.1.4.1.318.1.1.22.3.2.1.11',
    isxModularDistSubFeedInfoAlarmMinEnable => '1.3.6.1.4.1.318.1.1.22.3.2.1.12',
    isxModularDistSubFeedInfoAlarmLowEnable => '1.3.6.1.4.1.318.1.1.22.3.2.1.13',
    isxModularDistSubFeedInfoAlarmHighEnable => '1.3.6.1.4.1.318.1.1.22.3.2.1.14',
    isxModularDistSubFeedInfoAlarmMaxEnable => '1.3.6.1.4.1.318.1.1.22.3.2.1.15',
    isxModularDistSubFeedInfoBreakerAlarmEnable => '1.3.6.1.4.1.318.1.1.22.3.2.1.16',
    isxModularDistSubFeedInfoTotalPower => '1.3.6.1.4.1.318.1.1.22.3.2.1.17',
    isxModularDistSubFeedInfoKwhUsage => '1.3.6.1.4.1.318.1.1.22.3.2.1.18',
    isxModularDistSubFeedInfoKwhReset => '1.3.6.1.4.1.318.1.1.22.3.2.1.19',
    isxModularDistSubFeedInfoKwhResetDate => '1.3.6.1.4.1.318.1.1.22.3.2.1.20',
    isxModularDistSubFeedLoadingTableSize => '1.3.6.1.4.1.318.1.1.22.3.3.0',
    isxModularDistSubFeedLoadingTable => '1.3.6.1.4.1.318.1.1.22.3.4',
    isxModularDistSubFeedLoadingEntry => '1.3.6.1.4.1.318.1.1.22.3.4.1',
    isxModularDistSubFeedLoadingSubIndex => '1.3.6.1.4.1.318.1.1.22.3.4.1.1',
    isxModularDistSubFeedLoadingPhaseIndex => '1.3.6.1.4.1.318.1.1.22.3.4.1.2',
    isxModularDistSubFeedLoadingAlarmStatus => '1.3.6.1.4.1.318.1.1.22.3.4.1.3',
    isxModularDistSubFeedLoadingCurrent => '1.3.6.1.4.1.318.1.1.22.3.4.1.4',
    isxModularDistSubFeedLoadingPercent => '1.3.6.1.4.1.318.1.1.22.3.4.1.5',
    isxModularDistSubFeedLoadingPower => '1.3.6.1.4.1.318.1.1.22.3.4.1.6',
    isxModularDistSysVoltage => '1.3.6.1.4.1.318.1.1.22.4.1',
    isxModularDistSysOutputVoltageNominalLineToNeutral => '1.3.6.1.4.1.318.1.1.22.4.1.1.0',
    isxModularDistSysOutputVoltageNominalLineToLine => '1.3.6.1.4.1.318.1.1.22.4.1.2.0',
    isxModularDistSysOutputNominalFrequency => '1.3.6.1.4.1.318.1.1.22.4.1.3.0',
    isxModularDistSysOutputFrequency => '1.3.6.1.4.1.318.1.1.22.4.1.4.0',
    isxModularDistSysOutputVoltageMonitoring => '1.3.6.1.4.1.318.1.1.22.4.1.5.0',
    isxModularDistSysOutputVoltageThresholdMin => '1.3.6.1.4.1.318.1.1.22.4.1.6.0',
    isxModularDistSysOutputVoltageThresholdLow => '1.3.6.1.4.1.318.1.1.22.4.1.7.0',
    isxModularDistSysOutputVoltageThresholdHigh => '1.3.6.1.4.1.318.1.1.22.4.1.8.0',
    isxModularDistSysOutputVoltageThresholdMax => '1.3.6.1.4.1.318.1.1.22.4.1.9.0',
    isxModularDistSysOutputVoltageAlarmMinEnable => '1.3.6.1.4.1.318.1.1.22.4.1.10.0',
    isxModularDistSysOutputVoltageAlarmLowEnable => '1.3.6.1.4.1.318.1.1.22.4.1.11.0',
    isxModularDistSysOutputVoltageAlarmHighEnable => '1.3.6.1.4.1.318.1.1.22.4.1.12.0',
    isxModularDistSysOutputVoltageAlarmMaxEnable => '1.3.6.1.4.1.318.1.1.22.4.1.13.0',
    isxModularDistSysOutputVoltageFrequencyTolerance => '1.3.6.1.4.1.318.1.1.22.4.1.14.0',
    isxModularDistSysVoltageTable => '1.3.6.1.4.1.318.1.1.22.4.1.15',
    isxModularDistSysVoltageEntry => '1.3.6.1.4.1.318.1.1.22.4.1.15.1',
    isxModularDistSysVoltagePhaseIndex => '1.3.6.1.4.1.318.1.1.22.4.1.15.1.1',
    isxModularDistSysVoltageAlarmStatus => '1.3.6.1.4.1.318.1.1.22.4.1.15.1.2',
    isxModularDistSysVoltageLtoN => '1.3.6.1.4.1.318.1.1.22.4.1.15.1.3',
    isxModularDistSysVoltageLtoL => '1.3.6.1.4.1.318.1.1.22.4.1.15.1.4',
    isxModularDistSysCurrent => '1.3.6.1.4.1.318.1.1.22.4.2',
    isxModularDistSysCurrentRating => '1.3.6.1.4.1.318.1.1.22.4.2.1.0',
    isxModularDistSysCurrentMonitoring => '1.3.6.1.4.1.318.1.1.22.4.2.2.0',
    isxModularDistSysCurrentThresholdMin => '1.3.6.1.4.1.318.1.1.22.4.2.3.0',
    isxModularDistSysCurrentThresholdLow => '1.3.6.1.4.1.318.1.1.22.4.2.4.0',
    isxModularDistSysCurrentThresholdHigh => '1.3.6.1.4.1.318.1.1.22.4.2.5.0',
    isxModularDistSysCurrentThresholdMax => '1.3.6.1.4.1.318.1.1.22.4.2.6.0',
    isxModularDistSysCurrentAlarmMinEnable => '1.3.6.1.4.1.318.1.1.22.4.2.7.0',
    isxModularDistSysCurrentAlarmLowEnable => '1.3.6.1.4.1.318.1.1.22.4.2.8.0',
    isxModularDistSysCurrentAlarmHighEnable => '1.3.6.1.4.1.318.1.1.22.4.2.9.0',
    isxModularDistSysCurrentAlarmMaxEnable => '1.3.6.1.4.1.318.1.1.22.4.2.10.0',
    isxModularDistSysCurrentTable => '1.3.6.1.4.1.318.1.1.22.4.2.11',
    isxModularDistSysCurrentEntry => '1.3.6.1.4.1.318.1.1.22.4.2.11.1',
    isxModularDistSysCurrentPhaseIndex => '1.3.6.1.4.1.318.1.1.22.4.2.11.1.1',
    isxModularDistSysCurrentAlarmStatus => '1.3.6.1.4.1.318.1.1.22.4.2.11.1.2',
    isxModularDistSysCurrentAmps => '1.3.6.1.4.1.318.1.1.22.4.2.11.1.3',
    isxModularDistSysCurrentPercent => '1.3.6.1.4.1.318.1.1.22.4.2.11.1.4',
    isxModularDistSysPower => '1.3.6.1.4.1.318.1.1.22.4.3',
    isxModularDistSysPowerTotal => '1.3.6.1.4.1.318.1.1.22.4.3.1.0',
    isxModularDistSysPowerKwhUsage => '1.3.6.1.4.1.318.1.1.22.4.3.2.0',
    isxModularDistSysPowerKwhReset => '1.3.6.1.4.1.318.1.1.22.4.3.3.0',
    isxModularDistSysPowerKwhResetDate => '1.3.6.1.4.1.318.1.1.22.4.3.4.0',
    isxModularDistSysPowerTable => '1.3.6.1.4.1.318.1.1.22.4.3.5',
    isxModularDistSysPowerEntry => '1.3.6.1.4.1.318.1.1.22.4.3.5.1',
    isxModularDistSysPowerPhaseIndex => '1.3.6.1.4.1.318.1.1.22.4.3.5.1.1',
    isxModularDistSysPowerKw => '1.3.6.1.4.1.318.1.1.22.4.3.5.1.2',
    isxModularDistSysPowerKwhPhaseUsage => '1.3.6.1.4.1.318.1.1.22.4.3.5.1.3',
    isxModularPduIdent => '1.3.6.1.4.1.318.1.1.23.1',
    isxModularPduIdentModelNumber => '1.3.6.1.4.1.318.1.1.23.1.1.0',
    isxModularPduIdentSerialNumber => '1.3.6.1.4.1.318.1.1.23.1.2.0',
    isxModularPduIdentDateOfManufacture => '1.3.6.1.4.1.318.1.1.23.1.3.0',
    isxModularPduIdentMonitorCardSerialNumber => '1.3.6.1.4.1.318.1.1.23.1.4.0',
    isxModularPduIdentMonitorCardHardwareRev => '1.3.6.1.4.1.318.1.1.23.1.5.0',
    isxModularPduIdentMonitorCardFirmwareAppRev => '1.3.6.1.4.1.318.1.1.23.1.6.0',
    isxModularPduIdentMonitorCardFirmwareAppOSRev => '1.3.6.1.4.1.318.1.1.23.1.7.0',
    isxModularPduDevice => '1.3.6.1.4.1.318.1.1.23.2',
    isxModularPduDeviceTransformerPresent => '1.3.6.1.4.1.318.1.1.23.2.1.0',
    isxModularPduDeviceServiceType => '1.3.6.1.4.1.318.1.1.23.2.2.0',
    isxModularPduDeviceFansPresent => '1.3.6.1.4.1.318.1.1.23.2.3.0',
    isxModularPduDeviceNominalMainInputVoltage => '1.3.6.1.4.1.318.1.1.23.2.4.0',
    isxModularPduStatus => '1.3.6.1.4.1.318.1.1.23.3',
    isxModularPduAlarmStatus => '1.3.6.1.4.1.318.1.1.23.3.1.0',
    isxModularPduTransformerTempStatus => '1.3.6.1.4.1.318.1.1.23.3.2.0',
    isxModularPduFanStatus => '1.3.6.1.4.1.318.1.1.23.3.3.0',
    uioSensor => '1.3.6.1.4.1.318.1.1.25.1',
    uioSensorStatusTableSize => '1.3.6.1.4.1.318.1.1.25.1.1.0',
    uioSensorStatusTable => '1.3.6.1.4.1.318.1.1.25.1.2',
    uioSensorStatusEntry => '1.3.6.1.4.1.318.1.1.25.1.2.1',
    uioSensorStatusPortID => '1.3.6.1.4.1.318.1.1.25.1.2.1.1',
    uioSensorStatusSensorID => '1.3.6.1.4.1.318.1.1.25.1.2.1.2',
    uioSensorStatusSensorName => '1.3.6.1.4.1.318.1.1.25.1.2.1.3',
    uioSensorStatusSensorLocation => '1.3.6.1.4.1.318.1.1.25.1.2.1.4',
    uioSensorStatusTemperatureDegF => '1.3.6.1.4.1.318.1.1.25.1.2.1.5',
    uioSensorStatusTemperatureDegC => '1.3.6.1.4.1.318.1.1.25.1.2.1.6',
    uioSensorStatusHumidity => '1.3.6.1.4.1.318.1.1.25.1.2.1.7',
    uioSensorStatusViolationStatus => '1.3.6.1.4.1.318.1.1.25.1.2.1.8',
    uioSensorStatusAlarmStatus => '1.3.6.1.4.1.318.1.1.25.1.2.1.9',
    uioSensorStatusCommStatus => '1.3.6.1.4.1.318.1.1.25.1.2.1.10',
    uioInputContact => '1.3.6.1.4.1.318.1.1.25.2',
    uioInputContactStatusTableSize => '1.3.6.1.4.1.318.1.1.25.2.1.0',
    uioInputContactStatusTable => '1.3.6.1.4.1.318.1.1.25.2.2',
    uioInputContactStatusEntry => '1.3.6.1.4.1.318.1.1.25.2.2.1',
    uioInputContactStatusPortID => '1.3.6.1.4.1.318.1.1.25.2.2.1.1',
    uioInputContactStatusContactID => '1.3.6.1.4.1.318.1.1.25.2.2.1.2',
    uioInputContactStatusContactName => '1.3.6.1.4.1.318.1.1.25.2.2.1.3',
    uioInputContactStatusContactLocation => '1.3.6.1.4.1.318.1.1.25.2.2.1.4',
    uioInputContactStatusCurrentState => '1.3.6.1.4.1.318.1.1.25.2.2.1.5',
    uioInputContactStatusAlarmStatus => '1.3.6.1.4.1.318.1.1.25.2.2.1.6',
    uioInputContactStatusCommStatus => '1.3.6.1.4.1.318.1.1.25.2.2.1.7',
    uioOutputRelay => '1.3.6.1.4.1.318.1.1.25.3',
    uioOutputRelayStatusTableSize => '1.3.6.1.4.1.318.1.1.25.3.1.0',
    uioOutputRelayStatusTable => '1.3.6.1.4.1.318.1.1.25.3.2',
    uioOutputRelayStatusEntry => '1.3.6.1.4.1.318.1.1.25.3.2.1',
    uioOutputRelayStatusPortID => '1.3.6.1.4.1.318.1.1.25.3.2.1.1',
    uioOutputRelayStatusRelayID => '1.3.6.1.4.1.318.1.1.25.3.2.1.2',
    uioOutputRelayStatusRelayName => '1.3.6.1.4.1.318.1.1.25.3.2.1.3',
    uioOutputRelayStatusRelayLocation => '1.3.6.1.4.1.318.1.1.25.3.2.1.4',
    uioOutputRelayStatusCurrentState => '1.3.6.1.4.1.318.1.1.25.3.2.1.5',
    uioOutputRelayStatusAlarmStatus => '1.3.6.1.4.1.318.1.1.25.3.2.1.6',
    uioOutputRelayStatusCommStatus => '1.3.6.1.4.1.318.1.1.25.3.2.1.7',
  },
  'Netvision-v6-MIB' => {
    software => '1.3.6.1.4.1.4555.1',
    network => '1.3.6.1.4.1.4555.1.1',
    netvision => '1.3.6.1.4.1.4555.1.1.1',
    upsObjects => '1.3.6.1.4.1.4555.1.1.1.1',
    upsIdent => '1.3.6.1.4.1.4555.1.1.1.1.1',
    upsIdentModel => '1.3.6.1.4.1.4555.1.1.1.1.1.1',
    upsIdentUPSFirmwareVersion => '1.3.6.1.4.1.4555.1.1.1.1.1.2',
    upsIdentAgentSoftwareVersion => '1.3.6.1.4.1.4555.1.1.1.1.1.3',
    upsIdentUpsSerialNumber => '1.3.6.1.4.1.4555.1.1.1.1.1.4',
    upsAgent => '1.3.6.1.4.1.4555.1.1.1.1.10',
    upsAgentIpaddress => '1.3.6.1.4.1.4555.1.1.1.1.10.1',
    upsAgentPollRate => '1.3.6.1.4.1.4555.1.1.1.1.10.10',
    upsAgentBaudRate => '1.3.6.1.4.1.4555.1.1.1.1.10.11',
    upsAgentDhcpStatus => '1.3.6.1.4.1.4555.1.1.1.1.10.12',
    upsAgentTelnetStatus => '1.3.6.1.4.1.4555.1.1.1.1.10.13',
    upsAgentTftpStatus => '1.3.6.1.4.1.4555.1.1.1.1.10.14',
    upsAgentResetToDefault => '1.3.6.1.4.1.4555.1.1.1.1.10.15',
    upsAgentRestart => '1.3.6.1.4.1.4555.1.1.1.1.10.16',
    upsAgentClearAgentLog => '1.3.6.1.4.1.4555.1.1.1.1.10.17',
    upsAgentClearEventLog => '1.3.6.1.4.1.4555.1.1.1.1.10.18',
    upsAgentClearExtHistoryLog => '1.3.6.1.4.1.4555.1.1.1.1.10.19',
    upsAgentGateway => '1.3.6.1.4.1.4555.1.1.1.1.10.2',
    upsAgentClearHistoryLog => '1.3.6.1.4.1.4555.1.1.1.1.10.20',
    upsAgentTrapsReceiversTable => '1.3.6.1.4.1.4555.1.1.1.1.10.21',
    upsAgentTrapsReceiversEntry => '1.3.6.1.4.1.4555.1.1.1.1.10.21.1',
    trapsIndex => '1.3.6.1.4.1.4555.1.1.1.1.10.21.1.1',
    trapsReceiverAddr => '1.3.6.1.4.1.4555.1.1.1.1.10.21.1.2',
    receiverCommunityString => '1.3.6.1.4.1.4555.1.1.1.1.10.21.1.3',
    receiverDescription => '1.3.6.1.4.1.4555.1.1.1.1.10.21.1.4',
    upsAgentAccessControlTable => '1.3.6.1.4.1.4555.1.1.1.1.10.22',
    upsAgentAccessControlEntry => '1.3.6.1.4.1.4555.1.1.1.1.10.22.1',
    accessIndex => '1.3.6.1.4.1.4555.1.1.1.1.10.22.1.1',
    accessControlAddr => '1.3.6.1.4.1.4555.1.1.1.1.10.22.1.2',
    accessCommunityString => '1.3.6.1.4.1.4555.1.1.1.1.10.22.1.3',
    accessControlMode => '1.3.6.1.4.1.4555.1.1.1.1.10.22.1.4',
    upsAgentMibVersion => '1.3.6.1.4.1.4555.1.1.1.1.10.23',
    upsAgentSubnetMask => '1.3.6.1.4.1.4555.1.1.1.1.10.3',
    upsAgentDate => '1.3.6.1.4.1.4555.1.1.1.1.10.4',
    upsAgentTime => '1.3.6.1.4.1.4555.1.1.1.1.10.5',
    upsAgentTrapString => '1.3.6.1.4.1.4555.1.1.1.1.10.50',
    upsAgentNtpTimeServer => '1.3.6.1.4.1.4555.1.1.1.1.10.6',
    upsAgentNtpTimeZone => '1.3.6.1.4.1.4555.1.1.1.1.10.7',
    upsAgentHistoryLogFrequency => '1.3.6.1.4.1.4555.1.1.1.1.10.8',
    upsAgentExtHistoryLogFrequency => '1.3.6.1.4.1.4555.1.1.1.1.10.9',
    emdStatus => '1.3.6.1.4.1.4555.1.1.1.1.11',
    emdSatatusTemperature => '1.3.6.1.4.1.4555.1.1.1.1.11.1',
    emdSatatusHumidity => '1.3.6.1.4.1.4555.1.1.1.1.11.2',
    upsBattery => '1.3.6.1.4.1.4555.1.1.1.1.2',
    upsBatteryStatus => '1.3.6.1.4.1.4555.1.1.1.1.2.1',
    upsBatteryStatusDefinition => {
      1 => 'unknown',
      2 => 'batteryNormal',
      3 => 'batteryLow',
      4 => 'batteryDepleted',
      5 => 'batteryDischarging',
      6 => 'batteryFailure',
      7 => 'upsOff',
    },
    upsSecondsOnBattery => '1.3.6.1.4.1.4555.1.1.1.1.2.2',
    upsEstimatedMinutesRemaining => '1.3.6.1.4.1.4555.1.1.1.1.2.3',
    upsEstimatedChargeRemaining => '1.3.6.1.4.1.4555.1.1.1.1.2.4',
    upsBatteryVoltage => '1.3.6.1.4.1.4555.1.1.1.1.2.5',
    upsBatteryTemperature => '1.3.6.1.4.1.4555.1.1.1.1.2.6',
    upsInput => '1.3.6.1.4.1.4555.1.1.1.1.3',
    upsInputNumLines => '1.3.6.1.4.1.4555.1.1.1.1.3.1',
    upsInputFrequency => '1.3.6.1.4.1.4555.1.1.1.1.3.2',
    upsInputTable => '1.3.6.1.4.1.4555.1.1.1.1.3.3',
    upsInputEntry => '1.3.6.1.4.1.4555.1.1.1.1.3.3.1',
    upsInputLineIndex => '1.3.6.1.4.1.4555.1.1.1.1.3.3.1.1',
    upsInputVoltage => '1.3.6.1.4.1.4555.1.1.1.1.3.3.1.2',
    upsInputCurrent => '1.3.6.1.4.1.4555.1.1.1.1.3.3.1.3',
    upsInputVoltageMax => '1.3.6.1.4.1.4555.1.1.1.1.3.3.1.4',
    upsInputVoltageMin => '1.3.6.1.4.1.4555.1.1.1.1.3.3.1.5',
    upsOutput => '1.3.6.1.4.1.4555.1.1.1.1.4',
    upsOutputSource => '1.3.6.1.4.1.4555.1.1.1.1.4.1',
    upsOutputSourceDefinition => {
      1 => 'unknown',
      2 => 'onInverter',
      3 => 'onMains',
      4 => 'ecoMode',
      5 => 'onBypass',
      6 => 'standby',
      7 => 'onMaintenanceBypass',
      8 => 'upsOff',
      9 => 'normalMode',
    },
    upsOutputFrequency => '1.3.6.1.4.1.4555.1.1.1.1.4.2',
    upsOutputNumLines => '1.3.6.1.4.1.4555.1.1.1.1.4.3',
    upsOutputTable => '1.3.6.1.4.1.4555.1.1.1.1.4.4',
    upsOutputEntry => '1.3.6.1.4.1.4555.1.1.1.1.4.4.1',
    upsOutputLineIndex => '1.3.6.1.4.1.4555.1.1.1.1.4.4.1.1',
    upsOutputVoltage => '1.3.6.1.4.1.4555.1.1.1.1.4.4.1.2',
    upsOutputCurrent => '1.3.6.1.4.1.4555.1.1.1.1.4.4.1.3',
    upsOutputPercentLoad => '1.3.6.1.4.1.4555.1.1.1.1.4.4.1.4',
    upsOutputKva => '1.3.6.1.4.1.4555.1.1.1.1.4.4.1.5',
    upsBypass => '1.3.6.1.4.1.4555.1.1.1.1.5',
    upsBypassFrequency => '1.3.6.1.4.1.4555.1.1.1.1.5.1',
    upsBypassNumLines => '1.3.6.1.4.1.4555.1.1.1.1.5.2',
    upsBypassTable => '1.3.6.1.4.1.4555.1.1.1.1.5.3',
    upsBypassEntry => '1.3.6.1.4.1.4555.1.1.1.1.5.3.1',
    upsBypassLineIndex => '1.3.6.1.4.1.4555.1.1.1.1.5.3.1.1',
    upsBypassVoltage => '1.3.6.1.4.1.4555.1.1.1.1.5.3.1.2',
    upsBypassCurrent => '1.3.6.1.4.1.4555.1.1.1.1.5.3.1.3',
    upsAlarm => '1.3.6.1.4.1.4555.1.1.1.1.6',
    upsAlarmsPresent => '1.3.6.1.4.1.4555.1.1.1.1.6.1',
    upsAlarmTable => '1.3.6.1.4.1.4555.1.1.1.1.6.2',
    upsAlarmEntry => '1.3.6.1.4.1.4555.1.1.1.1.6.2.1',
    upsAlarmId => '1.3.6.1.4.1.4555.1.1.1.1.6.2.1.1',
    upsAlarmDescr => '1.3.6.1.4.1.4555.1.1.1.1.6.2.1.2',
    upsAlarmTime => '1.3.6.1.4.1.4555.1.1.1.1.6.2.1.3',
    upsAlarmExtDes => '1.3.6.1.4.1.4555.1.1.1.1.6.2.1.4',
    upsWellKnownAlarms => '1.3.6.1.4.1.4555.1.1.1.1.6.3',
    upsAlarmBatteryBad => '1.3.6.1.4.1.4555.1.1.1.1.6.3.1',
    upsAlarmBypassBad => '1.3.6.1.4.1.4555.1.1.1.1.6.3.10',
    upsAlarmOutputOffAsRequested => '1.3.6.1.4.1.4555.1.1.1.1.6.3.11',
    upsAlarmUpsOffAsRequested => '1.3.6.1.4.1.4555.1.1.1.1.6.3.12',
    upsAlarmChargerFailed => '1.3.6.1.4.1.4555.1.1.1.1.6.3.13',
    upsAlarmUpsOutputOff => '1.3.6.1.4.1.4555.1.1.1.1.6.3.14',
    upsAlarmUpsSystemOff => '1.3.6.1.4.1.4555.1.1.1.1.6.3.15',
    upsAlarmFanFailure => '1.3.6.1.4.1.4555.1.1.1.1.6.3.16',
    upsAlarmFuseFailure => '1.3.6.1.4.1.4555.1.1.1.1.6.3.17',
    upsAlarmGeneralFault => '1.3.6.1.4.1.4555.1.1.1.1.6.3.18',
    upsAlarmDiagnosticTestFailed => '1.3.6.1.4.1.4555.1.1.1.1.6.3.19',
    upsAlarmOnBattery => '1.3.6.1.4.1.4555.1.1.1.1.6.3.2',
    upsAlarmCommunicationLost => '1.3.6.1.4.1.4555.1.1.1.1.6.3.20',
    upsAlarmAwaitingPower => '1.3.6.1.4.1.4555.1.1.1.1.6.3.21',
    upsAlarmShutdownPending => '1.3.6.1.4.1.4555.1.1.1.1.6.3.22',
    upsAlarmShutdownImminent => '1.3.6.1.4.1.4555.1.1.1.1.6.3.23',
    upsAlarmTestInProgress => '1.3.6.1.4.1.4555.1.1.1.1.6.3.24',
    upsAlarmPowerSupplyFault => '1.3.6.1.4.1.4555.1.1.1.1.6.3.25',
    upsAlarmAuxMainFail => '1.3.6.1.4.1.4555.1.1.1.1.6.3.26',
    upsAlarmManualBypassClose => '1.3.6.1.4.1.4555.1.1.1.1.6.3.27',
    upsAlarmShortCircuit => '1.3.6.1.4.1.4555.1.1.1.1.6.3.28',
    upsAlarmBatteryChargerFailure => '1.3.6.1.4.1.4555.1.1.1.1.6.3.29',
    upsAlarmLowBattery => '1.3.6.1.4.1.4555.1.1.1.1.6.3.3',
    upsAlarmInverterOverCurrent => '1.3.6.1.4.1.4555.1.1.1.1.6.3.30',
    upsAlarmInverterDistorsion => '1.3.6.1.4.1.4555.1.1.1.1.6.3.31',
    upsAlarmPrechargeVoltageFail => '1.3.6.1.4.1.4555.1.1.1.1.6.3.32',
    upsAlarmBoostTooLow => '1.3.6.1.4.1.4555.1.1.1.1.6.3.33',
    upsAlarmBoostTooHigh => '1.3.6.1.4.1.4555.1.1.1.1.6.3.34',
    upsAlarmBatteryTooHigh => '1.3.6.1.4.1.4555.1.1.1.1.6.3.35',
    upsAlarmImproperCondition => '1.3.6.1.4.1.4555.1.1.1.1.6.3.36',
    upsAlarmOverloadTimeout => '1.3.6.1.4.1.4555.1.1.1.1.6.3.37',
    upsAlarmControlSystemFailure => '1.3.6.1.4.1.4555.1.1.1.1.6.3.38',
    upsAlarmDataCorrupted => '1.3.6.1.4.1.4555.1.1.1.1.6.3.39',
    upsAlarmDepletedBattery => '1.3.6.1.4.1.4555.1.1.1.1.6.3.4',
    upsAlarmPllFault => '1.3.6.1.4.1.4555.1.1.1.1.6.3.40',
    upsAlarmInputGeneralAlarm => '1.3.6.1.4.1.4555.1.1.1.1.6.3.41',
    upsAlarmRectifierGeneralAlarm => '1.3.6.1.4.1.4555.1.1.1.1.6.3.42',
    upsAlarmBoostGeneralAlarm => '1.3.6.1.4.1.4555.1.1.1.1.6.3.43',
    upsAlarmInverterGeneralAlarm => '1.3.6.1.4.1.4555.1.1.1.1.6.3.44',
    upsAlarmBatteryGeneralAlarm => '1.3.6.1.4.1.4555.1.1.1.1.6.3.45',
    upsAlarmOutputOver => '1.3.6.1.4.1.4555.1.1.1.1.6.3.46',
    upsAlarmOutputUnder => '1.3.6.1.4.1.4555.1.1.1.1.6.3.47',
    upsAlarmBypassGeneralAlarm => '1.3.6.1.4.1.4555.1.1.1.1.6.3.48',
    upsAlarmStopForOverload => '1.3.6.1.4.1.4555.1.1.1.1.6.3.49',
    upsAlarmTempBad => '1.3.6.1.4.1.4555.1.1.1.1.6.3.5',
    upsAlarmImminentStop => '1.3.6.1.4.1.4555.1.1.1.1.6.3.50',
    upsAlarmModule1Alarm => '1.3.6.1.4.1.4555.1.1.1.1.6.3.51',
    upsAlarmModule2Alarm => '1.3.6.1.4.1.4555.1.1.1.1.6.3.52',
    upsAlarmModule3Alarm => '1.3.6.1.4.1.4555.1.1.1.1.6.3.53',
    upsAlarmModule4Alarm => '1.3.6.1.4.1.4555.1.1.1.1.6.3.54',
    upsAlarmModule5Alarm => '1.3.6.1.4.1.4555.1.1.1.1.6.3.55',
    upsAlarmModule6Alarm => '1.3.6.1.4.1.4555.1.1.1.1.6.3.56',
    upsAlarmExternalAlarm1 => '1.3.6.1.4.1.4555.1.1.1.1.6.3.57',
    upsAlarmExternalAlarm2 => '1.3.6.1.4.1.4555.1.1.1.1.6.3.58',
    upsAlarmExternalAlarm3 => '1.3.6.1.4.1.4555.1.1.1.1.6.3.59',
    upsAlarmInputBad => '1.3.6.1.4.1.4555.1.1.1.1.6.3.6',
    upsAlarmExternalAlarm4 => '1.3.6.1.4.1.4555.1.1.1.1.6.3.60',
    upsAlarmEService => '1.3.6.1.4.1.4555.1.1.1.1.6.3.61',
    upsAlarmRedundancyLost => '1.3.6.1.4.1.4555.1.1.1.1.6.3.62',
    upsAlarmPeriodicServiceCheck => '1.3.6.1.4.1.4555.1.1.1.1.6.3.63',
    upsAlarmAllTransferDisabled => '1.3.6.1.4.1.4555.1.1.1.1.6.3.64',
    upsAlarmAutoTransferDisabled => '1.3.6.1.4.1.4555.1.1.1.1.6.3.65',
    upsAlarmBatteryRoom => '1.3.6.1.4.1.4555.1.1.1.1.6.3.66',
    upsAlarmManualBypass => '1.3.6.1.4.1.4555.1.1.1.1.6.3.67',
    upsAlarmBatteryDischarged => '1.3.6.1.4.1.4555.1.1.1.1.6.3.68',
    upsAlarmInsufficientResources => '1.3.6.1.4.1.4555.1.1.1.1.6.3.69',
    upsAlarmOutputBad => '1.3.6.1.4.1.4555.1.1.1.1.6.3.7',
    upsAlarmOptionalBoards => '1.3.6.1.4.1.4555.1.1.1.1.6.3.70',
    upsAlarmRectifierFault => '1.3.6.1.4.1.4555.1.1.1.1.6.3.71',
    upsAlarmBoostFault => '1.3.6.1.4.1.4555.1.1.1.1.6.3.72',
    upsAlarmInverterFault => '1.3.6.1.4.1.4555.1.1.1.1.6.3.73',
    upsAlarmParallelModuleFault => '1.3.6.1.4.1.4555.1.1.1.1.6.3.74',
    upsAlarmGenSetGeneral => '1.3.6.1.4.1.4555.1.1.1.1.6.3.75',
    upsAlarmGenSetFault => '1.3.6.1.4.1.4555.1.1.1.1.6.3.76',
    upsAlarmEmergencyStopActive => '1.3.6.1.4.1.4555.1.1.1.1.6.3.77',
    upsAlarmBatteryCircuitOpen => '1.3.6.1.4.1.4555.1.1.1.1.6.3.78',
    upsAlarmFansFailure => '1.3.6.1.4.1.4555.1.1.1.1.6.3.79',
    upsAlarmOutputOverload => '1.3.6.1.4.1.4555.1.1.1.1.6.3.8',
    upsAlarmPhaseRotationFault => '1.3.6.1.4.1.4555.1.1.1.1.6.3.80',
    upsAlarmA62 => '1.3.6.1.4.1.4555.1.1.1.1.6.3.81',
    upsAlarmA63 => '1.3.6.1.4.1.4555.1.1.1.1.6.3.82',
    upsAlarmOnBypass => '1.3.6.1.4.1.4555.1.1.1.1.6.3.9',
    upsTest => '1.3.6.1.4.1.4555.1.1.1.1.7',
    upsTestId => '1.3.6.1.4.1.4555.1.1.1.1.7.1',
    upsTestSpinLock => '1.3.6.1.4.1.4555.1.1.1.1.7.2',
    upsTestResultsSummary => '1.3.6.1.4.1.4555.1.1.1.1.7.3',
    upsTestResultsSummaryDefinition => {
      #1 => 'notActive',
      #2 => 'inProgress',
      #3 => 'byPass',
      #4 => 'failed',
      1 => 'donePass',
      2 => 'doneWarning',
      3 => 'doneError',
      4 => 'aborted',
      5 => 'inProgress',
      6 => 'noTestsInitiated',
    },
    upsTestResultsDetail => '1.3.6.1.4.1.4555.1.1.1.1.7.4',
    upsTestStartTime => '1.3.6.1.4.1.4555.1.1.1.1.7.5',
    upsTestElapsedTime => '1.3.6.1.4.1.4555.1.1.1.1.7.6',
    upsWellKnownTests => '1.3.6.1.4.1.4555.1.1.1.1.7.7',
    upsTestNoTestsInitiated => '1.3.6.1.4.1.4555.1.1.1.1.7.7.1',
    upsTestAbortTestInProgress => '1.3.6.1.4.1.4555.1.1.1.1.7.7.2',
    upsTestGeneralSystemsTest => '1.3.6.1.4.1.4555.1.1.1.1.7.7.3',
    upsTestQuickBatteryTest => '1.3.6.1.4.1.4555.1.1.1.1.7.7.4',
    upsDeepBatteryCalibration => '1.3.6.1.4.1.4555.1.1.1.1.7.7.5',
    upsControl => '1.3.6.1.4.1.4555.1.1.1.1.8',
    upsControlStatusControl => '1.3.6.1.4.1.4555.1.1.1.1.8.1',
    upsControlStatusControlDefinition => {
      1 => 'upsStandbyOn',
      2 => 'upsStandbyOff',
      3 => 'upsEcoMode',
      4 => 'upsNormalMode',
      5 => 'upsAlarmReset',
      6 => 'upsCommandReset',
      7 => 'upsBuzzerOff',
      8 => 'upsOnBypass',
      9 => 'upsOnInverter',
    },
    upsShutdownDelay => '1.3.6.1.4.1.4555.1.1.1.1.8.2',
    upsTurnOffAfterShutdown => '1.3.6.1.4.1.4555.1.1.1.1.8.3',
    upsControlShutdownParametersTable => '1.3.6.1.4.1.4555.1.1.1.1.8.4',
    shutdownParametersEntry => '1.3.6.1.4.1.4555.1.1.1.1.8.4.1',
    upsControlEventDescr => '1.3.6.1.4.1.4555.1.1.1.1.8.4.1.1',
    upsControlEventStatus => '1.3.6.1.4.1.4555.1.1.1.1.8.4.1.2',
    upsControlDelay => '1.3.6.1.4.1.4555.1.1.1.1.8.4.1.3',
    upsControlFirstWarning => '1.3.6.1.4.1.4555.1.1.1.1.8.4.1.4',
    upsControlWarningInterval => '1.3.6.1.4.1.4555.1.1.1.1.8.4.1.5',
    upsControlSeverity => '1.3.6.1.4.1.4555.1.1.1.1.8.4.1.6',
    upsControlWeeklyScheduleTable => '1.3.6.1.4.1.4555.1.1.1.1.8.5',
    upsControlWeeklyScheduleEntry => '1.3.6.1.4.1.4555.1.1.1.1.8.5.1',
    upsControlWeeklyIndex => '1.3.6.1.4.1.4555.1.1.1.1.8.5.1.1',
    upsControlWeeklyShutdownDay => '1.3.6.1.4.1.4555.1.1.1.1.8.5.1.2',
    upsControlWeeklyShutdownTime => '1.3.6.1.4.1.4555.1.1.1.1.8.5.1.3',
    upsControlWeeklyRestartDay => '1.3.6.1.4.1.4555.1.1.1.1.8.5.1.4',
    upsControlWeeklyRestartTime => '1.3.6.1.4.1.4555.1.1.1.1.8.5.1.5',
    upsControlSpecialScheduleTable => '1.3.6.1.4.1.4555.1.1.1.1.8.6',
    upsControlSpecialScheduleEntry => '1.3.6.1.4.1.4555.1.1.1.1.8.6.1',
    upsControlSpecialIndex => '1.3.6.1.4.1.4555.1.1.1.1.8.6.1.1',
    upsControlSpecialShutdownDay => '1.3.6.1.4.1.4555.1.1.1.1.8.6.1.2',
    upsControlSpecialShutdownTime => '1.3.6.1.4.1.4555.1.1.1.1.8.6.1.3',
    upsControlSpecialRestartDay => '1.3.6.1.4.1.4555.1.1.1.1.8.6.1.4',
    upsControlSpecialRestartTime => '1.3.6.1.4.1.4555.1.1.1.1.8.6.1.5',
    upsControlEcoModeScheduleTable => '1.3.6.1.4.1.4555.1.1.1.1.8.7',
    upsControlEcoModeScheduleEntry => '1.3.6.1.4.1.4555.1.1.1.1.8.7.1',
    upsControlEcoModeIndex => '1.3.6.1.4.1.4555.1.1.1.1.8.7.1.1',
    upsControlEcoModeStartDay => '1.3.6.1.4.1.4555.1.1.1.1.8.7.1.2',
    upsControlEcoModeStartTime => '1.3.6.1.4.1.4555.1.1.1.1.8.7.1.3',
    upsControlEcoModeEndDay => '1.3.6.1.4.1.4555.1.1.1.1.8.7.1.4',
    upsControlEcoModeEndTime => '1.3.6.1.4.1.4555.1.1.1.1.8.7.1.5',
    upsConfig => '1.3.6.1.4.1.4555.1.1.1.1.9',
    upsConfigInputVoltage => '1.3.6.1.4.1.4555.1.1.1.1.9.1',
    upsConfigInputFreq => '1.3.6.1.4.1.4555.1.1.1.1.9.2',
    upsConfigOutputVoltage => '1.3.6.1.4.1.4555.1.1.1.1.9.3',
    upsConfigOutputFreq => '1.3.6.1.4.1.4555.1.1.1.1.9.4',
    upsDevicesTable => '1.3.6.1.4.1.4555.1.1.1.1.9.5',
    upsDevicesEntry => '1.3.6.1.4.1.4555.1.1.1.1.9.5.1',
    indexOfDevice => '1.3.6.1.4.1.4555.1.1.1.1.9.5.1.1',
    addrOfDevice => '1.3.6.1.4.1.4555.1.1.1.1.9.5.1.2',
    nameOfDevice => '1.3.6.1.4.1.4555.1.1.1.1.9.5.1.3',
    timeOfConnection => '1.3.6.1.4.1.4555.1.1.1.1.9.5.1.4',
    statusOfConnection => '1.3.6.1.4.1.4555.1.1.1.1.9.5.1.5',
    severityOfConnection => '1.3.6.1.4.1.4555.1.1.1.1.9.5.1.6',
    upsTraps => '1.3.6.1.4.1.4555.1.1.1.2',
    upsTrapOnBattery => '1.3.6.1.4.1.4555.1.1.1.2.1',
    upsTrapImminentStop => '1.3.6.1.4.1.4555.1.1.1.2.10',
    upsTrapTurnedOff => '1.3.6.1.4.1.4555.1.1.1.2.11',
    upsTrapOverTemperature => '1.3.6.1.4.1.4555.1.1.1.2.12',
    upsTrapOverload => '1.3.6.1.4.1.4555.1.1.1.2.13',
    upsTrapOnMains => '1.3.6.1.4.1.4555.1.1.1.2.14',
    upsTrapRedoundancyLost => '1.3.6.1.4.1.4555.1.1.1.2.15',
    upsTrapEmdTempLow => '1.3.6.1.4.1.4555.1.1.1.2.16',
    upsTrapEmdTempHigh => '1.3.6.1.4.1.4555.1.1.1.2.17',
    upsTrapEmdHumidityLow => '1.3.6.1.4.1.4555.1.1.1.2.18',
    upsTrapEmdHumidityHigh => '1.3.6.1.4.1.4555.1.1.1.2.19',
    upsTrapTestCompleted => '1.3.6.1.4.1.4555.1.1.1.2.2',
    upsTrapEmdFirstInputActive => '1.3.6.1.4.1.4555.1.1.1.2.20',
    upsTrapEmdFirstInputRestored => '1.3.6.1.4.1.4555.1.1.1.2.21',
    upsTrapEmdSecondInputActive => '1.3.6.1.4.1.4555.1.1.1.2.22',
    upsTrapEmdSecondInputRestored => '1.3.6.1.4.1.4555.1.1.1.2.23',
    upsTrapAlarmEntryAdded => '1.3.6.1.4.1.4555.1.1.1.2.3',
    upsTrapAlarmEntryRemoved => '1.3.6.1.4.1.4555.1.1.1.2.4',
    upsTrapUpsNormal => '1.3.6.1.4.1.4555.1.1.1.2.5',
    upsTrapUpsBattTestFailed => '1.3.6.1.4.1.4555.1.1.1.2.6',
    upsTrapOnBatteryPower => '1.3.6.1.4.1.4555.1.1.1.2.7',
    upsTrapBatteryLow => '1.3.6.1.4.1.4555.1.1.1.2.8',
    upsTrapPowerRestored => '1.3.6.1.4.1.4555.1.1.1.2.9',
  },
  'XUPS-MIB' => {
    exide => '1.3.6.1.4.1.534',
    xups => '1.3.6.1.4.1.534.1',
    xupsIdent => '1.3.6.1.4.1.534.1.1',
    xupsBattery => '1.3.6.1.4.1.534.1.2',
    xupsInput => '1.3.6.1.4.1.534.1.3',
    xupsOutput => '1.3.6.1.4.1.534.1.4',
    xupsBypass => '1.3.6.1.4.1.534.1.5',
    xupsEnvironment => '1.3.6.1.4.1.534.1.6',
    xupsAlarm => '1.3.6.1.4.1.534.1.7',
    xupsTest => '1.3.6.1.4.1.534.1.8',
    xupsControl => '1.3.6.1.4.1.534.1.9',
    xupsConfig => '1.3.6.1.4.1.534.1.10',
    xupsTrapControl => '1.3.6.1.4.1.534.1.11',
    xupsObjectId => '1.3.6.1.4.1.534.2',
    powerwareEthernetSnmpAdapter => '1.3.6.1.4.1.534.2.1',
    powerwareNetworkSnmpAdapterEther => '1.3.6.1.4.1.534.2.2',
    powerwareNetworkSnmpAdapterToken => '1.3.6.1.4.1.534.2.3',
    onlinetDaemon => '1.3.6.1.4.1.534.2.4',
    connectUPSAdapterEthernet => '1.3.6.1.4.1.534.2.5',
    powerwareNetworkDigitalIOEther => '1.3.6.1.4.1.534.2.6',
    connectUPSAdapterTokenRing => '1.3.6.1.4.1.534.2.7',
    xupsIdent => '1.3.6.1.4.1.534.1.1',
    xupsIdentManufacturer => '1.3.6.1.4.1.534.1.1.1.0',
    xupsIdentModel => '1.3.6.1.4.1.534.1.1.2.0',
    xupsIdentSoftwareVersion => '1.3.6.1.4.1.534.1.1.3.0',
    xupsBattery => '1.3.6.1.4.1.534.1.2',
    xupsBatTimeRemaining => '1.3.6.1.4.1.534.1.2.1.0',
    xupsBatVoltage => '1.3.6.1.4.1.534.1.2.2.0',
    xupsBatCurrent => '1.3.6.1.4.1.534.1.2.3.0',
    xupsBatCapacity => '1.3.6.1.4.1.534.1.2.4.0',
    xupsInput => '1.3.6.1.4.1.534.1.3',
    xupsInputFrequency => '1.3.6.1.4.1.534.1.3.1.0',
    xupsInputLineBads => '1.3.6.1.4.1.534.1.3.2.0',
    xupsInputNumPhases => '1.3.6.1.4.1.534.1.3.3.0',
    xupsInputTable => '1.3.6.1.4.1.534.1.3.4',
    xupsInputEntry => '1.3.6.1.4.1.534.1.3.4.1',
    xupsInputPhase => '1.3.6.1.4.1.534.1.3.4.1.1',
    xupsInputVoltage => '1.3.6.1.4.1.534.1.3.4.1.2',
    xupsInputCurrent => '1.3.6.1.4.1.534.1.3.4.1.3',
    xupsInputWatts => '1.3.6.1.4.1.534.1.3.4.1.4',
    xupsOutput => '1.3.6.1.4.1.534.1.4',
    xupsOutputLoad => '1.3.6.1.4.1.534.1.4.1.0',
    xupsOutputFrequency => '1.3.6.1.4.1.534.1.4.2.0',
    xupsOutputNumPhases => '1.3.6.1.4.1.534.1.4.3.0',
    xupsOutputTable => '1.3.6.1.4.1.534.1.4.4',
    xupsOutputEntry => '1.3.6.1.4.1.534.1.4.4.1',
    xupsOutputPhase => '1.3.6.1.4.1.534.1.4.4.1.1',
    xupsOutputVoltage => '1.3.6.1.4.1.534.1.4.4.1.2',
    xupsOutputCurrent => '1.3.6.1.4.1.534.1.4.4.1.3',
    xupsOutputWatts => '1.3.6.1.4.1.534.1.4.4.1.4',
    xupsBypass => '1.3.6.1.4.1.534.1.5',
    xupsBypassFrequency => '1.3.6.1.4.1.534.1.5.1.0',
    xupsBypassNumPhases => '1.3.6.1.4.1.534.1.5.2.0',
    xupsBypassTable => '1.3.6.1.4.1.534.1.5.3',
    xupsBypassEntry => '1.3.6.1.4.1.534.1.5.3.1',
    xupsBypassPhase => '1.3.6.1.4.1.534.1.5.3.1.1',
    xupsBypassVoltage => '1.3.6.1.4.1.534.1.5.3.1.2',
    xupsAlarm => '1.3.6.1.4.1.534.1.7',
    xupsAlarms => '1.3.6.1.4.1.534.1.7.1',
    xupsAlarmTable => '1.3.6.1.4.1.534.1.7.2',
    xupsAlarmEntry => '1.3.6.1.4.1.534.1.7.2.1',
    xupsAlarmID => '1.3.6.1.4.1.534.1.7.2.1.1',
    xupsAlarmDescr => '1.3.6.1.4.1.534.1.7.2.1.2',
    xupsAlarmDescrDefinition => 'OID::XUPS-MIB',
    xupsAlarmTime => '1.3.6.1.4.1.534.1.7.2.1.3',
    xupsOnBattery => '1.3.6.1.4.1.534.1.7.3',
    xupsLowBattery => '1.3.6.1.4.1.534.1.7.4',
    xupsUtilityPowerRestored => '1.3.6.1.4.1.534.1.7.5',
    xupsReturnFromLowBattery => '1.3.6.1.4.1.534.1.7.6',
    xupsOutputOverload => '1.3.6.1.4.1.534.1.7.7',
    xupsInternalFailure => '1.3.6.1.4.1.534.1.7.8',
    xupsBatteryDischarged => '1.3.6.1.4.1.534.1.7.9',
    xupsInverterFailure => '1.3.6.1.4.1.534.1.7.10',
    xupsOnBypass => '1.3.6.1.4.1.534.1.7.11',
    xupsBypassNotAvailable => '1.3.6.1.4.1.534.1.7.12',
    xupsOutputOff => '1.3.6.1.4.1.534.1.7.13',
    xupsInputFailure => '1.3.6.1.4.1.534.1.7.14',
    xupsBuildingAlarm => '1.3.6.1.4.1.534.1.7.15',
    xupsShutdownImminent => '1.3.6.1.4.1.534.1.7.16',
    xupsOnInverter => '1.3.6.1.4.1.534.1.7.17',
    xupsAlarmNumEvents => '1.3.6.1.4.1.534.1.7.18.0',
    xupsAlarmEventTable => '1.3.6.1.4.1.534.1.7.19',
    xupsAlarmEventEntry => '1.3.6.1.4.1.534.1.7.19.1',
    xupsAlarmEventID => '1.3.6.1.4.1.534.1.7.19.1.1',
    xupsAlarmEventDateAndTime => '1.3.6.1.4.1.534.1.7.19.1.2',
    xupsAlarmEventKind => '1.3.6.1.4.1.534.1.7.19.1.3',
    xupsAlarmEventDescr => '1.3.6.1.4.1.534.1.7.19.1.4',
    xupsBreakerOpen => '1.3.6.1.4.1.534.1.7.20',
    xupsAlarmEntryAdded => '1.3.6.1.4.1.534.1.7.21',
    xupsAlarmEntryRemoved => '1.3.6.1.4.1.534.1.7.22',
    xupsAlarmBatteryBad => '1.3.6.1.4.1.534.1.7.23',
    xupsOutputOffAsRequested => '1.3.6.1.4.1.534.1.7.24',
    xupsDiagnosticTestFailed => '1.3.6.1.4.1.534.1.7.25',
    xupsCommunicationsLost => '1.3.6.1.4.1.534.1.7.26',
    xupsUpsShutdownPending => '1.3.6.1.4.1.534.1.7.27',
    xupsAlarmTestInProgress => '1.3.6.1.4.1.534.1.7.28',
    xupsAmbientTempBad => '1.3.6.1.4.1.534.1.7.29',
    xupsLossOfRedundancy => '1.3.6.1.4.1.534.1.7.30',
    xupsAlarmTempBad => '1.3.6.1.4.1.534.1.7.31',
    xupsAlarmChargerFailed => '1.3.6.1.4.1.534.1.7.32',
    xupsAlarmFanFailure => '1.3.6.1.4.1.534.1.7.33',
    xupsAlarmFuseFailure => '1.3.6.1.4.1.534.1.7.34',
    xupsPowerSwitchBad => '1.3.6.1.4.1.534.1.7.35',
    xupsModuleFailure => '1.3.6.1.4.1.534.1.7.36',
    xupsOnAlternatePowerSource => '1.3.6.1.4.1.534.1.7.37',
    xupsAltPowerNotAvailable => '1.3.6.1.4.1.534.1.7.38',
    xupsNoticeCondition => '1.3.6.1.4.1.534.1.7.39',
    xupsRemoteTempBad => '1.3.6.1.4.1.534.1.7.40',
    xupsRemoteHumidityBad => '1.3.6.1.4.1.534.1.7.41',
    xupsTest => '1.3.6.1.4.1.534.1.8',
    xupsTestBattery => '1.3.6.1.4.1.534.1.8.1.0',
    xupsTestBatteryStatus => '1.3.6.1.4.1.534.1.8.2.0',
    xupsTestBatteryStatusDefinition => {
      1 => 'unknown',
      2 => 'passed',
      3 => 'failed',
      4 => 'inProgress',
      5 => 'notSupported',
      6 => 'inhibited',
      7 => 'scheduled',
    },
    xupsControl => '1.3.6.1.4.1.534.1.9',
    xupsControlOutputOffDelay => '1.3.6.1.4.1.534.1.9.1.0',
    xupsControlOutputOnDelay => '1.3.6.1.4.1.534.1.9.2.0',
    xupsControlOutputOffTrapDelay => '1.3.6.1.4.1.534.1.9.3.0',
    xupsControlOutputOnTrapDelay => '1.3.6.1.4.1.534.1.9.4.0',
    xupsConfig => '1.3.6.1.4.1.534.1.10',
    xupsConfigOutputVoltage => '1.3.6.1.4.1.534.1.10.1.0',
    xupsConfigInputVoltage => '1.3.6.1.4.1.534.1.10.2.0',
    xupsConfigOutputWatts => '1.3.6.1.4.1.534.1.10.3.0',
    xupsConfigOutputFreq => '1.3.6.1.4.1.534.1.10.4.0',
    xupsConfigDateAndTime => '1.3.6.1.4.1.534.1.10.5.0',
    xupsTrapControl => '1.3.6.1.4.1.534.1.11',
    xupsMaxTrapLevel => '1.3.6.1.4.1.534.1.11.1.0',
    xupsSendTrapType => '1.3.6.1.4.1.534.1.11.2.0',
    xupsTrapMessage => '1.3.6.1.4.1.534.1.11.3.0',
    xupsNull => '1.3.6.1.4.1.534.1.0',
    xupsTrapBasic => '1.3.6.1.4.1.534.1.0.0',
    xupsTrapSource => '1.3.6.1.4.1.534.1.11.4',
    xupsTrapDefined => '1.3.6.1.4.1.534.1.11.4.1',
    xupsTrapPortN => '1.3.6.1.4.1.534.1.11.4.2',
  },
  'MG-SNMP-UPS-MIB' => {
    merlinGerin => '1.3.6.1.4.1.705',
    upsmg => '1.3.6.1.4.1.705.1',
    upsmgIdent => '1.3.6.1.4.1.705.1.1',
    upsmgIdentFamilyName => '1.3.6.1.4.1.705.1.1.1',
    upsmgIdentModelName => '1.3.6.1.4.1.705.1.1.2',
    upsmgIdentRevisionLevel => '1.3.6.1.4.1.705.1.1.3',
    upsmgIdentFirmwareVersion => '1.3.6.1.4.1.705.1.1.4',
    upsmgIdentUserID => '1.3.6.1.4.1.705.1.1.5',
    upsmgIdentInstallationDate => '1.3.6.1.4.1.705.1.1.6',
    upsmgIdentSerialNumber => '1.3.6.1.4.1.705.1.1.7',
    upsmgManagement => '1.3.6.1.4.1.705.1.2',
    upsmgManagersNum => '1.3.6.1.4.1.705.1.2.1',
    upsmgManagersTable => '1.3.6.1.4.1.705.1.2.2',
    upsmgManagersEntry => '1.3.6.1.4.1.705.1.2.2.1',
    mgmanagerIndex => '1.3.6.1.4.1.705.1.2.2.1.1',
    mgmanagerDeviceNumber => '1.3.6.1.4.1.705.1.2.2.1.2',
    mgmanagerNMSType => '1.3.6.1.4.1.705.1.2.2.1.3',
    mgmanagerNMSTypeDefinition => {
      8 => 'ibmnetview',
      2 => 'decnetview',
      6 => 'sunnetmanager',
      4 => 'dview',
      7 => 'novellnms',
      9 => 'other',
      1 => 'umclient',
      5 => 'hpopenview',
      10 => 'autolearning',
      3 => 'umview',
    },
    mgmanagerCommType => '1.3.6.1.4.1.705.1.2.2.1.4',
    mgmanagerCommTypeDefinition => {
      5 => 'snmpv2',
      1 => 'other',
      4 => 'snmpv1',
      3 => 'cmip',
      2 => 'invalid',
    },
    mgmanagerDescr => '1.3.6.1.4.1.705.1.2.2.1.5',
    mgmanagerAddress => '1.3.6.1.4.1.705.1.2.2.1.6',
    mgmanagerCommunity => '1.3.6.1.4.1.705.1.2.2.1.7',
    mgmanagerSeverityLevel => '1.3.6.1.4.1.705.1.2.2.1.8',
    mgmanagerTrapAck => '1.3.6.1.4.1.705.1.2.2.1.9',
    mgmanagerTrapAckDefinition => {
      4 => 'mgacks',
      2 => 'mgnoack',
      3 => 'stdnomg',
      5 => 'cpqnoack',
      1 => 'mgack',
    },
    upsmgReceptacle => '1.3.6.1.4.1.705.1.3',
    upsmgReceptaclesNum => '1.3.6.1.4.1.705.1.3.1',
    upsmgReceptaclesTable => '1.3.6.1.4.1.705.1.3.2',
    upsmgReceptaclesEntry => '1.3.6.1.4.1.705.1.3.2.1',
    mgreceptacleIndex => '1.3.6.1.4.1.705.1.3.2.1.1',
    mgreceptacleLevel => '1.3.6.1.4.1.705.1.3.2.1.2',
    mgreceptacleType => '1.3.6.1.4.1.705.1.3.2.1.3',
    mgreceptacleIdent => '1.3.6.1.4.1.705.1.3.2.1.4',
    mgreceptacleState => '1.3.6.1.4.1.705.1.3.2.1.5',
    mgreceptacleStateDefinition => {
      3 => 'normalON',
      8 => 'scheduleOFF',
      1 => 'manualON',
      2 => 'manualOFF',
      6 => 'controlOFF',
      4 => 'normalOFF',
      5 => 'controlON',
      7 => 'scheduleON',
    },
    mgreceptacleReceptacle => '1.3.6.1.4.1.705.1.3.2.1.6',
    mgreceptaclePowerCons => '1.3.6.1.4.1.705.1.3.2.1.7',
    mgreceptacleOverload => '1.3.6.1.4.1.705.1.3.2.1.8',
    mgreceptacleAutonomy => '1.3.6.1.4.1.705.1.3.2.1.9',
    upsmgConfig => '1.3.6.1.4.1.705.1.4',
    upsmgConfigBatteryInstalled => '1.3.6.1.4.1.705.1.4.1',
    upsmgConfigBatteryInstalledDefinition => {
      1 => 'yes',
      2 => 'no',
    },
    upsmgConfigNominalBatteryVoltage => '1.3.6.1.4.1.705.1.4.2',
    upsmgConfigNominalBatteryTime => '1.3.6.1.4.1.705.1.4.3',
    upsmgConfigNominalRechargeTime => '1.3.6.1.4.1.705.1.4.4',
    upsmgConfigMinRechargeLevel => '1.3.6.1.4.1.705.1.4.5',
    upsmgConfigMaxRechargeTime => '1.3.6.1.4.1.705.1.4.6',
    upsmgConfigLowBatteryTime => '1.3.6.1.4.1.705.1.4.7',
    upsmgConfigLowBatteryLevel => '1.3.6.1.4.1.705.1.4.8',
    upsmgConfigAutoRestart => '1.3.6.1.4.1.705.1.4.9',
    upsmgConfigAutoRestartDefinition => {
      3 => 'onmain',
      2 => 'never',
      1 => 'always',
    },
    upsmgConfigShutdownTimer => '1.3.6.1.4.1.705.1.4.10',
    upsmgConfigSysShutDuration => '1.3.6.1.4.1.705.1.4.11',
    upsmgConfigVARating => '1.3.6.1.4.1.705.1.4.12',
    upsmgConfigLowTransfer => '1.3.6.1.4.1.705.1.4.13',
    upsmgConfigHighTransfer => '1.3.6.1.4.1.705.1.4.14',
    upsmgConfigOutputNominalVoltage => '1.3.6.1.4.1.705.1.4.15',
    upsmgConfigOutputNominalCurrent => '1.3.6.1.4.1.705.1.4.16',
    upsmgConfigOutputNomFrequency => '1.3.6.1.4.1.705.1.4.17',
    upsmgConfigByPassType => '1.3.6.1.4.1.705.1.4.18',
    upsmgConfigByPassTypeDefinition => {
      2 => 'relay',
      1 => 'none',
      3 => 'static',
    },
    upsmgConfigAlarmAudible => '1.3.6.1.4.1.705.1.4.19',
    upsmgConfigAlarmAudibleDefinition => {
      1 => 'yes',
      2 => 'no',
    },
    upsmgConfigAlarmTimeDelay => '1.3.6.1.4.1.705.1.4.20',
    upsmgConfigDevicesNum => '1.3.6.1.4.1.705.1.4.21',
    upsmgConfigDevicesTable => '1.3.6.1.4.1.705.1.4.22',
    upsmgConfigDevicesEntry => '1.3.6.1.4.1.705.1.4.22.1',
    mgdeviceIndex => '1.3.6.1.4.1.705.1.4.22.1.1',
    mgdeviceReceptacleNum => '1.3.6.1.4.1.705.1.4.22.1.2',
    mgdeviceIdent => '1.3.6.1.4.1.705.1.4.22.1.3',
    mgdeviceVaRating => '1.3.6.1.4.1.705.1.4.22.1.4',
    mgdeviceSequenceOff => '1.3.6.1.4.1.705.1.4.22.1.5',
    mgdeviceSequenceOn => '1.3.6.1.4.1.705.1.4.22.1.6',
    mgdeviceShutdownDuration => '1.3.6.1.4.1.705.1.4.22.1.7',
    mgdeviceBootUpDuration => '1.3.6.1.4.1.705.1.4.22.1.8',
    upsmgConfigReceptaclesTable => '1.3.6.1.4.1.705.1.4.23',
    upsmgConfigReceptaclesEntry => '1.3.6.1.4.1.705.1.4.23.1',
    mgreceptacleIndexb => '1.3.6.1.4.1.705.1.4.23.1.1',
    mgreceptacleStateTurnOn => '1.3.6.1.4.1.705.1.4.23.1.2',
    mgreceptacleStateTurnOnDefinition => {
      1 => 'on',
      3 => 'last',
      2 => 'off',
      4 => 'schedule',
    },
    mgreceptacleStateMainReturn => '1.3.6.1.4.1.705.1.4.23.1.3',
    mgreceptacleStateMainReturnDefinition => {
      1 => 'on',
      3 => 'last',
      2 => 'off',
      4 => 'schedule',
    },
    mgreceptacleStateDischarge => '1.3.6.1.4.1.705.1.4.23.1.4',
    mgreceptacleStateDischargeDefinition => {
      1 => 'on',
      3 => 'last',
      2 => 'off',
      4 => 'schedule',
    },
    mgreceptacleShutoffLevel => '1.3.6.1.4.1.705.1.4.23.1.5',
    mgreceptacleShutoffTimer => '1.3.6.1.4.1.705.1.4.23.1.6',
    mgreceptacleRestartLevel => '1.3.6.1.4.1.705.1.4.23.1.7',
    mgreceptacleRestartDelay => '1.3.6.1.4.1.705.1.4.23.1.8',
    mgreceptacleShutdownDuration => '1.3.6.1.4.1.705.1.4.23.1.9',
    mgreceptacleBootUpDuration => '1.3.6.1.4.1.705.1.4.23.1.10',
    upsmgConfigExtAlarmNum => '1.3.6.1.4.1.705.1.4.24',
    upsmgConfigExtAlarmTable => '1.3.6.1.4.1.705.1.4.25',
    upsmgConfigExtAlarmEntry => '1.3.6.1.4.1.705.1.4.25.1',
    mgextAlarmIndex => '1.3.6.1.4.1.705.1.4.25.1.1',
    mgextAlarmUID => '1.3.6.1.4.1.705.1.4.25.1.2',
    upsmgConfigEmergencyTestFail => '1.3.6.1.4.1.705.1.4.26',
    upsmgConfigEmergencyTestFailDefinition => {
      1 => 'yes',
      2 => 'no',
    },
    upsmgConfigEmergencyOnByPass => '1.3.6.1.4.1.705.1.4.27',
    upsmgConfigEmergencyOnByPassDefinition => {
      1 => 'yes',
      2 => 'no',
    },
    upsmgConfigEmergencyOverload => '1.3.6.1.4.1.705.1.4.28',
    upsmgConfigEmergencyOverloadDefinition => {
      1 => 'yes',
      2 => 'no',
    },
    upsmgConfigControlDayTable => '1.3.6.1.4.1.705.1.4.29',
    upsmgConfigControlDayEntry => '1.3.6.1.4.1.705.1.4.29.1',
    mgcontrolDayIndex => '1.3.6.1.4.1.705.1.4.29.1.1',
    mgcontrolDayOn => '1.3.6.1.4.1.705.1.4.29.1.2',
    mgcontrolDayOff => '1.3.6.1.4.1.705.1.4.29.1.3',
    upsmgConfigLowBooster => '1.3.6.1.4.1.705.1.4.30',
    upsmgConfigHighBooster => '1.3.6.1.4.1.705.1.4.31',
    upsmgConfigLowFader => '1.3.6.1.4.1.705.1.4.32',
    upsmgConfigHighFader => '1.3.6.1.4.1.705.1.4.33',
    upsmgConfigEnvironmentTable => '1.3.6.1.4.1.705.1.4.34',
    upsmgConfigEnvironmentEntry => '1.3.6.1.4.1.705.1.4.34.1',
    upsmgConfigSensorIndex => '1.3.6.1.4.1.705.1.4.34.1.1',
    upsmgConfigSensorName => '1.3.6.1.4.1.705.1.4.34.1.2',
    upsmgConfigTemperatureLow => '1.3.6.1.4.1.705.1.4.34.1.3',
    upsmgConfigTemperatureHigh => '1.3.6.1.4.1.705.1.4.34.1.4',
    upsmgConfigTemperatureHysteresis => '1.3.6.1.4.1.705.1.4.34.1.5',
    upsmgConfigHumidityLow => '1.3.6.1.4.1.705.1.4.34.1.6',
    upsmgConfigHumidityHigh => '1.3.6.1.4.1.705.1.4.34.1.7',
    upsmgConfigHumidityHysteresis => '1.3.6.1.4.1.705.1.4.34.1.8',
    upsmgConfigInput1Name => '1.3.6.1.4.1.705.1.4.34.1.9',
    upsmgConfigInput1ClosedLabel => '1.3.6.1.4.1.705.1.4.34.1.10',
    upsmgConfigInput1OpenLabel => '1.3.6.1.4.1.705.1.4.34.1.11',
    upsmgConfigInput2Name => '1.3.6.1.4.1.705.1.4.34.1.12',
    upsmgConfigInput2ClosedLabel => '1.3.6.1.4.1.705.1.4.34.1.13',
    upsmgConfigInput2OpenLabel => '1.3.6.1.4.1.705.1.4.34.1.14',
    upsmgBattery => '1.3.6.1.4.1.705.1.5',
    upsmgBatteryRemainingTime => '1.3.6.1.4.1.705.1.5.1',
    upsmgBatteryLevel => '1.3.6.1.4.1.705.1.5.2',
    upsmgBatteryRechargeTime => '1.3.6.1.4.1.705.1.5.3',
    upsmgBatteryRechargeLevel => '1.3.6.1.4.1.705.1.5.4',
    upsmgBatteryVoltage => '1.3.6.1.4.1.705.1.5.5',
    upsmgBatteryCurrent => '1.3.6.1.4.1.705.1.5.6',
    upsmgBatteryTemperature => '1.3.6.1.4.1.705.1.5.7',
    upsmgBatteryFullRechargeTime => '1.3.6.1.4.1.705.1.5.8',
    upsmgBatteryFaultBattery => '1.3.6.1.4.1.705.1.5.9',
    upsmgBatteryFaultBatteryDefinition => {
      1 => 'yes',
      2 => 'no',
    },
    upsmgBatteryNoBattery => '1.3.6.1.4.1.705.1.5.10',
    upsmgBatteryNoBatteryDefinition => {
      1 => 'yes',
      2 => 'no',
    },
    upsmgBatteryReplacement => '1.3.6.1.4.1.705.1.5.11',
    upsmgBatteryReplacementDefinition => {
      1 => 'yes',
      2 => 'no',
    },
    upsmgBatteryUnavailableBattery => '1.3.6.1.4.1.705.1.5.12',
    upsmgBatteryUnavailableBatteryDefinition => {
      1 => 'yes',
      2 => 'no',
    },
    upsmgBatteryNotHighCharge => '1.3.6.1.4.1.705.1.5.13',
    upsmgBatteryNotHighChargeDefinition => {
      1 => 'yes',
      2 => 'no',
    },
    upsmgBatteryLowBattery => '1.3.6.1.4.1.705.1.5.14',
    upsmgBatteryLowBatteryDefinition => {
      1 => 'yes',
      2 => 'no',
    },
    upsmgBatteryChargerFault => '1.3.6.1.4.1.705.1.5.15',
    upsmgBatteryChargerFaultDefinition => {
      1 => 'yes',
      2 => 'no',
    },
    upsmgBatteryLowCondition => '1.3.6.1.4.1.705.1.5.16',
    upsmgBatteryLowConditionDefinition => {
      1 => 'yes',
      2 => 'no',
    },
    upsmgBatteryLowRecharge => '1.3.6.1.4.1.705.1.5.17',
    upsmgBatteryLowRechargeDefinition => {
      1 => 'yes',
      2 => 'no',
    },
    upsmgInput => '1.3.6.1.4.1.705.1.6',
    upsmgInputPhaseNum => '1.3.6.1.4.1.705.1.6.1',
    upsmgInputPhaseTable => '1.3.6.1.4.1.705.1.6.2',
    upsmgInputPhaseEntry => '1.3.6.1.4.1.705.1.6.2.1',
    mginputIndex => '1.3.6.1.4.1.705.1.6.2.1.1',
    mginputVoltage => '1.3.6.1.4.1.705.1.6.2.1.2',
    mginputFrequency => '1.3.6.1.4.1.705.1.6.2.1.3',
    mginputMinimumVoltage => '1.3.6.1.4.1.705.1.6.2.1.4',
    mginputMaximumVoltage => '1.3.6.1.4.1.705.1.6.2.1.5',
    mginputCurrent => '1.3.6.1.4.1.705.1.6.2.1.6',
    upsmgInputBadStatus => '1.3.6.1.4.1.705.1.6.3',
    upsmgInputBadStatusDefinition => {
      1 => 'yes',
      2 => 'no',
    },
    upsmgInputLineFailCause => '1.3.6.1.4.1.705.1.6.4',
    upsmgInputLineFailCauseDefinition => {
      2 => 'outoftolvolt',
      4 => 'utilityoff',
      1 => 'no',
      3 => 'outoftolfreq',
    },
    upsmgOutput => '1.3.6.1.4.1.705.1.7',
    upsmgOutputPhaseNum => '1.3.6.1.4.1.705.1.7.1',
    upsmgOutputPhaseTable => '1.3.6.1.4.1.705.1.7.2',
    upsmgOutputPhaseEntry => '1.3.6.1.4.1.705.1.7.2.1',
    mgoutputPhaseIndex => '1.3.6.1.4.1.705.1.7.2.1.1',
    mgoutputVoltage => '1.3.6.1.4.1.705.1.7.2.1.2',
    mgoutputFrequency => '1.3.6.1.4.1.705.1.7.2.1.3',
    mgoutputLoadPerPhase => '1.3.6.1.4.1.705.1.7.2.1.4',
    mgoutputCurrent => '1.3.6.1.4.1.705.1.7.2.1.5',
    upsmgOutputOnBattery => '1.3.6.1.4.1.705.1.7.3',
    upsmgOutputOnBatteryDefinition => {
      1 => 'yes',
      2 => 'no',
    },
    upsmgOutputOnByPass => '1.3.6.1.4.1.705.1.7.4',
    upsmgOutputOnByPassDefinition => {
      1 => 'yes',
      2 => 'no',
    },
    upsmgOutputUnavailableByPass => '1.3.6.1.4.1.705.1.7.5',
    upsmgOutputUnavailableByPassDefinition => {
      1 => 'yes',
      2 => 'no',
    },
    upsmgOutputNoByPass => '1.3.6.1.4.1.705.1.7.6',
    upsmgOutputNoByPassDefinition => {
      1 => 'yes',
      2 => 'no',
    },
    upsmgOutputUtilityOff => '1.3.6.1.4.1.705.1.7.7',
    upsmgOutputUtilityOffDefinition => {
      1 => 'yes',
      2 => 'no',
    },
    upsmgOutputOnBoost => '1.3.6.1.4.1.705.1.7.8',
    upsmgOutputOnBoostDefinition => {
      1 => 'yes',
      2 => 'no',
    },
    upsmgOutputInverterOff => '1.3.6.1.4.1.705.1.7.9',
    upsmgOutputInverterOffDefinition => {
      1 => 'yes',
      2 => 'no',
    },
    upsmgOutputOverLoad => '1.3.6.1.4.1.705.1.7.10',
    upsmgOutputOverLoadDefinition => {
      1 => 'yes',
      2 => 'no',
    },
    upsmgOutputOverTemp => '1.3.6.1.4.1.705.1.7.11',
    upsmgOutputOverTempDefinition => {
      1 => 'yes',
      2 => 'no',
    },
    upsmgOutputOnBuck => '1.3.6.1.4.1.705.1.7.12',
    upsmgEnviron => '1.3.6.1.4.1.705.1.8',
    upsmgEnvironAmbientTemp => '1.3.6.1.4.1.705.1.8.1',
    upsmgEnvironAmbientHumidity => '1.3.6.1.4.1.705.1.8.2',
    upsmgEnvironExtAlarmTable => '1.3.6.1.4.1.705.1.8.3',
    upsmgEnvironExtAlarmEntry => '1.3.6.1.4.1.705.1.8.3.1',
    mgalarmNum => '1.3.6.1.4.1.705.1.8.3.1.1',
    mgalarmState => '1.3.6.1.4.1.705.1.8.3.1.2',
    mgalarmStateDefinition => {
      2 => 'inactive',
      1 => 'active',
    },
    upsmgEnvironSensorNum => '1.3.6.1.4.1.705.1.8.4',
    upsmgEnvironSensorTable => '1.3.6.1.4.1.705.1.8.5',
    upsmgEnvironSensorEntry => '1.3.6.1.4.1.705.1.8.5.1',
    mgsensorNum => '1.3.6.1.4.1.705.1.8.5.1.1',
    mgsensorTemp => '1.3.6.1.4.1.705.1.8.5.1.2',
    mgsensorHumidity => '1.3.6.1.4.1.705.1.8.5.1.3',
    upsmgEnvironmentNum => '1.3.6.1.4.1.705.1.8.6',
    upsmgEnvironmentSensorTable => '1.3.6.1.4.1.705.1.8.7',
    upsmgEnvironmentSensorEntry => '1.3.6.1.4.1.705.1.8.7.1',
    upsmgEnvironmentIndex => '1.3.6.1.4.1.705.1.8.7.1.1',
    upsmgEnvironmentComFailure => '1.3.6.1.4.1.705.1.8.7.1.2',
    upsmgEnvironmentComFailureDefinition => {
      1 => 'yes',
      2 => 'no',
    },
    upsmgEnvironmentTemperature => '1.3.6.1.4.1.705.1.8.7.1.3',
    upsmgEnvironmentTemperatureLow => '1.3.6.1.4.1.705.1.8.7.1.4',
    upsmgEnvironmentTemperatureLowDefinition => {
      1 => 'yes',
      2 => 'no',
    },
    upsmgEnvironmentTemperatureHigh => '1.3.6.1.4.1.705.1.8.7.1.5',
    upsmgEnvironmentTemperatureHighDefinition => {
      1 => 'yes',
      2 => 'no',
    },
    upsmgEnvironmentHumidity => '1.3.6.1.4.1.705.1.8.7.1.6',
    upsmgEnvironmentHumidityLow => '1.3.6.1.4.1.705.1.8.7.1.7',
    upsmgEnvironmentHumidityLowDefinition => {
      1 => 'yes',
      2 => 'no',
    },
    upsmgEnvironmentHumidityHigh => '1.3.6.1.4.1.705.1.8.7.1.8',
    upsmgEnvironmentHumidityHighDefinition => {
      1 => 'yes',
      2 => 'no',
    },
    upsmgEnvironmentInput1State => '1.3.6.1.4.1.705.1.8.7.1.9',
    upsmgEnvironmentInput1StateDefinition => {
      2 => 'open',
      1 => 'closed',
    },
    upsmgEnvironmentInput2State => '1.3.6.1.4.1.705.1.8.7.1.10',
    upsmgEnvironmentInput2StateDefinition => {
      2 => 'open',
      1 => 'closed',
    },
    upsmgControl => '1.3.6.1.4.1.705.1.9',
    upsmgControlReceptaclesTable => '1.3.6.1.4.1.705.1.9.1',
    upsmgControlReceptaclesEntry => '1.3.6.1.4.1.705.1.9.1.1',
    mgreceptacleIndexc => '1.3.6.1.4.1.705.1.9.1.1.1',
    mgreceptacleOnDelay => '1.3.6.1.4.1.705.1.9.1.1.2',
    mgreceptacleOnCtrl => '1.3.6.1.4.1.705.1.9.1.1.3',
    mgreceptacleOnCtrlDefinition => {
      3 => 'stop',
      1 => 'nothing',
      2 => 'start',
    },
    mgreceptacleOnStatus => '1.3.6.1.4.1.705.1.9.1.1.4',
    mgreceptacleOnStatusDefinition => {
      3 => 'inprogressinups',
      1 => 'none',
      2 => 'started',
      4 => 'completed',
    },
    mgreceptacleOffDelay => '1.3.6.1.4.1.705.1.9.1.1.5',
    mgreceptacleOffCtrl => '1.3.6.1.4.1.705.1.9.1.1.6',
    mgreceptacleOffCtrlDefinition => {
      3 => 'stop',
      1 => 'nothing',
      2 => 'start',
    },
    mgreceptacleOffStatus => '1.3.6.1.4.1.705.1.9.1.1.7',
    mgreceptacleOffStatusDefinition => {
      3 => 'inprogressinups',
      1 => 'none',
      2 => 'started',
      4 => 'completed',
    },
    mgreceptacleToggleDelay => '1.3.6.1.4.1.705.1.9.1.1.8',
    mgreceptacleToggleCtrl => '1.3.6.1.4.1.705.1.9.1.1.9',
    mgreceptacleToggleCtrlDefinition => {
      3 => 'stop',
      1 => 'nothing',
      2 => 'start',
    },
    mgreceptacleToggleStatus => '1.3.6.1.4.1.705.1.9.1.1.10',
    mgreceptacleToggleStatusDefinition => {
      3 => 'inprogressinups',
      1 => 'none',
      2 => 'started',
      4 => 'completed',
    },
    mgreceptacleToggleDuration => '1.3.6.1.4.1.705.1.9.1.1.11',
    upsmgControlDayOff => '1.3.6.1.4.1.705.1.9.2',
    upsmgControlDayOffDefinition => {
      1 => 'sunday',
      8 => 'none',
      6 => 'friday',
      3 => 'tuesday',
      2 => 'monday',
      4 => 'wednesday',
      5 => 'thursday',
      7 => 'saterday',
    },
    upsmgControlDayOn => '1.3.6.1.4.1.705.1.9.3',
    upsmgControlDayOnDefinition => {
      1 => 'sunday',
      8 => 'none',
      6 => 'friday',
      3 => 'tuesday',
      2 => 'monday',
      4 => 'wednesday',
      5 => 'thursday',
      7 => 'saterday',
    },
    upsmgTest => '1.3.6.1.4.1.705.1.10',
    upsmgTestBatterySchedule => '1.3.6.1.4.1.705.1.10.1',
    upsmgTestBatteryScheduleDefinition => {
      4 => 'atturnon',
      2 => 'weekly',
      5 => 'none',
      1 => 'unknown',
      3 => 'monthly',
      6 => 'dayly',
    },
    upsmgTestDiagnostics => '1.3.6.1.4.1.705.1.10.2',
    upsmgTestDiagnosticsDefinition => {
      1 => 'default',
      2 => 'start',
    },
    upsmgTestDiagResult => '1.3.6.1.4.1.705.1.10.3',
    upsmgTestDiagResultDefinition => {
      1 => 'success',
      3 => 'none',
      2 => 'failed',
    },
    upsmgTestBatteryCalibration => '1.3.6.1.4.1.705.1.10.4',
    upsmgTestBatteryCalibrationDefinition => {
      1 => 'default',
      2 => 'start',
    },
    upsmgTestLastCalibration => '1.3.6.1.4.1.705.1.10.5',
    upsmgTestIndicators => '1.3.6.1.4.1.705.1.10.6',
    upsmgTestCommandLine => '1.3.6.1.4.1.705.1.10.7',
    upsmgTestCommandReady => '1.3.6.1.4.1.705.1.10.8',
    upsmgTestCommandReadyDefinition => {
      1 => 'yes',
      2 => 'no',
    },
    upsmgTestResponseLine => '1.3.6.1.4.1.705.1.10.9',
    upsmgTestResponseReady => '1.3.6.1.4.1.705.1.10.10',
    upsmgTestResponseReadyDefinition => {
      1 => 'yes',
      2 => 'no',
    },
    upsmgTestBatteryResult => '1.3.6.1.4.1.705.1.10.11',
    upsmgTestBatteryResultDefinition => {
      5 => 'none',
      4 => 'sfailed',
      2 => 'mfailed',
      1 => 'msuccess',
      3 => 'ssuccess',
    },
    upsmgTraps => '1.3.6.1.4.1.705.1.11',
    upsmgAgent => '1.3.6.1.4.1.705.1.12',
    upsmgAgentIpaddress => '1.3.6.1.4.1.705.1.12.1',
    upsmgAgentSubnetMask => '1.3.6.1.4.1.705.1.12.2',
    upsmgAgentDefGateway => '1.3.6.1.4.1.705.1.12.3',
    upsmgAgentBaudRate => '1.3.6.1.4.1.705.1.12.4',
    upsmgAgentPollRate => '1.3.6.1.4.1.705.1.12.5',
    upsmgAgentType => '1.3.6.1.4.1.705.1.12.6',
    upsmgAgentTypeDefinition => {
      3 => 'proxyEth',
      2 => 'deviceTR',
      5 => 'other',
      4 => 'proxyTR',
      1 => 'deviceEth',
    },
    upsmgAgentTrapAlarmDelay => '1.3.6.1.4.1.705.1.12.7',
    upsmgAgentTrapAlarmRetry => '1.3.6.1.4.1.705.1.12.8',
    upsmgAgentReset => '1.3.6.1.4.1.705.1.12.9',
    upsmgAgentResetDefinition => {
      1 => 'reset',
      2 => 'nothing',
    },
    upsmgAgentFactReset => '1.3.6.1.4.1.705.1.12.10',
    upsmgAgentFactResetDefinition => {
      1 => 'reset',
      2 => 'nothing',
    },
    upsmgAgentMibVersion => '1.3.6.1.4.1.705.1.12.11',
    upsmgAgentFirmwareVersion => '1.3.6.1.4.1.705.1.12.12',
    upsmgAgentCommUPS => '1.3.6.1.4.1.705.1.12.13',
    upsmgAgentTrapAck => '1.3.6.1.4.1.705.1.12.14',
    upsmgAgentAutoLearning => '1.3.6.1.4.1.705.1.12.15',
    upsmgAgentAutoLearningDefinition => {
      1 => 'yes',
      2 => 'no',
    },
    upsmgAgentBootP => '1.3.6.1.4.1.705.1.12.16',
    upsmgAgentBootPDefinition => {
      1 => 'yes',
      2 => 'no',
    },
    upsmgAgentTFTP => '1.3.6.1.4.1.705.1.12.17',
    upsmgAgentTFTPDefinition => {
      1 => 'yes',
      2 => 'no',
    },
    upsmgAgentTrapSignature => '1.3.6.1.4.1.705.1.12.18',
    upsmgRemote => '1.3.6.1.4.1.705.1.13',
    upsmgRemoteOnBattery => '1.3.6.1.4.1.705.1.13.1',
    upsmgRemoteIpAddress => '1.3.6.1.4.1.705.1.13.2',
  },
  'PDU-MIB' => {
    pdu => '1.3.6.1.4.1.13742.2',
    board => '1.3.6.1.4.1.13742.2.1',
    traps => '1.3.6.1.4.1.13742.2.2',
    info => '1.3.6.1.4.1.13742.2.1.1',
    outlets => '1.3.6.1.4.1.13742.2.1.2',
    sensors => '1.3.6.1.4.1.13742.2.1.3',
    info => '1.3.6.1.4.1.13742.2.1.1',
    firmwareVersion => '1.3.6.1.4.1.13742.2.1.1.1.0',
    serialNumber => '1.3.6.1.4.1.13742.2.1.1.2.0',
    ipAddress => '1.3.6.1.4.1.13742.2.1.1.3.0',
    netmask => '1.3.6.1.4.1.13742.2.1.1.4.0',
    gateway => '1.3.6.1.4.1.13742.2.1.1.5.0',
    mac => '1.3.6.1.4.1.13742.2.1.1.6.0',
    hardwareRev => '1.3.6.1.4.1.13742.2.1.1.7.0',
    userName => '1.3.6.1.4.1.13742.2.1.1.10.0',
    objectName => '1.3.6.1.4.1.13742.2.1.1.12.0',
    objectInstance => '1.3.6.1.4.1.13742.2.1.1.13.0',
    targetUser => '1.3.6.1.4.1.13742.2.1.1.14.0',
    groupName => '1.3.6.1.4.1.13742.2.1.1.15.0',
    imageVersion => '1.3.6.1.4.1.13742.2.1.1.18.0',
    status => '1.3.6.1.4.1.13742.2.1.1.19.0',
    outletName => '1.3.6.1.4.1.13742.2.1.1.20.0',
    outletState => '1.3.6.1.4.1.13742.2.1.1.22.0',
    sensorNumber => '1.3.6.1.4.1.13742.2.1.1.23.0',
    sensorEvent => '1.3.6.1.4.1.13742.2.1.1.24.0',
    outlets => '1.3.6.1.4.1.13742.2.1.2',
    outletCount => '1.3.6.1.4.1.13742.2.1.2.1.0',
    outletTable => '1.3.6.1.4.1.13742.2.1.2.2',
    outletEntry => '1.3.6.1.4.1.13742.2.1.2.2.1',
    outletIndex => '1.3.6.1.4.1.13742.2.1.2.2.1.1',
    outletLabel => '1.3.6.1.4.1.13742.2.1.2.2.1.2',
    outletOperationalState => '1.3.6.1.4.1.13742.2.1.2.2.1.3',
    outletOperationalStateDefinition => {
      -1 => 'error',
      0 => 'off',
      1 => 'on',
      2 => 'cycling',
    },
    outletSensorNumberRMSCurrent => '1.3.6.1.4.1.13742.2.1.2.2.1.4',
    outletSensorNumberRMSPhase => '1.3.6.1.4.1.13742.2.1.2.2.1.5',
    outletSensorNumberMaxRMSCurrent => '1.3.6.1.4.1.13742.2.1.2.2.1.6',
    outletSensorNumberTrueRMSPower => '1.3.6.1.4.1.13742.2.1.2.2.1.7',
    outletSensorNumberApparentRMSPower => '1.3.6.1.4.1.13742.2.1.2.2.1.8',
    outletSensorNumberMaxTrueRMSPower => '1.3.6.1.4.1.13742.2.1.2.2.1.9',
    outletSensorNumberAverageRealRMSPower => '1.3.6.1.4.1.13742.2.1.2.2.1.10',
    outletSensorNumberRMSVoltage => '1.3.6.1.4.1.13742.2.1.2.2.1.11',
    outletSensorNumberFrequency => '1.3.6.1.4.1.13742.2.1.2.2.1.12',
    sensors => '1.3.6.1.4.1.13742.2.1.3',
    sensorCount => '1.3.6.1.4.1.13742.2.1.3.1.0',
    sensorTable => '1.3.6.1.4.1.13742.2.1.3.2',
    sensorEntry => '1.3.6.1.4.1.13742.2.1.3.2.1',
    sensorIndex => '1.3.6.1.4.1.13742.2.1.3.2.1.1',
    sensorLabel => '1.3.6.1.4.1.13742.2.1.3.2.1.2',
    sensorType => '1.3.6.1.4.1.13742.2.1.3.2.1.3',
    sensorValue => '1.3.6.1.4.1.13742.2.1.3.2.1.4',
    sensorUnit => '1.3.6.1.4.1.13742.2.1.3.2.1.5',
    sensorState => '1.3.6.1.4.1.13742.2.1.3.2.1.6',
    sensorStateDefinition => {
      0 => 'ok',
      1 => 'below-lower-non-critical',
      2 => 'above-upper-non-critical',
      3 => 'below-lower-critical',
      4 => 'above-upper-critical',
      5 => 'below-lower-non-recoverable',
      6 => 'above-upper-non-recoverable',
    },
    sensorAssociatedOutlet => '1.3.6.1.4.1.13742.2.1.3.2.1.7',
    sensorLowerNonCriticalThreshold => '1.3.6.1.4.1.13742.2.1.3.2.1.8',
    sensorUpperNonCriticalThreshold => '1.3.6.1.4.1.13742.2.1.3.2.1.9',
    sensorLowerCriticalThreshold => '1.3.6.1.4.1.13742.2.1.3.2.1.10',
    sensorUpperCriticalThreshold => '1.3.6.1.4.1.13742.2.1.3.2.1.11',
    sensorLowerNonRecoverableThreshold => '1.3.6.1.4.1.13742.2.1.3.2.1.12',
    sensorUpperNonRecoverableThreshold => '1.3.6.1.4.1.13742.2.1.3.2.1.13',
  },
};

$GLPlugin::SNMP::definitions = {
  'DELTAUPS-MIB' => {
    dupsAlarm => {
      0 => 'off',
      1 => 'on',
    },
    dupsRelay => {
      0 => 'normalOpen',
      1 => 'normalClose',
    },
  },
};

package Classes::Device;
our @ISA = qw(GLPlugin::SNMP);
use strict;

sub classify {
  my $self = shift;
  if (! ($self->opts->hostname || $self->opts->snmpwalk)) {
    $self->add_unknown('either specify a hostname or a snmpwalk file');
  } else {
    $self->check_snmp_and_model();
    if (! $self->check_messages()) {
      if ($self->opts->verbose && $self->opts->verbose) {
        printf "I am a %s\n", $self->{productname};
      }
      if ($self->opts->mode =~ /^my-/) {
        $self->load_my_extension();
      } elsif ($self->get_snmp_object('PowerNet-MIB', 'upsBasicIdentModel') ||
          $self->get_snmp_object('PowerNet-MIB', 'upsBasicIdentName')) {
        # upsBasicIdentModel kann auch "" sein, upsBasicIdentName
        # theoretisch auch (da r/w), aber hoffentlich nicht beide zusammen
        bless $self, 'Classes::APC::Powermib';
        $self->debug('using Classes::APC::Powermib');
      } elsif ($self->{productname} =~ /APC /) {
        bless $self, 'Classes::APC';
        $self->debug('using Classes::APC');
      } elsif ($self->implements_mib('MG-SNMP-UPS-MIB')) {
        # like XPPC, that's why UPS is now last
        bless $self, 'Classes::MerlinGerin';
        $self->debug('using Classes::MerlinGerin');
      } elsif ($self->implements_mib('UPSV4-MIB')) {
        bless $self, 'Classes::V4';
        $self->debug('using Classes::V4');
      } elsif ($self->implements_mib('XPPC-MIB')) {
        # before UPS-MIB because i found a Intelligent MSII6000 which implemented
        # both XPPC and UPS, but the latter only partial
        bless $self, 'Classes::XPPC';
        $self->debug('using Classes::XPPC');
      } elsif ($self->implements_mib('XUPS-MIB')) {
        bless $self, 'Classes::XUPS';
        $self->debug('using Classes::XUPS');
      } elsif ($self->implements_mib('UPS-MIB')) {
        bless $self, 'Classes::UPS';
        $self->debug('using Classes::UPS');
      } else {
        if (my $class = $self->discover_suitable_class()) {
          bless $self, $class;
          $self->debug('using '.$class);
        } else {
          bless $self, 'Classes::Generic';
          $self->debug('using Classes::Generic');
        }
      }
    }
  }
  return $self;
}


package Classes::Generic;
our @ISA = qw(Classes::Device);
use strict;

sub init {
  my $self = shift;
  if ($self->mode =~ /.*/) {
    bless $self, 'GLPlugin::SNMP';
    $self->no_such_mode();
  }
}

package main;
#! /usr/bin/perl

use strict;
use File::Basename;

my $plugin = Classes::Device->new(
    shortname => '',
    usage => 'Usage: %s [ -v|--verbose ] [ -t <timeout> ] '.
        '--mode <what-to-do> '.
        '--hostname <network-component> --community <snmp-community>'.
        '  ...]',
    version => '$Revision: 2.5.2.4 $',
    blurb => 'This plugin checks various parameters of network components ',
    url => 'http://labs.consol.de/nagios/check_ups_health',
    timeout => 60,
    plugin => basename($0),
);

$plugin->add_mode(
    internal => 'device::uptime',
    spec => 'uptime',
    alias => undef,
    help => 'Check the uptime of the device',
);
$plugin->add_mode(
    internal => 'device::hardware::health',
    spec => 'hardware-health',
    alias => undef,
    help => 'Check the status of environmental equipment (fans, temperatures, power, selftests)',
);
$plugin->add_mode(
    internal => 'device::battery::health',
    spec => 'battery-health',
    alias => ['power-health'],
    help => 'Check the status of battery equipment (batteries, currencies)',
);
$plugin->add_mode(
    internal => 'device::supportedmibs',
    spec => 'supportedmibs',
    alias => undef,
    help => 'Shows the names of the mibs which this devices has implemented (only lausser may run this command)',
);
$plugin->add_arg(
    spec => 'blacklist|b=s',
    help => '--blacklist
   Blacklist some (missing/failed) components',
    required => 0,
    default => '',
);
$plugin->add_arg(
    spec => 'hostname|H=s',
    help => '--hostname
   Hostname or IP-address of the ups',
    required => 0,
);
$plugin->add_snmp_args();
$plugin->add_arg(
    spec => 'mode=s',
    help => "--mode
   A keyword which tells the plugin what to do",
    required => 1,
);
$plugin->add_arg(
    spec => 'name=s',
    help => "--name
   The name of an interface (ifDescr)",
    required => 0,
);
$plugin->add_arg(
    spec => 'drecksptkdb=s',
    help => "--drecksptkdb
   This parameter must be used instead of --name, because Devel::ptkdb is stealing the latter from the command line",
    aliasfor => "name",
    required => 0,
);
$plugin->add_arg(
    spec => 'regexp',
    help => "--regexp
   A flag indicating that --name is a regular expression",
    required => 0,
);
$plugin->add_arg(
    spec => 'units=s',
    help => "--units
   One of %, B, KB, MB, GB, Bit, KBi, MBi, GBi. (used for e.g. mode interface-usage)",
    required => 0,
);
$plugin->add_arg(
    spec => 'report=s',
    help => "--report
   Can be used to shorten the output",
    required => 0,
    default => 'long',
);
$plugin->add_arg(
    spec => 'lookback=s',
    help => "--lookback
   The amount of time you want to look back when calculating average rates.
   Use it for mode interface-errors or interface-usage. Without --lookback
   the time between two runs of check_nwc_health is the base for calculations.
   If you want your checkresult to be based for example on the past hour,
   use --lookback 3600. ",
    required => 0,
);
$plugin->add_arg(
    spec => 'critical=s',
    help => '--critical
   The critical threshold',
    required => 0,
);
$plugin->add_arg(
    spec => 'warning=s',
    help => '--warning
   The warning threshold',
    required => 0,
);
$plugin->add_arg(
    spec => 'warningx=s%',
    help => '--warningx
   The extended warning thresholds',
    required => 0,
);
$plugin->add_arg(
    spec => 'criticalx=s%',
    help => '--criticalx
   The extended critical thresholds',
    required => 0,
);
$plugin->add_arg(
    spec => 'mitigation=s',
    help => "--mitigation
   The parameter allows you to change a critical error to a warning.",
    required => 0,
);
$plugin->add_arg(
    spec => 'selectedperfdata=s',
    help => "--selectedperfdata
   The parameter allows you to limit the list of performance data. It's a perl regexp.
   Only matching perfdata show up in the output",
    required => 0,
);
$plugin->add_arg(
    spec => 'negate=s%',
    help => "--negate
   The parameter allows you to map exit levels, such as warning=critical",
    required => 0,
);
$plugin->add_arg(
    spec => 'with-mymodules-dyn-dir=s',
    help => '--with-mymodules-dyn-dir
   A directory where own extensions can be found',
    required => 0,
);
$plugin->add_arg(
    spec => 'servertype=s',
    help => '--servertype
   The type of the network device: cisco (default). Use it if auto-detection
   is not possible',
    required => 0,
);
$plugin->add_arg(
    spec => 'statefilesdir=s',
    help => '--statefilesdir
   An alternate directory where the plugin can save files',
    required => 0,
);
$plugin->add_arg(
    spec => 'snmpwalk=s',
    help => '--snmpwalk
   A file with the output of a snmpwalk (used for simulation)
   Use it instead of --hostname',
    required => 0,
);
$plugin->add_arg(
    spec => 'oids=s',
    help => '--oids
   A list of oids which are downloaded and written to a cache file.
   Use it together with --mode oidcache',
    required => 0,
);
$plugin->add_arg(
    spec => 'offline:i',
    help => '--offline
   The maximum number of seconds since the last update of cache file before
   it is considered too old',
    required => 0,
);
$plugin->add_arg(
    spec => 'multiline',
    help => '--multiline
   Multiline output',
    required => 0,
);

$plugin->getopts();
$plugin->classify();
$plugin->validate_args();

if (! $plugin->check_messages()) {
  $plugin->init();
  if (! $plugin->check_messages()) {
    $plugin->add_ok($plugin->get_summary())
        if $plugin->get_summary();
    $plugin->add_ok($plugin->get_extendedinfo(" "))
        if $plugin->get_extendedinfo();
  }
}
my ($code, $message) = $plugin->opts->multiline ?
    $plugin->check_messages(join => "\n", join_all => ', ') :
    $plugin->check_messages(join => ', ', join_all => ', ');
$message .= sprintf "\n%s\n", $plugin->get_info("\n")
    if $plugin->opts->verbose >= 1;
#printf "%s\n", Data::Dumper::Dumper($plugin);
$plugin->nagios_exit($code, $message);


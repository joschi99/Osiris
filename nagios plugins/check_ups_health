#! /usr/bin/perl -w
# nagios: -epn

package Monitoring::GLPlugin::Commandline::Extraopts;
use strict;
use File::Basename;
use strict;

sub new {
  my $class = shift;
  my %params = @_;
  my $self = {
    file => $params{file},
    commandline => $params{commandline},
    config => {},
    section => 'default_no_section',
  };
  bless $self, $class;
  $self->prepare_file_and_section();
  $self->init();
  return $self;
}

sub prepare_file_and_section {
  my $self = shift;
  if (! defined $self->{file}) {
    # ./check_stuff --extra-opts
    $self->{section} = basename($0);
    $self->{file} = $self->get_default_file();
  } elsif ($self->{file} =~ /^[^@]+$/) {
    # ./check_stuff --extra-opts=special_opts
    $self->{section} = $self->{file};
    $self->{file} = $self->get_default_file();
  } elsif ($self->{file} =~ /^@(.*)/) {
    # ./check_stuff --extra-opts=@/etc/myconfig.ini
    $self->{section} = basename($0);
    $self->{file} = $1;
  } elsif ($self->{file} =~ /^(.*?)@(.*)/) {
    # ./check_stuff --extra-opts=special_opts@/etc/myconfig.ini
    $self->{section} = $1;
    $self->{file} = $2;
  }
}

sub get_default_file {
  my $self = shift;
  foreach my $default (qw(/etc/nagios/plugins.ini
      /usr/local/nagios/etc/plugins.ini
      /usr/local/etc/nagios/plugins.ini
      /etc/opt/nagios/plugins.ini
      /etc/nagios-plugins.ini
      /usr/local/etc/nagios-plugins.ini
      /etc/opt/nagios-plugins.ini)) {
    if (-f $default) {
      return $default;
    }
  }
  return undef;
}

sub init {
  my $self = shift;
  if (! defined $self->{file}) {
    $self->{errors} = sprintf 'no extra-opts file specified and no default file 
found';
  } elsif (! -f $self->{file}) {
    $self->{errors} = sprintf 'could not open %s', $self->{file};
  } else {
    my $data = do { local (@ARGV, $/) = $self->{file}; <> };
    my $in_section = 'default_no_section';
    foreach my $line (split(/\n/, $data)) {
      if ($line =~ /\[(.*)\]/) {
        $in_section = $1;
      } elsif ($line =~ /(.*?)\s*=\s*(.*)/) {
        $self->{config}->{$in_section}->{$1} = $2;
      }
    }
  }
}

sub is_valid {
  my $self = shift;
  return ! exists $self->{errors};
}
sub overwrite {
  my $self = shift;
  if (scalar(keys %{$self->{config}->{default_no_section}}) > 0) {
    foreach (keys %{$self->{config}->{default_no_section}}) {
      $self->{commandline}->{$_} = $self->{config}->{default_no_section}->{$_};
    }
  }
  if (exists $self->{config}->{$self->{section}}) {
    foreach (keys %{$self->{config}->{$self->{section}}}) {
      $self->{commandline}->{$_} = $self->{config}->{$self->{section}}->{$_};
    }
  }
}



package Monitoring::GLPlugin::Commandline::Getopt;
use strict;
use File::Basename;
use Getopt::Long qw(:config no_ignore_case bundling);

# Standard defaults
my %DEFAULT = (
  timeout => 15,
  verbose => 0,
  license =>
"This monitoring plugin is free software, and comes with ABSOLUTELY NO WARRANTY.
It may be used, redistributed and/or modified under the terms of the GNU
General Public Licence (see http://www.fsf.org/licensing/licenses/gpl.txt).",
);
# Standard arguments
my @ARGS = ({
    spec => 'usage|?',
    help => "-?, --usage\n   Print usage information",
  }, {
    spec => 'help|h',
    help => "-h, --help\n   Print detailed help screen",
  }, {
    spec => 'version|V',
    help => "-V, --version\n   Print version information",
  }, {
    #spec => 'extra-opts:s@',
    #help => "--extra-opts=[<section>[@<config_file>]]\n   Section and/or config_file from which to load extra options (may repeat)",
  }, {
    spec => 'timeout|t=i',
    help => sprintf("-t, --timeout=INTEGER\n   Seconds before plugin times out (default: %s)", $DEFAULT{timeout}),
    default => $DEFAULT{timeout},
  }, {
    spec => 'verbose|v+',
    help => "-v, --verbose\n   Show details for command-line debugging (can repeat up to 3 times)",
    default => $DEFAULT{verbose},
  },
);
# Standard arguments we traditionally display last in the help output
my %DEFER_ARGS = map { $_ => 1 } qw(timeout verbose);

sub _init {
  my ($self, %params) = @_;
  # Check params
  my %attr = (
    usage => 1,
    version => 0,
    url => 0,
    plugin => { default => $Monitoring::GLPlugin::pluginname },
    blurb => 0,
    extra => 0,
    'extra-opts' => 0,
    license => { default => $DEFAULT{license} },
    timeout => { default => $DEFAULT{timeout} },
  );

  # Add attr to private _attr hash (except timeout)
  $self->{timeout} = delete $attr{timeout};
  $self->{_attr} = { %attr };
  foreach (keys %{$self->{_attr}}) {
    if (exists $params{$_}) {
      $self->{_attr}->{$_} = $params{$_};
    } else {
      $self->{_attr}->{$_} = $self->{_attr}->{$_}->{default}
          if ref ($self->{_attr}->{$_}) eq 'HASH' &&
              exists $self->{_attr}->{$_}->{default};
    }
  }
  # Chomp _attr values
  chomp foreach values %{$self->{_attr}};

  # Setup initial args list
  $self->{_args} = [ grep { exists $_->{spec} } @ARGS ];

  $self
}

sub new {
  my ($class, @params) = @_;
  require Monitoring::GLPlugin::Commandline::Extraopts
      if ! grep /BEGIN/, keys %Monitoring::GLPlugin::Commandline::Extraopts::;
  my $self = bless {}, $class;
  $self->_init(@params);
}

sub add_arg {
  my ($self, %arg) = @_;
  push (@{$self->{_args}}, \%arg);
}

sub mod_arg {
  my ($self, $argname, %arg) = @_;
  foreach my $old_arg (@{$self->{_args}}) {
    next unless $old_arg->{spec} =~ /(\w+).*/ && $argname eq $1;
    foreach my $key (keys %arg) {
      $old_arg->{$key} = $arg{$key};
    }
  }
}

sub getopts {
  my ($self) = @_;
  my %commandline = ();
  $self->{opts}->{all_my_opts} = {};
  my @params = map { $_->{spec} } @{$self->{_args}};
  if (! GetOptions(\%commandline, @params)) {
    $self->print_help();
    exit 3;
  } else {
    no strict 'refs';
    no warnings 'redefine';
    if (exists $commandline{'extra-opts'}) {
      # read the extra file and overwrite other parameters
      my $extras = Monitoring::GLPlugin::Commandline::Extraopts->new(
          file => $commandline{'extra-opts'},
          commandline => \%commandline
      );
      if (! $extras->is_valid()) {
        printf "UNKNOWN - extra-opts are not valid: %s\n", $extras->errors();
        exit 3;
      } else {
        $extras->overwrite();
      }
    }
    do { $self->print_help(); exit 0; } if $commandline{help};
    do { $self->print_version(); exit 0 } if $commandline{version};
    do { $self->print_usage(); exit 3 } if $commandline{usage};
    foreach (map { $_->{spec} =~ /^([\w\-]+)/; $1; } @{$self->{_args}}) {
      my $field = $_;
      *{"$field"} = sub {
        return $self->{opts}->{$field};
      };
    }
    *{"all_my_opts"} = sub {
      return $self->{opts}->{all_my_opts};
    };
    foreach (map { $_->{spec} =~ /^([\w\-]+)/; $1; }
        grep { exists $_->{required} && $_->{required} } @{$self->{_args}}) {
      do { $self->print_usage(); exit 3 } if ! exists $commandline{$_};
    }
    foreach (grep { exists $_->{default} } @{$self->{_args}}) {
      $_->{spec} =~ /^([\w\-]+)/;
      my $spec = $1;
      $self->{opts}->{$spec} = $_->{default};
    }
    foreach (keys %commandline) {
      $self->{opts}->{$_} = $commandline{$_};
      $self->{opts}->{all_my_opts}->{$_} = $commandline{$_};
    }
    foreach (grep { exists $_->{env} } @{$self->{_args}}) {
      $_->{spec} =~ /^([\w\-]+)/;
      my $spec = $1;
      if (exists $ENV{'NAGIOS__HOST'.$_->{env}}) {
        $self->{opts}->{$spec} = $ENV{'NAGIOS__HOST'.$_->{env}};
      }
      if (exists $ENV{'NAGIOS__SERVICE'.$_->{env}}) {
        $self->{opts}->{$spec} = $ENV{'NAGIOS__SERVICE'.$_->{env}};
      }
    }
    foreach (grep { exists $_->{aliasfor} } @{$self->{_args}}) {
      my $field = $_->{aliasfor};
      $_->{spec} =~ /^([\w\-]+)/;
      my $aliasfield = $1;
      next if $self->{opts}->{$field};
      *{"$field"} = sub {
        return $self->{opts}->{$aliasfield};
      };
    }
  }
}

sub create_opt {
  my ($self, $key) = @_;
  no strict 'refs';
  *{"$key"} = sub {
      return $self->{opts}->{$key};
  };
}

sub override_opt {
  my ($self, $key, $value) = @_;
  $self->{opts}->{$key} = $value;
}

sub get {
  my ($self, $opt) = @_;
  return $self->{opts}->{$opt};
}

sub print_help {
  my ($self) = @_;
  $self->print_version();
  printf "\n%s\n", $self->{_attr}->{license};
  printf "\n%s\n\n", $self->{_attr}->{blurb};
  $self->print_usage();
  foreach (grep {
      ! (exists $_->{hidden} && $_->{hidden}) 
  } @{$self->{_args}}) {
    printf " %s\n", $_->{help};
  }
}

sub print_usage {
  my ($self) = @_;
  printf $self->{_attr}->{usage}, $self->{_attr}->{plugin};
  print "\n";
}

sub print_version {
  my ($self) = @_;
  printf "%s %s", $self->{_attr}->{plugin}, $self->{_attr}->{version};
  printf " [%s]", $self->{_attr}->{url} if $self->{_attr}->{url};
  print "\n";
}

sub print_license {
  my ($self) = @_;
  printf "%s\n", $self->{_attr}->{license};
  print "\n";
}



package Monitoring::GLPlugin::Commandline;
use strict;
use IO::File;
use constant { OK => 0, WARNING => 1, CRITICAL => 2, UNKNOWN => 3, DEPENDENT => 4 };
our %ERRORS = (
    'OK'        => OK,
    'WARNING'   => WARNING,
    'CRITICAL'  => CRITICAL,
    'UNKNOWN'   => UNKNOWN,
    'DEPENDENT' => DEPENDENT,
);

our %STATUS_TEXT = reverse %ERRORS;
our $AUTOLOAD;


sub new {
  my ($class, %params) = @_;
  require Monitoring::GLPlugin::Commandline::Getopt
      if ! grep /BEGIN/, keys %Monitoring::GLPlugin::Commandline::Getopt::;
  my $self = {
       perfdata => [],
       messages => {
         ok => [],
         warning => [],
         critical => [],
         unknown => [],
       },
       args => [],
       opts => Monitoring::GLPlugin::Commandline::Getopt->new(%params),
       modes => [],
       statefilesdir => undef,
  };
  foreach (qw(shortname usage version url plugin blurb extra
      license timeout)) {
    $self->{$_} = $params{$_};
  }
  bless $self, $class;
  $self->{plugin} ||= $Monitoring::GLPlugin::pluginname;
  $self->{name} = $self->{plugin};
  $Monitoring::GLPlugin::plugin = $self;
}

sub AUTOLOAD {
  my ($self, @params) = @_;
  return if ($AUTOLOAD =~ /DESTROY/);
  $self->debug("AUTOLOAD %s\n", $AUTOLOAD)
        if $self->{opts}->verbose >= 2;
  if ($AUTOLOAD =~ /^.*::(add_arg|override_opt|create_opt)$/) {
    $self->{opts}->$1(@params);
  }
}

sub DESTROY {
  my ($self) = @_;
  # ohne dieses DESTROY rennt nagios_exit in obiges AUTOLOAD rein
  # und fliegt aufs Maul, weil {opts} bereits nicht mehr existiert.
  # Unerklaerliches Verhalten.
}

sub debug {
  my ($self, $format, @message) = @_;
  my $tracefile = "/tmp/".$Monitoring::GLPlugin::pluginname.".trace";
  $self->{trace} = -f $tracefile ? 1 : 0;
  if ($self->opts->verbose && $self->opts->verbose > 10) {
    printf("%s: ", scalar localtime);
    printf($format, @message);
    printf "\n";
  }
  if ($self->{trace}) {
    my $logfh = IO::File->new();
    $logfh->autoflush(1);
    if ($logfh->open($tracefile, "a")) {
      $logfh->printf("%s: ", scalar localtime);
      $logfh->printf($format, @message);
      $logfh->printf("\n");
      $logfh->close();
    }
  }
}

sub opts {
  my ($self) = @_;
  return $self->{opts};
}

sub getopts {
  my ($self) = @_;
  $self->opts->getopts();
}

sub add_message {
  my ($self, $code, @messages) = @_;
  $code = (qw(ok warning critical unknown))[$code] if $code =~ /^\d+$/;
  $code = lc $code;
  push @{$self->{messages}->{$code}}, @messages;
}

sub selected_perfdata {
  my ($self, $label) = @_;
  if ($self->opts->can("selectedperfdata") && $self->opts->selectedperfdata) {
    my $pattern = $self->opts->selectedperfdata;
    return ($label =~ /$pattern/i) ? 1 : 0;
  } else {
    return 1;
  }
}

sub add_perfdata {
  my ($self, %args) = @_;
#printf "add_perfdata %s\n", Data::Dumper::Dumper(\%args);
#printf "add_perfdata %s\n", Data::Dumper::Dumper($self->{thresholds});
#
# wenn warning, critical, dann wird von oben ein expliziter wert mitgegeben
# wenn thresholds
#  wenn label in 
#    warningx $self->{thresholds}->{$label}->{warning} existiert
#  dann nimm $self->{thresholds}->{$label}->{warning}
#  ansonsten thresholds->default->warning
#

  my $label = $args{label};
  my $value = $args{value};
  my $uom = $args{uom} || "";
  my $format = '%d';

  if ($self->opts->can("morphperfdata") && $self->opts->morphperfdata) {
    # 'Intel [R] Interface (\d+) usage'='nic$1'
    foreach my $key (keys %{$self->opts->morphperfdata}) {
      if ($label =~ /$key/) {
        my $replacement = '"'.$self->opts->morphperfdata->{$key}.'"';
        my $oldlabel = $label;
        $label =~ s/$key/$replacement/ee;
        if (exists $self->{thresholds}->{$oldlabel}) {
          %{$self->{thresholds}->{$label}} = %{$self->{thresholds}->{$oldlabel}};
        }
      }
    }
  }
  if ($value =~ /\./) {
    if (defined $args{places}) {
      $value = sprintf '%.'.$args{places}.'f', $value;
    } else {
      $value = sprintf "%.2f", $value;
    }
  } else {
    $value = sprintf "%d", $value;
  }
  my $warn = "";
  my $crit = "";
  my $min = defined $args{min} ? $args{min} : "";
  my $max = defined $args{max} ? $args{max} : "";
  if ($args{thresholds} || (! exists $args{warning} && ! exists $args{critical})) {
    if (exists $self->{thresholds}->{$label}->{warning}) {
      $warn = $self->{thresholds}->{$label}->{warning};
    } elsif (exists $self->{thresholds}->{default}->{warning}) {
      $warn = $self->{thresholds}->{default}->{warning};
    }
    if (exists $self->{thresholds}->{$label}->{critical}) {
      $crit = $self->{thresholds}->{$label}->{critical};
    } elsif (exists $self->{thresholds}->{default}->{critical}) {
      $crit = $self->{thresholds}->{default}->{critical};
    }
  } else {
    if ($args{warning}) {
      $warn = $args{warning};
    }
    if ($args{critical}) {
      $crit = $args{critical};
    }
  }
  if ($uom eq "%") {
    $min = 0;
    $max = 100;
  }
  if (defined $args{places}) {
    # cut off excessive decimals which may be the result of a division
    # length = places*2, no trailing zeroes
    if ($warn ne "") {
      $warn = join("", map {
          s/\.0+$//; $_
      } map {
          s/(\.[1-9]+)0+$/$1/; $_
      } map {
          /[\+\-\d\.]+/ ? sprintf '%.'.2*$args{places}.'f', $_ : $_;
      } split(/([\+\-\d\.]+)/, $warn));
    }
    if ($crit ne "") {
      $crit = join("", map {
          s/\.0+$//; $_
      } map {
          s/(\.[1-9]+)0+$/$1/; $_
      } map {
          /[\+\-\d\.]+/ ? sprintf '%.'.2*$args{places}.'f', $_ : $_;
      } split(/([\+\-\d\.]+)/, $crit));
    }
    if ($min ne "") {
      $min = join("", map {
          s/\.0+$//; $_
      } map {
          s/(\.[1-9]+)0+$/$1/; $_
      } map {
          /[\+\-\d\.]+/ ? sprintf '%.'.2*$args{places}.'f', $_ : $_;
      } split(/([\+\-\d\.]+)/, $min));
    }
    if ($max ne "") {
      $max = join("", map {
          s/\.0+$//; $_
      } map {
          s/(\.[1-9]+)0+$/$1/; $_
      } map {
          /[\+\-\d\.]+/ ? sprintf '%.'.2*$args{places}.'f', $_ : $_;
      } split(/([\+\-\d\.]+)/, $max));
    }
  }
  push @{$self->{perfdata}}, sprintf("'%s'=%s%s;%s;%s;%s;%s",
      $label, $value, $uom, $warn, $crit, $min, $max)
      if $self->selected_perfdata($label);
}

sub add_pandora {
  my ($self, %args) = @_;
  my $label = $args{label};
  my $value = $args{value};

  if ($args{help}) {
    push @{$self->{pandora}}, sprintf("# HELP %s %s", $label, $args{help});
  }
  if ($args{type}) {
    push @{$self->{pandora}}, sprintf("# TYPE %s %s", $label, $args{type});
  }
  if ($args{labels}) {
    push @{$self->{pandora}}, sprintf("%s{%s} %s", $label,
        join(",", map {
            sprintf '%s="%s"', $_, $args{labels}->{$_};
        } keys %{$args{labels}}),
        $value);
  } else {
    push @{$self->{pandora}}, sprintf("%s %s", $label, $value);
  }
}

sub add_html {
  my ($self, $line) = @_;
  push @{$self->{html}}, $line;
}

sub suppress_messages {
  my ($self) = @_;
  $self->{suppress_messages} = 1;
}

sub clear_messages {
  my ($self, $code) = @_;
  $code = (qw(ok warning critical unknown))[$code] if $code =~ /^\d+$/;
  $code = lc $code;
  $self->{messages}->{$code} = [];
}

sub reduce_messages_short {
  my ($self, $message) = @_;
  $message ||= "no problems";
  if ($self->opts->report && $self->opts->report eq "short") {
    $self->clear_messages(OK);
    $self->add_message(OK, $message) if ! $self->check_messages();
  }
}

sub reduce_messages {
  my ($self, $message) = @_;
  $message ||= "no problems";
  $self->clear_messages(OK);
  $self->add_message(OK, $message) if ! $self->check_messages();
}

sub check_messages {
  my ($self, %args) = @_;

  # Add object messages to any passed in as args
  for my $code (qw(critical warning unknown ok)) {
    my $messages = $self->{messages}->{$code} || [];
    if ($args{$code}) {
      unless (ref $args{$code} eq 'ARRAY') {
        if ($code eq 'ok') {
          $args{$code} = [ $args{$code} ];
        }
      }
      push @{$args{$code}}, @$messages;
    } else {
      $args{$code} = $messages;
    }
  }
  my %arg = %args;
  $arg{join} = ' ' unless defined $arg{join};

  # Decide $code
  my $code = OK;
  $code ||= CRITICAL  if @{$arg{critical}};
  $code ||= WARNING   if @{$arg{warning}};
  $code ||= UNKNOWN   if @{$arg{unknown}};
  return $code unless wantarray;

  # Compose message
  my $message = '';
  if ($arg{join_all}) {
      $message = join( $arg{join_all},
          map { @$_ ? join( $arg{'join'}, @$_) : () }
              $arg{critical},
              $arg{warning},
              $arg{unknown},
              $arg{ok} ? (ref $arg{ok} ? $arg{ok} : [ $arg{ok} ]) : []
      );
  }

  else {
      $message ||= join( $arg{'join'}, @{$arg{critical}} )
          if $code == CRITICAL;
      $message ||= join( $arg{'join'}, @{$arg{warning}} )
          if $code == WARNING;
      $message ||= join( $arg{'join'}, @{$arg{unknown}} )
          if $code == UNKNOWN;
      $message ||= ref $arg{ok} ? join( $arg{'join'}, @{$arg{ok}} ) : $arg{ok}
          if $arg{ok};
  }

  return ($code, $message);
}

sub status_code {
  my ($self, $code) = @_;
  $code = (qw(ok warning critical unknown))[$code] if $code =~ /^\d+$/;
  $code = uc $code;
  $code = $ERRORS{$code} if defined $code && exists $ERRORS{$code};
  $code = UNKNOWN unless defined $code && exists $STATUS_TEXT{$code};
  return "$STATUS_TEXT{$code}";
}

sub perfdata_string {
  my ($self) = @_;
  if (scalar (@{$self->{perfdata}})) {
    return join(" ", @{$self->{perfdata}});
  } else {
    return "";
  }
}

sub metrics_string {
  my ($self) = @_;
  if (scalar (@{$self->{metrics}})) {
    return join("\n", @{$self->{metrics}});
  } else {
    return "";
  }
}

sub html_string {
  my ($self) = @_;
  if (scalar (@{$self->{html}})) {
    return join(" ", @{$self->{html}});
  } else {
    return "";
  }
}

sub nagios_exit {
  my ($self, $code, $message, $arg) = @_;
  $code = $ERRORS{$code} if defined $code && exists $ERRORS{$code};
  $code = UNKNOWN unless defined $code && exists $STATUS_TEXT{$code};
  $message = '' unless defined $message;
  if (ref $message && ref $message eq 'ARRAY') {
      $message = join(' ', map { chomp; $_ } @$message);
  } else {
      chomp $message;
  }
  if ($self->opts->negate) {
    my $original_code = $code;
    foreach my $from (keys %{$self->opts->negate}) {
      if ((uc $from) =~ /^(OK|WARNING|CRITICAL|UNKNOWN)$/ &&
          (uc $self->opts->negate->{$from}) =~ /^(OK|WARNING|CRITICAL|UNKNOWN)$/) {
        if ($original_code == $ERRORS{uc $from}) {
          $code = $ERRORS{uc $self->opts->negate->{$from}};
        }
      }
    }
  }
  my $output = "$STATUS_TEXT{$code}";
  $output .= " - $message" if defined $message && $message ne '';
  if ($self->opts->can("morphmessage") && $self->opts->morphmessage) {
    # 'Intel [R] Interface (\d+) usage'='nic$1'
    # '^OK.*'="alles klar"   '^CRITICAL.*'="alles hi"
    foreach my $key (keys %{$self->opts->morphmessage}) {
      if ($output =~ /$key/) {
        my $replacement = '"'.$self->opts->morphmessage->{$key}.'"';
        $output =~ s/$key/$replacement/ee;
      }
    }
  }
  $output =~ s/\|/!/g if $output;
  if (scalar (@{$self->{perfdata}})) {
    $output .= " | ".$self->perfdata_string();
  }
  $output .= "\n";
  if ($self->opts->can("isvalidtime") && ! $self->opts->isvalidtime) {
    $code = OK;
    $output = "OK - outside valid timerange. check results are not relevant now. original message was: ".
        $output;
  }
  if (! exists $self->{suppress_messages}) {
    print $output;
  }
  exit $code;
}

sub set_thresholds {
  my ($self, %params) = @_;
  if (exists $params{metric}) {
    my $metric = $params{metric};
    # erst die hartcodierten defaultschwellwerte
    $self->{thresholds}->{$metric}->{warning} = $params{warning};
    $self->{thresholds}->{$metric}->{critical} = $params{critical};
    # dann die defaultschwellwerte von der kommandozeile
    if (defined $self->opts->warning) {
      $self->{thresholds}->{$metric}->{warning} = $self->opts->warning;
    }
    if (defined $self->opts->critical) {
      $self->{thresholds}->{$metric}->{critical} = $self->opts->critical;
    }
    # dann die ganz spezifischen schwellwerte von der kommandozeile
    if ($self->opts->warningx) { # muss nicht auf defined geprueft werden, weils ein hash ist
      # Erst schauen, ob einer * beinhaltet. Von denen wird vom Laengsten
      # bis zum Kuerzesten probiert, ob die matchen. Der laengste Match
      # gewinnt.
      my @keys = keys %{$self->opts->warningx};
      my @stringkeys = ();
      my @regexkeys = ();
      foreach my $key (sort { length($b) > length($a) } @keys) {
        if ($key =~ /\*/) {
          push(@regexkeys, $key);
        } else {
          push(@stringkeys, $key);
        }
      }
      foreach my $key (@regexkeys) {
        next if $metric !~ /$key/;
        $self->{thresholds}->{$metric}->{warning} = $self->opts->warningx->{$key};
        last;
      }
      # Anschliessend nochmal schauen, ob es einen nicht-Regex-Volltreffer gibt
      foreach my $key (@stringkeys) {
        next if $key ne $metric;
        $self->{thresholds}->{$metric}->{warning} = $self->opts->warningx->{$key};
        last;
      }
    }
    if ($self->opts->criticalx) {
      my @keys = keys %{$self->opts->criticalx};
      my @stringkeys = ();
      my @regexkeys = ();
      foreach my $key (sort { length($b) > length($a) } @keys) {
        if ($key =~ /\*/) {
          push(@regexkeys, $key);
        } else {
          push(@stringkeys, $key);
        }
      }
      foreach my $key (@regexkeys) {
        next if $metric !~ /$key/;
        $self->{thresholds}->{$metric}->{critical} = $self->opts->criticalx->{$key};
        last;
      }
      # Anschliessend nochmal schauen, ob es einen nicht-Regex-Volltreffer gibt
      foreach my $key (@stringkeys) {
        next if $key ne $metric;
        $self->{thresholds}->{$metric}->{critical} = $self->opts->criticalx->{$key};
        last;
      }
    }
  } else {
    $self->{thresholds}->{default}->{warning} =
        defined $self->opts->warning ? $self->opts->warning : defined $params{warning} ? $params{warning} : 0;
    $self->{thresholds}->{default}->{critical} =
        defined $self->opts->critical ? $self->opts->critical : defined $params{critical} ? $params{critical} : 0;
  }
}

sub force_thresholds {
  my ($self, %params) = @_;
  if (exists $params{metric}) {
    my $metric = $params{metric};
    $self->{thresholds}->{$metric}->{warning} = $params{warning} || 0;
    $self->{thresholds}->{$metric}->{critical} = $params{critical} || 0;
  } else {
    $self->{thresholds}->{default}->{warning} = $params{warning} || 0;
    $self->{thresholds}->{default}->{critical} = $params{critical} || 0;
  }
}

sub get_thresholds {
  my ($self, @params) = @_;
  if (scalar(@params) > 1) {
    my %params = @params;
    my $metric = $params{metric};
    return ($self->{thresholds}->{$metric}->{warning},
        $self->{thresholds}->{$metric}->{critical});
  } else {
    return ($self->{thresholds}->{default}->{warning},
        $self->{thresholds}->{default}->{critical});
  }
}

sub check_thresholds {
  my ($self, @params) = @_;
  my $level = $ERRORS{OK};
  my $warningrange;
  my $criticalrange;
  my $value;
  if (scalar(@params) > 1) {
    my %params = @params;
    $value = $params{value};
    my $metric = $params{metric};
    if ($metric ne 'default') {
      $warningrange = exists $self->{thresholds}->{$metric}->{warning} ?
          $self->{thresholds}->{$metric}->{warning} :
          $self->{thresholds}->{default}->{warning};
      $criticalrange = exists $self->{thresholds}->{$metric}->{critical} ?
          $self->{thresholds}->{$metric}->{critical} :
          $self->{thresholds}->{default}->{critical};
    } else {
      $warningrange = (defined $params{warning}) ?
          $params{warning} : $self->{thresholds}->{default}->{warning};
      $criticalrange = (defined $params{critical}) ?
          $params{critical} : $self->{thresholds}->{default}->{critical};
    }
  } else {
    $value = $params[0];
    $warningrange = $self->{thresholds}->{default}->{warning};
    $criticalrange = $self->{thresholds}->{default}->{critical};
  }
  if (! defined $warningrange) {
    # there was no set_thresholds for defaults, no --warning, no --warningx
  } elsif ($warningrange =~ /^([-+]?[0-9]*\.?[0-9]+)$/) {
    # warning = 10, warn if > 10 or < 0
    $level = $ERRORS{WARNING}
        if ($value > $1 || $value < 0);
  } elsif ($warningrange =~ /^([-+]?[0-9]*\.?[0-9]+):$/) {
    # warning = 10:, warn if < 10
    $level = $ERRORS{WARNING}
        if ($value < $1);
  } elsif ($warningrange =~ /^~:([-+]?[0-9]*\.?[0-9]+)$/) {
    # warning = ~:10, warn if > 10
    $level = $ERRORS{WARNING}
        if ($value > $1);
  } elsif ($warningrange =~ /^([-+]?[0-9]*\.?[0-9]+):([-+]?[0-9]*\.?[0-9]+)$/) {
    # warning = 10:20, warn if < 10 or > 20
    $level = $ERRORS{WARNING}
        if ($value < $1 || $value > $2);
  } elsif ($warningrange =~ /^@([-+]?[0-9]*\.?[0-9]+):([-+]?[0-9]*\.?[0-9]+)$/) {
    # warning = @10:20, warn if >= 10 and <= 20
    $level = $ERRORS{WARNING}
        if ($value >= $1 && $value <= $2);
  }
  if (! defined $criticalrange) {
    # there was no set_thresholds for defaults, no --critical, no --criticalx
  } elsif ($criticalrange =~ /^([-+]?[0-9]*\.?[0-9]+)$/) {
    # critical = 10, crit if > 10 or < 0
    $level = $ERRORS{CRITICAL}
        if ($value > $1 || $value < 0);
  } elsif ($criticalrange =~ /^([-+]?[0-9]*\.?[0-9]+):$/) {
    # critical = 10:, crit if < 10
    $level = $ERRORS{CRITICAL}
        if ($value < $1);
  } elsif ($criticalrange =~ /^~:([-+]?[0-9]*\.?[0-9]+)$/) {
    # critical = ~:10, crit if > 10
    $level = $ERRORS{CRITICAL}
        if ($value > $1);
  } elsif ($criticalrange =~ /^([-+]?[0-9]*\.?[0-9]+):([-+]?[0-9]*\.?[0-9]+)$/) {
    # critical = 10:20, crit if < 10 or > 20
    $level = $ERRORS{CRITICAL}
        if ($value < $1 || $value > $2);
  } elsif ($criticalrange =~ /^@([-+]?[0-9]*\.?[0-9]+):([-+]?[0-9]*\.?[0-9]+)$/) {
    # critical = @10:20, crit if >= 10 and <= 20
    $level = $ERRORS{CRITICAL}
        if ($value >= $1 && $value <= $2);
  }
  return $level;
}



package Monitoring::GLPlugin;

=head1 Monitoring::GLPlugin

Monitoring::GLPlugin - infrastructure functions to build a monitoring plugin

=cut

use strict;
use IO::File;
use File::Basename;
use Digest::MD5 qw(md5_hex);
use Errno;
use Data::Dumper;
our $AUTOLOAD;
*VERSION = \'2.3.1';

use constant { OK => 0, WARNING => 1, CRITICAL => 2, UNKNOWN => 3 };

{
  our $mode = undef;
  our $plugin = undef;
  our $pluginname = basename($ENV{'NAGIOS_PLUGIN'} || $0);
  our $blacklist = undef;
  our $info = [];
  our $extendedinfo = [];
  our $summary = [];
  our $variables = {};
  our $survive_sudo_env = ["LD_LIBRARY_PATH", "SHLIB_PATH"];
}

sub new {
  my ($class, %params) = @_;
  my $self = {};
  bless $self, $class;
  require Monitoring::GLPlugin::Commandline
      if ! grep /BEGIN/, keys %Monitoring::GLPlugin::Commandline::;
  require Monitoring::GLPlugin::Item
      if ! grep /BEGIN/, keys %Monitoring::GLPlugin::Item::;
  require Monitoring::GLPlugin::TableItem
      if ! grep /BEGIN/, keys %Monitoring::GLPlugin::TableItem::;
  $Monitoring::GLPlugin::plugin = Monitoring::GLPlugin::Commandline->new(%params);
  return $self;
}

sub init {
  my ($self) = @_;
  if ($self->opts->can("blacklist") && $self->opts->blacklist &&
      -f $self->opts->blacklist) {
    $self->opts->blacklist = do {
        local (@ARGV, $/) = $self->opts->blacklist; <> };
  }
}

sub dumper {
  my ($self, $object) = @_;
  my $run = $object->{runtime};
  delete $object->{runtime};
  printf STDERR "%s\n", Data::Dumper::Dumper($object);
  $object->{runtime} = $run;
}

sub no_such_mode {
  my ($self) = @_;
  printf "Mode %s is not implemented for this type of device\n",
      $self->opts->mode;
  exit 3;
}

#########################################################
# framework-related. setup, options
#
sub add_default_args {
  my ($self) = @_;
  $self->add_arg(
      spec => 'mode=s',
      help => "--mode
   A keyword which tells the plugin what to do",
      required => 1,
  );
  $self->add_arg(
      spec => 'regexp',
      help => "--regexp
   Parameter name/name2/name3 will be interpreted as (perl) regular expression",
      required => 0,);
  $self->add_arg(
      spec => 'warning=s',
      help => "--warning
   The warning threshold",
      required => 0,);
  $self->add_arg(
      spec => 'critical=s',
      help => "--critical
   The critical threshold",
      required => 0,);
  $self->add_arg(
      spec => 'warningx=s%',
      help => '--warningx
   The extended warning thresholds
   e.g. --warningx db_msdb_free_pct=6: to override the threshold for a
   specific item ',
      required => 0,
  );
  $self->add_arg(
      spec => 'criticalx=s%',
      help => '--criticalx
   The extended critical thresholds',
      required => 0,
  );
  $self->add_arg(
      spec => 'units=s',
      help => "--units
   One of %, B, KB, MB, GB, Bit, KBi, MBi, GBi. (used for e.g. mode interface-usage)",
      required => 0,
  );
  $self->add_arg(
      spec => 'name=s',
      help => "--name
   The name of a specific component to check",
      required => 0,
  );
  $self->add_arg(
      spec => 'name2=s',
      help => "--name2
   The secondary name of a component",
      required => 0,
  );
  $self->add_arg(
      spec => 'name3=s',
      help => "--name3
   The tertiary name of a component",
      required => 0,
  );
  $self->add_arg(
      spec => 'extra-opts=s',
      help => "--extra-opts
   read command line arguments from an external file",
      required => 0,
  );
  $self->add_arg(
      spec => 'blacklist|b=s',
      help => '--blacklist
   Blacklist some (missing/failed) components',
      required => 0,
      default => '',
  );
  $self->add_arg(
      spec => 'mitigation=s',
      help => "--mitigation
   The parameter allows you to change a critical error to a warning.",
      required => 0,
  );
  $self->add_arg(
      spec => 'lookback=s',
      help => "--lookback
   The amount of time you want to look back when calculating average rates.
   Use it for mode interface-errors or interface-usage. Without --lookback
   the time between two runs of check_nwc_health is the base for calculations.
   If you want your checkresult to be based for example on the past hour,
   use --lookback 3600. ",
      required => 0,
  );
  $self->add_arg(
      spec => 'environment|e=s%',
      help => "--environment
   Add a variable to the plugin's environment",
      required => 0,
  );
  $self->add_arg(
      spec => 'negate=s%',
      help => "--negate
   Emulate the negate plugin. --negate warning=critical --negate unknown=critical",
      required => 0,
  );
  $self->add_arg(
      spec => 'morphmessage=s%',
      help => '--morphmessage
   Modify the final output message',
      required => 0,
  );
  $self->add_arg(
      spec => 'morphperfdata=s%',
      help => "--morphperfdata
   The parameter allows you to change performance data labels.
   It's a perl regexp and a substitution.
   Example: --morphperfdata '(.*)ISATAP(.*)'='\$1patasi\$2'",
      required => 0,
  );
  $self->add_arg(
      spec => 'selectedperfdata=s',
      help => "--selectedperfdata
   The parameter allows you to limit the list of performance data. It's a perl regexp.
   Only matching perfdata show up in the output",
      required => 0,
  );
  $self->add_arg(
      spec => 'report=s',
      help => "--report
   Can be used to shorten the output",
      required => 0,
      default => 'long',
  );
  $self->add_arg(
      spec => 'multiline',
      help => '--multiline
   Multiline output',
      required => 0,
  );
  $self->add_arg(
      spec => 'with-mymodules-dyn-dir=s',
      help => "--with-mymodules-dyn-dir
   Add-on modules for the my-modes will be searched in this directory",
      required => 0,
  );
  $self->add_arg(
      spec => 'statefilesdir=s',
      help => '--statefilesdir
   An alternate directory where the plugin can save files',
      required => 0,
      env => 'STATEFILESDIR',
  );
  $self->add_arg(
      spec => 'isvalidtime=i',
      help => '--isvalidtime
   Signals the plugin to return OK if now is not a valid check time',
      required => 0,
      default => 1,
  );
  $self->add_arg(
      spec => 'reset',
      help => "--reset
   remove the state file",
      required => 0,
      hidden => 1,
  );
  $self->add_arg(
      spec => 'runas=s',
      help => "--runas
   run as a different user",
      required => 0,
      hidden => 1,
  );
  $self->add_arg(
      spec => 'shell',
      help => "--shell
   forget what you see",
      required => 0,
      hidden => 1,
  );
  $self->add_arg(
      spec => 'drecksptkdb=s',
      help => "--drecksptkdb
   This parameter must be used instead of --name, because Devel::ptkdb is stealing the latter from the command line",
      aliasfor => "name",
      required => 0,
      hidden => 1,
  );
}

sub add_modes {
  my ($self, $modes) = @_;
  my $modestring = "";
  my @modes = @{$modes};
  my $longest = length ((reverse sort {length $a <=> length $b} map { $_->[1] } @modes)[0]);
  my $format = "       %-".
      (length ((reverse sort {length $a <=> length $b} map { $_->[1] } @modes)[0])).
      "s\t(%s)\n";
  foreach (@modes) {
    $modestring .= sprintf $format, $_->[1], $_->[3];
  }
  $modestring .= sprintf "\n";
  $Monitoring::GLPlugin::plugin->{modestring} = $modestring;
}

sub add_arg {
  my ($self, %args) = @_;
  if ($args{help} =~ /^--mode/) {
    $args{help} .= "\n".$Monitoring::GLPlugin::plugin->{modestring};
  }
  $Monitoring::GLPlugin::plugin->{opts}->add_arg(%args);
}

sub mod_arg {
  my ($self, @arg) = @_;
  $Monitoring::GLPlugin::plugin->{opts}->mod_arg(@arg);
}

sub add_mode {
  my ($self, %args) = @_;
  push(@{$Monitoring::GLPlugin::plugin->{modes}}, \%args);
  my $longest = length ((reverse sort {length $a <=> length $b} map { $_->{spec} } @{$Monitoring::GLPlugin::plugin->{modes}})[0]);
  my $format = "       %-".
      (length ((reverse sort {length $a <=> length $b} map { $_->{spec} } @{$Monitoring::GLPlugin::plugin->{modes}})[0])).
      "s\t(%s)\n";
  $Monitoring::GLPlugin::plugin->{modestring} = "";
  foreach (@{$Monitoring::GLPlugin::plugin->{modes}}) {
    $Monitoring::GLPlugin::plugin->{modestring} .= sprintf $format, $_->{spec}, $_->{help};
  }
  $Monitoring::GLPlugin::plugin->{modestring} .= "\n";
}

sub validate_args {
  my ($self) = @_;
  if ($self->opts->mode =~ /^my-([^\-.]+)/) {
    my $param = $self->opts->mode;
    $param =~ s/\-/::/g;
    $self->add_mode(
        internal => $param,
        spec => $self->opts->mode,
        alias => undef,
        help => 'my extension',
    );
  } elsif ($self->opts->mode eq 'encode') {
    my $input = <>;
    chomp $input;
    $input =~ s/([^A-Za-z0-9])/sprintf("%%%02X", ord($1))/seg;
    printf "%s\n", $input;
    exit 0;
  } elsif ($self->opts->mode eq 'decode') {
    if (! -t STDIN) {
      my $input = <>;
      chomp $input;
      $input =~ s/%([A-Za-z0-9]{2})/chr(hex($1))/seg;
      printf "%s\n", $input;
      exit OK;
    } else {
      if ($self->opts->name) {
        my $input = $self->opts->name;
        $input =~ s/%([A-Za-z0-9]{2})/chr(hex($1))/seg;
        printf "%s\n", $input;
        exit OK;
      } else {
        printf "i can't find your encoded statement. use --name or pipe it in my stdin\n";
        exit UNKNOWN;
      }
    }
  } elsif ((! grep { $self->opts->mode eq $_ } map { $_->{spec} } @{$Monitoring::GLPlugin::plugin->{modes}}) &&
      (! grep { $self->opts->mode eq $_ } map { defined $_->{alias} ? @{$_->{alias}} : () } @{$Monitoring::GLPlugin::plugin->{modes}})) {
    printf "UNKNOWN - mode %s\n", $self->opts->mode;
    $self->opts->print_help();
    exit 3;
  }
  if ($self->opts->name && $self->opts->name =~ /(%22)|(%27)/) {
    my $name = $self->opts->name;
    $name =~ s/\%([A-Fa-f0-9]{2})/pack('C', hex($1))/seg;
    $self->override_opt('name', $name);
  }
  $Monitoring::GLPlugin::mode = (
      map { $_->{internal} }
      grep {
         ($self->opts->mode eq $_->{spec}) ||
         ( defined $_->{alias} && grep { $self->opts->mode eq $_ } @{$_->{alias}})
      } @{$Monitoring::GLPlugin::plugin->{modes}}
  )[0];
  if ($self->opts->multiline) {
    $ENV{NRPE_MULTILINESUPPORT} = 1;
  } else {
    $ENV{NRPE_MULTILINESUPPORT} = 0;
  }
  if ($self->opts->can("statefilesdir") && ! $self->opts->statefilesdir) {
    if ($^O =~ /MSWin/) {
      if (defined $ENV{TEMP}) {
        $self->override_opt('statefilesdir', $ENV{TEMP}."/".$Monitoring::GLPlugin::plugin->{name});
      } elsif (defined $ENV{TMP}) {
        $self->override_opt('statefilesdir', $ENV{TMP}."/".$Monitoring::GLPlugin::plugin->{name});
      } elsif (defined $ENV{windir}) {
        $self->override_opt('statefilesdir', File::Spec->catfile($ENV{windir}, 'Temp')."/".$Monitoring::GLPlugin::plugin->{name});
      } else {
        $self->override_opt('statefilesdir', "C:/".$Monitoring::GLPlugin::plugin->{name});
      }
    } elsif (exists $ENV{OMD_ROOT}) {
      $self->override_opt('statefilesdir', $ENV{OMD_ROOT}."/var/tmp/".$Monitoring::GLPlugin::plugin->{name});
    } else {
      $self->override_opt('statefilesdir', "/var/tmp/".$Monitoring::GLPlugin::plugin->{name});
    }
  }
  $Monitoring::GLPlugin::plugin->{statefilesdir} = $self->opts->statefilesdir
      if $self->opts->can("statefilesdir");
  if ($self->opts->can("warningx") && $self->opts->warningx) {
    foreach my $key (keys %{$self->opts->warningx}) {
      $self->set_thresholds(metric => $key,
          warning => $self->opts->warningx->{$key});
    }
  }
  if ($self->opts->can("criticalx") && $self->opts->criticalx) {
    foreach my $key (keys %{$self->opts->criticalx}) {
      $self->set_thresholds(metric => $key,
          critical => $self->opts->criticalx->{$key});
    }
  }
  $self->set_timeout_alarm() if ! $SIG{'ALRM'};
}

sub set_timeout_alarm {
  my ($self, $timeout, $handler) = @_;
  $timeout ||= $self->opts->timeout;
  $handler ||= sub {
    printf "UNKNOWN - %s timed out after %d seconds\n",
        $Monitoring::GLPlugin::plugin->{name}, $self->opts->timeout;
    exit 3;
  };
  use POSIX ':signal_h';
  if ($^O =~ /MSWin/) {
    local $SIG{'ALRM'} = $handler;
  } else {
    my $mask = POSIX::SigSet->new( SIGALRM );
    my $action = POSIX::SigAction->new(
        $handler, $mask
    );   
    my $oldaction = POSIX::SigAction->new();
    sigaction(SIGALRM ,$action ,$oldaction );
  }    
  alarm(int($timeout)); # 1 second before the global unknown timeout
}

#########################################################
# global helpers
#
sub set_variable {
  my ($self, $key, $value) = @_;
  $Monitoring::GLPlugin::variables->{$key} = $value;
}

sub get_variable {
  my ($self, $key, $fallback) = @_;
  return exists $Monitoring::GLPlugin::variables->{$key} ?
      $Monitoring::GLPlugin::variables->{$key} : $fallback;
}

sub debug {
  my ($self, $format, @message) = @_;
  my $tracefile = "/tmp/".$Monitoring::GLPlugin::pluginname.".trace";
  $self->{trace} = -f $tracefile ? 1 : 0;
  if ($self->get_variable("verbose") &&
      $self->get_variable("verbose") > $self->get_variable("verbosity", 10)) {
    printf("%s: ", scalar localtime);
    printf($format, @message);
    printf "\n";
  }
  if ($self->{trace}) {
    my $logfh = IO::File->new();
    $logfh->autoflush(1);
    if ($logfh->open($tracefile, "a")) {
      $logfh->printf("%s: ", scalar localtime);
      $logfh->printf($format, @message);
      $logfh->printf("\n");
      $logfh->close();
    }
  }
}

sub filter_namex {
  my ($self, $opt, $name) = @_;
  if ($opt) {
    if ($self->opts->regexp) {
      if ($name =~ /$opt/i) {
        return 1;
      }
    } else {
      if (lc $opt eq lc $name) {
        return 1;
      }
    }
  } else {
    return 1;
  }
  return 0;
}

sub filter_name {
  my ($self, $name) = @_;
  return $self->filter_namex($self->opts->name, $name);
}

sub filter_name2 {
  my ($self, $name) = @_;
  return $self->filter_namex($self->opts->name2, $name);
}

sub filter_name3 {
  my ($self, $name) = @_;
  return $self->filter_namex($self->opts->name3, $name);
}

sub version_is_minimum {
  my ($self, $version) = @_;
  my $installed_version;
  my $newer = 1;
  if ($self->get_variable("version")) {
    $installed_version = $self->get_variable("version");
  } elsif (exists $self->{version}) {
    $installed_version = $self->{version};
  } else {
    return 0;
  }
  my @v1 = map { $_ eq "x" ? 0 : $_ } split(/\./, $version);
  my @v2 = split(/\./, $installed_version);
  if (scalar(@v1) > scalar(@v2)) {
    push(@v2, (0) x (scalar(@v1) - scalar(@v2)));
  } elsif (scalar(@v2) > scalar(@v1)) {
    push(@v1, (0) x (scalar(@v2) - scalar(@v1)));
  }
  foreach my $pos (0..$#v1) {
    if ($v2[$pos] > $v1[$pos]) {
      $newer = 1;
      last;
    } elsif ($v2[$pos] < $v1[$pos]) {
      $newer = 0;
      last;
    }
  }
  return $newer;
}

sub accentfree {
  my ($self, $text) = @_;
  # thanks mycoyne who posted this accent-remove-algorithm
  # http://www.experts-exchange.com/Programming/Languages/Scripting/Perl/Q_23275533.html#a21234612
  my @transformed;
  my %replace = (
    '9a' => 's', '9c' => 'oe', '9e' => 'z', '9f' => 'Y', 'c0' => 'A', 'c1' => 'A',
    'c2' => 'A', 'c3' => 'A', 'c4' => 'A', 'c5' => 'A', 'c6' => 'AE', 'c7' => 'C',
    'c8' => 'E', 'c9' => 'E', 'ca' => 'E', 'cb' => 'E', 'cc' => 'I', 'cd' => 'I',
    'ce' => 'I', 'cf' => 'I', 'd0' => 'D', 'd1' => 'N', 'd2' => 'O', 'd3' => 'O',
    'd4' => 'O', 'd5' => 'O', 'd6' => 'O', 'd8' => 'O', 'd9' => 'U', 'da' => 'U',
    'db' => 'U', 'dc' => 'U', 'dd' => 'Y', 'e0' => 'a', 'e1' => 'a', 'e2' => 'a',
    'e3' => 'a', 'e4' => 'a', 'e5' => 'a', 'e6' => 'ae', 'e7' => 'c', 'e8' => 'e',
    'e9' => 'e', 'ea' => 'e', 'eb' => 'e', 'ec' => 'i', 'ed' => 'i', 'ee' => 'i',
    'ef' => 'i', 'f0' => 'o', 'f1' => 'n', 'f2' => 'o', 'f3' => 'o', 'f4' => 'o',
    'f5' => 'o', 'f6' => 'o', 'f8' => 'o', 'f9' => 'u', 'fa' => 'u', 'fb' => 'u',
    'fc' => 'u', 'fd' => 'y', 'ff' => 'y',
  );
  my @letters = split //, $text;;
  for (my $i = 0; $i <= $#letters; $i++) {
    my $hex = sprintf "%x", ord($letters[$i]);
    $letters[$i] = $replace{$hex} if (exists $replace{$hex});
  }
  push @transformed, @letters;
  return join '', @transformed;
}

sub dump {
  my ($self) = @_;
  my $class = ref($self);
  $class =~ s/^.*:://;
  if (exists $self->{flat_indices}) {
    printf "[%s_%s]\n", uc $class, $self->{flat_indices};
  } else {
    printf "[%s]\n", uc $class;
  }
  foreach (grep !/^(info|trace|warning|critical|blacklisted|extendedinfo|flat_indices|indices)$/, sort keys %{$self}) {
    printf "%s: %s\n", $_, $self->{$_} if defined $self->{$_} && ref($self->{$_}) ne "ARRAY";
  }
  if ($self->{info}) {
    printf "info: %s\n", $self->{info};
  }
  printf "\n";
  foreach (grep !/^(info|trace|warning|critical|blacklisted|extendedinfo|flat_indices|indices)$/, sort keys %{$self}) {
    if (defined $self->{$_} && ref($self->{$_}) eq "ARRAY") {
      my $have_flat_indices = 1;
      foreach my $obj (@{$self->{$_}}) {
        $have_flat_indices = 0 if (ref($obj) ne "HASH" || ! exists $obj->{flat_indices});
      }
      if ($have_flat_indices) {
        foreach my $obj (sort {
            join('', map { sprintf("%30d",$_) } split( /\./, $a->{flat_indices})) cmp
            join('', map { sprintf("%30d",$_) } split( /\./, $b->{flat_indices}))
        } @{$self->{$_}}) {
          $obj->dump();
        }
      } else {
        foreach my $obj (@{$self->{$_}}) {
          $obj->dump() if UNIVERSAL::can($obj, "isa") && $obj->can("dump");
        }
      }
    }
  }
}

sub table_ascii {
  my ($self, $table, $titles) = @_;
  my $text = "";
  my $column_length = {};
  my $column = 0;
  foreach (@{$titles}) {
    $column_length->{$column++} = length($_);
  }
  foreach my $tr (@{$table}) {
    @{$tr} = map { ref($_) eq "ARRAY" ? $_->[0] : $_; } @{$tr};
    $column = 0;
    foreach my $td (@{$tr}) {
      if (length($td) > $column_length->{$column}) {
        $column_length->{$column} = length($td);
      }
      $column++;
    }
  }
  $column = 0;
  foreach (@{$titles}) {
    $column_length->{$column} = "%".($column_length->{$column} + 3)."s";
    $column++;
  }
  $column = 0;
  foreach (@{$titles}) {
    $text .= sprintf $column_length->{$column++}, $_;
  }
  $text .= "\n";
  foreach my $tr (@{$table}) {
    $column = 0;
    foreach my $td (@{$tr}) {
      $text .= sprintf $column_length->{$column++}, $td;
    }
    $text .= "\n";
  }
  return $text;
}

sub table_html {
  my ($self, $table, $titles) = @_;
  my $text = "";
  $text .= "<table style=\"border-collapse:collapse; border: 1px solid black;\">";
  $text .= "<tr>";
  foreach (@{$titles}) {
    $text .= sprintf "<th style=\"text-align: left; padding-left: 4px; padding-right: 6px;\">%s</th>", $_;
  }
  $text .= "</tr>";
  foreach my $tr (@{$table}) {
    $text .= "<tr>";
    foreach my $td (@{$tr}) {
      my $class = "statusOK";
      if (ref($td) eq "ARRAY") {
        $class = {
          0 => "statusOK",
          1 => "statusWARNING",
          2 => "statusCRITICAL",
          3 => "statusUNKNOWN",
        }->{$td->[1]};
        $td = $td->[0];
      }
      $text .= sprintf "<td style=\"text-align: left; padding-left: 4px; padding-right: 6px;\" class=\"%s\">%s</td>", $class, $td;
    }
    $text .= "</tr>";
  }
  $text .= "</table>";
  return $text;
}

sub load_my_extension {
  my ($self) = @_;
  if ($self->opts->mode =~ /^my-([^-.]+)/) {
    my $class = $1;
    my $loaderror = undef;
    substr($class, 0, 1) = uc substr($class, 0, 1);
    if (! $self->opts->get("with-mymodules-dyn-dir")) {
      $self->override_opt("with-mymodules-dyn-dir", "");
    }
    my $plugin_name = $Monitoring::GLPlugin::pluginname;
    $plugin_name =~ /check_(.*?)_health/;
    my $deprecated_class = "DBD::".(uc $1)."::Server";
    $plugin_name = "Check".uc(substr($1, 0, 1)).substr($1, 1)."Health";
    foreach my $libpath (split(":", $self->opts->get("with-mymodules-dyn-dir"))) {
      foreach my $extmod (glob $libpath."/".$plugin_name."*.pm") {
        my $stderrvar;
        *SAVEERR = *STDERR;
        open OUT ,'>',\$stderrvar;
        *STDERR = *OUT;
        eval {
          $self->debug(sprintf "loading module %s", $extmod);
          require $extmod;
        };
        *STDERR = *SAVEERR;
        if ($@) {
          $loaderror = $extmod;
          $self->debug(sprintf "failed loading module %s: %s", $extmod, $@);
        }
      }
    }
    my $original_class = ref($self);
    my $original_init = $self->can("init");
    $self->compatibility_class() if $self->can('compatibility_class');
    bless $self, "My$class";
    $self->compatibility_methods() if $self->can('compatibility_methods') &&
        $self->isa($deprecated_class);
    if ($self->isa("Monitoring::GLPlugin")) {
      my $new_init = $self->can("init");
      if ($new_init == $original_init) {
          $self->add_unknown(
              sprintf "Class %s needs an init() method", ref($self));
      } else {
        # now go back to check_*_health.pl where init() will be called
      }
    } else {
      bless $self, $original_class;
      $self->add_unknown(
          sprintf "Class %s is not a subclass of Monitoring::GLPlugin%s",
              "My$class",
              $loaderror ? sprintf " (syntax error in %s?)", $loaderror : "" );
      my ($code, $message) = $self->check_messages(join => ', ', join_all => ', ');
      $self->nagios_exit($code, $message);
    }
  }
}

sub decode_password {
  my ($self, $password) = @_;
  if ($password && $password =~ /^rfc3986:\/\/(.*)/) {
    $password = $1;
    $password =~ s/%([A-Za-z0-9]{2})/chr(hex($1))/seg;
  }
  return $password;
}

sub number_of_bits {
  my ($self, $unit) = @_;
  # https://en.wikipedia.org/wiki/Data_rate_units
  my $bits = {
    'bit' => 1,			# Bit per second
    'B' => 8,			# Byte per second, 8 bits per second
    'kbit' => 1000,		# Kilobit per second, 1,000 bits per second
    'kb' => 1000,		# Kilobit per second, 1,000 bits per second
    'Kibit' => 1024,		# Kibibit per second, 1,024 bits per second
    'kB' => 8000,		# Kilobyte per second, 8,000 bits per second
    'KiB' => 8192,		# Kibibyte per second, 1,024 bytes per second
    'Mbit' => 1000000,		# Megabit per second, 1,000,000 bits per second
    'Mb' => 1000000,		# Megabit per second, 1,000,000 bits per second
    'Mibit' => 1048576,		# Mebibit per second, 1,024 kibibits per second
    'MB' => 8000000,		# Megabyte per second, 1,000 kilobytes per second
    'MiB' => 8388608,		# Mebibyte per second, 1,024 kibibytes per second
    'Gbit' => 1000000000,	# Gigabit per second, 1,000 megabits per second
    'Gb' => 1000000000,		# Gigabit per second, 1,000 megabits per second
    'Gibit' => 1073741824,	# Gibibit per second, 1,024 mebibits per second
    'GB' => 8000000000,		# Gigabyte per second, 1,000 megabytes per second
    'GiB' => 8589934592,	# Gibibyte per second, 8192 mebibits per second
    'Tbit' => 1000000000000,	# Terabit per second, 1,000 gigabits per second
    'Tb' => 1000000000000,	# Terabit per second, 1,000 gigabits per second
    'Tibit' => 1099511627776,	# Tebibit per second, 1,024 gibibits per second
    'TB' => 8000000000000,	# Terabyte per second, 1,000 gigabytes per second
    # eigene kreationen
    'Bits' => 1,
    'Bit' => 1,			# Bit per second
    'KB' => 1024,		# Kilobyte (like disk kilobyte)
    'KBi' => 1024,		# -"-
    'MBi' => 1024 * 1024,	# Megabyte (like disk megabyte)
    'GBi' => 1024 * 1024 * 1024, # Gigybate (like disk gigybyte)
  };
  if (exists $bits->{$unit}) {
    return $bits->{$unit};
  } else {
    return 0;
  }
}


#########################################################
# runtime methods
#
sub mode : lvalue {
  my ($self) = @_;
  $Monitoring::GLPlugin::mode;
}

sub statefilesdir {
  my ($self) = @_;
  return $Monitoring::GLPlugin::plugin->{statefilesdir};
}

sub opts { # die beiden _nicht_ in AUTOLOAD schieben, das kracht!
  my ($self) = @_;
  return $Monitoring::GLPlugin::plugin->opts();
}

sub getopts {
  my ($self, $envparams) = @_;
  $envparams ||= [];
  my $needs_restart = 0;
  my @restart_opts = ();
  $Monitoring::GLPlugin::plugin->getopts();
  # es kann sein, dass beim aufraeumen zum schluss als erstes objekt
  # das $Monitoring::GLPlugin::plugin geloescht wird. in anderen destruktoren
  # (insb. fuer dbi disconnect) steht dann $self->opts->verbose
  # nicht mehr zur verfuegung bzw. $Monitoring::GLPlugin::plugin->opts ist undef.
  $self->set_variable("verbose", $self->opts->verbose);
  #
  # die gueltigkeit von modes wird bereits hier geprueft und nicht danach
  # in validate_args. (zwischen getopts und validate_args wird
  # normalerweise classify aufgerufen, welches bereits eine verbindung
  # zum endgeraet herstellt. bei falschem mode waere das eine verschwendung
  # bzw. durch den exit3 ein evt. unsauberes beenden der verbindung.
  if ((! grep { $self->opts->mode eq $_ } map { $_->{spec} } @{$Monitoring::GLPlugin::plugin->{modes}}) &&
      (! grep { $self->opts->mode eq $_ } map { defined $_->{alias} ? @{$_->{alias}} : () } @{$Monitoring::GLPlugin::plugin->{modes}})) {
    if ($self->opts->mode !~ /^my-/) {
      printf "UNKNOWN - mode %s\n", $self->opts->mode;
      $self->opts->print_help();
      exit 3;
    }
  }
  if ($self->opts->environment) {
    # wenn die gewuenschten Environmentvariablen sich von den derzeit
    # gesetzten unterscheiden, dann restart. Denn $ENV aendert
    # _nicht_ das Environment des laufenden Prozesses. 
    # $ENV{ZEUGS} = 1 bedeutet lediglich, dass $ENV{ZEUGS} bei weiterer
    # Verwendung 1 ist, bedeutet aber _nicht_, dass diese Variable 
    # im Environment des laufenden Prozesses existiert.
    foreach (keys %{$self->opts->environment}) {
      if ((! $ENV{$_}) || ($ENV{$_} ne $self->opts->environment->{$_})) {
        $needs_restart = 1;
        $ENV{$_} = $self->opts->environment->{$_};
        $self->debug(sprintf "new %s=%s forces restart\n", $_, $ENV{$_});
      }
    }
  }
  if ($self->opts->runas) {
    # exec sudo $0 ... und dann ohne --runas
    $needs_restart = 1;
    # wenn wir environmentvariablen haben, die laut survive_sudo_env als
    # wichtig erachtet werden, dann muessen wir die ueber einen moeglichen
    # sudo-aufruf rueberretten, also in zusaetzliche --environment umwandenln.
    # sudo putzt das Environment naemlich aus.
    foreach my $survive_env (@{$Monitoring::GLPlugin::survive_sudo_env}) {
      if ($ENV{$survive_env} && ! scalar(grep { /^$survive_env=/ }
          keys %{$self->opts->environment})) {
        $self->opts->environment->{$survive_env} = $ENV{$survive_env};
        printf STDERR "add important --environment %s=%s\n",
            $survive_env, $ENV{$survive_env} if $self->opts->verbose >= 2;
        push(@restart_opts, '--environment');
        push(@restart_opts, sprintf '%s=%s',
            $survive_env, $ENV{$survive_env});
      }
    }
  }
  if ($needs_restart) {
    foreach my $option (keys %{$self->opts->all_my_opts}) {
      # der fliegt raus, sonst gehts gleich wieder in needs_restart rein
      next if $option eq "runas";
      foreach my $spec (map { $_->{spec} } @{$Monitoring::GLPlugin::plugin->opts->{_args}}) {
        if ($spec =~ /^(\w+)=(.*)/) {
          if ($1 eq $option && $2 =~ /s%/) {
            foreach (keys %{$self->opts->$option()}) {
              push(@restart_opts, sprintf "--%s", $option);
              push(@restart_opts, sprintf "%s=%s", $_, $self->opts->$option()->{$_});
            }
          } elsif ($1 eq $option) {
            push(@restart_opts, sprintf "--%s", $option);
            push(@restart_opts, sprintf "%s", $self->opts->$option());
          }
        } elsif ($spec eq $option) {
          push(@restart_opts, sprintf "--%s", $option);
        }
      }
    }
    if ($self->opts->runas && ($> == 0)) {
      # Ja, es gibt so Narrische, die gehen mit check_by_ssh als root
      # auf Datenbankmaschinen drauf und lassen dann dort check_oracle_health
      # laufen. Damit OPS$-Anmeldung dann funktioniert, wird mit --runas
      # auf eine andere Kennung umgeschwenkt. Diese Kennung gleich fuer
      # ssh zu verwenden geht aus Sicherheitsgruenden nicht. Narrische halt.
      exec "su", "-c", sprintf("%s %s", $0, join(" ", @restart_opts)), "-", $self->opts->runas;
    } elsif ($self->opts->runas) {
      exec "sudo", "-S", "-u", $self->opts->runas, $0, @restart_opts;
    } else {
      exec $0, @restart_opts;
      # dadurch werden SHLIB oder LD_LIBRARY_PATH sauber gesetzt, damit beim
      # erneuten Start libclntsh.so etc. gefunden werden.
    }
    exit;
  }
  if ($self->opts->shell) {
    # So komme ich bei den Narrischen zu einer root-Shell.
    system("/bin/sh");
  }
}


sub add_ok {
  my ($self, $message) = @_;
  $message ||= $self->{info};
  $self->add_message(OK, $message);
}

sub add_warning {
  my ($self, $message) = @_;
  $message ||= $self->{info};
  $self->add_message(WARNING, $message);
}

sub add_critical {
  my ($self, $message) = @_;
  $message ||= $self->{info};
  $self->add_message(CRITICAL, $message);
}

sub add_unknown {
  my ($self, $message) = @_;
  $message ||= $self->{info};
  $self->add_message(UNKNOWN, $message);
}

sub add_ok_mitigation {
  my ($self, $message) = @_;
  if (defined $self->opts->mitigation()) {
    $self->add_message($self->opts->mitigation(), $message);
  } else {
    $self->add_ok($message);
  }
}

sub add_warning_mitigation {
  my ($self, $message) = @_;
  if (defined $self->opts->mitigation()) {
    $self->add_message($self->opts->mitigation(), $message);
  } else {
    $self->add_warning($message);
  }
}

sub add_critical_mitigation {
  my ($self, $message) = @_;
  if (defined $self->opts->mitigation()) {
    $self->add_message($self->opts->mitigation(), $message);
  } else {
    $self->add_critical($message);
  }
}

sub add_unknown_mitigation {
  my ($self, $message) = @_;
  if (defined $self->opts->mitigation()) {
    $self->add_message($self->opts->mitigation(), $message);
  } else {
    $self->add_unknown($message);
  }
}

sub add_message {
  my ($self, $level, $message) = @_;
  $message ||= $self->{info};
  $Monitoring::GLPlugin::plugin->add_message($level, $message)
      unless $self->is_blacklisted();
  if (exists $self->{failed}) {
    if ($level == UNKNOWN && $self->{failed} == OK) {
      $self->{failed} = $level;
    } elsif ($level > $self->{failed}) {
      $self->{failed} = $level;
    }
  }
}

sub clear_ok {
  my ($self) = @_;
  $self->clear_messages(OK);
}

sub clear_warning {
  my ($self) = @_;
  $self->clear_messages(WARNING);
}

sub clear_critical {
  my ($self) = @_;
  $self->clear_messages(CRITICAL);
}

sub clear_unknown {
  my ($self) = @_;
  $self->clear_messages(UNKNOWN);
}

sub clear_all { # deprecated, use clear_messages
  my ($self) = @_;
  $self->clear_ok();
  $self->clear_warning();
  $self->clear_critical();
  $self->clear_unknown();
}

sub set_level {
  my ($self, $code) = @_;
  $code = (qw(ok warning critical unknown))[$code] if $code =~ /^\d+$/;
  $code = lc $code;
  if (! exists $self->{tmp_level}) {
    $self->{tmp_level} = {
      ok => 0,
      warning => 0,
      critical => 0,
      unknown => 0,
    };
  }
  $self->{tmp_level}->{$code}++;
}

sub get_level {
  my ($self) = @_;
  return OK if ! exists $self->{tmp_level};
  my $code = OK;
  $code ||= CRITICAL if $self->{tmp_level}->{critical};
  $code ||= WARNING  if $self->{tmp_level}->{warning};
  $code ||= UNKNOWN  if $self->{tmp_level}->{unknown};
  return $code;
}

#########################################################
# blacklisting
#
sub blacklist {
  my ($self) = @_;
  $self->{blacklisted} = 1;
}

sub add_blacklist {
  my ($self, $list) = @_;
  $Monitoring::GLPlugin::blacklist = join('/',
      (split('/', $self->opts->blacklist), $list));
}

sub is_blacklisted {
  my ($self) = @_;
  if (! $self->opts->can("blacklist")) {
    return 0;
  }
  if (! exists $self->{blacklisted}) {
    $self->{blacklisted} = 0;
  }
  if (exists $self->{blacklisted} && $self->{blacklisted}) {
    return $self->{blacklisted};
  }
  # FAN:459,203/TEMP:102229/ENVSUBSYSTEM
  # FAN_459,FAN_203,TEMP_102229,ENVSUBSYSTEM
  if ($self->opts->blacklist =~ /_/) {
    foreach my $bl_item (split(/,/, $self->opts->blacklist)) {
      if ($bl_item eq $self->internal_name()) {
        $self->{blacklisted} = 1;
      }
    }
  } else {
    foreach my $bl_items (split(/\//, $self->opts->blacklist)) {
      if ($bl_items =~ /^(\w+):([\:\d\-,]+)$/) {
        my $bl_type = $1;
        my $bl_names = $2;
        foreach my $bl_name (split(/,/, $bl_names)) {
          if ($bl_type."_".$bl_name eq $self->internal_name()) {
            $self->{blacklisted} = 1;
          }
        }
      } elsif ($bl_items =~ /^(\w+)$/) {
        if ($bl_items eq $self->internal_name()) {
          $self->{blacklisted} = 1;
        }
      }
    }
  }
  return $self->{blacklisted};
}

#########################################################
# additional info
#
sub add_info {
  my ($self, $info) = @_;
  $info = $self->is_blacklisted() ? $info.' (blacklisted)' : $info;
  $self->{info} = $info;
  push(@{$Monitoring::GLPlugin::info}, $info);
}

sub annotate_info {
  my ($self, $annotation) = @_;
  my $lastinfo = pop(@{$Monitoring::GLPlugin::info});
  $lastinfo .= sprintf ' (%s)', $annotation;
  $self->{info} = $lastinfo;
  push(@{$Monitoring::GLPlugin::info}, $lastinfo);
}

sub add_extendedinfo {  # deprecated
  my ($self, $info) = @_;
  $self->{extendedinfo} = $info;
  return if ! $self->opts->extendedinfo;
  push(@{$Monitoring::GLPlugin::extendedinfo}, $info);
}

sub get_info {
  my ($self, $separator) = @_;
  $separator ||= ' ';
  return join($separator , @{$Monitoring::GLPlugin::info});
}

sub get_last_info {
  my ($self) = @_;
  return pop(@{$Monitoring::GLPlugin::info});
}

sub get_extendedinfo {
  my ($self, $separator) = @_;
  $separator ||= ' ';
  return join($separator, @{$Monitoring::GLPlugin::extendedinfo});
}

sub add_summary {  # deprecated
  my ($self, $summary) = @_;
  push(@{$Monitoring::GLPlugin::summary}, $summary);
}

sub get_summary {
  my ($self) = @_;
  return join(', ', @{$Monitoring::GLPlugin::summary});
}

#########################################################
# persistency
#
sub valdiff {
  my ($self, $pparams, @keys) = @_;
  my %params = %{$pparams};
  my $now = time;
  my $newest_history_set = {};
  $params{freeze} = 0 if ! $params{freeze};
  my $mode = "normal";
  if ($self->opts->lookback && $self->opts->lookback == 99999 && $params{freeze} == 0) {
    $mode = "lookback_freeze_chill";
  } elsif ($self->opts->lookback && $self->opts->lookback == 99999 && $params{freeze} == 1) {
    $mode = "lookback_freeze_shockfrost";
  } elsif ($self->opts->lookback && $self->opts->lookback == 99999 && $params{freeze} == 2) {
    $mode = "lookback_freeze_defrost";
  } elsif ($self->opts->lookback) {
    $mode = "lookback";
  }
  # lookback=99999, freeze=0(default)
  #  nimm den letzten lauf und schreib ihn nach {cold}
  #  vergleich dann
  #    wenn es frozen gibt, vergleich frozen und den letzten lauf
  #    sonst den letzten lauf und den aktuellen lauf
  # lookback=99999, freeze=1
  #  wird dann aufgerufen,wenn nach dem freeze=0 ein problem festgestellt wurde
  #     (also als 2.valdiff hinterher)
  #  schreib cold nach frozen
  # lookback=99999, freeze=2
  #  wird dann aufgerufen,wenn nach dem freeze=0 wieder alles ok ist
  #     (also als 2.valdiff hinterher)
  #  loescht frozen
  #
  my $last_values = $self->load_state(%params) || eval {
    my $empty_events = {};
    foreach (@keys) {
      if (ref($self->{$_}) eq "ARRAY") {
        $empty_events->{$_} = [];
      } else {
        $empty_events->{$_} = 0;
      }
    }
    $empty_events->{timestamp} = 0;
    if ($mode eq "lookback") {
      $empty_events->{lookback_history} = {};
    } elsif ($mode eq "lookback_freeze_chill") {
      $empty_events->{cold} = {};
      $empty_events->{frozen} = {};
    }
    $empty_events;
  };
  $self->{'delta_timestamp'} = $now - $last_values->{timestamp};
  foreach (@keys) {
    if ($mode eq "lookback_freeze_chill") {
      # die werte vom letzten lauf wegsichern.
      # vielleicht gibts gleich einen freeze=1, dann muessen die eingefroren werden
      if (exists $last_values->{$_}) {
        if (ref($self->{$_}) eq "ARRAY") {
          $last_values->{cold}->{$_} = [];
          foreach my $value (@{$last_values->{$_}}) {
            push(@{$last_values->{cold}->{$_}}, $value);
          }
        } else {
          $last_values->{cold}->{$_} = $last_values->{$_};
        }
      } else {
        if (ref($self->{$_}) eq "ARRAY") {
          $last_values->{cold}->{$_} = [];
        } else {
          $last_values->{cold}->{$_} = 0;
        }
      }
      # es wird so getan, als sei der frozen wert vom letzten lauf
      if (exists $last_values->{frozen}->{$_}) {
        if (ref($self->{$_}) eq "ARRAY") {
          $last_values->{$_} = [];
          foreach my $value (@{$last_values->{frozen}->{$_}}) {
            push(@{$last_values->{$_}}, $value);
          }
        } else {
          $last_values->{$_} = $last_values->{frozen}->{$_};
        }
      }
    } elsif ($mode eq "lookback") {
      # find a last_value in the history which fits lookback best
      # and overwrite $last_values->{$_} with historic data
      if (exists $last_values->{lookback_history}->{$_}) {
        foreach my $date (sort {$a <=> $b} keys %{$last_values->{lookback_history}->{$_}}) {
            $newest_history_set->{$_} = $last_values->{lookback_history}->{$_}->{$date};
            $newest_history_set->{timestamp} = $date;
        }
        foreach my $date (sort {$a <=> $b} keys %{$last_values->{lookback_history}->{$_}}) {
          if ($date >= ($now - $self->opts->lookback)) {
            $last_values->{$_} = $last_values->{lookback_history}->{$_}->{$date};
            $last_values->{timestamp} = $date;
            $self->{'delta_timestamp'} = $now - $last_values->{timestamp};
            if (ref($last_values->{$_}) eq "ARRAY") {
              $self->debug(sprintf "oldest value of %s within lookback is size %s (age %d)",
                  $_, scalar(@{$last_values->{$_}}), $now - $date);
            } else {
              $self->debug(sprintf "oldest value of %s within lookback is %s (age %d)",
                  $_, $last_values->{$_}, $now - $date);
            }
            last;
          } else {
            $self->debug(sprintf "deprecate %s of age %d", $_, time - $date);
            delete $last_values->{lookback_history}->{$_}->{$date};
          }
        }
      }
    }
    if ($mode eq "normal" || $mode eq "lookback" || $mode eq "lookback_freeze_chill") {
      if ($self->{$_} =~ /^\d+\.*\d*$/) {
        $last_values->{$_} = 0 if ! exists $last_values->{$_};
        if ($self->{$_} >= $last_values->{$_}) {
          $self->{'delta_'.$_} = $self->{$_} - $last_values->{$_};
        } elsif ($self->{$_} eq $last_values->{$_}) {
          # dawischt! in einem fall wurde 131071.999023438 >= 131071.999023438 da oben nicht erkannt
          # subtrahieren ging auch daneben, weil ein winziger negativer wert rauskam.
          $self->{'delta_'.$_} = 0;
        } else {
          if ($mode =~ /lookback_freeze/) {
            # hier koennen delta-werte auch negativ sein, wenn z.b. peers verschwinden
            $self->{'delta_'.$_} = $self->{$_} - $last_values->{$_};
          } elsif (exists $params{lastarray}) {
            $self->{'delta_'.$_} = $self->{$_} - $last_values->{$_};
          } else {
            # vermutlich db restart und zaehler alle auf null
            $self->{'delta_'.$_} = $self->{$_};
          }
        }
        $self->debug(sprintf "delta_%s %f", $_, $self->{'delta_'.$_});
        $self->{$_.'_per_sec'} = $self->{'delta_timestamp'} ?
            $self->{'delta_'.$_} / $self->{'delta_timestamp'} : 0;
      } elsif (ref($self->{$_}) eq "ARRAY") {
        if ((! exists $last_values->{$_} || ! defined $last_values->{$_}) && exists $params{lastarray}) {
          # innerhalb der lookback-zeit wurde nichts in der lookback_history
          # gefunden. allenfalls irgendwas aelteres. normalerweise
          # wuerde jetzt das array als [] initialisiert.
          # d.h. es wuerde ein delta geben, @found s.u.
          # wenn man das nicht will, sondern einfach aktuelles array mit
          # dem array des letzten laufs vergleichen will, setzt man lastarray
          $last_values->{$_} = %{$newest_history_set} ?
              $newest_history_set->{$_} : []
        } elsif ((! exists $last_values->{$_} || ! defined $last_values->{$_}) && ! exists $params{lastarray}) {
          $last_values->{$_} = [] if ! exists $last_values->{$_};
        } elsif (exists $last_values->{$_} && ! defined $last_values->{$_}) {
          # $_ kann es auch ausserhalb des lookback_history-keys als normalen
          # key geben. der zeigt normalerweise auf den entspr. letzten
          # lookback_history eintrag. wurde der wegen ueberalterung abgeschnitten
          # ist der hier auch undef.
          $last_values->{$_} = %{$newest_history_set} ?
              $newest_history_set->{$_} : []
        }
        my %saved = map { $_ => 1 } @{$last_values->{$_}};
        my %current = map { $_ => 1 } @{$self->{$_}};
        my @found = grep(!defined $saved{$_}, @{$self->{$_}});
        my @lost = grep(!defined $current{$_}, @{$last_values->{$_}});
        $self->{'delta_found_'.$_} = \@found;
        $self->{'delta_lost_'.$_} = \@lost;
      }
    }
  }
  $params{save} = eval {
    my $empty_events = {};
    foreach (@keys) {
      $empty_events->{$_} = $self->{$_};
      if ($mode =~ /lookback_freeze/) {
        if (exists $last_values->{frozen}->{$_}) {
          if (ref($last_values->{frozen}->{$_}) eq "ARRAY") {
            @{$empty_events->{cold}->{$_}} = @{$last_values->{frozen}->{$_}};
          } else {
            $empty_events->{cold}->{$_} = $last_values->{frozen}->{$_};
          }
        } else {
          if (ref($last_values->{cold}->{$_}) eq "ARRAY") {
            @{$empty_events->{cold}->{$_}} = @{$last_values->{cold}->{$_}};
          } else {
            $empty_events->{cold}->{$_} = $last_values->{cold}->{$_};
          }
        }
        $empty_events->{cold}->{timestamp} = $last_values->{cold}->{timestamp};
      }
      if ($mode eq "lookback_freeze_shockfrost") {
        if (ref($empty_events->{cold}->{$_}) eq "ARRAY") {
          @{$empty_events->{frozen}->{$_}} = @{$empty_events->{cold}->{$_}};
        } else {
          $empty_events->{frozen}->{$_} = $empty_events->{cold}->{$_};
        }
        $empty_events->{frozen}->{timestamp} = $now;
      }
    }
    $empty_events->{timestamp} = $now;
    if ($mode eq "lookback") {
      $empty_events->{lookback_history} = $last_values->{lookback_history};
      foreach (@keys) {
        if (ref($self->{$_}) eq "ARRAY") {
          @{$empty_events->{lookback_history}->{$_}->{$now}} = @{$self->{$_}};
        } else {
          $empty_events->{lookback_history}->{$_}->{$now} = $self->{$_};
        }
      }
    }
    if ($mode eq "lookback_freeze_defrost") {
      delete $empty_events->{freeze};
    }
    $empty_events;
  };
  $self->save_state(%params);
}

sub create_statefilesdir {
  my ($self) = @_;
  if (! -d $self->statefilesdir()) {
    eval {
      use File::Path;
      mkpath $self->statefilesdir();
    };
    if ($@ || ! -w $self->statefilesdir()) {
      $self->add_message(UNKNOWN,
        sprintf "cannot create status dir %s! check your filesystem (permissions/usage/integrity) and disk devices", $self->statefilesdir());
    }
  } elsif (! -w $self->statefilesdir()) {
    $self->add_message(UNKNOWN,
        sprintf "cannot write status dir %s! check your filesystem (permissions/usage/integrity) and disk devices", $self->statefilesdir());
  }
}

sub create_statefile {
  my ($self, %params) = @_;
  my $extension = "";
  $extension .= $params{name} ? '_'.$params{name} : '';
  $extension =~ s/\//_/g;
  $extension =~ s/\(/_/g;
  $extension =~ s/\)/_/g;
  $extension =~ s/\*/_/g;
  $extension =~ s/\s/_/g;
  return sprintf "%s/%s%s", $self->statefilesdir(),
      $self->clean_path($self->mode), $self->clean_path(lc $extension);
}

sub clean_path {
  my ($self, $path) = @_;
  if ($^O =~ /MSWin/) {
    $path =~ s/:/_/g;
  }
  return $path;
}

sub schimpf {
  my ($self) = @_;
  printf "statefilesdir %s is not writable.\nYou didn't run this plugin as root, didn't you?\n", $self->statefilesdir();
}

# $self->protect_value('1.1-flat_index', 'cpu_busy', 'percent');
sub protect_value {
  my ($self, $ident, $key, $validfunc) = @_;
  if (ref($validfunc) ne "CODE" && $validfunc eq "percent") {
    $validfunc = sub {
      my $value = shift;
      return 0 if $value !~ /^[-+]?([0-9]+(\.[0-9]+)?|\.[0-9]+)$/;
      return ($value < 0 || $value > 100) ? 0 : 1;
    };
  } elsif (ref($validfunc) ne "CODE" && $validfunc eq "positive") {
    $validfunc = sub {
      my $value = shift;
      return 0 if $value !~ /^[-+]?([0-9]+(\.[0-9]+)?|\.[0-9]+)$/;
      return ($value < 0) ? 0 : 1;
    };
  }
  if (&$validfunc($self->{$key})) {
    $self->save_state(name => 'protect_'.$ident.'_'.$key, save => {
        $key => $self->{$key},
        exception => 0,
    });
  } else {
    # if the device gives us an clearly wrong value, simply use the last value.
    my $laststate = $self->load_state(name => 'protect_'.$ident.'_'.$key);
    $self->debug(sprintf "self->{%s} is %s and invalid for the %dth time",
        $key, $self->{$key}, $laststate->{exception} + 1);
    if ($laststate->{exception} <= 5) {
      # but only 5 times.
      # if the error persists, somebody has to check the device.
      $self->{$key} = $laststate->{$key};
    }
    $self->save_state(name => 'protect_'.$ident.'_'.$key, save => {
        $key => $laststate->{$key},
        exception => ++$laststate->{exception},
    });
  }
}

sub save_state {
  my ($self, %params) = @_;
  $self->create_statefilesdir();
  my $statefile = $self->create_statefile(%params);
  my $tmpfile = $self->statefilesdir().'/check__health_tmp_'.$$;
  if ((ref($params{save}) eq "HASH") && exists $params{save}->{timestamp}) {
    $params{save}->{localtime} = scalar localtime $params{save}->{timestamp};
  }
  my $seekfh = IO::File->new();
  if ($seekfh->open($tmpfile, "w")) {
    $seekfh->printf("%s", Data::Dumper::Dumper($params{save}));
    $seekfh->flush();
    $seekfh->close();
    $self->debug(sprintf "saved %s to %s",
        Data::Dumper::Dumper($params{save}), $statefile);
  }
  if (! rename $tmpfile, $statefile) {
    $self->add_message(UNKNOWN,
        sprintf "cannot write status file %s! check your filesystem (permissions/usage/integrity) and disk devices", $statefile);
  }
}

sub load_state {
  my ($self, %params) = @_;
  my $statefile = $self->create_statefile(%params);
  if ( -f $statefile) {
    our $VAR1;
    eval {
      delete $INC{$statefile} if exists $INC{$statefile}; # else unit tests fail
      require $statefile;
    };
    if($@) {
      printf "rumms\n";
    }
    $self->debug(sprintf "load %s from %s", Data::Dumper::Dumper($VAR1), $statefile);
    return $VAR1;
  } else {
    return undef;
  }
}

#########################################################
# daemon mode
#
sub check_pidfile {
  my ($self) = @_;
  my $fh = IO::File->new();
  if ($fh->open($self->{pidfile}, "r")) {
    my $pid = $fh->getline();
    $fh->close();
    if (! $pid) {
      $self->debug("Found pidfile %s with no valid pid. Exiting.",
          $self->{pidfile});
      return 0;
    } else {
      $self->debug("Found pidfile %s with pid %d", $self->{pidfile}, $pid);
      kill 0, $pid;
      if ($! == Errno::ESRCH) {
        $self->debug("This pidfile is stale. Writing a new one");
        $self->write_pidfile();
        return 1;
      } else {
        $self->debug("This pidfile is held by a running process. Exiting");
        return 0;
      }
    }
  } else {
    $self->debug("Found no pidfile. Writing a new one");
    $self->write_pidfile();
    return 1;
  }
}

sub write_pidfile {
  my ($self) = @_;
  if (! -d dirname($self->{pidfile})) {
    eval "require File::Path;";
    if (defined(&File::Path::mkpath)) {
      import File::Path;
      eval { mkpath(dirname($self->{pidfile})); };
    } else {
      my @dirs = ();
      map {
          push @dirs, $_;
          mkdir(join('/', @dirs))
              if join('/', @dirs) && ! -d join('/', @dirs);
      } split(/\//, dirname($self->{pidfile}));
    }
  }
  my $fh = IO::File->new();
  $fh->autoflush(1);
  if ($fh->open($self->{pidfile}, "w")) {
    $fh->printf("%s", $$);
    $fh->close();
  } else {
    $self->debug("Could not write pidfile %s", $self->{pidfile});
    die "pid file could not be written";
  }
}

sub system_vartmpdir {
  my ($self) = @_;
  if ($^O =~ /MSWin/) {
    return $self->system_tmpdir();
  } else {
    return "/var/tmp/".$Monitoring::GLPlugin::pluginname;
  }
}

sub system_tmpdir {
  my ($self) = @_;
  if ($^O =~ /MSWin/) {
    return $ENV{TEMP} if defined $ENV{TEMP};
    return $ENV{TMP} if defined $ENV{TMP};
    return File::Spec->catfile($ENV{windir}, 'Temp')
        if defined $ENV{windir};
    return 'C:\Temp';
  } else {
    return "/tmp";
  }
}

sub convert_scientific_numbers {
  my ($self, $n) = @_;
  # mostly used to convert numbers in scientific notation
  if ($n =~ /^\s*\d+\s*$/) {
    return $n;
  } elsif ($n =~ /^\s*([-+]?)(\d*[\.,]*\d*)[eE]{1}([-+]?)(\d+)\s*$/) {
    my ($vor, $num, $sign, $exp) = ($1, $2, $3, $4);
    $n =~ s/E/e/g;
    $n =~ s/,/\./g;
    $num =~ s/,/\./g;
    my $sig = $sign eq '-' ? "." . ($exp - 1 + length $num) : '';
    my $dec = sprintf "%${sig}f", $n;
    $dec =~ s/\.[0]+$//g;
    return $dec;
  } elsif ($n =~ /^\s*([-+]?)(\d+)[\.,]*(\d*)\s*$/) {
    return $1.$2.".".$3;
  } elsif ($n =~ /^\s*(.*?)\s*$/) {
    return $1;
  } else {
    return $n;
  }
}

sub compatibility_methods {
  my ($self) = @_;
  # add_perfdata
  # add_message
  # nagios_exit
  # ->{warningrange}
  # ->{criticalrange}
  # ...
  $self->{warningrange} = ($self->get_thresholds())[0];
  $self->{criticalrange} = ($self->get_thresholds())[1];
  my $old_init = $self->can('init');
  my %params = (
    'mode' => join('::', split(/-/, $self->opts->mode)),
    'name' => $self->opts->name,
    'name2' => $self->opts->name2,
  );
  {
    no strict 'refs';
    no warnings 'redefine';
    *{ref($self).'::init'} = sub {
      $self->$old_init(%params);
      $self->nagios(%params);
    };
    *{ref($self).'::add_nagios'} = \&{"Monitoring::GLPlugin::add_message"};
    *{ref($self).'::add_nagios_ok'} = \&{"Monitoring::GLPlugin::add_ok"};
    *{ref($self).'::add_nagios_warning'} = \&{"Monitoring::GLPlugin::add_warning"};
    *{ref($self).'::add_nagios_critical'} = \&{"Monitoring::GLPlugin::add_critical"};
    *{ref($self).'::add_nagios_unknown'} = \&{"Monitoring::GLPlugin::add_unknown"};
    *{ref($self).'::add_perfdata'} = sub {
      my $self = shift;
      my $message = shift;
      foreach my $perfdata (split(/\s+/, $message)) {
      my ($label, $perfstr) = split(/=/, $perfdata);
      my ($value, $warn, $crit, $min, $max) = split(/;/, $perfstr);
      $value =~ /^([\d\.\-\+]+)(.*)$/;
      $value = $1;
      my $uom = $2;
      $Monitoring::GLPlugin::plugin->add_perfdata(
        label => $label,
        value => $value,
        uom => $uom,
        warn => $warn,
        crit => $crit,
        min => $min,
        max => $max,
      );
      }
    };
    *{ref($self).'::check_thresholds'} = sub {
      my $self = shift;
      my $value = shift;
      my $defaultwarningrange = shift;
      my $defaultcriticalrange = shift;
      $Monitoring::GLPlugin::plugin->set_thresholds(
          metric => 'default',
          warning => $defaultwarningrange,
          critical => $defaultcriticalrange,
      );
      $self->{warningrange} = ($self->get_thresholds())[0];
      $self->{criticalrange} = ($self->get_thresholds())[1];
      return $Monitoring::GLPlugin::plugin->check_thresholds(
          metric => 'default',
          value => $value,
          warning => $defaultwarningrange,
          critical => $defaultcriticalrange,
      );
    };
  }
}


sub AUTOLOAD {
  my ($self, @params) = @_;
  return if ($AUTOLOAD =~ /DESTROY/);
  $self->debug("AUTOLOAD %s\n", $AUTOLOAD)
        if $self->opts->verbose >= 2;
  if ($AUTOLOAD =~ /^(.*)::analyze_and_check_(.*)_subsystem$/) {
    my $class = $1;
    my $subsystem = $2;
    my $analyze = sprintf "analyze_%s_subsystem", $subsystem;
    my $check = sprintf "check_%s_subsystem", $subsystem;
    if (@params) {
      # analyzer class
      my $subsystem_class = shift @params;
      $self->{components}->{$subsystem.'_subsystem'} = $subsystem_class->new();
      $self->debug(sprintf "\$self->{components}->{%s_subsystem} = %s->new()",
          $subsystem, $subsystem_class);
    } else {
      $self->$analyze();
      $self->debug("call %s()", $analyze);
    }
    $self->$check();
  } elsif ($AUTOLOAD =~ /^(.*)::check_(.*)_subsystem$/) {
    my $class = $1;
    my $subsystem = sprintf "%s_subsystem", $2;
    $self->{components}->{$subsystem}->check();
    $self->{components}->{$subsystem}->dump()
        if $self->opts->verbose >= 2;
  } elsif ($AUTOLOAD =~ /^.*::(status_code|check_messages|nagios_exit|html_string|perfdata_string|selected_perfdata|check_thresholds|get_thresholds|opts|pandora_string)$/) {
    return $Monitoring::GLPlugin::plugin->$1(@params);
  } elsif ($AUTOLOAD =~ /^.*::(reduce_messages|reduce_messages_short|clear_messages|suppress_messages|add_html|add_perfdata|override_opt|create_opt|set_thresholds|force_thresholds|add_pandora)$/) {
    $Monitoring::GLPlugin::plugin->$1(@params);
  } elsif ($AUTOLOAD =~ /^.*::mod_arg_(.*)$/) {
    return $Monitoring::GLPlugin::plugin->mod_arg($1, @params);
  } else {
    $self->debug("AUTOLOAD: class %s has no method %s\n",
        ref($self), $AUTOLOAD);
  }
}



package Monitoring::GLPlugin::Item;
our @ISA = qw(Monitoring::GLPlugin);

use strict;

sub new {
  my ($class, %params) = @_;
  my $self = {
    blacklisted => 0,
    info => undef,
    extendedinfo => undef,
  };
  bless $self, $class;
  $self->init(%params);
  return $self;
}

sub check {
  my ($self, $lists) = @_;
  my @lists = $lists ? @{$lists} : grep { ref($self->{$_}) eq "ARRAY" } keys %{$self};
  foreach my $list (@lists) {
    $self->add_info('checking '.$list);
    foreach my $element (@{$self->{$list}}) {
      $element->blacklist() if $self->is_blacklisted();
      $element->check();
    }
  }
}



package Monitoring::GLPlugin::TableItem;
our @ISA = qw(Monitoring::GLPlugin::Item);

use strict;

sub new {
  my ($class, %params) = @_;
  my $self = {};
  bless $self, $class;
  foreach (keys %params) {
    $self->{$_} = $params{$_};
  }
  if ($self->can("finish")) {
    $self->finish(%params);
  }
  return $self;
}

sub check {
  my ($self) = @_;
  # some tableitems are not checkable, they are only used to enhance other
  # items (e.g. sensorthresholds enhance sensors)
  # normal tableitems should have their own check-method
}



package Monitoring::GLPlugin::SNMP::CSF;
#our @ISA = qw(Monitoring::GLPlugin::SNMP);
use Digest::MD5 qw(md5_hex);
use strict;

sub create_statefile {
  my ($self, %params) = @_;
  my $extension = "";
  $extension .= $params{name} ? '_'.$params{name} : '';
  if ($self->opts->community) {
    $extension .= md5_hex($self->opts->community);
  }
  $extension =~ s/\//_/g;
  $extension =~ s/\(/_/g;
  $extension =~ s/\)/_/g;
  $extension =~ s/\*/_/g;
  $extension =~ s/\s/_/g;
  if ($self->opts->snmpwalk && ! $self->opts->hostname) {
    return sprintf "%s/%s_%s%s", $self->statefilesdir(),
        'snmpwalk.file'.md5_hex($self->opts->snmpwalk),
        $self->clean_path($self->mode), $self->clean_path(lc $extension);
  } elsif ($self->opts->snmpwalk && $self->opts->hostname eq "walkhost") {
    return sprintf "%s/%s_%s%s", $self->statefilesdir(),
        'snmpwalk.file'.md5_hex($self->opts->snmpwalk),
        $self->clean_path($self->mode), $self->clean_path(lc $extension);
  } else {
    return sprintf "%s/%s_%s%s", $self->statefilesdir(),
        $self->opts->hostname,
        $self->clean_path($self->mode), $self->clean_path(lc $extension);
  }
}



package Monitoring::GLPlugin::SNMP::Item;
our @ISA = qw(Monitoring::GLPlugin::SNMP::CSF Monitoring::GLPlugin::Item Monitoring::GLPlugin::SNMP);
use strict;



package Monitoring::GLPlugin::SNMP::TableItem;
our @ISA = qw(Monitoring::GLPlugin::SNMP::CSF Monitoring::GLPlugin::TableItem Monitoring::GLPlugin::SNMP);
use strict;

sub ensure_index {
  my ($self, $key) = @_;
  $self->{$key} ||= $self->{flat_indices};
}

sub unhex_ip {
  my ($self, $value) = @_;
  if ($value && $value =~ /^0x(\w{8})/) {
    $value = join(".", unpack "C*", pack "H*", $1);
  } elsif ($value && $value =~ /^0x(\w{2} \w{2} \w{2} \w{2})/) {
    $value = $1;
    $value =~ s/ //g;
    $value = join(".", unpack "C*", pack "H*", $value);
  } elsif ($value && $value =~ /^([A-Z0-9]{2} [A-Z0-9]{2} [A-Z0-9]{2} [A-Z0-9]{2})/i) {
    $value = $1;
    $value =~ s/ //g;
    $value = join(".", unpack "C*", pack "H*", $value);
  } elsif ($value && unpack("H8", $value) =~ /(\w{2})(\w{2})(\w{2})(\w{2})/) {
    $value = join(".", map { hex($_) } ($1, $2, $3, $4));
  }
  return $value;
}

sub unhex_mac {
  my ($self, $value) = @_;
  if ($value && $value =~ /^0x(\w{12})/) {
    $value = join(".", unpack "C*", pack "H*", $1);
  } elsif ($value && $value =~ /^0x(\w{2}\s*\w{2}\s*\w{2}\s*\w{2}\s*\w{2}\s*\w{2})/) {
    $value = $1;
    $value =~ s/ //g;
    $value = join(":", unpack "C*", pack "H*", $value);
  } elsif ($value && unpack("H12", $value) =~ /(\w{2})(\w{2})(\w{2})(\w{2})(\w{2})(\w{2})/) {
    $value = join(":", map { hex($_) } ($1, $2, $3, $4, $5, $6));
  }
  return $value;
}

sub unhex_octet_string {
  my ($self, $value) = @_;
  my $original = $value;
  $value =~ s/ //g;
  if ($value && $value =~ /^0x([0-9a-zA-Z]+)$/) {
    $value = join("", unpack "A*", pack "H*", $1);
  } elsif ($value && $value =~ /^([0-9a-zA-Z]+)$/) {
    $value = join("", unpack "A*", pack "H*", $1);
  } else {
    $value = $original;
  }
  return $value;
}



package Monitoring::GLPlugin::SNMP;
our @ISA = qw(Monitoring::GLPlugin);
# ABSTRACT: helper functions to build a snmp-based monitoring plugin

use strict;
use File::Basename;
use Digest::MD5 qw(md5_hex);
use Module::Load;
use AutoLoader;
our $AUTOLOAD;

use constant { OK => 0, WARNING => 1, CRITICAL => 2, UNKNOWN => 3 };

{
  our $mode = undef;
  our $plugin = undef;
  our $blacklist = undef;
  our $session = undef;
  our $rawdata = {};
  our $tablecache = {};
  our $info = [];
  our $extendedinfo = [];
  our $summary = [];
  our $oidtrace = [];
  our $uptime = 0;
}

sub new {
  my ($class, %params) = @_;
  require Monitoring::GLPlugin
      if ! grep /BEGIN/, keys %Monitoring::GLPlugin::;
  require Monitoring::GLPlugin::SNMP::MibsAndOids
      if ! grep /BEGIN/, keys %Monitoring::GLPlugin::SNMP::MibsAndOids::;
  require Monitoring::GLPlugin::SNMP::CSF
      if ! grep /BEGIN/, keys %Monitoring::GLPlugin::SNMP::CSF::;
  require Monitoring::GLPlugin::SNMP::Item
      if ! grep /BEGIN/, keys %Monitoring::GLPlugin::SNMP::Item::;
  require Monitoring::GLPlugin::SNMP::TableItem
      if ! grep /BEGIN/, keys %Monitoring::GLPlugin::SNMP::TableItem::;
  my $self = Monitoring::GLPlugin->new(%params);
  bless $self, $class;
  return $self;
}

sub v2tov3 {
  my ($self) = @_;
  if ($self->opts->community && $self->opts->community =~ /^snmpv3(.)(.+)/) {
    my $separator = $1;
    my ($authprotocol, $authpassword, $privprotocol, $privpassword,
        $username, $contextengineid, $contextname) = split(/$separator/, $2);
    $self->override_opt('authprotocol', $authprotocol) 
        if defined($authprotocol) && $authprotocol;
    $self->override_opt('authpassword', $authpassword) 
        if defined($authpassword) && $authpassword;
    $self->override_opt('privprotocol', $privprotocol) 
        if defined($privprotocol) && $privprotocol;
    $self->override_opt('privpassword', $privpassword) 
        if defined($privpassword) && $privpassword;
    $self->override_opt('username', $username) 
        if defined($username) && $username;
    $self->override_opt('contextengineid', $contextengineid) 
        if defined($contextengineid) && $contextengineid;
    $self->override_opt('contextname', $contextname) 
        if defined($contextname) && $contextname;
    $self->override_opt('protocol', '3') ;
  }
  if (($self->opts->authpassword || $self->opts->authprotocol ||
      $self->opts->privpassword || $self->opts->privprotocol) && 
      ! $self->opts->protocol eq '3') {
    $self->override_opt('protocol', '3') ;
  }
}

sub add_snmp_modes {
  my ($self) = @_;
  $self->add_mode(
      internal => 'device::uptime',
      spec => 'uptime',
      alias => undef,
      help => 'Check the uptime of the device',
  );
  $self->add_mode(
      internal => 'device::walk',
      spec => 'walk',
      alias => undef,
      help => 'Show snmpwalk command with the oids necessary for a simulation',
  );
  $self->add_mode(
      internal => 'device::supportedmibs',
      spec => 'supportedmibs',
      alias => undef,
      help => 'Shows the names of the mibs which this devices has implemented (only lausser may run this command)',
  );
}

sub add_snmp_args {
  my ($self) = @_;
  $self->add_arg(
      spec => 'hostname|H=s',
      help => '--hostname
   Hostname or IP-address of the switch or router',
      required => 0,
      env => 'HOSTNAME',
  );
  $self->add_arg(
      spec => 'port=i',
      help => '--port
   The SNMP port to use (default: 161)',
      required => 0,
      default => 161,
  );
  $self->add_arg(
      spec => 'domain=s',
      help => '--domain
   The transport domain to use (default: udp/ipv4, other possible values: udp6, udp/ipv6, tcp, tcp4, tcp/ipv4, tcp6, tcp/ipv6)',
      required => 0,
      default => 'udp',
  );
  $self->add_arg(
      spec => 'protocol|P=s',
      help => '--protocol
   The SNMP protocol to use (default: 2c, other possibilities: 1,3)',
      required => 0,
      default => '2c',
  );
  $self->add_arg(
      spec => 'community|C=s',
      help => '--community
   SNMP community of the server (SNMP v1/2 only)',
      required => 0,
      default => 'public',
  );
  $self->add_arg(
      spec => 'username:s',
      help => '--username
   The securityName for the USM security model (SNMPv3 only)',
      required => 0,
  );
  $self->add_arg(
      spec => 'authpassword:s',
      help => '--authpassword
   The authentication password for SNMPv3',
      required => 0,
  );
  $self->add_arg(
      spec => 'authprotocol:s',
      help => '--authprotocol
   The authentication protocol for SNMPv3 (md5|sha)',
      required => 0,
  );
  $self->add_arg(
      spec => 'privpassword:s',
      help => '--privpassword
   The password for authPriv security level',
      required => 0,
  );
  $self->add_arg(
      spec => 'privprotocol=s',
      help => '--privprotocol
   The private protocol for SNMPv3 (des|aes|aes128|3des|3desde)',
      required => 0,
  );
  $self->add_arg(
      spec => 'contextengineid=s',
      help => '--contextengineid
   The context engine id for SNMPv3 (10 to 64 hex characters)',
      required => 0,
  );
  $self->add_arg(
      spec => 'contextname=s',
      help => '--contextname
   The context name for SNMPv3 (empty represents the "default" context)',
      required => 0,
  );
  $self->add_arg(
      spec => 'community2=s',
      help => '--community2
   SNMP community which can be used to switch the context during runtime',
      required => 0,
  );
  $self->add_arg(
      spec => 'snmpwalk=s',
      help => '--snmpwalk
   A file with the output of a snmpwalk (used for simulation)
   Use it instead of --hostname',
      required => 0,
      env => 'SNMPWALK',
  );
  $self->add_arg(
      spec => 'servertype=s',
      help => '--servertype
     The type of the network device: cisco (default). Use it if auto-detection
     is not possible',
      required => 0,
  );
  $self->add_arg(
      spec => 'oids=s',
      help => '--oids
   A list of oids which are downloaded and written to a cache file.
   Use it together with --mode oidcache',
      required => 0,
  );
  $self->add_arg(
      spec => 'offline:i',
      help => '--offline
   The maximum number of seconds since the last update of cache file before
   it is considered too old',
      required => 0,
      env => 'OFFLINE',
  );
}

sub validate_args {
  my ($self) = @_;
  $self->SUPER::validate_args();
  if ($self->opts->mode eq 'walk') {
    if ($self->opts->snmpwalk && $self->opts->hostname) {
      if ($self->check_messages == CRITICAL) {
        # gemecker vom super-validierer, der sicherstellt, dass die datei
        # snmpwalk existiert. in diesem fall wird sie aber erst neu angelegt,
        # also schnauze.
        my ($code, $message) = $self->check_messages;
        if ($message eq sprintf("file %s not found", $self->opts->snmpwalk)) {
          $self->clear_critical;
        }
      }
      # snmp agent wird abgefragt, die ergebnisse landen in einem file
      # opts->snmpwalk ist der filename. da sich die ganzen get_snmp_table/object-aufrufe
      # an das walkfile statt an den agenten halten wuerden, muss opts->snmpwalk geloescht
      # werden. stattdessen wird opts->snmpdump als traeger des dateinamens mitgegeben.
      # nur sinnvoll mit mode=walk
      $self->create_opt('snmpdump');
      $self->override_opt('snmpdump', $self->opts->snmpwalk);
      $self->override_opt('snmpwalk', undef);
    } elsif (! $self->opts->snmpwalk && $self->opts->hostname && $self->opts->mode eq 'walk') {   
      # snmp agent wird abgefragt, die ergebnisse landen in einem file, dessen name
      # nicht vorgegeben ist
      $self->create_opt('snmpdump');
    }
  } else {    
    if ($self->opts->snmpwalk && ! $self->opts->hostname) {
      # normaler aufruf, mode != walk, oid-quelle ist eine datei
      $self->override_opt('hostname', 'snmpwalk.file'.md5_hex($self->opts->snmpwalk))
    } elsif ($self->opts->snmpwalk && $self->opts->hostname) {
      # snmpwalk hat vorrang
      $self->override_opt('hostname', undef);
    }
  }
}

sub init {
  my ($self) = @_;
  if ($self->mode =~ /device::walk/) {
    my @trees = ();
    my $name = $Monitoring::GLPlugin::pluginname;
    $name =~ s/.*\///g;
    $name = sprintf "/tmp/snmpwalk_%s_%s", $name, $self->opts->hostname;
    if ($self->opts->oids) {
      # create pid filename
      # already running?;x
      @trees = split(",", $self->opts->oids);

    } elsif ($self->can("trees")) {
      @trees = $self->trees;
      push(@trees, "1.3.6.1.2.1.1");
    } else {
      @trees = ("1.3.6.1.2.1", "1.3.6.1.4.1");
    }
    if ($self->opts->snmpdump) {
      $name = $self->opts->snmpdump;
    }
    $self->opts->override_opt("protocol", $1) if $self->opts->protocol =~ /^v(.*)/;
    if (defined $self->opts->offline) {
      $self->{pidfile} = $name.".pid";
      if (! $self->check_pidfile()) {
        $self->debug("Exiting because another walk is already running");
        printf STDERR "Exiting because another walk is already running\n";
        exit 3;
      }
      $self->write_pidfile();
      my $timedout = 0;
      my $snmpwalkpid = 0;
      $SIG{'ALRM'} = sub {
        $timedout = 1;
        printf "UNKNOWN - %s timed out after %d seconds\n",
            $Monitoring::GLPlugin::plugin->{name}, $self->opts->timeout;
        kill 9, $snmpwalkpid;
      };
      alarm($self->opts->timeout);
      unlink $name.".partial";
      while (! $timedout && @trees) {
        my $tree = shift @trees;
        $SIG{CHLD} = 'IGNORE';
        my $cmd = sprintf "snmpwalk -ObentU -v%s -c %s %s %s >> %s", 
            $self->opts->protocol,
            $self->opts->community,
            $self->opts->hostname,
            $tree, $name.".partial";
        $self->debug($cmd);
        $snmpwalkpid = fork;
        if (not $snmpwalkpid) {
          exec($cmd);
        } else {
          wait();
        }
      }
      rename $name.".partial", $name if ! $timedout;
      -f $self->{pidfile} && unlink $self->{pidfile};
      if ($timedout) {
        printf "CRITICAL - timeout. There are still %d snmpwalks left\n", scalar(@trees);
        exit 3;
      } else {
        printf "OK - all requested oids are in %s\n", $name;
      }
    } else {
      printf "rm -f %s\n", $name;
      foreach (@trees) {
        printf "snmpwalk -ObentU -v%s -c %s %s %s >> %s\n", 
            $self->opts->protocol,
            $self->opts->community,
            $self->opts->hostname,
            $_, $name;
      }
    }
    exit 0;
  } elsif ($self->mode =~ /device::uptime/) {
    $self->add_info(sprintf 'device is up since %s',
        $self->human_timeticks($self->{uptime}));
    $self->set_thresholds(warning => '15:', critical => '5:');
    $self->add_message($self->check_thresholds($self->{uptime} / 60));
    $self->add_perfdata(
        label => 'uptime',
        value => $self->{uptime} / 60,
        places => 0,
    );
    my ($code, $message) = $self->check_messages(join => ', ', join_all => ', ');
    $Monitoring::GLPlugin::plugin->nagios_exit($code, $message);
  } elsif ($self->mode =~ /device::supportedmibs/) {
    our $mibdepot = [];
    my $unknowns = {};
    my @outputlist = ();
    %{$unknowns} = %{$self->rawdata};
    if ($self->opts->name && -f $self->opts->name) {
      eval { require $self->opts->name };
      $self->add_critical($@) if $@;
    } elsif ($self->opts->name && ! -f $self->opts->name) {
      $self->add_unknown("where is --name mibdepotfile?");
    }
    push(@{$mibdepot}, ['1.3.6.1.2.1.60', 'ietf', 'v2', 'ACCOUNTING-CONTROL-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.238', 'ietf', 'v2', 'ADSL2-LINE-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.238.2', 'ietf', 'v2', 'ADSL2-LINE-TC-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.94.3', 'ietf', 'v2', 'ADSL-LINE-EXT-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.94', 'ietf', 'v2', 'ADSL-LINE-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.94.2', 'ietf', 'v2', 'ADSL-TC-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.74', 'ietf', 'v2', 'AGENTX-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.3.123', 'ietf', 'v2', 'AGGREGATE-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.118', 'ietf', 'v2', 'ALARM-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.16.23', 'ietf', 'v2', 'APM-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.34.3', 'ietf', 'v2', 'APPC-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.13.1', 'ietf', 'v1', 'APPLETALK-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.27', 'ietf', 'v2', 'APPLICATION-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.62', 'ietf', 'v2', 'APPLICATION-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.34.5', 'ietf', 'v2', 'APPN-DLUR-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.34.4', 'ietf', 'v2', 'APPN-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.34.4', 'ietf', 'v2', 'APPN-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.34.4.0', 'ietf', 'v2', 'APPN-TRAP-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.49', 'ietf', 'v2', 'APS-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.117', 'ietf', 'v2', 'ARC-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.37.1.14', 'ietf', 'v2', 'ATM2-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.59', 'ietf', 'v2', 'ATM-ACCOUNTING-INFORMATION-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.37', 'ietf', 'v2', 'ATM-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.37', 'ietf', 'v2', 'ATM-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.37.3', 'ietf', 'v2', 'ATM-TC-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.15', 'ietf', 'v2', 'BGP4-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.15', 'ietf', 'v2', 'BGP4-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.3.122', 'ietf', 'v2', 'BLDG-HVAC-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.17.1', 'ietf', 'v1', 'BRIDGE-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.17', 'ietf', 'v2', 'BRIDGE-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.19', 'ietf', 'v2', 'CHARACTER-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.94', 'ietf', 'v2', 'CIRCUIT-IF-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.3.1.1', 'ietf', 'v1', 'CLNS-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.3.1.1', 'ietf', 'v1', 'CLNS-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.132', 'ietf', 'v2', 'COFFEE-POT-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.89', 'ietf', 'v2', 'COPS-CLIENT-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.18.1', 'ietf', 'v1', 'DECNET-PHIV-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.21', 'ietf', 'v2', 'DIAL-CONTROL-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.108', 'ietf', 'v2', 'DIFFSERV-CONFIG-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.97', 'ietf', 'v2', 'DIFFSERV-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.66', 'ietf', 'v2', 'DIRECTORY-SERVER-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.88', 'ietf', 'v2', 'DISMAN-EVENT-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.90', 'ietf', 'v2', 'DISMAN-EXPRESSION-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.82', 'ietf', 'v2', 'DISMAN-NSLOOKUP-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.82', 'ietf', 'v2', 'DISMAN-NSLOOKUP-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.80', 'ietf', 'v2', 'DISMAN-PING-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.80', 'ietf', 'v2', 'DISMAN-PING-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.63', 'ietf', 'v2', 'DISMAN-SCHEDULE-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.63', 'ietf', 'v2', 'DISMAN-SCHEDULE-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.64', 'ietf', 'v2', 'DISMAN-SCRIPT-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.64', 'ietf', 'v2', 'DISMAN-SCRIPT-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.81', 'ietf', 'v2', 'DISMAN-TRACEROUTE-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.81', 'ietf', 'v2', 'DISMAN-TRACEROUTE-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.46', 'ietf', 'v2', 'DLSW-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.32.2', 'ietf', 'v2', 'DNS-RESOLVER-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.32.1', 'ietf', 'v2', 'DNS-SERVER-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.127.5', 'ietf', 'v2', 'DOCS-BPI-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.69', 'ietf', 'v2', 'DOCS-CABLE-DEVICE-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.69', 'ietf', 'v2', 'DOCS-CABLE-DEVICE-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.126', 'ietf', 'v2', 'DOCS-IETF-BPI2-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.132', 'ietf', 'v2', 'DOCS-IETF-CABLE-DEVICE-NOTIFICATION-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.127', 'ietf', 'v2', 'DOCS-IETF-QOS-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.125', 'ietf', 'v2', 'DOCS-IETF-SUBMGT-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.127', 'ietf', 'v2', 'DOCS-IF-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.127', 'ietf', 'v2', 'DOCS-IF-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.45', 'ietf', 'v2', 'DOT12-IF-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.53', 'ietf', 'v2', 'DOT12-RPTR-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.155', 'ietf', 'v2', 'DOT3-EPON-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.158', 'ietf', 'v2', 'DOT3-OAM-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.4.1.2.2.1.1', 'ietf', 'v1', 'DPI20-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.82', 'ietf', 'v2', 'DS0BUNDLE-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.81', 'ietf', 'v2', 'DS0-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.18', 'ietf', 'v2', 'DS1-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.18', 'ietf', 'v2', 'DS1-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.18', 'ietf', 'v2', 'DS1-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.30', 'ietf', 'v2', 'DS3-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.30', 'ietf', 'v2', 'DS3-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.29', 'ietf', 'v2', 'DSA-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.16.26', 'ietf', 'v2', 'DSMON-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.34.7', 'ietf', 'v2', 'EBN-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.167', 'ietf', 'v2', 'EFM-CU-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.47', 'ietf', 'v2', 'ENTITY-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.47', 'ietf', 'v2', 'ENTITY-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.47', 'ietf', 'v2', 'ENTITY-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.99', 'ietf', 'v2', 'ENTITY-SENSOR-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.131', 'ietf', 'v2', 'ENTITY-STATE-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.130', 'ietf', 'v2', 'ENTITY-STATE-TC-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.70', 'ietf', 'v2', 'ETHER-CHIPSET-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.7', 'ietf', 'v1', 'EtherLike-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.7', 'ietf', 'v1', 'EtherLike-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.35', 'ietf', 'v2', 'EtherLike-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.35', 'ietf', 'v2', 'EtherLike-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.35', 'ietf', 'v2', 'EtherLike-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.35', 'ietf', 'v2', 'EtherLike-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.224', 'ietf', 'v2', 'FCIP-MGMT-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.56', 'ietf', 'v2', 'FC-MGMT-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.15.73.1', 'ietf', 'v1', 'FDDI-SMT73-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.75', 'ietf', 'v2', 'FIBRE-CHANNEL-FE-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.111', 'ietf', 'v2', 'Finisher-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.40', 'ietf', 'v2', 'FLOW-METER-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.40', 'ietf', 'v2', 'FLOW-METER-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.32', 'ietf', 'v2', 'FRAME-RELAY-DTE-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.86', 'ietf', 'v2', 'FR-ATM-PVC-SERVICE-IWF-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.47', 'ietf', 'v2', 'FR-MFR-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.44', 'ietf', 'v2', 'FRNETSERV-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.44', 'ietf', 'v2', 'FRNETSERV-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.44', 'ietf', 'v2', 'FRNETSERV-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.95', 'ietf', 'v2', 'FRSLD-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.166.16', 'ietf', 'v2', 'GMPLS-LABEL-STD-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.166.15', 'ietf', 'v2', 'GMPLS-LSR-STD-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.166.12', 'ietf', 'v2', 'GMPLS-TC-STD-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.166.13', 'ietf', 'v2', 'GMPLS-TE-STD-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.98', 'ietf', 'v2', 'GSMP-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.16.29', 'ietf', 'v2', 'HC-ALARM-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.107', 'ietf', 'v2', 'HC-PerfHist-TC-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.16.20.5', 'ietf', 'v2', 'HC-RMON-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.25.1', 'ietf', 'v1', 'HOST-RESOURCES-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.25.7.1', 'ietf', 'v2', 'HOST-RESOURCES-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.34.6.1.5', 'ietf', 'v2', 'HPR-IP-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.34.6', 'ietf', 'v2', 'HPR-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.106', 'ietf', 'v2', 'IANA-CHARSET-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.110', 'ietf', 'v2', 'IANA-FINISHER-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.152', 'ietf', 'v2', 'IANA-GMPLS-TC-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.30', 'ietf', 'v2', 'IANAifType-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.128', 'ietf', 'v2', 'IANA-IPPM-METRICS-REGISTRY-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.119', 'ietf', 'v2', 'IANA-ITU-ALARM-TC-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.154', 'ietf', 'v2', 'IANA-MAU-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.109', 'ietf', 'v2', 'IANA-PRINTER-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.4.1.2.6.2.13.1.1', 'ietf', 'v1', 'IBM-6611-APPN-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.166', 'ietf', 'v2', 'IF-CAP-STACK-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.230', 'ietf', 'v2', 'IFCP-MGMT-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.77', 'ietf', 'v2', 'IF-INVERTED-STACK-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.31', 'ietf', 'v2', 'IF-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.31', 'ietf', 'v2', 'IF-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.31', 'ietf', 'v2', 'IF-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.85', 'ietf', 'v2', 'IGMP-STD-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.76', 'ietf', 'v2', 'INET-ADDRESS-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.76', 'ietf', 'v2', 'INET-ADDRESS-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.76', 'ietf', 'v2', 'INET-ADDRESS-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.52.5', 'ietf', 'v2', 'INTEGRATED-SERVICES-GUARANTEED-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.52', 'ietf', 'v2', 'INTEGRATED-SERVICES-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.16.27', 'ietf', 'v2', 'INTERFACETOPN-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.6.3.17', 'ietf', 'v2', 'IPATM-IPMC-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.57', 'ietf', 'v2', 'IPATM-IPMC-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.4.24', 'ietf', 'v2', 'IP-FORWARD-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.4.24', 'ietf', 'v2', 'IP-FORWARD-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.168', 'ietf', 'v2', 'IPMCAST-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.48', 'ietf', 'v2', 'IP-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.48', 'ietf', 'v2', 'IP-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.83', 'ietf', 'v2', 'IPMROUTE-STD-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.46', 'ietf', 'v2', 'IPOA-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.141', 'ietf', 'v2', 'IPS-AUTH-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.153', 'ietf', 'v2', 'IPSEC-SPD-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.103', 'ietf', 'v2', 'IPV6-FLOW-LABEL-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.56', 'ietf', 'v2', 'IPV6-ICMP-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.55', 'ietf', 'v2', 'IPV6-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.91', 'ietf', 'v2', 'IPV6-MLD-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.3.86', 'ietf', 'v2', 'IPV6-TCP-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.3.87', 'ietf', 'v2', 'IPV6-UDP-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.142', 'ietf', 'v2', 'ISCSI-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.20', 'ietf', 'v2', 'ISDN-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.138', 'ietf', 'v2', 'ISIS-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.163', 'ietf', 'v2', 'ISNS-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.121', 'ietf', 'v2', 'ITU-ALARM-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.120', 'ietf', 'v2', 'ITU-ALARM-TC-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.4.1.2699.1.1', 'ietf', 'v2', 'Job-Monitoring-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.95', 'ietf', 'v2', 'L2TP-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.165', 'ietf', 'v2', 'LANGTAG-TC-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.227', 'ietf', 'v2', 'LMP-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.227', 'ietf', 'v2', 'LMP-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.101', 'ietf', 'v2', 'MALLOC-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.26.1', 'ietf', 'v1', 'MAU-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.26.6', 'ietf', 'v2', 'MAU-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.26.6', 'ietf', 'v2', 'MAU-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.26.6', 'ietf', 'v2', 'MAU-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.26.6', 'ietf', 'v2', 'MAU-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.171', 'ietf', 'v2', 'MIDCOM-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.38.1', 'ietf', 'v1', 'MIOX25-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.44', 'ietf', 'v2', 'MIP-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.133', 'ietf', 'v2', 'MOBILEIPV6-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.38', 'ietf', 'v2', 'Modem-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.166.8', 'ietf', 'v2', 'MPLS-FTN-STD-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.166.11', 'ietf', 'v2', 'MPLS-L3VPN-STD-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.166.9', 'ietf', 'v2', 'MPLS-LC-ATM-STD-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.166.10', 'ietf', 'v2', 'MPLS-LC-FR-STD-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.166.5', 'ietf', 'v2', 'MPLS-LDP-ATM-STD-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.166.6', 'ietf', 'v2', 'MPLS-LDP-FRAME-RELAY-STD-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.166.7', 'ietf', 'v2', 'MPLS-LDP-GENERIC-STD-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.4.1.9.10.65', 'ietf', 'v2', 'MPLS-LDP-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.166.4', 'ietf', 'v2', 'MPLS-LDP-STD-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.166.2', 'ietf', 'v2', 'MPLS-LSR-STD-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.166.1', 'ietf', 'v2', 'MPLS-TC-STD-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.166.3', 'ietf', 'v2', 'MPLS-TE-STD-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.3.92', 'ietf', 'v2', 'MSDP-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.28', 'ietf', 'v2', 'MTA-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.28', 'ietf', 'v2', 'MTA-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.28', 'ietf', 'v2', 'MTA-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.123', 'ietf', 'v2', 'NAT-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.27', 'ietf', 'v2', 'NETWORK-SERVICES-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.27', 'ietf', 'v2', 'NETWORK-SERVICES-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.71', 'ietf', 'v2', 'NHRP-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.92', 'ietf', 'v2', 'NOTIFICATION-LOG-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.133', 'ietf', 'v2', 'OPT-IF-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.14', 'ietf', 'v2', 'OSPF-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.14', 'ietf', 'v2', 'OSPF-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.14.16', 'ietf', 'v2', 'OSPF-TRAP-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.14.16', 'ietf', 'v2', 'OSPF-TRAP-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.34', 'ietf', 'v2', 'PARALLEL-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.17.6', 'ietf', 'v2', 'P-BRIDGE-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.58', 'ietf', 'v2', 'PerfHist-TC-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.58', 'ietf', 'v2', 'PerfHist-TC-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.172', 'ietf', 'v2', 'PIM-BSR-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.3.61', 'ietf', 'v2', 'PIM-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.157', 'ietf', 'v2', 'PIM-STD-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.93', 'ietf', 'v2', 'PINT-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.140', 'ietf', 'v2', 'PKTC-IETF-MTA-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.169', 'ietf', 'v2', 'PKTC-IETF-SIG-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.124', 'ietf', 'v2', 'POLICY-BASED-MANAGEMENT-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.105', 'ietf', 'v2', 'POWER-ETHERNET-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.23.4', 'ietf', 'v1', 'PPP-BRIDGE-NCP-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.23.3', 'ietf', 'v1', 'PPP-IP-NCP-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.23.1.1', 'ietf', 'v1', 'PPP-LCP-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.23.2', 'ietf', 'v1', 'PPP-SEC-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.43', 'ietf', 'v2', 'Printer-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.43', 'ietf', 'v2', 'Printer-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.79', 'ietf', 'v2', 'PTOPO-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.17.7', 'ietf', 'v2', 'Q-BRIDGE-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.67.2.2', 'ietf', 'v2', 'RADIUS-ACC-CLIENT-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.67.2.2', 'ietf', 'v2', 'RADIUS-ACC-CLIENT-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.67.2.1', 'ietf', 'v2', 'RADIUS-ACC-SERVER-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.67.2.1', 'ietf', 'v2', 'RADIUS-ACC-SERVER-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.67.1.2', 'ietf', 'v2', 'RADIUS-AUTH-CLIENT-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.67.1.2', 'ietf', 'v2', 'RADIUS-AUTH-CLIENT-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.67.1.1', 'ietf', 'v2', 'RADIUS-AUTH-SERVER-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.67.1.1', 'ietf', 'v2', 'RADIUS-AUTH-SERVER-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.145', 'ietf', 'v2', 'RADIUS-DYNAUTH-CLIENT-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.146', 'ietf', 'v2', 'RADIUS-DYNAUTH-SERVER-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.16.31', 'ietf', 'v2', 'RAQMON-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.16.32', 'ietf', 'v2', 'RAQMON-RDS-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.39', 'ietf', 'v2', 'RDBMS-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.1', 'ietf', 'v1', 'RFC1066-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.1', 'ietf', 'v1', 'RFC1156-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.1', 'ietf', 'v1', 'RFC1158-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.1', 'ietf', 'v1', 'RFC1213-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.12', 'ietf', 'v1', 'RFC1229-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.3.7', 'ietf', 'v1', 'RFC1230-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.9', 'ietf', 'v1', 'RFC1231-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.3.2', 'ietf', 'v1', 'RFC1232-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.3.15', 'ietf', 'v1', 'RFC1233-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.13.1', 'ietf', 'v1', 'RFC1243-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.13.1', 'ietf', 'v1', 'RFC1248-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.13.1', 'ietf', 'v1', 'RFC1252-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.14.1', 'ietf', 'v1', 'RFC1253-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.15', 'ietf', 'v1', 'RFC1269-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.16.1', 'ietf', 'v1', 'RFC1271-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.7', 'ietf', 'v1', 'RFC1284-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.15.1', 'ietf', 'v1', 'RFC1285-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.17.1', 'ietf', 'v1', 'RFC1286-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.18.1', 'ietf', 'v1', 'RFC1289-phivMIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.31', 'ietf', 'v1', 'RFC1304-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.32', 'ietf', 'v1', 'RFC1315-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.19', 'ietf', 'v1', 'RFC1316-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.33', 'ietf', 'v1', 'RFC1317-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.34', 'ietf', 'v1', 'RFC1318-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.20.2', 'ietf', 'v1', 'RFC1353-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.4.24', 'ietf', 'v1', 'RFC1354-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.16', 'ietf', 'v1', 'RFC1381-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.5', 'ietf', 'v1', 'RFC1382-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.23.1', 'ietf', 'v1', 'RFC1389-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.7', 'ietf', 'v1', 'RFC1398-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.18', 'ietf', 'v1', 'RFC1406-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.30', 'ietf', 'v1', 'RFC1407-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.24.1', 'ietf', 'v1', 'RFC1414-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.23', 'ietf', 'v2', 'RIPv2-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.16', 'ietf', 'v2', 'RMON2-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.16', 'ietf', 'v2', 'RMON2-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.16.1', 'ietf', 'v1', 'RMON-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.16.20.8', 'ietf', 'v2', 'RMON-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.112', 'ietf', 'v2', 'ROHC-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.114', 'ietf', 'v2', 'ROHC-RTP-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.113', 'ietf', 'v2', 'ROHC-UNCOMPRESSED-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.33', 'ietf', 'v2', 'RS-232-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.134', 'ietf', 'v2', 'RSTP-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.51', 'ietf', 'v2', 'RSVP-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.87', 'ietf', 'v2', 'RTP-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.139', 'ietf', 'v2', 'SCSI-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.104', 'ietf', 'v2', 'SCTP-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.4.1.4300.1', 'ietf', 'v2', 'SFLOW-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.149', 'ietf', 'v2', 'SIP-COMMON-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.36', 'ietf', 'v2', 'SIP-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.151', 'ietf', 'v2', 'SIP-SERVER-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.148', 'ietf', 'v2', 'SIP-TC-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.150', 'ietf', 'v2', 'SIP-UA-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.3.88', 'ietf', 'v2', 'SLAPM-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.16.22', 'ietf', 'v2', 'SMON-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.4.1.4.4', 'ietf', 'v1', 'SMUX-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.34', 'ietf', 'v2', 'SNA-NAU-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.34', 'ietf', 'v2', 'SNA-NAU-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.41', 'ietf', 'v2', 'SNA-SDLC-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.6.3.18', 'ietf', 'v2', 'SNMP-COMMUNITY-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.6.3.18', 'ietf', 'v2', 'SNMP-COMMUNITY-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.6.3.10', 'ietf', 'v2', 'SNMP-FRAMEWORK-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.6.3.10', 'ietf', 'v2', 'SNMP-FRAMEWORK-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.6.3.10', 'ietf', 'v2', 'SNMP-FRAMEWORK-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.6.3.21', 'ietf', 'v2', 'SNMP-IEEE802-TM-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.6.3.11', 'ietf', 'v2', 'SNMP-MPD-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.6.3.11', 'ietf', 'v2', 'SNMP-MPD-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.6.3.11', 'ietf', 'v2', 'SNMP-MPD-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.6.3.13', 'ietf', 'v2', 'SNMP-NOTIFICATION-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.6.3.13', 'ietf', 'v2', 'SNMP-NOTIFICATION-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.6.3.13', 'ietf', 'v2', 'SNMP-NOTIFICATION-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.6.3.14', 'ietf', 'v2', 'SNMP-PROXY-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.6.3.14', 'ietf', 'v2', 'SNMP-PROXY-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.6.3.14', 'ietf', 'v2', 'SNMP-PROXY-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.22.1.1', 'ietf', 'v1', 'SNMP-REPEATER-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.22.1.1', 'ietf', 'v1', 'SNMP-REPEATER-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.22.5', 'ietf', 'v2', 'SNMP-REPEATER-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.6.3.12', 'ietf', 'v2', 'SNMP-TARGET-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.6.3.12', 'ietf', 'v2', 'SNMP-TARGET-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.6.3.12', 'ietf', 'v2', 'SNMP-TARGET-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.6.3.15', 'ietf', 'v2', 'SNMP-USER-BASED-SM-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.6.3.15', 'ietf', 'v2', 'SNMP-USER-BASED-SM-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.6.3.15', 'ietf', 'v2', 'SNMP-USER-BASED-SM-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.6.3.20', 'ietf', 'v2', 'SNMP-USM-AES-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.3.101', 'ietf', 'v2', 'SNMP-USM-DH-OBJECTS-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.6.3.2', 'ietf', 'v2', 'SNMPv2-M2M-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.6.3.1', 'ietf', 'v2', 'SNMPv2-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.6.3.1', 'ietf', 'v2', 'SNMPv2-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.6.3.1', 'ietf', 'v2', 'SNMPv2-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.6.3.3', 'ietf', 'v2', 'SNMPv2-PARTY-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.6.3.6', 'ietf', 'v2', 'SNMPv2-USEC-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.6.3.16', 'ietf', 'v2', 'SNMP-VIEW-BASED-ACM-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.6.3.16', 'ietf', 'v2', 'SNMP-VIEW-BASED-ACM-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.6.3.16', 'ietf', 'v2', 'SNMP-VIEW-BASED-ACM-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.39', 'ietf', 'v2', 'SONET-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.39', 'ietf', 'v2', 'SONET-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.39', 'ietf', 'v2', 'SONET-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.17.3', 'ietf', 'v1', 'SOURCE-ROUTING-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.16.28', 'ietf', 'v2', 'SSPM-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.54', 'ietf', 'v2', 'SYSAPPL-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.137', 'ietf', 'v2', 'T11-FC-FABRIC-ADDR-MGR-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.162', 'ietf', 'v2', 'T11-FC-FABRIC-CONFIG-SERVER-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.159', 'ietf', 'v2', 'T11-FC-FABRIC-LOCK-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.143', 'ietf', 'v2', 'T11-FC-FSPF-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.135', 'ietf', 'v2', 'T11-FC-NAME-SERVER-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.144', 'ietf', 'v2', 'T11-FC-ROUTE-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.161', 'ietf', 'v2', 'T11-FC-RSCN-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.176', 'ietf', 'v2', 'T11-FC-SP-AUTHENTICATION-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.178', 'ietf', 'v2', 'T11-FC-SP-POLICY-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.179', 'ietf', 'v2', 'T11-FC-SP-SA-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.175', 'ietf', 'v2', 'T11-FC-SP-TC-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.177', 'ietf', 'v2', 'T11-FC-SP-ZONING-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.147', 'ietf', 'v2', 'T11-FC-VIRTUAL-FABRIC-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.160', 'ietf', 'v2', 'T11-FC-ZONE-SERVER-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.136', 'ietf', 'v2', 'T11-TC-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.156', 'ietf', 'v2', 'TCP-ESTATS-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.4.1.23.2.29.1', 'ietf', 'v1', 'TCPIPX-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.49', 'ietf', 'v2', 'TCP-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.49', 'ietf', 'v2', 'TCP-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.200', 'ietf', 'v2', 'TE-LINK-STD-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.122', 'ietf', 'v2', 'TE-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.3.124', 'ietf', 'v2', 'TIME-AGGREGATE-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.34.8', 'ietf', 'v2', 'TN3270E-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.34.9', 'ietf', 'v2', 'TN3270E-RT-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.9', 'ietf', 'v2', 'TOKENRING-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.9', 'ietf', 'v2', 'TOKENRING-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.16.1', 'ietf', 'v1', 'TOKEN-RING-RMON-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.42', 'ietf', 'v2', 'TOKENRING-STATION-SR-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.16.30', 'ietf', 'v2', 'TPM-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.100', 'ietf', 'v2', 'TRANSPORT-ADDRESS-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.116', 'ietf', 'v2', 'TRIP-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.115', 'ietf', 'v2', 'TRIP-TC-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.131', 'ietf', 'v2', 'TUNNEL-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.131', 'ietf', 'v2', 'TUNNEL-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.170', 'ietf', 'v2', 'UDPLITE-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.50', 'ietf', 'v2', 'UDP-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.50', 'ietf', 'v2', 'UDP-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.33', 'ietf', 'v2', 'UPS-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.164', 'ietf', 'v2', 'URI-TC-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.229', 'ietf', 'v2', 'VDSL-LINE-EXT-MCM-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.228', 'ietf', 'v2', 'VDSL-LINE-EXT-SCM-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.10.97', 'ietf', 'v2', 'VDSL-LINE-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.129', 'ietf', 'v2', 'VPN-TC-STD-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.68', 'ietf', 'v2', 'VRRP-MIB']);
    push(@{$mibdepot}, ['1.3.6.1.2.1.65', 'ietf', 'v2', 'WWW-MIB']);
    my $oids = $self->get_entries_by_walk(-varbindlist => [
        '1.3.6.1.2.1', '1.3.6.1.4.1',
    ]);
    foreach my $mibinfo (@{$mibdepot}) {
      next if $self->opts->protocol eq "1" && $mibinfo->[2] ne "v1";
      next if $self->opts->protocol ne "1" && $mibinfo->[2] eq "v1";
      $Monitoring::GLPlugin::SNMP::MibsAndOids::mib_ids->{$mibinfo->[3]} = $mibinfo->[0];
    }
    $Monitoring::GLPlugin::SNMP::MibsAndOids::mib_ids->{'MIB-2-MIB'} = "1.3.6.1.2.1";
    foreach my $mib (keys %{$Monitoring::GLPlugin::SNMP::MibsAndOids::mib_ids}) {
      if ($self->implements_mib($mib)) {
        push(@outputlist, [$mib, $Monitoring::GLPlugin::SNMP::MibsAndOids::mib_ids->{$mib}]);
        $unknowns = {@{[map {
            $_, $self->rawdata->{$_}
        } grep {
            substr($_, 0, length($Monitoring::GLPlugin::SNMP::MibsAndOids::mib_ids->{$mib})) ne
                $Monitoring::GLPlugin::SNMP::MibsAndOids::mib_ids->{$mib} || (
            substr($_, 0, length($Monitoring::GLPlugin::SNMP::MibsAndOids::mib_ids->{$mib})) eq
                $Monitoring::GLPlugin::SNMP::MibsAndOids::mib_ids->{$mib} &&
            substr($_, length($Monitoring::GLPlugin::SNMP::MibsAndOids::mib_ids->{$mib}), 1) ne ".")
        } keys %{$unknowns}]}};
      }
    }
    my $toplevels = {};
    map {
        /^(1\.3\.6\.1\.(\d+)\.(\d+)\.\d+\.\d+)\./; $toplevels->{$1} = 1; 
    } keys %{$unknowns};
    foreach (sort {$a cmp $b} keys %{$toplevels}) {
      push(@outputlist, ["<unknown>", $_]);
    }
    foreach (sort {$a->[0] cmp $b->[0]} @outputlist) {
      printf "implements %s %s\n", $_->[0], $_->[1];
    }
    $self->add_ok("have fun");
    my ($code, $message) = $self->check_messages(join => ', ', join_all => ', ');
    $Monitoring::GLPlugin::plugin->nagios_exit($code, $message);
  }
}

sub check_snmp_and_model {
  my ($self) = @_;
  if ($self->opts->snmpwalk) {
    my $response = {};
    if (! -f $self->opts->snmpwalk) {
      $self->add_message(CRITICAL, 
          sprintf 'file %s not found',
          $self->opts->snmpwalk);
    } elsif (-x $self->opts->snmpwalk) {
      my $cmd = sprintf "%s -ObentU -v%s -c%s %s 1.3.6.1.4.1 2>&1",
          $self->opts->snmpwalk,
          $self->opts->protocol,
          $self->opts->community,
          $self->opts->hostname;
      open(WALK, "$cmd |");
      while (<WALK>) {
        if (/^([\.\d]+) = .*?: (\-*\d+)/) {
          $response->{$1} = $2;
        } elsif (/^([\.\d]+) = .*?: "(.*?)"/) {
          $response->{$1} = $2;
          $response->{$1} =~ s/\s+$//;
        }
      }
      close WALK;
    } else {
      if (defined $self->opts->offline && $self->opts->mode ne 'walk') {
        if ((time - (stat($self->opts->snmpwalk))[9]) > $self->opts->offline) {
          $self->add_message(UNKNOWN,
              sprintf 'snmpwalk file %s is too old', $self->opts->snmpwalk);
        }
      }
      $self->opts->override_opt('hostname', 'walkhost') if $self->opts->mode ne 'walk';
      open(MESS, $self->opts->snmpwalk);
      while(<MESS>) {
        # SNMPv2-SMI::enterprises.232.6.2.6.7.1.3.1.4 = INTEGER: 6
        if (/^([\d\.]+) = .*?INTEGER: .*\((\-*\d+)\)/) {
          # .1.3.6.1.2.1.2.2.1.8.1 = INTEGER: down(2)
          $response->{$1} = $2;
        } elsif (/^([\d\.]+) = .*?Opaque:.*?Float:.*?([\-\.\d]+)/) {
          # .1.3.6.1.4.1.2021.10.1.6.1 = Opaque: Float: 0.938965
          $response->{$1} = $2;
        } elsif (/^([\d\.]+) = STRING:\s*$/) {
          $response->{$1} = "";
        } elsif (/^([\d\.]+) = Network Address: (.*)/) {
          $response->{$1} = $2;
        } elsif (/^([\d\.]+) = Hex-STRING: (.*)/) {
          my $k = $1;
          my $h = $2;
          $h =~ s/\s+//g;
          $response->{$k} = pack('H*', $h);
        } elsif (/^([\d\.]+) = \w+: (\-*\d+)\s*$/) {
          $response->{$1} = $2;
        } elsif (/^([\d\.]+) = \w+: "(.*?)"/) {
          $response->{$1} = $2;
          $response->{$1} =~ s/\s+$//;
        } elsif (/^([\d\.]+) = \w+: (.*)/) {
          $response->{$1} = $2;
          $response->{$1} =~ s/\s+$//;
        } elsif (/^([\d\.]+) = (\-*\d+)/) {
          $response->{$1} = $2;
        } elsif (/^([\d\.]+) = "(.*?)"/) {
          $response->{$1} = $2;
          $response->{$1} =~ s/\s+$//;
        }
      }
      close MESS;
    }
    foreach my $oid (keys %$response) {
      if ($oid =~ /^\./) {
        my $nodot = $oid;
        $nodot =~ s/^\.//g;
        $response->{$nodot} = $response->{$oid};
        delete $response->{$oid};
      }
    }
    map { $response->{$_} =~ s/^\s+//; $response->{$_} =~ s/\s+$//; }
        keys %$response;
    $self->set_rawdata($response);
  } else {
    $self->establish_snmp_session();
  }
  if (! $self->check_messages()) {
    my $tic = time;
    my $sysUptime = $self->get_snmp_object('MIB-2-MIB', 'sysUpTime', 0);
    my $snmpEngineTime = $self->get_snmp_object('SNMP-FRAMEWORK-MIB', 'snmpEngineTime');
    my $sysDescr = $self->get_snmp_object('MIB-2-MIB', 'sysDescr', 0);
    my $tac = time;
    if (defined $sysUptime && defined $sysDescr) {
      # drecksschrott asa liefert negative werte
      # und drecksschrott socomec liefert: wrong type (should be INTEGER): NULL
      if (defined $snmpEngineTime && $snmpEngineTime =~ /^\d+$/ && $snmpEngineTime > 0) {
        $self->{uptime} = $snmpEngineTime;
      } else {
        $self->{uptime} = $self->timeticks($sysUptime);
      }
      $self->{productname} = $sysDescr;
      $self->{sysobjectid} = $self->get_snmp_object('MIB-2-MIB', 'sysObjectID', 0);
      $self->debug(sprintf 'uptime: %s', $self->{uptime});
      $self->debug(sprintf 'up since: %s',
          scalar localtime (time - $self->{uptime}));
      $Monitoring::GLPlugin::SNMP::uptime = $self->{uptime};
      $self->debug('whoami: '.$self->{productname});
    } else {
      if ($tac - $tic >= $Monitoring::GLPlugin::SNMP::session->timeout) {
        $self->add_message(UNKNOWN,
            'could not contact snmp agent, timeout during snmp-get sysUptime');
      } else {
        $self->add_message(UNKNOWN,
            'got neither sysUptime nor sysDescr, is this snmp agent working correctly?');
      }
      $Monitoring::GLPlugin::SNMP::session->close if $Monitoring::GLPlugin::SNMP::session;
    }
  }
}

sub establish_snmp_session {
  my ($self) = @_;
  $self->set_timeout_alarm();
  if (eval "require Net::SNMP") {
    my %params = ();
    my $net_snmp_version = Net::SNMP->VERSION(); # 5.002000 or 6.000000
    $params{'-translate'} = [ # because we see "NULL" coming from socomec devices
      -all => 0x0,
      -nosuchobject => 1,
      -nosuchinstance => 1,
      -endofmibview => 1,
      -unsigned => 1,
    ];
    $params{'-hostname'} = $self->opts->hostname;
    $params{'-version'} = $self->opts->protocol;
    if ($self->opts->port) {
      $params{'-port'} = $self->opts->port;
    }
    if ($self->opts->domain) {
      $params{'-domain'} = $self->opts->domain;
    }
    $self->v2tov3;
    if ($self->opts->protocol eq '3') {
      $params{'-version'} = $self->opts->protocol;
      $params{'-username'} = $self->opts->username;
      if ($self->opts->authpassword) {
        $params{'-authpassword'} = 
            $self->decode_password($self->opts->authpassword);
      }
      if ($self->opts->authprotocol) {
        $params{'-authprotocol'} = $self->opts->authprotocol;
      }
      if ($self->opts->privpassword) {
        $params{'-privpassword'} = 
            $self->decode_password($self->opts->privpassword);
      }
      if ($self->opts->privprotocol) {
        $params{'-privprotocol'} = $self->opts->privprotocol;
      }
      # context hat in der session nix verloren, sondern wird
      # als zusatzinfo bei den requests mitgeschickt
      #if ($self->opts->contextengineid) {
      #  $params{'-contextengineid'} = $self->opts->contextengineid;
      #}
      #if ($self->opts->contextname) {
      #  $params{'-contextname'} = $self->opts->contextname;
      #}
    } else {
      $params{'-community'} = 
          $self->decode_password($self->opts->community);
    }
    my ($session, $error) = Net::SNMP->session(%params);
    if (! defined $session) {
      $self->add_message(CRITICAL, 
          sprintf 'cannot create session object: %s', $error);
      $self->debug(Data::Dumper::Dumper(\%params));
    } else {
      my $max_msg_size = $session->max_msg_size();
      $session->max_msg_size(4 * $max_msg_size);
      $Monitoring::GLPlugin::SNMP::session = $session;
    }
  } else {
    $self->add_message(CRITICAL,
        'could not find Net::SNMP module');
  }
}

sub session_translate {
  my ($self, $translation) = @_;
  $Monitoring::GLPlugin::SNMP::session->translate($translation) if
      $Monitoring::GLPlugin::SNMP::session;
}

sub establish_snmp_secondary_session {
  my ($self) = @_;
  if ($self->opts->protocol eq '3') {
  } else {
    if (defined $self->opts->community2 &&
        $self->decode_password($self->opts->community2) ne
        $self->decode_password($self->opts->community)) {
      $Monitoring::GLPlugin::SNMP::session = undef;
      $self->opts->override_opt('community',
        $self->decode_password($self->opts->community2)) ;
      $self->establish_snmp_session;
    }
  }
}

sub mult_snmp_max_msg_size {
  my ($self, $factor) = @_;
  $factor ||= 10;
  $self->debug(sprintf "raise maxmsgsize %d * %d", 
      $factor, $Monitoring::GLPlugin::SNMP::session->max_msg_size()) if $Monitoring::GLPlugin::SNMP::session;
  $Monitoring::GLPlugin::SNMP::session->max_msg_size($factor * $Monitoring::GLPlugin::SNMP::session->max_msg_size()) if $Monitoring::GLPlugin::SNMP::session;
}

sub no_such_model {
  my ($self) = @_;
  printf "Model %s is not implemented\n", $self->{productname};
  exit 3;
}

sub no_such_mode {
  my ($self) = @_;
  if (ref($self) eq "Classes::Generic") {
    $self->init();
  } elsif (ref($self) eq "Classes::Device") {
    $self->add_message(UNKNOWN, 'the device did not implement the mibs this plugin is asking for');
    $self->add_message(UNKNOWN,
        sprintf('unknown device%s', $self->{productname} eq 'unknown' ?
            '' : '('.$self->{productname}.')'));
  } elsif (ref($self) eq "Monitoring::GLPlugin::SNMP") {
    # uptime, offline
    $self->init();
  } else {
    eval {
      bless $self, "Classes::Generic";
      $self->init();
    };
    if ($@) {
      bless $self, "Monitoring::GLPlugin::SNMP";
      $self->init();
    }
  }
  if (ref($self) eq "Monitoring::GLPlugin::SNMP") {
    printf "Mode %s is not implemented for this type of device\n",
        $self->opts->mode;
    exit 3;
  }
}

sub uptime {
  my ($self) = @_;
  return $Monitoring::GLPlugin::SNMP::uptime;
}

sub map_oid_to_class {
  my ($self, $oid, $class) = @_;
  $Monitoring::GLPlugin::SNMP::MibsAndOids::discover_ids->{$oid} = $class;
}

sub discover_suitable_class {
  my ($self) = @_;
  my $sysobj = $self->get_snmp_object('MIB-2-MIB', 'sysObjectID', 0);
  $sysobj =~ s/^\.//g;
  foreach my $oid (keys %{$Monitoring::GLPlugin::SNMP::MibsAndOids::discover_ids}) {
    if ($sysobj && $oid eq $sysobj) {
      return $Monitoring::GLPlugin::SNMP::MibsAndOids::discover_ids->{$sysobj};
    }
  }
}

sub require_mib {
  my ($self, $mib) = @_;
  my $package = uc $mib;
  $package =~ s/-//g;
  if (exists $Monitoring::GLPlugin::SNMP::MibsAndOids::mibs_and_oids->{$mib} ||
      exists $Monitoring::GLPlugin::SNMP::MibsAndOids::mib_ids->{$mib}) {
    $self->debug("i know package "."Monitoring::GLPlugin::SNMP::MibsAndOids::".$package);
    return;
  } else {
    eval {
      my @oldkeys = ();
      $self->set_variable("verbosity", 2);
      if ($self->get_variable("verbose")) {
        my @oldkeys = exists $Monitoring::GLPlugin::SNMP::MibsAndOids::mibs_and_oids->{$mib} ?
            keys %{$Monitoring::GLPlugin::SNMP::MibsAndOids::mibs_and_oids} : 0;
      }
      $self->debug("load mib "."Monitoring::GLPlugin::SNMP::MibsAndOids::".$package);
      load "Monitoring::GLPlugin::SNMP::MibsAndOids::".$package;
      if ($self->get_variable("verbose")) {
        my @newkeys = exists $Monitoring::GLPlugin::SNMP::MibsAndOids::mibs_and_oids->{$mib} ?
            keys %{$Monitoring::GLPlugin::SNMP::MibsAndOids::mibs_and_oids} : 0;
        $self->debug(sprintf "now i know: %s", join(" ", sort @newkeys));
        $self->debug(sprintf "now i know %d keys.", scalar(@newkeys));
        if (scalar(@newkeys) <= scalar(@oldkeys)) {
          $self->debug(sprintf "from %d to %d keys. why did we load?",
              scalar(@oldkeys), scalar(@newkeys));
        }
      }
    };
    if ($@) {
      $self->debug("failed to load "."Monitoring::GLPlugin::SNMP::MibsAndOids::".$package);
    } else {
      if (exists $Monitoring::GLPlugin::SNMP::MibsAndOids::requirements->{$mib}) {
        foreach my $submib (@{$Monitoring::GLPlugin::SNMP::MibsAndOids::requirements->{$mib}}) {
          $self->require_mib($submib);
        }
      }
    }
  }
}

sub implements_mib {
  my ($self, $mib) = @_;
  $self->require_mib($mib);
  if (! exists $Monitoring::GLPlugin::SNMP::MibsAndOids::mib_ids->{$mib}) {
    return 0;
  }
  my $sysobj = $self->get_snmp_object('MIB-2-MIB', 'sysObjectID', 0);
  $sysobj =~ s/^\.// if $sysobj;
  if ($sysobj && $sysobj eq $Monitoring::GLPlugin::SNMP::MibsAndOids::mib_ids->{$mib}) {
    $self->debug(sprintf "implements %s (sysobj exact)", $mib);
    return 1;
  }
  if ($sysobj && $Monitoring::GLPlugin::SNMP::MibsAndOids::mib_ids->{$mib} eq
      substr $sysobj, 0, length $Monitoring::GLPlugin::SNMP::MibsAndOids::mib_ids->{$mib}) {
    $self->debug(sprintf "implements %s (sysobj)", $mib);
    return 1;
  }
  # some mibs are only composed of tables
  my $traces;
  if ($self->opts->snmpwalk) {
    my @matches;  
    # exact match  
    push(@matches, @{[map {  
        $_, $self->rawdata->{$_}  
    } grep {  
        $_ eq $Monitoring::GLPlugin::SNMP::MibsAndOids::mib_ids->{$mib}  
    } keys %{$self->rawdata}]});  
  
    # partial match (add trailing dot)  
    my $check = $Monitoring::GLPlugin::SNMP::MibsAndOids::mib_ids->{$mib};  
    $check =~ s/\.?$/./;  
    push(@matches, @{[map {  
        $_, $self->rawdata->{$_}  
    } grep {
        substr($_, 0, length($check)) eq $check  
    } keys %{$self->rawdata}]});  
    $traces = {@matches};  
  } else {
    my %params = (
        -varbindlist => [
            $Monitoring::GLPlugin::SNMP::MibsAndOids::mib_ids->{$mib}
        ]
    );
    if ($Monitoring::GLPlugin::SNMP::session->version() == 3) {
      $params{-contextengineid} = $self->opts->contextengineid if $self->opts->contextengineid;
      $params{-contextname} = $self->opts->contextname if $self->opts->contextname;
    }
    $traces = $Monitoring::GLPlugin::SNMP::session->get_next_request(%params);
  }
  if ($traces && # must find oids following to the ident-oid
      ! exists $traces->{$Monitoring::GLPlugin::SNMP::MibsAndOids::mib_ids->{$mib}} && # must not be the ident-oid
      grep { # following oid is inside this tree
          substr($_, 0, length($Monitoring::GLPlugin::SNMP::MibsAndOids::mib_ids->{$mib})) eq $Monitoring::GLPlugin::SNMP::MibsAndOids::mib_ids->{$mib};
      } keys %{$traces}) {
    $self->debug(sprintf "implements %s (found traces)", $mib);
    return 1;
  }
}

sub timeticks {
  my ($self, $timestr) = @_;
  if ($timestr =~ /\((\d+)\)/) {
    # Timeticks: (20718727) 2 days, 9:33:07.27
    $timestr = $1 / 100;
  } elsif ($timestr =~ /(\d+)\s*day[s]*.*?(\d+):(\d+):(\d+)\.(\d+)/) {
    # Timeticks: 2 days, 9:33:07.27
    $timestr = $1 * 24 * 3600 + $2 * 3600 + $3 * 60 + $4;
  } elsif ($timestr =~ /(\d+):(\d+):(\d+):(\d+)\.(\d+)/) {
    # Timeticks: 0001:03:18:42.77
    $timestr = $1 * 3600 * 24 + $2 * 3600 + $3 * 60 + $4;
  } elsif ($timestr =~ /(\d+):(\d+):(\d+)\.(\d+)/) {
    # Timeticks: 9:33:07.27
    $timestr = $1 * 3600 + $2 * 60 + $3;
  } elsif ($timestr =~ /(\d+)\s*hour[s]*.*?(\d+):(\d+)\.(\d+)/) {
    # Timeticks: 3 hours, 42:17.98
    $timestr = $1 * 3600 + $2 * 60 + $3;
  } elsif ($timestr =~ /(\d+)\s*minute[s]*.*?(\d+)\.(\d+)/) {
    # Timeticks: 36 minutes, 01.96
    $timestr = $1 * 60 + $2;
  } elsif ($timestr =~ /(\d+)\.\d+\s*second[s]/) {
    # Timeticks: 01.02 seconds
    $timestr = $1;
  } elsif ($timestr =~ /^(\d+)$/) {
    $timestr = $1 / 100;
  }
  return $timestr;
}

sub human_timeticks {
  my ($self, $timeticks) = @_;
  my $days = int($timeticks / 86400);
  $timeticks -= ($days * 86400);
  my $hours = int($timeticks / 3600);
  $timeticks -= ($hours * 3600);
  my $minutes = int($timeticks / 60);
  my $seconds = $timeticks % 60;
  $days = $days < 1 ? '' : $days .'d ';
  return $days . sprintf "%dh %dm %ds", $hours, $minutes, $seconds;
}

sub internal_name {
  my ($self) = @_;
  my $class = ref($self);
  $class =~ s/^.*:://;
  if (exists $self->{flat_indices}) {
    return sprintf "%s_%s", uc $class, $self->{flat_indices};
  } else {
    return sprintf "%s", uc $class;
  }
}

################################################################
# file-related functions
#
sub create_interface_cache_file {
  my ($self) = @_;
  my $extension = "";
  if ($self->opts->snmpwalk && ! $self->opts->hostname) {
    $self->opts->override_opt('hostname',
        'snmpwalk.file'.md5_hex($self->opts->snmpwalk))
  }
  if ($self->opts->community) { 
    $extension .= md5_hex($self->opts->community);
  }
  $extension =~ s/\//_/g;
  $extension =~ s/\(/_/g;
  $extension =~ s/\)/_/g;
  $extension =~ s/\*/_/g;
  $extension =~ s/\s/_/g;
  return sprintf "%s/%s_interface_cache_%s", $self->statefilesdir(),
      $self->opts->hostname, lc $extension;
}

sub create_entry_cache_file {
  my ($self, $mib, $table, $key_attr) = @_;
  return lc sprintf "%s_%s_%s_%s_cache",
      $self->create_interface_cache_file(),
      $mib, $table, join('#', @{$key_attr});
}

sub update_entry_cache {
  my ($self, $force, $mib, $table, $key_attr) = @_;
  if (ref($key_attr) ne "ARRAY") {
    $key_attr = [$key_attr];
  }
  my $cache = sprintf "%s_%s_%s_cache", 
      $mib, $table, join('#', @{$key_attr});
  my $statefile = $self->create_entry_cache_file($mib, $table, $key_attr);
  my $update = time - 3600;
  #my $update = time - 1;
  if ($force || ! -f $statefile || ((stat $statefile)[9]) < ($update)) {
    $self->debug(sprintf 'force update of %s %s %s %s cache',
        $self->opts->hostname, $self->opts->mode, $mib, $table);
    $self->{$cache} = {};
    foreach my $entry ($self->get_snmp_table_objects($mib, $table)) {
      my $key = join('#', map { $entry->{$_} } @{$key_attr});
      my $hash = $key . '-//-' . join('.', @{$entry->{indices}});
      $self->{$cache}->{$hash} = $entry->{indices};
    }
    $self->save_cache($mib, $table, $key_attr);
  }
  $self->load_cache($mib, $table, $key_attr);
}

sub save_cache {
  my ($self, $mib, $table, $key_attr) = @_;
  if (ref($key_attr) ne "ARRAY") {
    $key_attr = [$key_attr];
  }
  my $cache = sprintf "%s_%s_%s_cache", 
      $mib, $table, join('#', @{$key_attr});
  $self->create_statefilesdir();
  my $statefile = $self->create_entry_cache_file($mib, $table, $key_attr);
  open(STATE, ">".$statefile.".".$$);
  printf STATE Data::Dumper::Dumper($self->{$cache});
  close STATE;
  rename $statefile.".".$$, $statefile;
  $self->debug(sprintf "saved %s to %s",
      Data::Dumper::Dumper($self->{$cache}), $statefile);
}

sub load_cache {
  my ($self, $mib, $table, $key_attr) = @_;
  if (ref($key_attr) ne "ARRAY") {
    $key_attr = [$key_attr];
  }
  my $cache = sprintf "%s_%s_%s_cache", 
      $mib, $table, join('#', @{$key_attr});
  my $statefile = $self->create_entry_cache_file($mib, $table, $key_attr);
  $self->{$cache} = {};
  if ( -f $statefile) {
    our $VAR1;
    our $VAR2;
    eval {
      require $statefile;
    };
    if($@) {
      printf "rumms\n";
    }
    # keinesfalls mehr require verwenden!!!!!!
    # beim require enthaelt VAR1 andere werte als beim slurp
    # und zwar diejenigen, die beim letzten save_cache geschrieben wurden.
    my $content = do { local (@ARGV, $/) = $statefile; my $x = <>; close ARGV; $x };
    $VAR1 = eval "$content";
    $self->debug(sprintf "load %s", Data::Dumper::Dumper($VAR1));
    $self->{$cache} = $VAR1;
  }
}


################################################################
# top-level convenience functions
#
sub get_snmp_objects {
  my ($self, $mib, @mos) = @_;
  foreach (@mos) {
    #my $value = $self->get_snmp_object($mib, $_, 0);
    #if (defined $value) {
    #  $self->{$_} = $value;
    #} else {
      my $value = $self->get_snmp_object($mib, $_);
      if (defined $value) {
        $self->{$_} = $value;
      }
    #}
  }
}

sub get_snmp_tables {
  my ($self, $mib, $infos) = @_;
  foreach my $info (@{$infos}) {
    my $arrayname = $info->[0];
    my $table = $info->[1];
    my $class = $info->[2];
    my $filter = $info->[3];
    my $rows = $info->[4];
    $self->{$arrayname} = [] if ! exists $self->{$arrayname};
    if (! exists $Monitoring::GLPlugin::SNMP::tablecache->{$mib} || ! exists $Monitoring::GLPlugin::SNMP::tablecache->{$mib}->{$table}) {
      $Monitoring::GLPlugin::SNMP::tablecache->{$mib}->{$table} = [];
      foreach ($self->get_snmp_table_objects($mib, $table, undef, $rows)) {
        push(@{$Monitoring::GLPlugin::SNMP::tablecache->{$mib}->{$table}}, $_);
        my $new_object = $class->new(%{$_});
        next if (defined $filter && ! &$filter($new_object));
        push(@{$self->{$arrayname}}, $new_object);
      }
    } else {
      $self->debug(sprintf "get_snmp_tables %s %s cache hit", $mib, $table);
      foreach (@{$Monitoring::GLPlugin::SNMP::tablecache->{$mib}->{$table}}) {
        my $new_object = $class->new(%{$_});
        next if (defined $filter && ! &$filter($new_object));
        push(@{$self->{$arrayname}}, $new_object);
      }
    }
  }
}

sub merge_tables {
  my ($self, $into, @from) = @_;
  my $into_indices = {};
  map { $into_indices->{$_->{flat_indices}} = $_ } @{$self->{$into}};
  foreach (@from) {
    foreach my $element (@{$self->{$_}}) {
      if (exists $into_indices->{$element->{flat_indices}}) {
        foreach my $key (keys %{$element}) {
          $into_indices->{$element->{flat_indices}}->{$key} = $element->{$key};
        }
      }
    }
    delete $self->{$_};
  }
}

sub merge_tables_with_code {
  my ($self, $into, @from) = @_;
  my $into_indices = {};
  my @to_del = ();
  foreach my $into_elem (@{$self->{$into}}) {
    for (my $i = 0; $i < @from; $i += 2) {
      my ($from_elems, $func) = @from[$i, $i+1];
      foreach my $from_elem (@{$self->{$from_elems}}) {
        if (&$func($into_elem, $from_elem)) {
          foreach my $key (grep !/^(info|trace|warning|critical|blacklisted|extendedinfo|flat_indices|indices)/, sort keys %{$from_elem}) {
            $into_elem->{$key} = $from_elem->{$key};
          }
        }
      }
    }
  }
  for (my $i = 0; $i < @from; $i += 2) {
    my ($from_elems, $func) = @from[$i, $i+1];
    delete $self->{$from_elems};
  }
}

sub mibs_and_oids_definition {
  my ($self, $mib, $definition, @values) = @_;
  if (exists $Monitoring::GLPlugin::SNMP::MibsAndOids::definitions->{$mib} &&
      exists $Monitoring::GLPlugin::SNMP::MibsAndOids::definitions->{$mib}->{$definition}) {
    if (ref($Monitoring::GLPlugin::SNMP::MibsAndOids::definitions->{$mib}->{$definition}) eq "CODE") {
      return $Monitoring::GLPlugin::SNMP::MibsAndOids::definitions->{$mib}->{$definition}->(@values);
    } elsif (ref($Monitoring::GLPlugin::SNMP::MibsAndOids::definitions->{$mib}->{$definition}) eq "HASH") {
      return $Monitoring::GLPlugin::SNMP::MibsAndOids::definitions->{$mib}->{$definition}->{$values[0]};
    }
  } else {
    return "unknown_".$definition;
  }
}

sub clear_table_cache {
  my ($self, $mib, $table) = @_;
  if ($table && exists $Monitoring::GLPlugin::SNMP::tablecache->{$mib}) {
    delete $Monitoring::GLPlugin::SNMP::tablecache->{$mib}->{$table};
  } elsif ($mib) {
    delete $Monitoring::GLPlugin::SNMP::tablecache->{$mib};
  } else {
    $Monitoring::GLPlugin::SNMP::tablecache = {};
  }
}

################################################################
# 2nd level 
#
sub get_snmp_object {
  my ($self, $mib, $mo, $index) = @_;
  $self->require_mib($mib);
  if (exists $Monitoring::GLPlugin::SNMP::MibsAndOids::mibs_and_oids->{$mib} &&
      exists $Monitoring::GLPlugin::SNMP::MibsAndOids::mibs_and_oids->{$mib}->{$mo}) {
    my $oid = $Monitoring::GLPlugin::SNMP::MibsAndOids::mibs_and_oids->{$mib}->{$mo}.
        (defined $index ? '.'.$index : '');
    my $response = $self->get_request(-varbindlist => [$oid]);
    if (defined $response->{$oid}) {
      if ($response->{$oid} eq 'noSuchInstance' || $response->{$oid} eq 'noSuchObject') {
        $response->{$oid} = undef;
      } elsif (my @symbols = $self->make_symbolic($mib, $response, [[$index]])) {
        $response->{$oid} = $symbols[0]->{$mo};
      }
    }
    $self->debug(sprintf "GET: %s::%s (%s) : %s", $mib, $mo, $oid, defined $response->{$oid} ? $response->{$oid} : "<undef>");
    if (! defined $response->{$oid} && ! defined $index) {
      return $self->get_snmp_object($mib, $mo, 0);
    }
    return $response->{$oid};
  }
  return undef;
}

sub get_snmp_table_objects_with_cache {
  my ($self, $mib, $table, $key_attr) = @_;
  #return $self->get_snmp_table_objects($mib, $table);
  $self->update_entry_cache(0, $mib, $table, $key_attr);
  my @indices = $self->get_cache_indices($mib, $table, $key_attr);
  my @entries = ();
  foreach ($self->get_snmp_table_objects($mib, $table, \@indices)) {
    push(@entries, $_);
  }
  return @entries;
}

sub get_table_row_oids {
  my ($self, $mib, $table, $rows) = @_;
  $self->require_mib($mib);
  my $entry = $table;
  $entry =~ s/Table/Entry/g;
  my $eoid = $Monitoring::GLPlugin::SNMP::MibsAndOids::mibs_and_oids->{$mib}->{$entry}.'.';
  my $eoidlen = length($eoid);
  my @columns = scalar(@{$rows}) ?
  map {
      $Monitoring::GLPlugin::SNMP::MibsAndOids::mibs_and_oids->{$mib}->{$_}
  } @{$rows}
  :
  map {
      $Monitoring::GLPlugin::SNMP::MibsAndOids::mibs_and_oids->{$mib}->{$_}
  } grep {
    substr($Monitoring::GLPlugin::SNMP::MibsAndOids::mibs_and_oids->{$mib}->{$_}, 0, $eoidlen) eq
        $Monitoring::GLPlugin::SNMP::MibsAndOids::mibs_and_oids->{$mib}->{$entry}.'.'
  } keys %{$Monitoring::GLPlugin::SNMP::MibsAndOids::mibs_and_oids->{$mib}};
  return @columns;
}

# get_snmp_table_objects('MIB-Name', 'Table-Name', 'Table-Entry', [indices])
# returns array of hashrefs
sub get_snmp_table_objects {
  my ($self, $mib, $table, $indices, $rows) = @_;
  $indices ||= [];
  $rows ||= [];
  $self->require_mib($mib);
  my @entries = ();
  my $augmenting_table;
  $self->debug(sprintf "get_snmp_table_objects %s %s", $mib, $table);
  if ($table =~ /^(.*?)\+(.*)/) {
    $table = $1;
    $augmenting_table = $2;
  }
  my $entry = $table;
  $entry =~ s/Table/Entry/g;
  if (exists $Monitoring::GLPlugin::SNMP::MibsAndOids::mibs_and_oids->{$mib} &&
      exists $Monitoring::GLPlugin::SNMP::MibsAndOids::mibs_and_oids->{$mib}->{$table}) {
    if (scalar(@{$indices}) == 1 && $indices->[0] == -1) {
      # get mini-version of a table
      my $result = {};
      my $eoid = $Monitoring::GLPlugin::SNMP::MibsAndOids::mibs_and_oids->{$mib}->{$entry}.'.';
      my $eoidlen = length($eoid);
      my @columns = map {
          $Monitoring::GLPlugin::SNMP::MibsAndOids::mibs_and_oids->{$mib}->{$_}
      } grep {
        substr($Monitoring::GLPlugin::SNMP::MibsAndOids::mibs_and_oids->{$mib}->{$_}, 0, $eoidlen) eq
            $Monitoring::GLPlugin::SNMP::MibsAndOids::mibs_and_oids->{$mib}->{$entry}.'.'
      } keys %{$Monitoring::GLPlugin::SNMP::MibsAndOids::mibs_and_oids->{$mib}};
      my $ifresult = $self->get_entries(
          -columns => \@columns,
      );
      map { $result->{$_} = $ifresult->{$_} }
          keys %{$ifresult};
      if ($augmenting_table &&
          exists $Monitoring::GLPlugin::SNMP::MibsAndOids::mibs_and_oids->{$mib}->{$augmenting_table}) {
        my $entry = $augmenting_table;
        $entry =~ s/Table/Entry/g;
        my $eoid = $Monitoring::GLPlugin::SNMP::MibsAndOids::mibs_and_oids->{$mib}->{$entry}.'.';
        my $eoidlen = length($eoid);
        my @columns = map {
            $Monitoring::GLPlugin::SNMP::MibsAndOids::mibs_and_oids->{$mib}->{$_}
        } grep {
          substr($Monitoring::GLPlugin::SNMP::MibsAndOids::mibs_and_oids->{$mib}->{$_}, 0, $eoidlen) eq $eoid
        } keys %{$Monitoring::GLPlugin::SNMP::MibsAndOids::mibs_and_oids->{$mib}};
        my $ifresult = $self->get_entries(
            -columns => \@columns,
        );
        map { $result->{$_} = $ifresult->{$_} }
            keys %{$ifresult};
      }
      my @indices = 
          $self->get_indices(
              -baseoid => $Monitoring::GLPlugin::SNMP::MibsAndOids::mibs_and_oids->{$mib}->{$entry},
              -oids => [keys %{$result}]);
      $self->debug(sprintf "get_snmp_table_objects get_table returns %d indices",
          scalar(@indices));
      @entries = $self->make_symbolic($mib, $result, \@indices);
      @entries = map { $_->{indices} = shift @indices; $_ } @entries;
    } elsif (scalar(@{$indices}) == 1) {
      my $result = {};
      my $eoid = $Monitoring::GLPlugin::SNMP::MibsAndOids::mibs_and_oids->{$mib}->{$entry}.'.';
      my $eoidlen = length($eoid);
      my @columns = map {
          $Monitoring::GLPlugin::SNMP::MibsAndOids::mibs_and_oids->{$mib}->{$_}
      } grep {
        substr($Monitoring::GLPlugin::SNMP::MibsAndOids::mibs_and_oids->{$mib}->{$_}, 0, $eoidlen) eq
            $Monitoring::GLPlugin::SNMP::MibsAndOids::mibs_and_oids->{$mib}->{$entry}.'.'
      } keys %{$Monitoring::GLPlugin::SNMP::MibsAndOids::mibs_and_oids->{$mib}};
      my $index = join('.', @{$indices->[0]});
      my $ifresult = $self->get_entries(
          -startindex => $index,
          -endindex => $index,
          -columns => \@columns,
      );
      map { $result->{$_} = $ifresult->{$_} }
          keys %{$ifresult};
      if ($augmenting_table &&
          exists $Monitoring::GLPlugin::SNMP::MibsAndOids::mibs_and_oids->{$mib}->{$augmenting_table}) {
        my $entry = $augmenting_table;
        $entry =~ s/Table/Entry/g;
        my $eoid = $Monitoring::GLPlugin::SNMP::MibsAndOids::mibs_and_oids->{$mib}->{$entry}.'.';
        my $eoidlen = length($eoid);
        my @columns = map {
            $Monitoring::GLPlugin::SNMP::MibsAndOids::mibs_and_oids->{$mib}->{$_}
        } grep {
          substr($Monitoring::GLPlugin::SNMP::MibsAndOids::mibs_and_oids->{$mib}->{$_}, 0, $eoidlen) eq $eoid
        } keys %{$Monitoring::GLPlugin::SNMP::MibsAndOids::mibs_and_oids->{$mib}};
        my $ifresult = $self->get_entries(
            -startindex => $index,
            -endindex => $index,
            -columns => \@columns,
        );
        map { $result->{$_} = $ifresult->{$_} }
            keys %{$ifresult};
      }
      @entries = $self->make_symbolic($mib, $result, $indices);
      @entries = map { $_->{indices} = shift @{$indices}; $_ } @entries;
    } elsif (scalar(@{$indices}) > 1) {
    # man koennte hier pruefen, ob die indices aufeinanderfolgen
    # und dann get_entries statt get_table aufrufen
      my $result = {};
      my $eoid = $Monitoring::GLPlugin::SNMP::MibsAndOids::mibs_and_oids->{$mib}->{$entry}.'.';
      my $eoidlen = length($eoid);
      my @columns = map {
          $Monitoring::GLPlugin::SNMP::MibsAndOids::mibs_and_oids->{$mib}->{$_}
      } grep {
        substr($Monitoring::GLPlugin::SNMP::MibsAndOids::mibs_and_oids->{$mib}->{$_}, 0, $eoidlen) eq $eoid
      } keys %{$Monitoring::GLPlugin::SNMP::MibsAndOids::mibs_and_oids->{$mib}};
      my @sortedindices = map { $_->[0] }
          sort { $a->[1] cmp $b->[1] }
              map { [$_,
                  join '', map { sprintf("%30d",$_) } split( /\./, $_)
              ] } map { join('.', @{$_})} @{$indices};
      my $startindex = $sortedindices[0];
      my $endindex = $sortedindices[$#sortedindices];
      if (0) {
        # holzweg. dicke ciscos liefern unvollstaendiges resultat, d.h.
        # bei 138,19,157 kommt nur 138..144, dann ist schluss.
        # maxrepetitions bringt nichts.
        $result = $self->get_entries(
            -startindex => $startindex,
            -endindex => $endindex,
            -columns => \@columns,
        );
      } else {
        foreach my $ifidx (@sortedindices) {
          my $ifresult = $self->get_entries(
              -startindex => $ifidx,
              -endindex => $ifidx,
              -columns => \@columns,
          );
          map { $result->{$_} = $ifresult->{$_} }
              keys %{$ifresult};
        }
      }
      if ($augmenting_table &&
          exists $Monitoring::GLPlugin::SNMP::MibsAndOids::mibs_and_oids->{$mib}->{$augmenting_table}) {
        my $entry = $augmenting_table;
        $entry =~ s/Table/Entry/g;
        my $eoid = $Monitoring::GLPlugin::SNMP::MibsAndOids::mibs_and_oids->{$mib}->{$entry}.'.';
        my $eoidlen = length($eoid);
        my @columns = map {
            $Monitoring::GLPlugin::SNMP::MibsAndOids::mibs_and_oids->{$mib}->{$_}
        } grep {
          substr($Monitoring::GLPlugin::SNMP::MibsAndOids::mibs_and_oids->{$mib}->{$_}, 0, $eoidlen) eq $eoid
        } keys %{$Monitoring::GLPlugin::SNMP::MibsAndOids::mibs_and_oids->{$mib}};
        foreach my $ifidx (@sortedindices) {
          my $ifresult = $self->get_entries(
              -startindex => $ifidx,
              -endindex => $ifidx,
              -columns => \@columns,
          );
          map { $result->{$_} = $ifresult->{$_} }
              keys %{$ifresult};
        }
      }
      # now we have numerical_oid+index => value
      # needs to become symboic_oid => value
      #my @indices =
      # $self->get_indices($Monitoring::GLPlugin::SNMP::MibsAndOids::mibs_and_oids->{$mib}->{$entry});
      @entries = $self->make_symbolic($mib, $result, $indices);
      @entries = map { $_->{indices} = shift @{$indices}; $_ } @entries;
    } elsif (scalar(@{$rows})) {
      my @columns = $self->get_table_row_oids($mib, $table, $rows);
      my $result = $self->get_entries(
          -columns => \@columns,
      );
      $self->debug(sprintf "get_snmp_table_objects get_table_r returns %d oids",
          scalar(keys %{$result}));
      my @indices =
          $self->get_indices(
              -baseoid => $Monitoring::GLPlugin::SNMP::MibsAndOids::mibs_and_oids->{$mib}->{$entry},
              -oids => [keys %{$result}]);
      $self->debug(sprintf "get_snmp_table_objects get_table_r returns %d indices",
          scalar(@indices));
      @entries = $self->make_symbolic($mib, $result, \@indices);
      @entries = map { $_->{indices} = shift @indices; $_ } @entries;
    } else {
      $self->debug(sprintf "get_snmp_table_objects calls get_table %s",
          $Monitoring::GLPlugin::SNMP::MibsAndOids::mibs_and_oids->{$mib}->{$table});
      my $result = $self->get_table(
          -baseoid => $Monitoring::GLPlugin::SNMP::MibsAndOids::mibs_and_oids->{$mib}->{$table});
      $self->debug(sprintf "get_snmp_table_objects get_table returns %d oids",
          scalar(keys %{$result}));
      # now we have numerical_oid+index => value
      # needs to become symboic_oid => value
      my @indices = 
          $self->get_indices(
              -baseoid => $Monitoring::GLPlugin::SNMP::MibsAndOids::mibs_and_oids->{$mib}->{$entry},
              -oids => [keys %{$result}]);
      $self->debug(sprintf "get_snmp_table_objects get_table returns %d indices",
          scalar(@indices));
      @entries = $self->make_symbolic($mib, $result, \@indices);
      @entries = map { $_->{indices} = shift @indices; $_ } @entries;
    }
  }
  @entries = map { $_->{flat_indices} = join(".", @{$_->{indices}}); $_ } @entries;
  return @entries;
}

sub bulk_is_baeh {
  my ($self, $maxrepetitions) = @_;
  $maxrepetitions ||= 1;
  $Monitoring::GLPlugin::SNMP::maxrepetitions = $maxrepetitions;
}

################################################################
# 3rd level functions. calling net::snmp-functions
# 
sub get_request {
  my ($self, %params) = @_;
  my @notcached = ();
  foreach my $oid (@{$params{'-varbindlist'}}) {
    $self->add_oidtrace($oid);
    if (! exists $Monitoring::GLPlugin::SNMP::rawdata->{$oid}) {
      push(@notcached, $oid);
    }
  }
  if (! $self->opts->snmpwalk && (scalar(@notcached) > 0)) {
    my %params = ();
    if ($Monitoring::GLPlugin::SNMP::session->version() == 0) {
      $params{-varbindlist} = \@notcached;
    } elsif ($Monitoring::GLPlugin::SNMP::session->version() == 1) {
      $params{-varbindlist} = \@notcached;
      #$params{-nonrepeaters} = scalar(@notcached);
    } elsif ($Monitoring::GLPlugin::SNMP::session->version() == 3) {
      $params{-varbindlist} = \@notcached;
      $params{-contextengineid} = $self->opts->contextengineid if $self->opts->contextengineid;
      $params{-contextname} = $self->opts->contextname if $self->opts->contextname;
    }
    my $result = $Monitoring::GLPlugin::SNMP::session->get_request(%params);
    # so, und jetzt gibts stinkstiefel, die kriegen
    # params{-varbindlist => [1.3.6.1.4.1.318.1.1.1.1.1.1]
    # und result ist
    # { 1.3.6.1.4.1.318.1.1.1.1.1.1.0 => "Smart-UPS RT 10000 XL" }
    # letzteres kommt in raw_data
    # und beim abschliessenden map wirds natuerlich nicht mehr gefunden 
    # also leeres return. <<kraftausdruck>>
    foreach my $key (%{$result}) {
      $self->add_rawdata($key, $result->{$key});
    }
  }
  my $result = {};
  map {
      $result->{$_} = exists $Monitoring::GLPlugin::SNMP::rawdata->{$_} ?
          $Monitoring::GLPlugin::SNMP::rawdata->{$_} :
      exists $Monitoring::GLPlugin::SNMP::rawdata->{$_.'.0'} ?
          $Monitoring::GLPlugin::SNMP::rawdata->{$_.'.0'} : undef;
  } @{$params{'-varbindlist'}};
  return $result;
}

sub get_entries_get_bulk {
  my ($self, %params) = @_;
  my $result = {};
  $self->debug(sprintf "get_entries_get_bulk %s", Data::Dumper::Dumper(\%params));
  my %newparams = ();
  $newparams{'-maxrepetitions'} = 3;
  $newparams{'-startindex'} = $params{'-startindex'}
      if defined $params{'-startindex'};
  $newparams{'-endindex'} = $params{'-endindex'}
      if defined $params{'-endindex'};
  $newparams{'-columns'} = $params{'-columns'};
  if ($Monitoring::GLPlugin::SNMP::session->version() == 3) {
    $newparams{-contextengineid} = $self->opts->contextengineid if $self->opts->contextengineid;
    $newparams{-contextname} = $self->opts->contextname if $self->opts->contextname;
  }
  $result = $Monitoring::GLPlugin::SNMP::session->get_entries(%newparams);
  return $result;
}

sub get_entries_get_next {
  my ($self, %params) = @_;
  my $result = {};
  $self->debug(sprintf "get_entries_get_next %s", Data::Dumper::Dumper(\%params));
  my %newparams = ();
  $newparams{'-maxrepetitions'} = 0;
  $newparams{'-startindex'} = $params{'-startindex'}
      if defined $params{'-startindex'};
  $newparams{'-endindex'} = $params{'-endindex'}
      if defined $params{'-endindex'};
  $newparams{'-columns'} = $params{'-columns'};
  if ($Monitoring::GLPlugin::SNMP::session->version() == 3) {
    $newparams{-contextengineid} = $self->opts->contextengineid if $self->opts->contextengineid;
    $newparams{-contextname} = $self->opts->contextname if $self->opts->contextname;
  }
  $result = $Monitoring::GLPlugin::SNMP::session->get_entries(%newparams);
  return $result;
}

sub get_entries_get_next_1index {
  my ($self, %params) = @_;
  my $result = {};
  $self->debug(sprintf "get_entries_get_next_1index %s", Data::Dumper::Dumper(\%params));
  my %newparams = ();
  $newparams{'-startindex'} = $params{'-startindex'}
      if defined $params{'-startindex'};
  $newparams{'-endindex'} = $params{'-endindex'}
      if defined $params{'-endindex'};
  $newparams{'-columns'} = $params{'-columns'};
  my %singleparams = ();
  $singleparams{'-maxrepetitions'} = 0;
  if ($Monitoring::GLPlugin::SNMP::session->version() == 3) {
    $singleparams{-contextengineid} = $self->opts->contextengineid if $self->opts->contextengineid;
    $singleparams{-contextname} = $self->opts->contextname if $self->opts->contextname;
  }
  foreach my $index ($newparams{'-startindex'}..$newparams{'-endindex'}) {
    foreach my $oid (@{$newparams{'-columns'}}) {
      $singleparams{'-columns'} = [$oid];
      $singleparams{'-startindex'} = $index;
      $singleparams{'-endindex'} =$index;
      my $singleresult = $Monitoring::GLPlugin::SNMP::session->get_entries(%singleparams);
      foreach my $key (keys %{$singleresult}) {
        $result->{$key} = $singleresult->{$key};
      }
    }
  }
  return $result;
}

sub get_entries_get_simple {
  my ($self, %params) = @_;
  my $result = {};
  $self->debug(sprintf "get_entries_get_simple %s", Data::Dumper::Dumper(\%params));
  my %newparams = ();
  $newparams{'-startindex'} = $params{'-startindex'}
      if defined $params{'-startindex'};
  $newparams{'-endindex'} = $params{'-endindex'}
      if defined $params{'-endindex'};
  $newparams{'-columns'} = $params{'-columns'};
  my %singleparams = ();
  if ($Monitoring::GLPlugin::SNMP::session->version() == 3) {
    $singleparams{-contextengineid} = $self->opts->contextengineid if $self->opts->contextengineid;
    $singleparams{-contextname} = $self->opts->contextname if $self->opts->contextname;
  }
  foreach my $index ($newparams{'-startindex'}..$newparams{'-endindex'}) {
    foreach my $oid (@{$newparams{'-columns'}}) {
      $singleparams{'-varbindlist'} = [$oid.".".$index];
      my $singleresult = $Monitoring::GLPlugin::SNMP::session->get_request(%singleparams);
      foreach my $key (keys %{$singleresult}) {
        $result->{$key} = $singleresult->{$key};
      }
    }
  }
  return $result;
}

sub get_entries {
  my ($self, %params) = @_;
  # [-startindex]
  # [-endindex]
  # -columns
  my $result = {};
  $self->debug(sprintf "get_entries %s", Data::Dumper::Dumper(\%params));
  if (! $self->opts->snmpwalk) {
    $result = $self->get_entries_get_bulk(%params);
    if (! $result) {
      if (scalar (@{$params{'-columns'}}) < 50 && $params{'-endindex'} && $params{'-startindex'} eq $params{'-endindex'}) {
        $result = $self->get_entries_get_simple(%params);
      } else {
        $result = $self->get_entries_get_next(%params);
      }
      if (! $result && defined $params{'-startindex'} && $params{'-startindex'} !~ /\./) {
        # compound indexes cannot continue, as these two methods iterate numerically
        if ($Monitoring::GLPlugin::SNMP::session->error() =~ /tooBig/i) {
          $result = $self->get_entries_get_next_1index(%params);
        }
        if (! $result) {
          $result = $self->get_entries_get_simple(%params);
        }
        if (! $result) {
          $self->debug(sprintf "nutzt nix\n");
        }
      }
    }
    foreach my $key (keys %{$result}) {
      if (substr($key, -1) eq " ") {
        my $value = $result->{$key};
        delete $result->{$key};
        $key =~ s/\s+$//g;
        $result->{$key} = $value;
        #
        # warum?
        #
        # %newparams ist:
        #  '-columns' => [
        #                  '1.3.6.1.2.1.2.2.1.8',
        #                  '1.3.6.1.2.1.2.2.1.13',
        #                  ...
        #                  '1.3.6.1.2.1.2.2.1.16'
        #                ],
        #  '-startindex' => '2',
        #  '-endindex' => '2'
        #
        # und $result ist:
        #  ...
        #  '1.3.6.1.2.1.2.2.1.2.2' => 'Adaptive Security Appliance \'outside\' interface',
        #  '1.3.6.1.2.1.2.2.1.16.2 ' => 4281465004,
        #  '1.3.6.1.2.1.2.2.1.13.2' => 0,
        #  ...
        #
        # stinkstiefel!
        #
      }
      $self->add_rawdata($key, $result->{$key});
    }
  } else {
    my $preresult = $self->get_matching_oids(
        -columns => $params{'-columns'});
    foreach (keys %{$preresult}) {
      $result->{$_} = $preresult->{$_};
    }
    my @sortedkeys = map { $_->[0] }
        sort { $a->[1] cmp $b->[1] }
            map { [$_,
                    join '', map { sprintf("%30d",$_) } split( /\./, $_)
                  ] } keys %{$result};
    my @to_del = ();
    if ($params{'-startindex'}) {
      foreach my $resoid (@sortedkeys) {
        foreach my $oid (@{$params{'-columns'}}) {
          my $poid = $oid.'.';
          my $lpoid = length($poid);
          if (substr($resoid, 0, $lpoid) eq $poid) {
            my $oidpattern = $poid;
            $oidpattern =~ s/\./\\./g;
            if ($resoid =~ /^$oidpattern(.+)$/) {
              if ($1 lt $params{'-startindex'}) {
                push(@to_del, $oid.'.'.$1);
              }
            }
          }
        }
      }
    }
    if ($params{'-endindex'}) {
      foreach my $resoid (@sortedkeys) {
        foreach my $oid (@{$params{'-columns'}}) {
          my $poid = $oid.'.';
          my $lpoid = length($poid);
          if (substr($resoid, 0, $lpoid) eq $poid) {
            my $oidpattern = $poid;
            $oidpattern =~ s/\./\\./g;
            if ($resoid =~ /^$oidpattern(.+)$/) {
              if ($1 gt $params{'-endindex'}) {
                push(@to_del, $oid.'.'.$1);
              }
            }
          }
        }
      }
    }
    foreach (@to_del) {
      delete $result->{$_};
    }
  }
  return $result;
}

sub get_entries_by_walk {
  my ($self, %params) = @_;
  if (! $self->opts->snmpwalk) {
    $self->add_ok("if you get this crap working correctly, let me know");
    if ($Monitoring::GLPlugin::SNMP::session->version() == 3) {
      $params{-contextengineid} = $self->opts->contextengineid if $self->opts->contextengineid;
      $params{-contextname} = $self->opts->contextname if $self->opts->contextname;
    }
    $self->debug(sprintf "get_tree %s", Data::Dumper::Dumper(\%params));
    my @baseoids = @{$params{-varbindlist}};
    delete $params{-varbindlist};
    if ($Monitoring::GLPlugin::SNMP::session->version() == 0) {
      foreach my $baseoid (@baseoids) {
        $params{-varbindlist} = [$baseoid];
        while (my $result = $Monitoring::GLPlugin::SNMP::session->get_next_request(%params)) {
          $params{-varbindlist} = [($Monitoring::GLPlugin::SNMP::session->var_bind_names)[0]];
        }
      }
    } else {
      $params{-maxrepetitions} = 200;
      foreach my $baseoid (@baseoids) {
        $params{-varbindlist} = [$baseoid];
        while (my $result = $Monitoring::GLPlugin::SNMP::session->get_bulk_request(%params)) {
          my @names = $Monitoring::GLPlugin::SNMP::session->var_bind_names();
          my @oids = $self->sort_oids(\@names);
          $params{-varbindlist} = [pop @oids];
        }
      }
    }
  } else {
    return $self->get_matching_oids(
        -columns => $params{-varbindlist});
  }
}

sub get_table {
  my ($self, %params) = @_;
  $self->add_oidtrace($params{'-baseoid'});
  if (! $self->opts->snmpwalk) {
    my @notcached = ();
    if ($Monitoring::GLPlugin::SNMP::session->version() == 3) {
      $params{-contextengineid} = $self->opts->contextengineid if $self->opts->contextengineid;
      $params{-contextname} = $self->opts->contextname if $self->opts->contextname;
    }
    if ($Monitoring::GLPlugin::SNMP::maxrepetitions) {
      # some devices (Bintec) don't like bulk-requests. They call bulk_is_baeh(), so
      # we immediately send get-next
      $params{'-maxrepetitions'} = $Monitoring::GLPlugin::SNMP::maxrepetitions;
    }
    $self->debug(sprintf "get_table %s", Data::Dumper::Dumper(\%params));
    my $result = $Monitoring::GLPlugin::SNMP::session->get_table(%params);
    $self->debug(sprintf "get_table returned %d oids", scalar(keys %{$result}));
    if (scalar(keys %{$result}) == 0) {
      $self->debug(sprintf "get_table error: %s", 
          $Monitoring::GLPlugin::SNMP::session->error());
      $self->debug("get_table error: try fallback");
      $params{'-maxrepetitions'} = 1;
      $self->debug(sprintf "get_table %s", Data::Dumper::Dumper(\%params));
      $result = $Monitoring::GLPlugin::SNMP::session->get_table(%params);
      $self->debug(sprintf "get_table returned %d oids", scalar(keys %{$result}));
      if (scalar(keys %{$result}) == 0) {
        $self->debug(sprintf "get_table error: %s", 
            $Monitoring::GLPlugin::SNMP::session->error());
        $self->debug("get_table error: no more fallbacks. Try --protocol 1");
      }
    }
    # Drecksstinkstiefel Net::SNMP
    # '1.3.6.1.2.1.2.2.1.22.4 ' => 'endOfMibView',
    # '1.3.6.1.2.1.2.2.1.22.4' => '0.0',
    foreach my $key (keys %{$result}) {
      if (substr($key, -1) eq " ") {
        my $value = $result->{$key};
        delete $result->{$key};
        (my $shortkey = $key) =~ s/\s+$//g;
        if (! exists $result->{shortkey}) {
          $result->{$shortkey} = $value;
        }
        $self->add_rawdata($key, $result->{$key}) if exists $result->{$key};
      } else {
        $self->add_rawdata($key, $result->{$key});
      }
    }
  }
  return $self->get_matching_oids(
      -columns => [$params{'-baseoid'}]);
}

################################################################
# helper functions
# 
sub valid_response {
  my ($self, $mib, $oid, $index) = @_;
  $self->require_mib($mib);
  if (exists $Monitoring::GLPlugin::SNMP::MibsAndOids::mibs_and_oids->{$mib} &&
      exists $Monitoring::GLPlugin::SNMP::MibsAndOids::mibs_and_oids->{$mib}->{$oid}) {
    # make it numerical
    my $oid = $Monitoring::GLPlugin::SNMP::MibsAndOids::mibs_and_oids->{$mib}->{$oid};
    if (defined $index) {
      $oid .= '.'.$index;
    }
    my $result = $self->get_request(
        -varbindlist => [$oid]
    );
    if (!defined($result) ||
        ! defined $result->{$oid} ||
        $result->{$oid} eq 'noSuchInstance' ||
        $result->{$oid} eq 'noSuchObject' ||
        $result->{$oid} eq 'endOfMibView') {
      return undef;
    } else {
      $self->add_rawdata($oid, $result->{$oid});
      return $result->{$oid};
    }
  } else {
    return undef;
  }
}

# make_symbolic
# mib is the name of a mib (must be in mibs_and_oids)
# result is a hash-key oid->value
# indices is a array ref of array refs. [[1],[2],...] or [[1,0],[1,1],[2,0]..
sub make_symbolic {
  my ($self, $mib, $result, $indices) = @_;
  $self->require_mib($mib);
  my @entries = ();
  if (! wantarray && ref(\$result) eq "SCALAR" && ref(\$indices) eq "SCALAR") {
    # $self->make_symbolic('CISCO-IETF-NAT-MIB', 'cnatProtocolStatsName', $self->{cnatProtocolStatsName});
    my $oid = $Monitoring::GLPlugin::SNMP::MibsAndOids::mibs_and_oids->{$mib}->{$result};
    $result = { $oid => $self->{$result} };
    $indices = [[]];
  }
  foreach my $index (@{$indices}) {
    # skip [], [[]], [[undef]]
    if (ref($index) eq "ARRAY") {
      if (scalar(@{$index}) == 0) {
        next;
      } elsif (!defined $index->[0]) {
        next;
      }
    }
    my $mo = {};
    my $idx = join('.', @{$index}); # index can be multi-level
    foreach my $symoid
        (keys %{$Monitoring::GLPlugin::SNMP::MibsAndOids::mibs_and_oids->{$mib}}) {
      my $oid = $Monitoring::GLPlugin::SNMP::MibsAndOids::mibs_and_oids->{$mib}->{$symoid};
      if (ref($oid) ne 'HASH') {
        my $fulloid = $oid . '.'.$idx;
        if (exists $result->{$fulloid}) {
          if (exists $Monitoring::GLPlugin::SNMP::MibsAndOids::mibs_and_oids->{$mib}->{$symoid.'Definition'}) {
            if (ref($Monitoring::GLPlugin::SNMP::MibsAndOids::mibs_and_oids->{$mib}->{$symoid.'Definition'}) eq 'HASH') {
              if (exists $Monitoring::GLPlugin::SNMP::MibsAndOids::mibs_and_oids->{$mib}->{$symoid.'Definition'}->{$result->{$fulloid}}) {
                $mo->{$symoid} = $Monitoring::GLPlugin::SNMP::MibsAndOids::mibs_and_oids->{$mib}->{$symoid.'Definition'}->{$result->{$fulloid}};
              } else {
                $mo->{$symoid} = 'unknown_'.$result->{$fulloid};
              }
            } elsif ($Monitoring::GLPlugin::SNMP::MibsAndOids::mibs_and_oids->{$mib}->{$symoid.'Definition'} =~ /^OID::(.*)/) {
              my $othermib = $1;
              my $value_which_is_a_oid = $result->{$fulloid};
              $value_which_is_a_oid =~ s/^\.//g;
              my @result = grep { $Monitoring::GLPlugin::SNMP::MibsAndOids::mibs_and_oids->{$othermib}->{$_} eq $value_which_is_a_oid } keys %{$Monitoring::GLPlugin::SNMP::MibsAndOids::mibs_and_oids->{$othermib}};
              if (scalar(@result)) {
                $mo->{$symoid} = $result[0];
              } else {
                $mo->{$symoid} = 'unknown_'.$result->{$fulloid};
              }
            } elsif ($Monitoring::GLPlugin::SNMP::MibsAndOids::mibs_and_oids->{$mib}->{$symoid.'Definition'} =~ /^(.*?)::(.*)/) {
              my $mib = $1;
              my $definition = $2;
              if  (exists $Monitoring::GLPlugin::SNMP::MibsAndOids::definitions->{$mib} &&
                  exists $Monitoring::GLPlugin::SNMP::MibsAndOids::definitions->{$mib}->{$definition} &&
                  ref($Monitoring::GLPlugin::SNMP::MibsAndOids::definitions->{$mib}->{$definition}) eq 'CODE') {
                $mo->{$symoid} = $Monitoring::GLPlugin::SNMP::MibsAndOids::definitions->{$mib}->{$definition}->($result->{$fulloid});
              } elsif  (exists $Monitoring::GLPlugin::SNMP::MibsAndOids::definitions->{$mib} &&
                  exists $Monitoring::GLPlugin::SNMP::MibsAndOids::definitions->{$mib}->{$definition} &&
                  ref($Monitoring::GLPlugin::SNMP::MibsAndOids::definitions->{$mib}->{$definition}) eq 'HASH' &&
                  exists $Monitoring::GLPlugin::SNMP::MibsAndOids::definitions->{$mib}->{$definition}->{$result->{$fulloid}}) {
                $mo->{$symoid} = $Monitoring::GLPlugin::SNMP::MibsAndOids::definitions->{$mib}->{$definition}->{$result->{$fulloid}};
              } else {
                $mo->{$symoid} = 'unknown_'.$result->{$fulloid};
              }
            } else {
              $mo->{$symoid} = 'unknown_'.$result->{$fulloid};
              # oder $Monitoring::GLPlugin::SNMP::MibsAndOids::mibs_and_oids->{$mib}->{$symoid.'Definition'}?
            }
          } else {
            $mo->{$symoid} = $result->{$fulloid};
          }
        }
      }
    }
    push(@entries, $mo);
  }
  if (@{$indices} and scalar(@{$indices}) == 1 and !defined $indices->[0]->[0]) {
    my $mo = {};
    foreach my $symoid
        (keys %{$Monitoring::GLPlugin::SNMP::MibsAndOids::mibs_and_oids->{$mib}}) {
      my $oid = $Monitoring::GLPlugin::SNMP::MibsAndOids::mibs_and_oids->{$mib}->{$symoid};
      if (ref($oid) ne 'HASH') {
        if (exists $result->{$oid}) {
          if (exists $Monitoring::GLPlugin::SNMP::MibsAndOids::mibs_and_oids->{$mib}->{$symoid.'Definition'}) {
            if (ref($Monitoring::GLPlugin::SNMP::MibsAndOids::mibs_and_oids->{$mib}->{$symoid.'Definition'}) eq 'HASH') {
              if (exists $Monitoring::GLPlugin::SNMP::MibsAndOids::mibs_and_oids->{$mib}->{$symoid.'Definition'}->{$result->{$oid}}) {
                $mo->{$symoid} = $Monitoring::GLPlugin::SNMP::MibsAndOids::mibs_and_oids->{$mib}->{$symoid.'Definition'}->{$result->{$oid}};
                push(@entries, $mo);
              }
            } elsif ($Monitoring::GLPlugin::SNMP::MibsAndOids::mibs_and_oids->{$mib}->{$symoid.'Definition'} =~ /^(.*?)::(.*)/) {
              my $mib = $1;
              my $definition = $2;
              if  (exists $Monitoring::GLPlugin::SNMP::MibsAndOids::definitions->{$mib} &&
                  exists $Monitoring::GLPlugin::SNMP::MibsAndOids::definitions->{$mib}->{$definition} &&
                  ref($Monitoring::GLPlugin::SNMP::MibsAndOids::definitions->{$mib}->{$definition}) eq 'CODE') {
                $mo->{$symoid} = $Monitoring::GLPlugin::SNMP::MibsAndOids::definitions->{$mib}->{$definition}->($result->{$oid});
              } elsif  (exists $Monitoring::GLPlugin::SNMP::MibsAndOids::definitions->{$mib} &&
                  exists $Monitoring::GLPlugin::SNMP::MibsAndOids::definitions->{$mib}->{$definition} &&
                  ref($Monitoring::GLPlugin::SNMP::MibsAndOids::definitions->{$mib}->{$definition}) eq 'HASH' &&
                  exists $Monitoring::GLPlugin::SNMP::MibsAndOids::definitions->{$mib}->{$definition}->{$result->{$oid}}) {
                $mo->{$symoid} = $Monitoring::GLPlugin::SNMP::MibsAndOids::definitions->{$mib}->{$definition}->{$result->{$oid}};
              } else {
                $mo->{$symoid} = 'unknown_'.$result->{$oid};
              }
            } else {
              $mo->{$symoid} = 'unknown_'.$result->{$oid};
              # oder $Monitoring::GLPlugin::SNMP::MibsAndOids::mibs_and_oids->{$mib}->{$symoid.'Definition'}?
            }
          }
        }
      }
    }
    push(@entries, $mo) if keys %{$mo};
  }
  if (wantarray) {
    return @entries;
  } else {
    foreach my $entry (@entries) {
      foreach my $key (keys %{$entry}) {
        $self->{$key} = $entry->{$key};
      }
    }
  }
}

sub sort_oids {
  my ($self, $oids) = @_;
  $oids ||= [];
  my @sortedkeys = map { $_->[0] }
      sort { $a->[1] cmp $b->[1] }
          map { [$_,
                  join '', map { sprintf("%30d",$_) } split( /\./, $_)
                ] } @{$oids};
  return @sortedkeys;
}

sub get_matching_oids {
  my ($self, %params) = @_;
  my $result = {};
  $self->debug(sprintf "get_matching_oids %s", Data::Dumper::Dumper(\%params));
  foreach my $oid (@{$params{'-columns'}}) {
    my $oidpattern = $oid;
    $oidpattern =~ s/\./\\./g;
    map { $result->{$_} = $Monitoring::GLPlugin::SNMP::rawdata->{$_} }
        grep /^$oidpattern(?=\.|$)/, keys %{$Monitoring::GLPlugin::SNMP::rawdata};
  }
  $self->debug(sprintf "get_matching_oids returns %d from %d oids", 
      scalar(keys %{$result}), scalar(keys %{$Monitoring::GLPlugin::SNMP::rawdata}));
  return $result;
}

sub get_indices {
  my ($self, %params) = @_;
  # -baseoid : entry
  # find all oids beginning with $entry
  # then skip one field for the sequence
  # then read the next numindices fields
  my $entrypat = $params{'-baseoid'};
  $entrypat =~ s/\./\\\./g;
  my @indices = map {
      /^$entrypat\.\d+\.(.*)/ && $1;
  } grep {
      /^$entrypat/
  } keys %{$Monitoring::GLPlugin::SNMP::rawdata};
  my %seen = ();
  my @o = map {[split /\./]} sort grep !$seen{$_}++, @indices;
  return @o;
}

# this flattens a n-dimensional array and returns the absolute position
# of the element at position idx1,idx2,...,idxn
# element 1,2 in table 0,0 0,1 0,2 1,0 1,1 1,2 2,0 2,1 2,2 is at pos 6
sub get_number {
  my ($self, $indexlists, @element) = @_;
  # $indexlists = zeiger auf array aus [1, 2]
  my $dimensions = scalar(@{$indexlists->[0]});
  my @sorted = ();
  my $number = 0;
  if ($dimensions == 1) {
    @sorted =
        sort { $a->[0] <=> $b->[0] } @{$indexlists};
  } elsif ($dimensions == 2) {
    @sorted =
        sort { $a->[0] <=> $b->[0] || $a->[1] <=> $b->[1] } @{$indexlists};
  } elsif ($dimensions == 3) {
    @sorted =
        sort { $a->[0] <=> $b->[0] ||
               $a->[1] <=> $b->[1] ||
               $a->[2] <=> $b->[2] } @{$indexlists};
  }
  foreach (@sorted) {
    if ($dimensions == 1) {
      if ($_->[0] == $element[0]) {
        last;
      }
    } elsif ($dimensions == 2) {
      if ($_->[0] == $element[0] && $_->[1] == $element[1]) {
        last;
      }
    } elsif ($dimensions == 3) {
      if ($_->[0] == $element[0] &&
          $_->[1] == $element[1] &&
          $_->[2] == $element[2]) {
        last;
      }
    }
    $number++;
  }
  return ++$number;
}

################################################################
# caching functions
# 
sub set_rawdata {
  my ($self, $rawdata) = @_;
  $Monitoring::GLPlugin::SNMP::rawdata = $rawdata;
}

sub add_rawdata {
  my ($self, $oid, $value) = @_;
  $Monitoring::GLPlugin::SNMP::rawdata->{$oid} = $value;
}

sub rawdata {
  my ($self) = @_;
  return $Monitoring::GLPlugin::SNMP::rawdata;
}

sub add_oidtrace {
  my ($self, $oid) = @_;
  $self->debug("cache: ".$oid);
  push(@{$Monitoring::GLPlugin::SNMP::oidtrace}, $oid);
}

#  $self->update_entry_cache(0, $mib, $table, $key_attr);
#  my @indices = $self->get_cache_indices();
sub get_cache_indices {
  my ($self, $mib, $table, $key_attr) = @_;
  if (ref($key_attr) ne "ARRAY") {
    $key_attr = [$key_attr];
  }
  my $cache = sprintf "%s_%s_%s_cache", 
      $mib, $table, join('#', @{$key_attr});
  my @indices = ();
  foreach my $key (keys %{$self->{$cache}}) {
    my ($descr, $index) = split('-//-', $key, 2);
    if ($self->opts->name) {
      if ($self->opts->regexp) {
        my $pattern = $self->opts->name;
        if ($descr =~ /$pattern/i) {
          push(@indices, $self->{$cache}->{$key});
        }
      } else {
        if ($self->opts->name =~ /^\d+$/) {
          if ($index == 1 * $self->opts->name) {
            push(@indices, [1 * $self->opts->name]);
          }
        } else {
          if (lc $descr eq lc $self->opts->name) {
            push(@indices, $self->{$cache}->{$key});
          }
        }
      }
    } else {
      push(@indices, $self->{$cache}->{$key});
    }
  }
  return @indices;
  return map { join('.', ref($_) eq "ARRAY" ? @{$_} : $_) } @indices;
}

sub get_entities {
  my ($self, $class, $filter) = @_;
  foreach ($self->get_sub_table('ENTITY-MIB', [
    'entPhysicalDescr',
    'entPhysicalName',
    'entPhysicalClass',
  ])) {
    my $new_object = $class->new(%{$_});
    next if (defined $filter && ! &$filter($new_object));
    push @{$self->{entities}}, $new_object;
  }
}

sub get_sub_table {
  my ($self, $mib, $names) = @_;
  $self->require_mib($mib);
  my @oids = map {
    $Monitoring::GLPlugin::SNMP::MibsAndOids::mibs_and_oids->{$mib}->{$_}
  } @$names;
  my $result = $self->get_entries(
    -columns => \@oids
  );
  my $indices = ();
  map { if ($_ =~ /\.(\d+)$/) { $indices->{$1} = [ $1 ]; } } keys %$result;
  my @indices = values %$indices;
  my @entries = $self->make_symbolic($mib, $result, \@indices);
  @entries = map { $_->{indices} = shift @indices; $_ } @entries;
  @entries = map { $_->{flat_indices} = join(".", @{$_->{indices}}); $_ } @entries;
  return @entries;
}

sub join_table {
  my ($self, $to, $from) = @_;
  my $to_i = {};
  foreach (@$to) {
    my $i = $_->{flat_indices};
    $to_i->{$i} = $_;
  }
  foreach my $f (@$from) {
    my $i = $f->{flat_indices};
    if (exists $to_i->{$i}) {
      foreach (keys %$f) {
        next if $_ =~ /indices/;
        $to_i->{$i}->{$_} = $f->{$_};
      }
    }
  }
}




package Monitoring::GLPlugin::SNMP::MibsAndOids;
our @ISA = qw(Monitoring::GLPlugin::SNMP);

{
  no warnings qw(once);
  $Monitoring::GLPlugin::SNMP::MibsAndOids::discover_ids = {};
  $Monitoring::GLPlugin::SNMP::MibsAndOids::mib_ids = {};
  $Monitoring::GLPlugin::SNMP::MibsAndOids::mibs_and_oids = {};
  $Monitoring::GLPlugin::SNMP::MibsAndOids::definitions = {};
  $Monitoring::GLPlugin::SNMP::MibsAndOids::origin = {};
}



package Monitoring::GLPlugin::SNMP::MibsAndOids::MGSNMPUPSMIB;

$Monitoring::GLPlugin::SNMP::MibsAndOids::origin->{'MG-SNMP-UPS-MIB'} = {
  url => "",
  name => "MG-SNMP-UPS-MIB",
};

$Monitoring::GLPlugin::SNMP::MibsAndOids::mib_ids->{'MG-SNMP-UPS-MIB'} = 
  '1.3.6.1.4.1.705.1';

$Monitoring::GLPlugin::SNMP::MibsAndOids::mibs_and_oids->{'MG-SNMP-UPS-MIB'} = {
  merlinGerin => '1.3.6.1.4.1.705',
  upsmg => '1.3.6.1.4.1.705.1',
  upsmgIdent => '1.3.6.1.4.1.705.1.1',
  upsmgIdentFamilyName => '1.3.6.1.4.1.705.1.1.1',
  upsmgIdentModelName => '1.3.6.1.4.1.705.1.1.2',
  upsmgIdentRevisionLevel => '1.3.6.1.4.1.705.1.1.3',
  upsmgIdentFirmwareVersion => '1.3.6.1.4.1.705.1.1.4',
  upsmgIdentUserID => '1.3.6.1.4.1.705.1.1.5',
  upsmgIdentInstallationDate => '1.3.6.1.4.1.705.1.1.6',
  upsmgIdentSerialNumber => '1.3.6.1.4.1.705.1.1.7',
  upsmgManagement => '1.3.6.1.4.1.705.1.2',
  upsmgManagersNum => '1.3.6.1.4.1.705.1.2.1',
  upsmgManagersTable => '1.3.6.1.4.1.705.1.2.2',
  upsmgManagersEntry => '1.3.6.1.4.1.705.1.2.2.1',
  mgmanagerIndex => '1.3.6.1.4.1.705.1.2.2.1.1',
  mgmanagerDeviceNumber => '1.3.6.1.4.1.705.1.2.2.1.2',
  mgmanagerNMSType => '1.3.6.1.4.1.705.1.2.2.1.3',
  mgmanagerNMSTypeDefinition => {
    8 => 'ibmnetview',
    2 => 'decnetview',
    6 => 'sunnetmanager',
    4 => 'dview',
    7 => 'novellnms',
    9 => 'other',
    1 => 'umclient',
    5 => 'hpopenview',
    10 => 'autolearning',
    3 => 'umview',
  },
  mgmanagerCommType => '1.3.6.1.4.1.705.1.2.2.1.4',
  mgmanagerCommTypeDefinition => {
    5 => 'snmpv2',
    1 => 'other',
    4 => 'snmpv1',
    3 => 'cmip',
    2 => 'invalid',
  },
  mgmanagerDescr => '1.3.6.1.4.1.705.1.2.2.1.5',
  mgmanagerAddress => '1.3.6.1.4.1.705.1.2.2.1.6',
  mgmanagerCommunity => '1.3.6.1.4.1.705.1.2.2.1.7',
  mgmanagerSeverityLevel => '1.3.6.1.4.1.705.1.2.2.1.8',
  mgmanagerTrapAck => '1.3.6.1.4.1.705.1.2.2.1.9',
  mgmanagerTrapAckDefinition => {
    4 => 'mgacks',
    2 => 'mgnoack',
    3 => 'stdnomg',
    5 => 'cpqnoack',
    1 => 'mgack',
  },
  upsmgReceptacle => '1.3.6.1.4.1.705.1.3',
  upsmgReceptaclesNum => '1.3.6.1.4.1.705.1.3.1',
  upsmgReceptaclesTable => '1.3.6.1.4.1.705.1.3.2',
  upsmgReceptaclesEntry => '1.3.6.1.4.1.705.1.3.2.1',
  mgreceptacleIndex => '1.3.6.1.4.1.705.1.3.2.1.1',
  mgreceptacleLevel => '1.3.6.1.4.1.705.1.3.2.1.2',
  mgreceptacleType => '1.3.6.1.4.1.705.1.3.2.1.3',
  mgreceptacleIdent => '1.3.6.1.4.1.705.1.3.2.1.4',
  mgreceptacleState => '1.3.6.1.4.1.705.1.3.2.1.5',
  mgreceptacleStateDefinition => {
    3 => 'normalON',
    8 => 'scheduleOFF',
    1 => 'manualON',
    2 => 'manualOFF',
    6 => 'controlOFF',
    4 => 'normalOFF',
    5 => 'controlON',
    7 => 'scheduleON',
  },
  mgreceptacleReceptacle => '1.3.6.1.4.1.705.1.3.2.1.6',
  mgreceptaclePowerCons => '1.3.6.1.4.1.705.1.3.2.1.7',
  mgreceptacleOverload => '1.3.6.1.4.1.705.1.3.2.1.8',
  mgreceptacleAutonomy => '1.3.6.1.4.1.705.1.3.2.1.9',
  upsmgConfig => '1.3.6.1.4.1.705.1.4',
  upsmgConfigBatteryInstalled => '1.3.6.1.4.1.705.1.4.1',
  upsmgConfigBatteryInstalledDefinition => {
    1 => 'yes',
    2 => 'no',
  },
  upsmgConfigNominalBatteryVoltage => '1.3.6.1.4.1.705.1.4.2',
  upsmgConfigNominalBatteryTime => '1.3.6.1.4.1.705.1.4.3',
  upsmgConfigNominalRechargeTime => '1.3.6.1.4.1.705.1.4.4',
  upsmgConfigMinRechargeLevel => '1.3.6.1.4.1.705.1.4.5',
  upsmgConfigMaxRechargeTime => '1.3.6.1.4.1.705.1.4.6',
  upsmgConfigLowBatteryTime => '1.3.6.1.4.1.705.1.4.7',
  upsmgConfigLowBatteryLevel => '1.3.6.1.4.1.705.1.4.8',
  upsmgConfigAutoRestart => '1.3.6.1.4.1.705.1.4.9',
  upsmgConfigAutoRestartDefinition => {
    3 => 'onmain',
    2 => 'never',
    1 => 'always',
  },
  upsmgConfigShutdownTimer => '1.3.6.1.4.1.705.1.4.10',
  upsmgConfigSysShutDuration => '1.3.6.1.4.1.705.1.4.11',
  upsmgConfigVARating => '1.3.6.1.4.1.705.1.4.12',
  upsmgConfigLowTransfer => '1.3.6.1.4.1.705.1.4.13',
  upsmgConfigHighTransfer => '1.3.6.1.4.1.705.1.4.14',
  upsmgConfigOutputNominalVoltage => '1.3.6.1.4.1.705.1.4.15',
  upsmgConfigOutputNominalCurrent => '1.3.6.1.4.1.705.1.4.16',
  upsmgConfigOutputNomFrequency => '1.3.6.1.4.1.705.1.4.17',
  upsmgConfigByPassType => '1.3.6.1.4.1.705.1.4.18',
  upsmgConfigByPassTypeDefinition => {
    2 => 'relay',
    1 => 'none',
    3 => 'static',
  },
  upsmgConfigAlarmAudible => '1.3.6.1.4.1.705.1.4.19',
  upsmgConfigAlarmAudibleDefinition => {
    1 => 'yes',
    2 => 'no',
  },
  upsmgConfigAlarmTimeDelay => '1.3.6.1.4.1.705.1.4.20',
  upsmgConfigDevicesNum => '1.3.6.1.4.1.705.1.4.21',
  upsmgConfigDevicesTable => '1.3.6.1.4.1.705.1.4.22',
  upsmgConfigDevicesEntry => '1.3.6.1.4.1.705.1.4.22.1',
  mgdeviceIndex => '1.3.6.1.4.1.705.1.4.22.1.1',
  mgdeviceReceptacleNum => '1.3.6.1.4.1.705.1.4.22.1.2',
  mgdeviceIdent => '1.3.6.1.4.1.705.1.4.22.1.3',
  mgdeviceVaRating => '1.3.6.1.4.1.705.1.4.22.1.4',
  mgdeviceSequenceOff => '1.3.6.1.4.1.705.1.4.22.1.5',
  mgdeviceSequenceOn => '1.3.6.1.4.1.705.1.4.22.1.6',
  mgdeviceShutdownDuration => '1.3.6.1.4.1.705.1.4.22.1.7',
  mgdeviceBootUpDuration => '1.3.6.1.4.1.705.1.4.22.1.8',
  upsmgConfigReceptaclesTable => '1.3.6.1.4.1.705.1.4.23',
  upsmgConfigReceptaclesEntry => '1.3.6.1.4.1.705.1.4.23.1',
  mgreceptacleIndexb => '1.3.6.1.4.1.705.1.4.23.1.1',
  mgreceptacleStateTurnOn => '1.3.6.1.4.1.705.1.4.23.1.2',
  mgreceptacleStateTurnOnDefinition => {
    1 => 'on',
    3 => 'last',
    2 => 'off',
    4 => 'schedule',
  },
  mgreceptacleStateMainReturn => '1.3.6.1.4.1.705.1.4.23.1.3',
  mgreceptacleStateMainReturnDefinition => {
    1 => 'on',
    3 => 'last',
    2 => 'off',
    4 => 'schedule',
  },
  mgreceptacleStateDischarge => '1.3.6.1.4.1.705.1.4.23.1.4',
  mgreceptacleStateDischargeDefinition => {
    1 => 'on',
    3 => 'last',
    2 => 'off',
    4 => 'schedule',
  },
  mgreceptacleShutoffLevel => '1.3.6.1.4.1.705.1.4.23.1.5',
  mgreceptacleShutoffTimer => '1.3.6.1.4.1.705.1.4.23.1.6',
  mgreceptacleRestartLevel => '1.3.6.1.4.1.705.1.4.23.1.7',
  mgreceptacleRestartDelay => '1.3.6.1.4.1.705.1.4.23.1.8',
  mgreceptacleShutdownDuration => '1.3.6.1.4.1.705.1.4.23.1.9',
  mgreceptacleBootUpDuration => '1.3.6.1.4.1.705.1.4.23.1.10',
  upsmgConfigExtAlarmNum => '1.3.6.1.4.1.705.1.4.24',
  upsmgConfigExtAlarmTable => '1.3.6.1.4.1.705.1.4.25',
  upsmgConfigExtAlarmEntry => '1.3.6.1.4.1.705.1.4.25.1',
  mgextAlarmIndex => '1.3.6.1.4.1.705.1.4.25.1.1',
  mgextAlarmUID => '1.3.6.1.4.1.705.1.4.25.1.2',
  upsmgConfigEmergencyTestFail => '1.3.6.1.4.1.705.1.4.26',
  upsmgConfigEmergencyTestFailDefinition => {
    1 => 'yes',
    2 => 'no',
  },
  upsmgConfigEmergencyOnByPass => '1.3.6.1.4.1.705.1.4.27',
  upsmgConfigEmergencyOnByPassDefinition => {
    1 => 'yes',
    2 => 'no',
  },
  upsmgConfigEmergencyOverload => '1.3.6.1.4.1.705.1.4.28',
  upsmgConfigEmergencyOverloadDefinition => {
    1 => 'yes',
    2 => 'no',
  },
  upsmgConfigControlDayTable => '1.3.6.1.4.1.705.1.4.29',
  upsmgConfigControlDayEntry => '1.3.6.1.4.1.705.1.4.29.1',
  mgcontrolDayIndex => '1.3.6.1.4.1.705.1.4.29.1.1',
  mgcontrolDayOn => '1.3.6.1.4.1.705.1.4.29.1.2',
  mgcontrolDayOff => '1.3.6.1.4.1.705.1.4.29.1.3',
  upsmgConfigLowBooster => '1.3.6.1.4.1.705.1.4.30',
  upsmgConfigHighBooster => '1.3.6.1.4.1.705.1.4.31',
  upsmgConfigLowFader => '1.3.6.1.4.1.705.1.4.32',
  upsmgConfigHighFader => '1.3.6.1.4.1.705.1.4.33',
  upsmgConfigEnvironmentTable => '1.3.6.1.4.1.705.1.4.34',
  upsmgConfigEnvironmentEntry => '1.3.6.1.4.1.705.1.4.34.1',
  upsmgConfigSensorIndex => '1.3.6.1.4.1.705.1.4.34.1.1',
  upsmgConfigSensorName => '1.3.6.1.4.1.705.1.4.34.1.2',
  upsmgConfigTemperatureLow => '1.3.6.1.4.1.705.1.4.34.1.3',
  upsmgConfigTemperatureHigh => '1.3.6.1.4.1.705.1.4.34.1.4',
  upsmgConfigTemperatureHysteresis => '1.3.6.1.4.1.705.1.4.34.1.5',
  upsmgConfigHumidityLow => '1.3.6.1.4.1.705.1.4.34.1.6',
  upsmgConfigHumidityHigh => '1.3.6.1.4.1.705.1.4.34.1.7',
  upsmgConfigHumidityHysteresis => '1.3.6.1.4.1.705.1.4.34.1.8',
  upsmgConfigInput1Name => '1.3.6.1.4.1.705.1.4.34.1.9',
  upsmgConfigInput1ClosedLabel => '1.3.6.1.4.1.705.1.4.34.1.10',
  upsmgConfigInput1OpenLabel => '1.3.6.1.4.1.705.1.4.34.1.11',
  upsmgConfigInput2Name => '1.3.6.1.4.1.705.1.4.34.1.12',
  upsmgConfigInput2ClosedLabel => '1.3.6.1.4.1.705.1.4.34.1.13',
  upsmgConfigInput2OpenLabel => '1.3.6.1.4.1.705.1.4.34.1.14',
  upsmgBattery => '1.3.6.1.4.1.705.1.5',
  upsmgBatteryRemainingTime => '1.3.6.1.4.1.705.1.5.1',
  upsmgBatteryLevel => '1.3.6.1.4.1.705.1.5.2',
  upsmgBatteryRechargeTime => '1.3.6.1.4.1.705.1.5.3',
  upsmgBatteryRechargeLevel => '1.3.6.1.4.1.705.1.5.4',
  upsmgBatteryVoltage => '1.3.6.1.4.1.705.1.5.5',
  upsmgBatteryCurrent => '1.3.6.1.4.1.705.1.5.6',
  upsmgBatteryTemperature => '1.3.6.1.4.1.705.1.5.7',
  upsmgBatteryFullRechargeTime => '1.3.6.1.4.1.705.1.5.8',
  upsmgBatteryFaultBattery => '1.3.6.1.4.1.705.1.5.9',
  upsmgBatteryFaultBatteryDefinition => {
    1 => 'yes',
    2 => 'no',
  },
  upsmgBatteryNoBattery => '1.3.6.1.4.1.705.1.5.10',
  upsmgBatteryNoBatteryDefinition => {
    1 => 'yes',
    2 => 'no',
  },
  upsmgBatteryReplacement => '1.3.6.1.4.1.705.1.5.11',
  upsmgBatteryReplacementDefinition => {
    1 => 'yes',
    2 => 'no',
  },
  upsmgBatteryUnavailableBattery => '1.3.6.1.4.1.705.1.5.12',
  upsmgBatteryUnavailableBatteryDefinition => {
    1 => 'yes',
    2 => 'no',
  },
  upsmgBatteryNotHighCharge => '1.3.6.1.4.1.705.1.5.13',
  upsmgBatteryNotHighChargeDefinition => {
    1 => 'yes',
    2 => 'no',
  },
  upsmgBatteryLowBattery => '1.3.6.1.4.1.705.1.5.14',
  upsmgBatteryLowBatteryDefinition => {
    1 => 'yes',
    2 => 'no',
  },
  upsmgBatteryChargerFault => '1.3.6.1.4.1.705.1.5.15',
  upsmgBatteryChargerFaultDefinition => {
    1 => 'yes',
    2 => 'no',
  },
  upsmgBatteryLowCondition => '1.3.6.1.4.1.705.1.5.16',
  upsmgBatteryLowConditionDefinition => {
    1 => 'yes',
    2 => 'no',
  },
  upsmgBatteryLowRecharge => '1.3.6.1.4.1.705.1.5.17',
  upsmgBatteryLowRechargeDefinition => {
    1 => 'yes',
    2 => 'no',
  },
  upsmgInput => '1.3.6.1.4.1.705.1.6',
  upsmgInputPhaseNum => '1.3.6.1.4.1.705.1.6.1',
  upsmgInputPhaseTable => '1.3.6.1.4.1.705.1.6.2',
  upsmgInputPhaseEntry => '1.3.6.1.4.1.705.1.6.2.1',
  mginputIndex => '1.3.6.1.4.1.705.1.6.2.1.1',
  mginputVoltage => '1.3.6.1.4.1.705.1.6.2.1.2',
  mginputFrequency => '1.3.6.1.4.1.705.1.6.2.1.3',
  mginputMinimumVoltage => '1.3.6.1.4.1.705.1.6.2.1.4',
  mginputMaximumVoltage => '1.3.6.1.4.1.705.1.6.2.1.5',
  mginputCurrent => '1.3.6.1.4.1.705.1.6.2.1.6',
  upsmgInputBadStatus => '1.3.6.1.4.1.705.1.6.3',
  upsmgInputBadStatusDefinition => {
    1 => 'yes',
    2 => 'no',
  },
  upsmgInputLineFailCause => '1.3.6.1.4.1.705.1.6.4',
  upsmgInputLineFailCauseDefinition => {
    2 => 'outoftolvolt',
    4 => 'utilityoff',
    1 => 'no',
    3 => 'outoftolfreq',
  },
  upsmgOutput => '1.3.6.1.4.1.705.1.7',
  upsmgOutputPhaseNum => '1.3.6.1.4.1.705.1.7.1',
  upsmgOutputPhaseTable => '1.3.6.1.4.1.705.1.7.2',
  upsmgOutputPhaseEntry => '1.3.6.1.4.1.705.1.7.2.1',
  mgoutputPhaseIndex => '1.3.6.1.4.1.705.1.7.2.1.1',
  mgoutputVoltage => '1.3.6.1.4.1.705.1.7.2.1.2',
  mgoutputFrequency => '1.3.6.1.4.1.705.1.7.2.1.3',
  mgoutputLoadPerPhase => '1.3.6.1.4.1.705.1.7.2.1.4',
  mgoutputCurrent => '1.3.6.1.4.1.705.1.7.2.1.5',
  upsmgOutputOnBattery => '1.3.6.1.4.1.705.1.7.3',
  upsmgOutputOnBatteryDefinition => {
    1 => 'yes',
    2 => 'no',
  },
  upsmgOutputOnByPass => '1.3.6.1.4.1.705.1.7.4',
  upsmgOutputOnByPassDefinition => {
    1 => 'yes',
    2 => 'no',
  },
  upsmgOutputUnavailableByPass => '1.3.6.1.4.1.705.1.7.5',
  upsmgOutputUnavailableByPassDefinition => {
    1 => 'yes',
    2 => 'no',
  },
  upsmgOutputNoByPass => '1.3.6.1.4.1.705.1.7.6',
  upsmgOutputNoByPassDefinition => {
    1 => 'yes',
    2 => 'no',
  },
  upsmgOutputUtilityOff => '1.3.6.1.4.1.705.1.7.7',
  upsmgOutputUtilityOffDefinition => {
    1 => 'yes',
    2 => 'no',
  },
  upsmgOutputOnBoost => '1.3.6.1.4.1.705.1.7.8',
  upsmgOutputOnBoostDefinition => {
    1 => 'yes',
    2 => 'no',
  },
  upsmgOutputInverterOff => '1.3.6.1.4.1.705.1.7.9',
  upsmgOutputInverterOffDefinition => {
    1 => 'yes',
    2 => 'no',
  },
  upsmgOutputOverLoad => '1.3.6.1.4.1.705.1.7.10',
  upsmgOutputOverLoadDefinition => {
    1 => 'yes',
    2 => 'no',
  },
  upsmgOutputOverTemp => '1.3.6.1.4.1.705.1.7.11',
  upsmgOutputOverTempDefinition => {
    1 => 'yes',
    2 => 'no',
  },
  upsmgOutputOnBuck => '1.3.6.1.4.1.705.1.7.12',
  upsmgEnviron => '1.3.6.1.4.1.705.1.8',
  upsmgEnvironAmbientTemp => '1.3.6.1.4.1.705.1.8.1',
  upsmgEnvironAmbientHumidity => '1.3.6.1.4.1.705.1.8.2',
  upsmgEnvironExtAlarmTable => '1.3.6.1.4.1.705.1.8.3',
  upsmgEnvironExtAlarmEntry => '1.3.6.1.4.1.705.1.8.3.1',
  mgalarmNum => '1.3.6.1.4.1.705.1.8.3.1.1',
  mgalarmState => '1.3.6.1.4.1.705.1.8.3.1.2',
  mgalarmStateDefinition => {
    2 => 'inactive',
    1 => 'active',
  },
  upsmgEnvironSensorNum => '1.3.6.1.4.1.705.1.8.4',
  upsmgEnvironSensorTable => '1.3.6.1.4.1.705.1.8.5',
  upsmgEnvironSensorEntry => '1.3.6.1.4.1.705.1.8.5.1',
  mgsensorNum => '1.3.6.1.4.1.705.1.8.5.1.1',
  mgsensorTemp => '1.3.6.1.4.1.705.1.8.5.1.2',
  mgsensorHumidity => '1.3.6.1.4.1.705.1.8.5.1.3',
  upsmgEnvironmentNum => '1.3.6.1.4.1.705.1.8.6',
  upsmgEnvironmentSensorTable => '1.3.6.1.4.1.705.1.8.7',
  upsmgEnvironmentSensorEntry => '1.3.6.1.4.1.705.1.8.7.1',
  upsmgEnvironmentIndex => '1.3.6.1.4.1.705.1.8.7.1.1',
  upsmgEnvironmentComFailure => '1.3.6.1.4.1.705.1.8.7.1.2',
  upsmgEnvironmentComFailureDefinition => {
    1 => 'yes',
    2 => 'no',
  },
  upsmgEnvironmentTemperature => '1.3.6.1.4.1.705.1.8.7.1.3',
  upsmgEnvironmentTemperatureLow => '1.3.6.1.4.1.705.1.8.7.1.4',
  upsmgEnvironmentTemperatureLowDefinition => {
    1 => 'yes',
    2 => 'no',
  },
  upsmgEnvironmentTemperatureHigh => '1.3.6.1.4.1.705.1.8.7.1.5',
  upsmgEnvironmentTemperatureHighDefinition => {
    1 => 'yes',
    2 => 'no',
  },
  upsmgEnvironmentHumidity => '1.3.6.1.4.1.705.1.8.7.1.6',
  upsmgEnvironmentHumidityLow => '1.3.6.1.4.1.705.1.8.7.1.7',
  upsmgEnvironmentHumidityLowDefinition => {
    1 => 'yes',
    2 => 'no',
  },
  upsmgEnvironmentHumidityHigh => '1.3.6.1.4.1.705.1.8.7.1.8',
  upsmgEnvironmentHumidityHighDefinition => {
    1 => 'yes',
    2 => 'no',
  },
  upsmgEnvironmentInput1State => '1.3.6.1.4.1.705.1.8.7.1.9',
  upsmgEnvironmentInput1StateDefinition => {
    2 => 'open',
    1 => 'closed',
  },
  upsmgEnvironmentInput2State => '1.3.6.1.4.1.705.1.8.7.1.10',
  upsmgEnvironmentInput2StateDefinition => {
    2 => 'open',
    1 => 'closed',
  },
  upsmgControl => '1.3.6.1.4.1.705.1.9',
  upsmgControlReceptaclesTable => '1.3.6.1.4.1.705.1.9.1',
  upsmgControlReceptaclesEntry => '1.3.6.1.4.1.705.1.9.1.1',
  mgreceptacleIndexc => '1.3.6.1.4.1.705.1.9.1.1.1',
  mgreceptacleOnDelay => '1.3.6.1.4.1.705.1.9.1.1.2',
  mgreceptacleOnCtrl => '1.3.6.1.4.1.705.1.9.1.1.3',
  mgreceptacleOnCtrlDefinition => {
    3 => 'stop',
    1 => 'nothing',
    2 => 'start',
  },
  mgreceptacleOnStatus => '1.3.6.1.4.1.705.1.9.1.1.4',
  mgreceptacleOnStatusDefinition => {
    3 => 'inprogressinups',
    1 => 'none',
    2 => 'started',
    4 => 'completed',
  },
  mgreceptacleOffDelay => '1.3.6.1.4.1.705.1.9.1.1.5',
  mgreceptacleOffCtrl => '1.3.6.1.4.1.705.1.9.1.1.6',
  mgreceptacleOffCtrlDefinition => {
    3 => 'stop',
    1 => 'nothing',
    2 => 'start',
  },
  mgreceptacleOffStatus => '1.3.6.1.4.1.705.1.9.1.1.7',
  mgreceptacleOffStatusDefinition => {
    3 => 'inprogressinups',
    1 => 'none',
    2 => 'started',
    4 => 'completed',
  },
  mgreceptacleToggleDelay => '1.3.6.1.4.1.705.1.9.1.1.8',
  mgreceptacleToggleCtrl => '1.3.6.1.4.1.705.1.9.1.1.9',
  mgreceptacleToggleCtrlDefinition => {
    3 => 'stop',
    1 => 'nothing',
    2 => 'start',
  },
  mgreceptacleToggleStatus => '1.3.6.1.4.1.705.1.9.1.1.10',
  mgreceptacleToggleStatusDefinition => {
    3 => 'inprogressinups',
    1 => 'none',
    2 => 'started',
    4 => 'completed',
  },
  mgreceptacleToggleDuration => '1.3.6.1.4.1.705.1.9.1.1.11',
  upsmgControlDayOff => '1.3.6.1.4.1.705.1.9.2',
  upsmgControlDayOffDefinition => {
    1 => 'sunday',
    8 => 'none',
    6 => 'friday',
    3 => 'tuesday',
    2 => 'monday',
    4 => 'wednesday',
    5 => 'thursday',
    7 => 'saterday',
  },
  upsmgControlDayOn => '1.3.6.1.4.1.705.1.9.3',
  upsmgControlDayOnDefinition => {
    1 => 'sunday',
    8 => 'none',
    6 => 'friday',
    3 => 'tuesday',
    2 => 'monday',
    4 => 'wednesday',
    5 => 'thursday',
    7 => 'saterday',
  },
  upsmgTest => '1.3.6.1.4.1.705.1.10',
  upsmgTestBatterySchedule => '1.3.6.1.4.1.705.1.10.1',
  upsmgTestBatteryScheduleDefinition => {
    4 => 'atturnon',
    2 => 'weekly',
    5 => 'none',
    1 => 'unknown',
    3 => 'monthly',
    6 => 'dayly',
  },
  upsmgTestDiagnostics => '1.3.6.1.4.1.705.1.10.2',
  upsmgTestDiagnosticsDefinition => {
    1 => 'default',
    2 => 'start',
  },
  upsmgTestDiagResult => '1.3.6.1.4.1.705.1.10.3',
  upsmgTestDiagResultDefinition => {
    1 => 'success',
    3 => 'none',
    2 => 'failed',
  },
  upsmgTestBatteryCalibration => '1.3.6.1.4.1.705.1.10.4',
  upsmgTestBatteryCalibrationDefinition => {
    1 => 'default',
    2 => 'start',
  },
  upsmgTestLastCalibration => '1.3.6.1.4.1.705.1.10.5',
  upsmgTestIndicators => '1.3.6.1.4.1.705.1.10.6',
  upsmgTestCommandLine => '1.3.6.1.4.1.705.1.10.7',
  upsmgTestCommandReady => '1.3.6.1.4.1.705.1.10.8',
  upsmgTestCommandReadyDefinition => {
    1 => 'yes',
    2 => 'no',
  },
  upsmgTestResponseLine => '1.3.6.1.4.1.705.1.10.9',
  upsmgTestResponseReady => '1.3.6.1.4.1.705.1.10.10',
  upsmgTestResponseReadyDefinition => {
    1 => 'yes',
    2 => 'no',
  },
  upsmgTestBatteryResult => '1.3.6.1.4.1.705.1.10.11',
  upsmgTestBatteryResultDefinition => {
    5 => 'none',
    4 => 'sfailed',
    2 => 'mfailed',
    1 => 'msuccess',
    3 => 'ssuccess',
  },
  upsmgTraps => '1.3.6.1.4.1.705.1.11',
  upsmgAgent => '1.3.6.1.4.1.705.1.12',
  upsmgAgentIpaddress => '1.3.6.1.4.1.705.1.12.1',
  upsmgAgentSubnetMask => '1.3.6.1.4.1.705.1.12.2',
  upsmgAgentDefGateway => '1.3.6.1.4.1.705.1.12.3',
  upsmgAgentBaudRate => '1.3.6.1.4.1.705.1.12.4',
  upsmgAgentPollRate => '1.3.6.1.4.1.705.1.12.5',
  upsmgAgentType => '1.3.6.1.4.1.705.1.12.6',
  upsmgAgentTypeDefinition => {
    3 => 'proxyEth',
    2 => 'deviceTR',
    5 => 'other',
    4 => 'proxyTR',
    1 => 'deviceEth',
  },
  upsmgAgentTrapAlarmDelay => '1.3.6.1.4.1.705.1.12.7',
  upsmgAgentTrapAlarmRetry => '1.3.6.1.4.1.705.1.12.8',
  upsmgAgentReset => '1.3.6.1.4.1.705.1.12.9',
  upsmgAgentResetDefinition => {
    1 => 'reset',
    2 => 'nothing',
  },
  upsmgAgentFactReset => '1.3.6.1.4.1.705.1.12.10',
  upsmgAgentFactResetDefinition => {
    1 => 'reset',
    2 => 'nothing',
  },
  upsmgAgentMibVersion => '1.3.6.1.4.1.705.1.12.11',
  upsmgAgentFirmwareVersion => '1.3.6.1.4.1.705.1.12.12',
  upsmgAgentCommUPS => '1.3.6.1.4.1.705.1.12.13',
  upsmgAgentTrapAck => '1.3.6.1.4.1.705.1.12.14',
  upsmgAgentAutoLearning => '1.3.6.1.4.1.705.1.12.15',
  upsmgAgentAutoLearningDefinition => {
    1 => 'yes',
    2 => 'no',
  },
  upsmgAgentBootP => '1.3.6.1.4.1.705.1.12.16',
  upsmgAgentBootPDefinition => {
    1 => 'yes',
    2 => 'no',
  },
  upsmgAgentTFTP => '1.3.6.1.4.1.705.1.12.17',
  upsmgAgentTFTPDefinition => {
    1 => 'yes',
    2 => 'no',
  },
  upsmgAgentTrapSignature => '1.3.6.1.4.1.705.1.12.18',
  upsmgRemote => '1.3.6.1.4.1.705.1.13',
  upsmgRemoteOnBattery => '1.3.6.1.4.1.705.1.13.1',
  upsmgRemoteIpAddress => '1.3.6.1.4.1.705.1.13.2',
};



package Monitoring::GLPlugin::SNMP::MibsAndOids::MIB2MIB;

$Monitoring::GLPlugin::SNMP::MibsAndOids::origin->{'MIB-2-MIB'} = {
  url => "",
  name => "MIB-2-MIB",
};

$Monitoring::GLPlugin::SNMP::MibsAndOids::mibs_and_oids->{'MIB-2-MIB'} = {
  sysDescr => '1.3.6.1.2.1.1.1',
  sysObjectID => '1.3.6.1.2.1.1.2',
  sysUpTime => '1.3.6.1.2.1.1.3',
  sysName => '1.3.6.1.2.1.1.5',
  sysORTable => '1.3.6.1.2.1.1.9',
  sysOREntry => '1.3.6.1.2.1.1.9.1',
  sysORIndex => '1.3.6.1.2.1.1.9.1.1',
  sysORID => '1.3.6.1.2.1.1.9.1.2',
  sysORDescr => '1.3.6.1.2.1.1.9.1.3',
  sysORUpTime => '1.3.6.1.2.1.1.9.1.4',
};



package Monitoring::GLPlugin::SNMP::MibsAndOids::NETVISIONV6MIB;

$Monitoring::GLPlugin::SNMP::MibsAndOids::origin->{'Netvision-v6-MIB'} = {
  url => "",
  name => "Netvision-v6-MIB",
};

$Monitoring::GLPlugin::SNMP::MibsAndOids::mibs_and_oids->{'Netvision-v6-MIB'} = {
  software => '1.3.6.1.4.1.4555.1',
  network => '1.3.6.1.4.1.4555.1.1',
  netvision => '1.3.6.1.4.1.4555.1.1.1',
  upsObjects => '1.3.6.1.4.1.4555.1.1.1.1',
  upsIdent => '1.3.6.1.4.1.4555.1.1.1.1.1',
  upsIdentModel => '1.3.6.1.4.1.4555.1.1.1.1.1.1',
  upsIdentUPSFirmwareVersion => '1.3.6.1.4.1.4555.1.1.1.1.1.2',
  upsIdentAgentSoftwareVersion => '1.3.6.1.4.1.4555.1.1.1.1.1.3',
  upsIdentUpsSerialNumber => '1.3.6.1.4.1.4555.1.1.1.1.1.4',
  upsAgent => '1.3.6.1.4.1.4555.1.1.1.1.10',
  upsAgentIpaddress => '1.3.6.1.4.1.4555.1.1.1.1.10.1',
  upsAgentPollRate => '1.3.6.1.4.1.4555.1.1.1.1.10.10',
  upsAgentBaudRate => '1.3.6.1.4.1.4555.1.1.1.1.10.11',
  upsAgentDhcpStatus => '1.3.6.1.4.1.4555.1.1.1.1.10.12',
  upsAgentTelnetStatus => '1.3.6.1.4.1.4555.1.1.1.1.10.13',
  upsAgentTftpStatus => '1.3.6.1.4.1.4555.1.1.1.1.10.14',
  upsAgentResetToDefault => '1.3.6.1.4.1.4555.1.1.1.1.10.15',
  upsAgentRestart => '1.3.6.1.4.1.4555.1.1.1.1.10.16',
  upsAgentClearAgentLog => '1.3.6.1.4.1.4555.1.1.1.1.10.17',
  upsAgentClearEventLog => '1.3.6.1.4.1.4555.1.1.1.1.10.18',
  upsAgentClearExtHistoryLog => '1.3.6.1.4.1.4555.1.1.1.1.10.19',
  upsAgentGateway => '1.3.6.1.4.1.4555.1.1.1.1.10.2',
  upsAgentClearHistoryLog => '1.3.6.1.4.1.4555.1.1.1.1.10.20',
  upsAgentTrapsReceiversTable => '1.3.6.1.4.1.4555.1.1.1.1.10.21',
  upsAgentTrapsReceiversEntry => '1.3.6.1.4.1.4555.1.1.1.1.10.21.1',
  trapsIndex => '1.3.6.1.4.1.4555.1.1.1.1.10.21.1.1',
  trapsReceiverAddr => '1.3.6.1.4.1.4555.1.1.1.1.10.21.1.2',
  receiverCommunityString => '1.3.6.1.4.1.4555.1.1.1.1.10.21.1.3',
  receiverDescription => '1.3.6.1.4.1.4555.1.1.1.1.10.21.1.4',
  upsAgentAccessControlTable => '1.3.6.1.4.1.4555.1.1.1.1.10.22',
  upsAgentAccessControlEntry => '1.3.6.1.4.1.4555.1.1.1.1.10.22.1',
  accessIndex => '1.3.6.1.4.1.4555.1.1.1.1.10.22.1.1',
  accessControlAddr => '1.3.6.1.4.1.4555.1.1.1.1.10.22.1.2',
  accessCommunityString => '1.3.6.1.4.1.4555.1.1.1.1.10.22.1.3',
  accessControlMode => '1.3.6.1.4.1.4555.1.1.1.1.10.22.1.4',
  upsAgentMibVersion => '1.3.6.1.4.1.4555.1.1.1.1.10.23',
  upsAgentSubnetMask => '1.3.6.1.4.1.4555.1.1.1.1.10.3',
  upsAgentDate => '1.3.6.1.4.1.4555.1.1.1.1.10.4',
  upsAgentTime => '1.3.6.1.4.1.4555.1.1.1.1.10.5',
  upsAgentTrapString => '1.3.6.1.4.1.4555.1.1.1.1.10.50',
  upsAgentNtpTimeServer => '1.3.6.1.4.1.4555.1.1.1.1.10.6',
  upsAgentNtpTimeZone => '1.3.6.1.4.1.4555.1.1.1.1.10.7',
  upsAgentHistoryLogFrequency => '1.3.6.1.4.1.4555.1.1.1.1.10.8',
  upsAgentExtHistoryLogFrequency => '1.3.6.1.4.1.4555.1.1.1.1.10.9',
  emdStatus => '1.3.6.1.4.1.4555.1.1.1.1.11',
  emdSatatusTemperature => '1.3.6.1.4.1.4555.1.1.1.1.11.1',
  emdSatatusHumidity => '1.3.6.1.4.1.4555.1.1.1.1.11.2',
  upsBattery => '1.3.6.1.4.1.4555.1.1.1.1.2',
  upsBatteryStatus => '1.3.6.1.4.1.4555.1.1.1.1.2.1',
  upsBatteryStatusDefinition => {
    1 => 'unknown',
    2 => 'batteryNormal',
    3 => 'batteryLow',
    4 => 'batteryDepleted',
    5 => 'batteryDischarging',
    6 => 'batteryFailure',
    7 => 'upsOff',
  },
  upsSecondsOnBattery => '1.3.6.1.4.1.4555.1.1.1.1.2.2',
  upsEstimatedMinutesRemaining => '1.3.6.1.4.1.4555.1.1.1.1.2.3',
  upsEstimatedChargeRemaining => '1.3.6.1.4.1.4555.1.1.1.1.2.4',
  upsBatteryVoltage => '1.3.6.1.4.1.4555.1.1.1.1.2.5',
  upsBatteryTemperature => '1.3.6.1.4.1.4555.1.1.1.1.2.6',
  upsInput => '1.3.6.1.4.1.4555.1.1.1.1.3',
  upsInputNumLines => '1.3.6.1.4.1.4555.1.1.1.1.3.1',
  upsInputFrequency => '1.3.6.1.4.1.4555.1.1.1.1.3.2',
  upsInputTable => '1.3.6.1.4.1.4555.1.1.1.1.3.3',
  upsInputEntry => '1.3.6.1.4.1.4555.1.1.1.1.3.3.1',
  upsInputLineIndex => '1.3.6.1.4.1.4555.1.1.1.1.3.3.1.1',
  upsInputVoltage => '1.3.6.1.4.1.4555.1.1.1.1.3.3.1.2',
  upsInputCurrent => '1.3.6.1.4.1.4555.1.1.1.1.3.3.1.3',
  upsInputVoltageMax => '1.3.6.1.4.1.4555.1.1.1.1.3.3.1.4',
  upsInputVoltageMin => '1.3.6.1.4.1.4555.1.1.1.1.3.3.1.5',
  upsOutput => '1.3.6.1.4.1.4555.1.1.1.1.4',
  upsOutputSource => '1.3.6.1.4.1.4555.1.1.1.1.4.1',
  upsOutputSourceDefinition => {
    1 => 'unknown',
    2 => 'onInverter',
    3 => 'onMains',
    4 => 'ecoMode',
    5 => 'onBypass',
    6 => 'standby',
    7 => 'onMaintenanceBypass',
    8 => 'upsOff',
    9 => 'normalMode',
  },
  upsOutputFrequency => '1.3.6.1.4.1.4555.1.1.1.1.4.2',
  upsOutputNumLines => '1.3.6.1.4.1.4555.1.1.1.1.4.3',
  upsOutputTable => '1.3.6.1.4.1.4555.1.1.1.1.4.4',
  upsOutputEntry => '1.3.6.1.4.1.4555.1.1.1.1.4.4.1',
  upsOutputLineIndex => '1.3.6.1.4.1.4555.1.1.1.1.4.4.1.1',
  upsOutputVoltage => '1.3.6.1.4.1.4555.1.1.1.1.4.4.1.2',
  upsOutputCurrent => '1.3.6.1.4.1.4555.1.1.1.1.4.4.1.3',
  upsOutputPercentLoad => '1.3.6.1.4.1.4555.1.1.1.1.4.4.1.4',
  upsOutputKva => '1.3.6.1.4.1.4555.1.1.1.1.4.4.1.5',
  upsBypass => '1.3.6.1.4.1.4555.1.1.1.1.5',
  upsBypassFrequency => '1.3.6.1.4.1.4555.1.1.1.1.5.1',
  upsBypassNumLines => '1.3.6.1.4.1.4555.1.1.1.1.5.2',
  upsBypassTable => '1.3.6.1.4.1.4555.1.1.1.1.5.3',
  upsBypassEntry => '1.3.6.1.4.1.4555.1.1.1.1.5.3.1',
  upsBypassLineIndex => '1.3.6.1.4.1.4555.1.1.1.1.5.3.1.1',
  upsBypassVoltage => '1.3.6.1.4.1.4555.1.1.1.1.5.3.1.2',
  upsBypassCurrent => '1.3.6.1.4.1.4555.1.1.1.1.5.3.1.3',
  upsAlarm => '1.3.6.1.4.1.4555.1.1.1.1.6',
  upsAlarmsPresent => '1.3.6.1.4.1.4555.1.1.1.1.6.1',
  upsAlarmTable => '1.3.6.1.4.1.4555.1.1.1.1.6.2',
  upsAlarmEntry => '1.3.6.1.4.1.4555.1.1.1.1.6.2.1',
  upsAlarmId => '1.3.6.1.4.1.4555.1.1.1.1.6.2.1.1',
  upsAlarmDescr => '1.3.6.1.4.1.4555.1.1.1.1.6.2.1.2',
  upsAlarmTime => '1.3.6.1.4.1.4555.1.1.1.1.6.2.1.3',
  upsAlarmExtDes => '1.3.6.1.4.1.4555.1.1.1.1.6.2.1.4',
  upsWellKnownAlarms => '1.3.6.1.4.1.4555.1.1.1.1.6.3',
  upsAlarmBatteryBad => '1.3.6.1.4.1.4555.1.1.1.1.6.3.1',
  upsAlarmBypassBad => '1.3.6.1.4.1.4555.1.1.1.1.6.3.10',
  upsAlarmOutputOffAsRequested => '1.3.6.1.4.1.4555.1.1.1.1.6.3.11',
  upsAlarmUpsOffAsRequested => '1.3.6.1.4.1.4555.1.1.1.1.6.3.12',
  upsAlarmChargerFailed => '1.3.6.1.4.1.4555.1.1.1.1.6.3.13',
  upsAlarmUpsOutputOff => '1.3.6.1.4.1.4555.1.1.1.1.6.3.14',
  upsAlarmUpsSystemOff => '1.3.6.1.4.1.4555.1.1.1.1.6.3.15',
  upsAlarmFanFailure => '1.3.6.1.4.1.4555.1.1.1.1.6.3.16',
  upsAlarmFuseFailure => '1.3.6.1.4.1.4555.1.1.1.1.6.3.17',
  upsAlarmGeneralFault => '1.3.6.1.4.1.4555.1.1.1.1.6.3.18',
  upsAlarmDiagnosticTestFailed => '1.3.6.1.4.1.4555.1.1.1.1.6.3.19',
  upsAlarmOnBattery => '1.3.6.1.4.1.4555.1.1.1.1.6.3.2',
  upsAlarmCommunicationLost => '1.3.6.1.4.1.4555.1.1.1.1.6.3.20',
  upsAlarmAwaitingPower => '1.3.6.1.4.1.4555.1.1.1.1.6.3.21',
  upsAlarmShutdownPending => '1.3.6.1.4.1.4555.1.1.1.1.6.3.22',
  upsAlarmShutdownImminent => '1.3.6.1.4.1.4555.1.1.1.1.6.3.23',
  upsAlarmTestInProgress => '1.3.6.1.4.1.4555.1.1.1.1.6.3.24',
  upsAlarmPowerSupplyFault => '1.3.6.1.4.1.4555.1.1.1.1.6.3.25',
  upsAlarmAuxMainFail => '1.3.6.1.4.1.4555.1.1.1.1.6.3.26',
  upsAlarmManualBypassClose => '1.3.6.1.4.1.4555.1.1.1.1.6.3.27',
  upsAlarmShortCircuit => '1.3.6.1.4.1.4555.1.1.1.1.6.3.28',
  upsAlarmBatteryChargerFailure => '1.3.6.1.4.1.4555.1.1.1.1.6.3.29',
  upsAlarmLowBattery => '1.3.6.1.4.1.4555.1.1.1.1.6.3.3',
  upsAlarmInverterOverCurrent => '1.3.6.1.4.1.4555.1.1.1.1.6.3.30',
  upsAlarmInverterDistorsion => '1.3.6.1.4.1.4555.1.1.1.1.6.3.31',
  upsAlarmPrechargeVoltageFail => '1.3.6.1.4.1.4555.1.1.1.1.6.3.32',
  upsAlarmBoostTooLow => '1.3.6.1.4.1.4555.1.1.1.1.6.3.33',
  upsAlarmBoostTooHigh => '1.3.6.1.4.1.4555.1.1.1.1.6.3.34',
  upsAlarmBatteryTooHigh => '1.3.6.1.4.1.4555.1.1.1.1.6.3.35',
  upsAlarmImproperCondition => '1.3.6.1.4.1.4555.1.1.1.1.6.3.36',
  upsAlarmOverloadTimeout => '1.3.6.1.4.1.4555.1.1.1.1.6.3.37',
  upsAlarmControlSystemFailure => '1.3.6.1.4.1.4555.1.1.1.1.6.3.38',
  upsAlarmDataCorrupted => '1.3.6.1.4.1.4555.1.1.1.1.6.3.39',
  upsAlarmDepletedBattery => '1.3.6.1.4.1.4555.1.1.1.1.6.3.4',
  upsAlarmPllFault => '1.3.6.1.4.1.4555.1.1.1.1.6.3.40',
  upsAlarmInputGeneralAlarm => '1.3.6.1.4.1.4555.1.1.1.1.6.3.41',
  upsAlarmRectifierGeneralAlarm => '1.3.6.1.4.1.4555.1.1.1.1.6.3.42',
  upsAlarmBoostGeneralAlarm => '1.3.6.1.4.1.4555.1.1.1.1.6.3.43',
  upsAlarmInverterGeneralAlarm => '1.3.6.1.4.1.4555.1.1.1.1.6.3.44',
  upsAlarmBatteryGeneralAlarm => '1.3.6.1.4.1.4555.1.1.1.1.6.3.45',
  upsAlarmOutputOver => '1.3.6.1.4.1.4555.1.1.1.1.6.3.46',
  upsAlarmOutputUnder => '1.3.6.1.4.1.4555.1.1.1.1.6.3.47',
  upsAlarmBypassGeneralAlarm => '1.3.6.1.4.1.4555.1.1.1.1.6.3.48',
  upsAlarmStopForOverload => '1.3.6.1.4.1.4555.1.1.1.1.6.3.49',
  upsAlarmTempBad => '1.3.6.1.4.1.4555.1.1.1.1.6.3.5',
  upsAlarmImminentStop => '1.3.6.1.4.1.4555.1.1.1.1.6.3.50',
  upsAlarmModule1Alarm => '1.3.6.1.4.1.4555.1.1.1.1.6.3.51',
  upsAlarmModule2Alarm => '1.3.6.1.4.1.4555.1.1.1.1.6.3.52',
  upsAlarmModule3Alarm => '1.3.6.1.4.1.4555.1.1.1.1.6.3.53',
  upsAlarmModule4Alarm => '1.3.6.1.4.1.4555.1.1.1.1.6.3.54',
  upsAlarmModule5Alarm => '1.3.6.1.4.1.4555.1.1.1.1.6.3.55',
  upsAlarmModule6Alarm => '1.3.6.1.4.1.4555.1.1.1.1.6.3.56',
  upsAlarmExternalAlarm1 => '1.3.6.1.4.1.4555.1.1.1.1.6.3.57',
  upsAlarmExternalAlarm2 => '1.3.6.1.4.1.4555.1.1.1.1.6.3.58',
  upsAlarmExternalAlarm3 => '1.3.6.1.4.1.4555.1.1.1.1.6.3.59',
  upsAlarmInputBad => '1.3.6.1.4.1.4555.1.1.1.1.6.3.6',
  upsAlarmExternalAlarm4 => '1.3.6.1.4.1.4555.1.1.1.1.6.3.60',
  upsAlarmEService => '1.3.6.1.4.1.4555.1.1.1.1.6.3.61',
  upsAlarmRedundancyLost => '1.3.6.1.4.1.4555.1.1.1.1.6.3.62',
  upsAlarmPeriodicServiceCheck => '1.3.6.1.4.1.4555.1.1.1.1.6.3.63',
  upsAlarmAllTransferDisabled => '1.3.6.1.4.1.4555.1.1.1.1.6.3.64',
  upsAlarmAutoTransferDisabled => '1.3.6.1.4.1.4555.1.1.1.1.6.3.65',
  upsAlarmBatteryRoom => '1.3.6.1.4.1.4555.1.1.1.1.6.3.66',
  upsAlarmManualBypass => '1.3.6.1.4.1.4555.1.1.1.1.6.3.67',
  upsAlarmBatteryDischarged => '1.3.6.1.4.1.4555.1.1.1.1.6.3.68',
  upsAlarmInsufficientResources => '1.3.6.1.4.1.4555.1.1.1.1.6.3.69',
  upsAlarmOutputBad => '1.3.6.1.4.1.4555.1.1.1.1.6.3.7',
  upsAlarmOptionalBoards => '1.3.6.1.4.1.4555.1.1.1.1.6.3.70',
  upsAlarmRectifierFault => '1.3.6.1.4.1.4555.1.1.1.1.6.3.71',
  upsAlarmBoostFault => '1.3.6.1.4.1.4555.1.1.1.1.6.3.72',
  upsAlarmInverterFault => '1.3.6.1.4.1.4555.1.1.1.1.6.3.73',
  upsAlarmParallelModuleFault => '1.3.6.1.4.1.4555.1.1.1.1.6.3.74',
  upsAlarmGenSetGeneral => '1.3.6.1.4.1.4555.1.1.1.1.6.3.75',
  upsAlarmGenSetFault => '1.3.6.1.4.1.4555.1.1.1.1.6.3.76',
  upsAlarmEmergencyStopActive => '1.3.6.1.4.1.4555.1.1.1.1.6.3.77',
  upsAlarmBatteryCircuitOpen => '1.3.6.1.4.1.4555.1.1.1.1.6.3.78',
  upsAlarmFansFailure => '1.3.6.1.4.1.4555.1.1.1.1.6.3.79',
  upsAlarmOutputOverload => '1.3.6.1.4.1.4555.1.1.1.1.6.3.8',
  upsAlarmPhaseRotationFault => '1.3.6.1.4.1.4555.1.1.1.1.6.3.80',
  upsAlarmA62 => '1.3.6.1.4.1.4555.1.1.1.1.6.3.81',
  upsAlarmA63 => '1.3.6.1.4.1.4555.1.1.1.1.6.3.82',
  upsAlarmOnBypass => '1.3.6.1.4.1.4555.1.1.1.1.6.3.9',
  upsTest => '1.3.6.1.4.1.4555.1.1.1.1.7',
  upsTestId => '1.3.6.1.4.1.4555.1.1.1.1.7.1',
  upsTestSpinLock => '1.3.6.1.4.1.4555.1.1.1.1.7.2',
  upsTestResultsSummary => '1.3.6.1.4.1.4555.1.1.1.1.7.3',
  upsTestResultsSummaryDefinition => {
    #1 => 'notActive',
    #2 => 'inProgress',
    #3 => 'byPass',
    #4 => 'failed',
    1 => 'donePass',
    2 => 'doneWarning',
    3 => 'doneError',
    4 => 'aborted',
    5 => 'inProgress',
    6 => 'noTestsInitiated',
  },
  upsTestResultsDetail => '1.3.6.1.4.1.4555.1.1.1.1.7.4',
  upsTestStartTime => '1.3.6.1.4.1.4555.1.1.1.1.7.5',
  upsTestElapsedTime => '1.3.6.1.4.1.4555.1.1.1.1.7.6',
  upsWellKnownTests => '1.3.6.1.4.1.4555.1.1.1.1.7.7',
  upsTestNoTestsInitiated => '1.3.6.1.4.1.4555.1.1.1.1.7.7.1',
  upsTestAbortTestInProgress => '1.3.6.1.4.1.4555.1.1.1.1.7.7.2',
  upsTestGeneralSystemsTest => '1.3.6.1.4.1.4555.1.1.1.1.7.7.3',
  upsTestQuickBatteryTest => '1.3.6.1.4.1.4555.1.1.1.1.7.7.4',
  upsDeepBatteryCalibration => '1.3.6.1.4.1.4555.1.1.1.1.7.7.5',
  upsControl => '1.3.6.1.4.1.4555.1.1.1.1.8',
  upsControlStatusControl => '1.3.6.1.4.1.4555.1.1.1.1.8.1',
  upsControlStatusControlDefinition => {
    1 => 'upsStandbyOn',
    2 => 'upsStandbyOff',
    3 => 'upsEcoMode',
    4 => 'upsNormalMode',
    5 => 'upsAlarmReset',
    6 => 'upsCommandReset',
    7 => 'upsBuzzerOff',
    8 => 'upsOnBypass',
    9 => 'upsOnInverter',
  },
  upsShutdownDelay => '1.3.6.1.4.1.4555.1.1.1.1.8.2',
  upsTurnOffAfterShutdown => '1.3.6.1.4.1.4555.1.1.1.1.8.3',
  upsControlShutdownParametersTable => '1.3.6.1.4.1.4555.1.1.1.1.8.4',
  shutdownParametersEntry => '1.3.6.1.4.1.4555.1.1.1.1.8.4.1',
  upsControlEventDescr => '1.3.6.1.4.1.4555.1.1.1.1.8.4.1.1',
  upsControlEventStatus => '1.3.6.1.4.1.4555.1.1.1.1.8.4.1.2',
  upsControlDelay => '1.3.6.1.4.1.4555.1.1.1.1.8.4.1.3',
  upsControlFirstWarning => '1.3.6.1.4.1.4555.1.1.1.1.8.4.1.4',
  upsControlWarningInterval => '1.3.6.1.4.1.4555.1.1.1.1.8.4.1.5',
  upsControlSeverity => '1.3.6.1.4.1.4555.1.1.1.1.8.4.1.6',
  upsControlWeeklyScheduleTable => '1.3.6.1.4.1.4555.1.1.1.1.8.5',
  upsControlWeeklyScheduleEntry => '1.3.6.1.4.1.4555.1.1.1.1.8.5.1',
  upsControlWeeklyIndex => '1.3.6.1.4.1.4555.1.1.1.1.8.5.1.1',
  upsControlWeeklyShutdownDay => '1.3.6.1.4.1.4555.1.1.1.1.8.5.1.2',
  upsControlWeeklyShutdownTime => '1.3.6.1.4.1.4555.1.1.1.1.8.5.1.3',
  upsControlWeeklyRestartDay => '1.3.6.1.4.1.4555.1.1.1.1.8.5.1.4',
  upsControlWeeklyRestartTime => '1.3.6.1.4.1.4555.1.1.1.1.8.5.1.5',
  upsControlSpecialScheduleTable => '1.3.6.1.4.1.4555.1.1.1.1.8.6',
  upsControlSpecialScheduleEntry => '1.3.6.1.4.1.4555.1.1.1.1.8.6.1',
  upsControlSpecialIndex => '1.3.6.1.4.1.4555.1.1.1.1.8.6.1.1',
  upsControlSpecialShutdownDay => '1.3.6.1.4.1.4555.1.1.1.1.8.6.1.2',
  upsControlSpecialShutdownTime => '1.3.6.1.4.1.4555.1.1.1.1.8.6.1.3',
  upsControlSpecialRestartDay => '1.3.6.1.4.1.4555.1.1.1.1.8.6.1.4',
  upsControlSpecialRestartTime => '1.3.6.1.4.1.4555.1.1.1.1.8.6.1.5',
  upsControlEcoModeScheduleTable => '1.3.6.1.4.1.4555.1.1.1.1.8.7',
  upsControlEcoModeScheduleEntry => '1.3.6.1.4.1.4555.1.1.1.1.8.7.1',
  upsControlEcoModeIndex => '1.3.6.1.4.1.4555.1.1.1.1.8.7.1.1',
  upsControlEcoModeStartDay => '1.3.6.1.4.1.4555.1.1.1.1.8.7.1.2',
  upsControlEcoModeStartTime => '1.3.6.1.4.1.4555.1.1.1.1.8.7.1.3',
  upsControlEcoModeEndDay => '1.3.6.1.4.1.4555.1.1.1.1.8.7.1.4',
  upsControlEcoModeEndTime => '1.3.6.1.4.1.4555.1.1.1.1.8.7.1.5',
  upsConfig => '1.3.6.1.4.1.4555.1.1.1.1.9',
  upsConfigInputVoltage => '1.3.6.1.4.1.4555.1.1.1.1.9.1',
  upsConfigInputFreq => '1.3.6.1.4.1.4555.1.1.1.1.9.2',
  upsConfigOutputVoltage => '1.3.6.1.4.1.4555.1.1.1.1.9.3',
  upsConfigOutputFreq => '1.3.6.1.4.1.4555.1.1.1.1.9.4',
  upsDevicesTable => '1.3.6.1.4.1.4555.1.1.1.1.9.5',
  upsDevicesEntry => '1.3.6.1.4.1.4555.1.1.1.1.9.5.1',
  indexOfDevice => '1.3.6.1.4.1.4555.1.1.1.1.9.5.1.1',
  addrOfDevice => '1.3.6.1.4.1.4555.1.1.1.1.9.5.1.2',
  nameOfDevice => '1.3.6.1.4.1.4555.1.1.1.1.9.5.1.3',
  timeOfConnection => '1.3.6.1.4.1.4555.1.1.1.1.9.5.1.4',
  statusOfConnection => '1.3.6.1.4.1.4555.1.1.1.1.9.5.1.5',
  severityOfConnection => '1.3.6.1.4.1.4555.1.1.1.1.9.5.1.6',
  upsTraps => '1.3.6.1.4.1.4555.1.1.1.2',
  upsTrapOnBattery => '1.3.6.1.4.1.4555.1.1.1.2.1',
  upsTrapImminentStop => '1.3.6.1.4.1.4555.1.1.1.2.10',
  upsTrapTurnedOff => '1.3.6.1.4.1.4555.1.1.1.2.11',
  upsTrapOverTemperature => '1.3.6.1.4.1.4555.1.1.1.2.12',
  upsTrapOverload => '1.3.6.1.4.1.4555.1.1.1.2.13',
  upsTrapOnMains => '1.3.6.1.4.1.4555.1.1.1.2.14',
  upsTrapRedoundancyLost => '1.3.6.1.4.1.4555.1.1.1.2.15',
  upsTrapEmdTempLow => '1.3.6.1.4.1.4555.1.1.1.2.16',
  upsTrapEmdTempHigh => '1.3.6.1.4.1.4555.1.1.1.2.17',
  upsTrapEmdHumidityLow => '1.3.6.1.4.1.4555.1.1.1.2.18',
  upsTrapEmdHumidityHigh => '1.3.6.1.4.1.4555.1.1.1.2.19',
  upsTrapTestCompleted => '1.3.6.1.4.1.4555.1.1.1.2.2',
  upsTrapEmdFirstInputActive => '1.3.6.1.4.1.4555.1.1.1.2.20',
  upsTrapEmdFirstInputRestored => '1.3.6.1.4.1.4555.1.1.1.2.21',
  upsTrapEmdSecondInputActive => '1.3.6.1.4.1.4555.1.1.1.2.22',
  upsTrapEmdSecondInputRestored => '1.3.6.1.4.1.4555.1.1.1.2.23',
  upsTrapAlarmEntryAdded => '1.3.6.1.4.1.4555.1.1.1.2.3',
  upsTrapAlarmEntryRemoved => '1.3.6.1.4.1.4555.1.1.1.2.4',
  upsTrapUpsNormal => '1.3.6.1.4.1.4555.1.1.1.2.5',
  upsTrapUpsBattTestFailed => '1.3.6.1.4.1.4555.1.1.1.2.6',
  upsTrapOnBatteryPower => '1.3.6.1.4.1.4555.1.1.1.2.7',
  upsTrapBatteryLow => '1.3.6.1.4.1.4555.1.1.1.2.8',
  upsTrapPowerRestored => '1.3.6.1.4.1.4555.1.1.1.2.9',
};



package Monitoring::GLPlugin::SNMP::MibsAndOids::POWERNETMIB;

$Monitoring::GLPlugin::SNMP::MibsAndOids::origin->{'PowerNet-MIB'} = {
  url => 'ftp://ftp.apc.com/apc/public/software/pnetmib/mib/417/powernet417.mib',
  name => 'PowerNet-MIB',
};

#$Monitoring::GLPlugin::SNMP::MibsAndOids::mib_ids->{'PowerNet-MIB'} = 

$Monitoring::GLPlugin::SNMP::MibsAndOids::mibs_and_oids->{'PowerNet-MIB'} = {
  apc => '1.3.6.1.4.1.318',
  products => '1.3.6.1.4.1.318.1',
  hardware => '1.3.6.1.4.1.318.1.1',
  ups => '1.3.6.1.4.1.318.1.1.1',
  upsIdent => '1.3.6.1.4.1.318.1.1.1.1',
  upsBasicIdent => '1.3.6.1.4.1.318.1.1.1.1.1',
  upsBasicIdentModel => '1.3.6.1.4.1.318.1.1.1.1.1.1',
  upsBasicIdentName => '1.3.6.1.4.1.318.1.1.1.1.1.2',
  upsAdvIdent => '1.3.6.1.4.1.318.1.1.1.1.2',
  upsAdvIdentFirmwareRevision => '1.3.6.1.4.1.318.1.1.1.1.2.1',
  upsAdvIdentDateOfManufacture => '1.3.6.1.4.1.318.1.1.1.1.2.2',
  upsAdvIdentSerialNumber => '1.3.6.1.4.1.318.1.1.1.1.2.3',
  upsAdvIdentFirmwareRevision2 => '1.3.6.1.4.1.318.1.1.1.1.2.4',
  upsAdvIdentSkuNumber => '1.3.6.1.4.1.318.1.1.1.1.2.5',
  upsBattery => '1.3.6.1.4.1.318.1.1.1.2',
  upsBasicBattery => '1.3.6.1.4.1.318.1.1.1.2.1',
  upsBasicBatteryStatus => '1.3.6.1.4.1.318.1.1.1.2.1.1',
  upsBasicBatteryStatusDefinition => 'PowerNet-MIB::upsBasicBatteryStatus',
  upsBasicBatteryTimeOnBattery => '1.3.6.1.4.1.318.1.1.1.2.1.2',
  upsBasicBatteryLastReplaceDate => '1.3.6.1.4.1.318.1.1.1.2.1.3',
  upsAdvBattery => '1.3.6.1.4.1.318.1.1.1.2.2',
  upsAdvBatteryCapacity => '1.3.6.1.4.1.318.1.1.1.2.2.1',
  upsAdvBatteryTemperature => '1.3.6.1.4.1.318.1.1.1.2.2.2',
  upsAdvBatteryRunTimeRemaining => '1.3.6.1.4.1.318.1.1.1.2.2.3',
  upsAdvBatteryReplaceIndicator => '1.3.6.1.4.1.318.1.1.1.2.2.4',
  upsAdvBatteryReplaceIndicatorDefinition => 'PowerNet-MIB::upsAdvBatteryReplaceIndicator',
  upsAdvBatteryNumOfBattPacks => '1.3.6.1.4.1.318.1.1.1.2.2.5',
  upsAdvBatteryNumOfBadBattPacks => '1.3.6.1.4.1.318.1.1.1.2.2.6',
  upsAdvBatteryNominalVoltage => '1.3.6.1.4.1.318.1.1.1.2.2.7',
  upsAdvBatteryActualVoltage => '1.3.6.1.4.1.318.1.1.1.2.2.8',
  upsAdvBatteryCurrent => '1.3.6.1.4.1.318.1.1.1.2.2.9',
  upsAdvTotalDCCurrent => '1.3.6.1.4.1.318.1.1.1.2.2.10',
  upsAdvBatteryFullCapacity => '1.3.6.1.4.1.318.1.1.1.2.2.11',
  upsAdvBatteryActualVoltageTable => '1.3.6.1.4.1.318.1.1.1.2.2.12',
  upsAdvBatteryActualVoltageEntry => '1.3.6.1.4.1.318.1.1.1.2.2.12.1',
  upsAdvBatteryActualVoltageTableIndex => '1.3.6.1.4.1.318.1.1.1.2.2.12.1.1',
  upsAdvBatteryActualVoltagePolarity => '1.3.6.1.4.1.318.1.1.1.2.2.12.1.2',
  upsAdvBatteryActualVoltagePolarityDefinition => 'PowerNet-MIB::upsAdvBatteryActualVoltagePolarity',
  upsAdvBatteryFrameActualVoltage => '1.3.6.1.4.1.318.1.1.1.2.2.12.1.3',
  upsAdvTotalDCCurrentTable => '1.3.6.1.4.1.318.1.1.1.2.2.13',
  upsAdvTotalDCCurrentEntry => '1.3.6.1.4.1.318.1.1.1.2.2.13.1',
  upsAdvTotalDCCurrentTableIndex => '1.3.6.1.4.1.318.1.1.1.2.2.13.1.1',
  upsAdvTotalDCCurrentPolarity => '1.3.6.1.4.1.318.1.1.1.2.2.13.1.2',
  upsAdvTotalDCCurrentPolarityDefinition => 'PowerNet-MIB::upsAdvTotalDCCurrentPolarity',
  upsAdvTotalFrameDCCurrent => '1.3.6.1.4.1.318.1.1.1.2.2.13.1.3',
  upsAdvBatteryCurrentTable => '1.3.6.1.4.1.318.1.1.1.2.2.14',
  upsAdvBatteryCurrentEntry => '1.3.6.1.4.1.318.1.1.1.2.2.14.1',
  upsAdvBatteryCurrentTableIndex => '1.3.6.1.4.1.318.1.1.1.2.2.14.1.1',
  upsAdvBatteryCurrentIndex => '1.3.6.1.4.1.318.1.1.1.2.2.14.1.2',
  upsAdvBatteryCurrentPolarity => '1.3.6.1.4.1.318.1.1.1.2.2.14.1.3',
  upsAdvBatteryCurrentPolarityDefinition => 'PowerNet-MIB::upsAdvBatteryCurrentPolarity',
  upsAdvBatteryFrameCurrent => '1.3.6.1.4.1.318.1.1.1.2.2.14.1.4',
  upsAdvBatteryEstimatedChargeTime => '1.3.6.1.4.1.318.1.1.1.2.2.15',
  upsAdvBatteryPower => '1.3.6.1.4.1.318.1.1.1.2.2.16',
  upsAdvBatteryChargerStatus => '1.3.6.1.4.1.318.1.1.1.2.2.17',
  upsAdvBatteryChargerStatusDefinition => 'PowerNet-MIB::upsAdvBatteryChargerStatus',
  upsAdvBatteryInternalSKU => '1.3.6.1.4.1.318.1.1.1.2.2.19',
  upsAdvBatteryExternalSKU => '1.3.6.1.4.1.318.1.1.1.2.2.20',
  upsAdvBatteryRecommendedReplaceDate => '1.3.6.1.4.1.318.1.1.1.2.2.21',
  upsHighPrecBattery => '1.3.6.1.4.1.318.1.1.1.2.3',
  upsHighPrecBatteryCapacity => '1.3.6.1.4.1.318.1.1.1.2.3.1',
  upsHighPrecBatteryTemperature => '1.3.6.1.4.1.318.1.1.1.2.3.2',
  upsHighPrecBatteryNominalVoltage => '1.3.6.1.4.1.318.1.1.1.2.3.3',
  upsHighPrecBatteryActualVoltage => '1.3.6.1.4.1.318.1.1.1.2.3.4',
  upsHighPrecBatteryCurrent => '1.3.6.1.4.1.318.1.1.1.2.3.5',
  upsHighPrecTotalDCCurrent => '1.3.6.1.4.1.318.1.1.1.2.3.6',
  upsHighPrecBatteryActualVoltageTable => '1.3.6.1.4.1.318.1.1.1.2.3.7',
  upsHighPrecBatteryActualVoltageEntry => '1.3.6.1.4.1.318.1.1.1.2.3.7.1',
  upsHighPrecBatteryActualVoltageTableIndex => '1.3.6.1.4.1.318.1.1.1.2.3.7.1.1',
  upsHighPrecBatteryActualVoltagePolarity => '1.3.6.1.4.1.318.1.1.1.2.3.7.1.2',
  upsHighPrecBatteryActualVoltagePolarityDefinition => 'PowerNet-MIB::upsHighPrecBatteryActualVoltagePolarity',
  upsHighPrecBatteryVoltage => '1.3.6.1.4.1.318.1.1.1.2.3.7.1.3',
  upsHighPrecTotalDCCurrentTable => '1.3.6.1.4.1.318.1.1.1.2.3.8',
  upsHighPrecTotalDCCurrentEntry => '1.3.6.1.4.1.318.1.1.1.2.3.8.1',
  upsHighPrecTotalDCCurrentTableIndex => '1.3.6.1.4.1.318.1.1.1.2.3.8.1.1',
  upsHighPrecTotalDCCurrentPolarity => '1.3.6.1.4.1.318.1.1.1.2.3.8.1.2',
  upsHighPrecTotalDCCurrentPolarityDefinition => 'PowerNet-MIB::upsHighPrecTotalDCCurrentPolarity',
  upsHighPrecTotalDCFrameCurrent => '1.3.6.1.4.1.318.1.1.1.2.3.8.1.3',
  upsHighPrecBatteryCurrentTable => '1.3.6.1.4.1.318.1.1.1.2.3.9',
  upsHighPrecBatteryCurrentEntry => '1.3.6.1.4.1.318.1.1.1.2.3.9.1',
  upsHighPrecBatteryCurrentTableIndex => '1.3.6.1.4.1.318.1.1.1.2.3.9.1.1',
  upsHighPrecBatteryCurrentIndex => '1.3.6.1.4.1.318.1.1.1.2.3.9.1.2',
  upsHighPrecBatteryCurrentPolarity => '1.3.6.1.4.1.318.1.1.1.2.3.9.1.3',
  upsHighPrecBatteryCurrentPolarityDefinition => 'PowerNet-MIB::upsHighPrecBatteryCurrentPolarity',
  upsHighPrecBatteryFrameCurrent => '1.3.6.1.4.1.318.1.1.1.2.3.9.1.4',
  upsHighPrecBatteryPacks => '1.3.6.1.4.1.318.1.1.1.2.3.10',
  upsHighPrecBatteryPackTableSize => '1.3.6.1.4.1.318.1.1.1.2.3.10.1',
  upsHighPrecBatteryPackTable => '1.3.6.1.4.1.318.1.1.1.2.3.10.2',
  upsHighPrecBatteryPackEntry => '1.3.6.1.4.1.318.1.1.1.2.3.10.2.1',
  upsHighPrecBatteryPackIndex => '1.3.6.1.4.1.318.1.1.1.2.3.10.2.1.1',
  upsHighPrecBatteryCartridgeIndex => '1.3.6.1.4.1.318.1.1.1.2.3.10.2.1.2',
  upsHighPrecBatteryPackFirmwareRevision => '1.3.6.1.4.1.318.1.1.1.2.3.10.2.1.3',
  upsHighPrecBatteryPackSerialNumber => '1.3.6.1.4.1.318.1.1.1.2.3.10.2.1.4',
  upsHighPrecBatteryPackTemperature => '1.3.6.1.4.1.318.1.1.1.2.3.10.2.1.5',
  upsHighPrecBatteryPackStatus => '1.3.6.1.4.1.318.1.1.1.2.3.10.2.1.6',
  upsHighPrecBatteryPackCartridgeHealth => '1.3.6.1.4.1.318.1.1.1.2.3.10.2.1.7',
  upsHighPrecBatteryPackCartridgeReplaceDate => '1.3.6.1.4.1.318.1.1.1.2.3.10.2.1.8',
  upsHighPrecBatteryPackCartridgeInstallDate => '1.3.6.1.4.1.318.1.1.1.2.3.10.2.1.9',
  upsHighPrecBatteryPackCartridgeStatus => '1.3.6.1.4.1.318.1.1.1.2.3.10.2.1.10',
  upsInput => '1.3.6.1.4.1.318.1.1.1.3',
  upsBasicInput => '1.3.6.1.4.1.318.1.1.1.3.1',
  upsBasicInputPhase => '1.3.6.1.4.1.318.1.1.1.3.1.1',
  upsAdvInput => '1.3.6.1.4.1.318.1.1.1.3.2',
  upsAdvInputLineVoltage => '1.3.6.1.4.1.318.1.1.1.3.2.1',
  upsAdvInputMaxLineVoltage => '1.3.6.1.4.1.318.1.1.1.3.2.2',
  upsAdvInputMinLineVoltage => '1.3.6.1.4.1.318.1.1.1.3.2.3',
  upsAdvInputFrequency => '1.3.6.1.4.1.318.1.1.1.3.2.4',
  upsAdvInputLineFailCause => '1.3.6.1.4.1.318.1.1.1.3.2.5',
  upsAdvInputLineFailCauseDefinition => 'PowerNet-MIB::upsAdvInputLineFailCause',
  upsAdvInputNominalFrequency => '1.3.6.1.4.1.318.1.1.1.3.2.6',
  upsAdvInputNominalVoltage => '1.3.6.1.4.1.318.1.1.1.3.2.7',
  upsAdvInputBypassNominalFrequency => '1.3.6.1.4.1.318.1.1.1.3.2.8',
  upsAdvInputBypassNominalVoltage => '1.3.6.1.4.1.318.1.1.1.3.2.9',
  upsAdvInputStatisticsTable => '1.3.6.1.4.1.318.1.1.1.3.2.10',
  upsAdvInputStatisticsEntry => '1.3.6.1.4.1.318.1.1.1.3.2.10.1',
  upsAdvInputStatisticsIndex => '1.3.6.1.4.1.318.1.1.1.3.2.10.1.1',
  upsAdvInputApparentPower => '1.3.6.1.4.1.318.1.1.1.3.2.10.1.2',
  upsAdvInputVoltageTHD => '1.3.6.1.4.1.318.1.1.1.3.2.10.1.3',
  upsAdvInputBypassVoltageTHD => '1.3.6.1.4.1.318.1.1.1.3.2.10.1.4',
  upsAdvInputPeakCurrent => '1.3.6.1.4.1.318.1.1.1.3.2.10.1.5',
  upsAdvInputBypassPeakCurrent => '1.3.6.1.4.1.318.1.1.1.3.2.10.1.6',
  upsAdvInputActivePower => '1.3.6.1.4.1.318.1.1.1.3.2.10.1.7',
  upsAdvInputTotalApparentPower => '1.3.6.1.4.1.318.1.1.1.3.2.11',
  upsAdvInputTotalActivePower => '1.3.6.1.4.1.318.1.1.1.3.2.12',
  upsAdvInputBypassTotalApparentPower => '1.3.6.1.4.1.318.1.1.1.3.2.13',
  upsAdvInputBypassTotalActivePower => '1.3.6.1.4.1.318.1.1.1.3.2.14',
  upsHighPrecInput => '1.3.6.1.4.1.318.1.1.1.3.3',
  upsHighPrecInputLineVoltage => '1.3.6.1.4.1.318.1.1.1.3.3.1',
  upsHighPrecInputMaxLineVoltage => '1.3.6.1.4.1.318.1.1.1.3.3.2',
  upsHighPrecInputMinLineVoltage => '1.3.6.1.4.1.318.1.1.1.3.3.3',
  upsHighPrecInputFrequency => '1.3.6.1.4.1.318.1.1.1.3.3.4',
  upsHighPrecInputEnergyUsage => '1.3.6.1.4.1.318.1.1.1.3.3.5',
  upsHighPrecInputBypassVoltage => '1.3.6.1.4.1.318.1.1.1.3.3.6',
  upsHighPrecInputBypassFrequency => '1.3.6.1.4.1.318.1.1.1.3.3.7',
  upsOutput => '1.3.6.1.4.1.318.1.1.1.4',
  upsBasicOutput => '1.3.6.1.4.1.318.1.1.1.4.1',
  upsBasicOutputStatus => '1.3.6.1.4.1.318.1.1.1.4.1.1',
  upsBasicOutputStatusDefinition => 'PowerNet-MIB::upsBasicOutputStatus',
  upsBasicOutputPhase => '1.3.6.1.4.1.318.1.1.1.4.1.2',
  upsBasicSystemStatus => '1.3.6.1.4.1.318.1.1.1.4.1.3',
  upsBasicSystemStatusDefinition => 'PowerNet-MIB::upsBasicSystemStatus',
  upsBasicSystemInternalTemperature => '1.3.6.1.4.1.318.1.1.1.4.1.4',
  upsBasicSystemInverterStatus => '1.3.6.1.4.1.318.1.1.1.4.1.5',
  upsBasicSystemInverterStatusDefinition => 'PowerNet-MIB::upsBasicSystemInverterStatus',
  upsBasicSystemPFCStatus => '1.3.6.1.4.1.318.1.1.1.4.1.6',
  upsBasicSystemPFCStatusDefinition => 'PowerNet-MIB::upsBasicSystemPFCStatus',
  upsBasicOutputACwiringConfiguration => '1.3.6.1.4.1.318.1.1.1.4.1.7',
  upsBasicOutputACwiringConfigurationDefinition => 'PowerNet-MIB::upsBasicOutputACwiringConfiguration',
  upsAdvOutput => '1.3.6.1.4.1.318.1.1.1.4.2',
  upsAdvOutputVoltage => '1.3.6.1.4.1.318.1.1.1.4.2.1',
  upsAdvOutputFrequency => '1.3.6.1.4.1.318.1.1.1.4.2.2',
  upsAdvOutputLoad => '1.3.6.1.4.1.318.1.1.1.4.2.3',
  upsAdvOutputCurrent => '1.3.6.1.4.1.318.1.1.1.4.2.4',
  upsAdvOutputRedundancy => '1.3.6.1.4.1.318.1.1.1.4.2.5',
  upsAdvOutputKVACapacity => '1.3.6.1.4.1.318.1.1.1.4.2.6',
  upsAdvOutputNominalFrequency => '1.3.6.1.4.1.318.1.1.1.4.2.7',
  upsAdvOutputActivePower => '1.3.6.1.4.1.318.1.1.1.4.2.8',
  upsAdvOutputApparentPower => '1.3.6.1.4.1.318.1.1.1.4.2.9',
  upsAdvOutputStatisticsTable => '1.3.6.1.4.1.318.1.1.1.4.2.10',
  upsAdvOutputStatisticsEntry => '1.3.6.1.4.1.318.1.1.1.4.2.10.1',
  upsAdvOutputStatisticsIndex => '1.3.6.1.4.1.318.1.1.1.4.2.10.1.1',
  upsAdvOutputPeakCurrent => '1.3.6.1.4.1.318.1.1.1.4.2.10.1.2',
  upsAdvOutputCurrentTHD => '1.3.6.1.4.1.318.1.1.1.4.2.10.1.3',
  upsAdvOutputCrestFactor => '1.3.6.1.4.1.318.1.1.1.4.2.10.1.4',
  upsAdvOutputNeutralCurrent => '1.3.6.1.4.1.318.1.1.1.4.2.11',
  upsHighPrecOutput => '1.3.6.1.4.1.318.1.1.1.4.3',
  upsHighPrecOutputVoltage => '1.3.6.1.4.1.318.1.1.1.4.3.1',
  upsHighPrecOutputFrequency => '1.3.6.1.4.1.318.1.1.1.4.3.2',
  upsHighPrecOutputLoad => '1.3.6.1.4.1.318.1.1.1.4.3.3',
  upsHighPrecOutputCurrent => '1.3.6.1.4.1.318.1.1.1.4.3.4',
  upsHighPrecOutputEfficiency => '1.3.6.1.4.1.318.1.1.1.4.3.5',
  upsHighPrecOutputEnergyUsage => '1.3.6.1.4.1.318.1.1.1.4.3.6',
  upsConfig => '1.3.6.1.4.1.318.1.1.1.5',
  upsBasicConfig => '1.3.6.1.4.1.318.1.1.1.5.1',
  upsBasicConfigNumDevices => '1.3.6.1.4.1.318.1.1.1.5.1.1',
  upsBasicConfigDeviceTable => '1.3.6.1.4.1.318.1.1.1.5.1.2',
  upsBasicConfigDeviceEntry => '1.3.6.1.4.1.318.1.1.1.5.1.2.1',
  deviceIndex => '1.3.6.1.4.1.318.1.1.1.5.1.2.1.1',
  deviceName => '1.3.6.1.4.1.318.1.1.1.5.1.2.1.2',
  vaRating => '1.3.6.1.4.1.318.1.1.1.5.1.2.1.3',
  acceptThisDevice => '1.3.6.1.4.1.318.1.1.1.5.1.2.1.4',
  acceptThisDeviceDefinition => 'PowerNet-MIB::acceptThisDevice',
  upsAdvConfig => '1.3.6.1.4.1.318.1.1.1.5.2',
  upsAdvConfigRatedOutputVoltage => '1.3.6.1.4.1.318.1.1.1.5.2.1',
  upsAdvConfigHighTransferVolt => '1.3.6.1.4.1.318.1.1.1.5.2.2',
  upsAdvConfigLowTransferVolt => '1.3.6.1.4.1.318.1.1.1.5.2.3',
  upsAdvConfigAlarm => '1.3.6.1.4.1.318.1.1.1.5.2.4',
  upsAdvConfigAlarmDefinition => 'PowerNet-MIB::upsAdvConfigAlarm',
  upsAdvConfigAlarmTimer => '1.3.6.1.4.1.318.1.1.1.5.2.5',
  upsAdvConfigMinReturnCapacity => '1.3.6.1.4.1.318.1.1.1.5.2.6',
  upsAdvConfigSensitivity => '1.3.6.1.4.1.318.1.1.1.5.2.7',
  upsAdvConfigSensitivityDefinition => 'PowerNet-MIB::upsAdvConfigSensitivity',
  upsAdvConfigLowBatteryRunTime => '1.3.6.1.4.1.318.1.1.1.5.2.8',
  upsAdvConfigReturnDelay => '1.3.6.1.4.1.318.1.1.1.5.2.9',
  upsAdvConfigShutoffDelay => '1.3.6.1.4.1.318.1.1.1.5.2.10',
  upsAdvConfigUpsSleepTime => '1.3.6.1.4.1.318.1.1.1.5.2.11',
  upsAdvConfigSetEEPROMDefaults => '1.3.6.1.4.1.318.1.1.1.5.2.12',
  upsAdvConfigSetEEPROMDefaultsDefinition => 'PowerNet-MIB::upsAdvConfigSetEEPROMDefaults',
  upsAdvConfigDipSwitchTable => '1.3.6.1.4.1.318.1.1.1.5.2.13',
  upsAdvConfigDipSwitchEntry => '1.3.6.1.4.1.318.1.1.1.5.2.13.1',
  dipSwitchIndex => '1.3.6.1.4.1.318.1.1.1.5.2.13.1.1',
  dipSwitchStatus => '1.3.6.1.4.1.318.1.1.1.5.2.13.1.2',
  dipSwitchStatusDefinition => 'PowerNet-MIB::dipSwitchStatus',
  upsAdvConfigBattExhaustThresh => '1.3.6.1.4.1.318.1.1.1.5.2.14',
  upsAdvConfigPassword => '1.3.6.1.4.1.318.1.1.1.5.2.15',
  upsAdvConfigAllowedSetTable => '1.3.6.1.4.1.318.1.1.1.5.2.16',
  upsAdvConfigAllowedSetEntry => '1.3.6.1.4.1.318.1.1.1.5.2.16.1',
  apcUpsConfigFieldIndex => '1.3.6.1.4.1.318.1.1.1.5.2.16.1.1',
  apcUpsConfigFieldOID => '1.3.6.1.4.1.318.1.1.1.5.2.16.1.2',
  apcUpsConfigFieldValueRange => '1.3.6.1.4.1.318.1.1.1.5.2.16.1.3',
  upsAdvConfigBattCabAmpHour => '1.3.6.1.4.1.318.1.1.1.5.2.17',
  upsAdvConfigPositionSelector => '1.3.6.1.4.1.318.1.1.1.5.2.18',
  upsAdvConfigPositionSelectorDefinition => 'PowerNet-MIB::upsAdvConfigPositionSelector',
  upsAdvConfigOutputFreqRange => '1.3.6.1.4.1.318.1.1.1.5.2.19',
  upsAdvConfigOutputFreqRangeDefinition => 'PowerNet-MIB::upsAdvConfigOutputFreqRange',
  upsAdvConfigUPSFail => '1.3.6.1.4.1.318.1.1.1.5.2.20',
  upsAdvConfigUPSFailDefinition => 'PowerNet-MIB::upsAdvConfigUPSFail',
  upsAdvConfigAlarmRedundancy => '1.3.6.1.4.1.318.1.1.1.5.2.21',
  upsAdvConfigAlarmLoadOver => '1.3.6.1.4.1.318.1.1.1.5.2.22',
  upsAdvConfigAlarmRuntimeUnder => '1.3.6.1.4.1.318.1.1.1.5.2.23',
  upsAdvConfigVoutReporting => '1.3.6.1.4.1.318.1.1.1.5.2.24',
  upsAdvConfigVoutReportingDefinition => 'PowerNet-MIB::upsAdvConfigVoutReporting',
  upsAdvConfigNumExternalBatteries => '1.3.6.1.4.1.318.1.1.1.5.2.25',
  upsAdvConfigSimpleSignalShutdowns => '1.3.6.1.4.1.318.1.1.1.5.2.26',
  upsAdvConfigSimpleSignalShutdownsDefinition => 'PowerNet-MIB::upsAdvConfigSimpleSignalShutdowns',
  upsAdvConfigMaxShutdownTime => '1.3.6.1.4.1.318.1.1.1.5.2.27',
  upsAsiUpsControlServerRequestShutdown => '1.3.6.1.4.1.318.1.1.1.5.2.28',
  upsAsiUpsControlServerRequestShutdownDefinition => 'PowerNet-MIB::upsAsiUpsControlServerRequestShutdown',
  upsAdvConfigMinReturnRuntime => '1.3.6.1.4.1.318.1.1.1.5.2.29',
  upsAdvConfigBasicSignalLowBatteryDuration => '1.3.6.1.4.1.318.1.1.1.5.2.30',
  upsAdvConfigBypassPhaseLockRequired => '1.3.6.1.4.1.318.1.1.1.5.2.31',
  upsAdvConfigBypassPhaseLockRequiredDefinition => 'PowerNet-MIB::upsAdvConfigBypassPhaseLockRequired',
  upsAdvConfigOutputFreqSlewRate => '1.3.6.1.4.1.318.1.1.1.5.2.32',
  upsAdvConfigOutputFreqSlewRateDefinition => 'PowerNet-MIB::upsAdvConfigOutputFreqSlewRate',
  upsAdvConfigChargerLevel => '1.3.6.1.4.1.318.1.1.1.5.2.33',
  upsAdvConfigChargerLevelDefinition => 'PowerNet-MIB::upsAdvConfigChargerLevel',
  upsAdvConfigBypassToleranceSetting => '1.3.6.1.4.1.318.1.1.1.5.2.34',
  upsAdvConfigBypassToleranceSettingDefinition => 'PowerNet-MIB::upsAdvConfigBypassToleranceSetting',
  upsAdvConfigMainsSetting => '1.3.6.1.4.1.318.1.1.1.5.2.35',
  upsAdvConfigMainsSettingDefinition => 'PowerNet-MIB::upsAdvConfigMainsSetting',
  upsAdvConfigACWiringSetting => '1.3.6.1.4.1.318.1.1.1.5.2.36',
  upsAdvConfigACWiringSettingDefinition => 'PowerNet-MIB::upsAdvConfigACWiringSetting',
  upsAdvConfigUpperOutputVoltTolerance => '1.3.6.1.4.1.318.1.1.1.5.2.37',
  upsAdvConfigLowerOutputVoltTolerance => '1.3.6.1.4.1.318.1.1.1.5.2.38',
  upsAdvConfigUpperBypassVoltTolerance => '1.3.6.1.4.1.318.1.1.1.5.2.39',
  upsAdvConfigLowerBypassVoltTolerance => '1.3.6.1.4.1.318.1.1.1.5.2.40',
  upsAdvConfigOutofSyncBypassTransferDelay => '1.3.6.1.4.1.318.1.1.1.5.2.41',
  upsAdvConfigWarningAlarmDelay => '1.3.6.1.4.1.318.1.1.1.5.2.43',
  upsAdvConfigInformationalAlarmDelay => '1.3.6.1.4.1.318.1.1.1.5.2.44',
  upsAdvConfigGreenMode => '1.3.6.1.4.1.318.1.1.1.5.2.45',
  upsAdvConfigGreenModeDefinition => 'PowerNet-MIB::upsAdvConfigGreenMode',
  upsAdvConfigLCDLocalLanguage => '1.3.6.1.4.1.318.1.1.1.5.2.46',
  upsAdvConfigLCDLocalLanguageDefinition => 'PowerNet-MIB::upsAdvConfigLCDLocalLanguage',
  upsAdvConfigLCDLockOut => '1.3.6.1.4.1.318.1.1.1.5.2.47',
  upsAdvConfigLCDLockOutDefinition => 'PowerNet-MIB::upsAdvConfigLCDLockOut',
  upsAdvConfigChargerRate => '1.3.6.1.4.1.318.1.1.1.5.2.48',
  upsAdvConfigBatterySelection => '1.3.6.1.4.1.318.1.1.1.5.2.49',
  upsAdvConfigBatterySelectionDefinition => 'PowerNet-MIB::upsAdvConfigBatterySelection',
  upsAdvConfigBatteryHealthAlarmWarningTime => '1.3.6.1.4.1.318.1.1.1.5.2.50',
  upsAdvConfigBatteryHealthAlarmSleepTime => '1.3.6.1.4.1.318.1.1.1.5.2.51',
  upsControl => '1.3.6.1.4.1.318.1.1.1.6',
  upsBasicControl => '1.3.6.1.4.1.318.1.1.1.6.1',
  upsBasicControlConserveBattery => '1.3.6.1.4.1.318.1.1.1.6.1.1',
  upsBasicControlConserveBatteryDefinition => 'PowerNet-MIB::upsBasicControlConserveBattery',
  upsAdvControl => '1.3.6.1.4.1.318.1.1.1.6.2',
  upsAdvControlUpsOff => '1.3.6.1.4.1.318.1.1.1.6.2.1',
  upsAdvControlUpsOffDefinition => 'PowerNet-MIB::upsAdvControlUpsOff',
  upsAdvControlRebootShutdownUps => '1.3.6.1.4.1.318.1.1.1.6.2.2',
  upsAdvControlRebootShutdownUpsDefinition => 'PowerNet-MIB::upsAdvControlRebootShutdownUps',
  upsAdvControlUpsSleep => '1.3.6.1.4.1.318.1.1.1.6.2.3',
  upsAdvControlUpsSleepDefinition => 'PowerNet-MIB::upsAdvControlUpsSleep',
  upsAdvControlSimulatePowerFail => '1.3.6.1.4.1.318.1.1.1.6.2.4',
  upsAdvControlSimulatePowerFailDefinition => 'PowerNet-MIB::upsAdvControlSimulatePowerFail',
  upsAdvControlFlashAndBeep => '1.3.6.1.4.1.318.1.1.1.6.2.5',
  upsAdvControlFlashAndBeepDefinition => 'PowerNet-MIB::upsAdvControlFlashAndBeep',
  upsAdvControlTurnOnUPS => '1.3.6.1.4.1.318.1.1.1.6.2.6',
  upsAdvControlTurnOnUPSDefinition => 'PowerNet-MIB::upsAdvControlTurnOnUPS',
  upsAdvControlBypassSwitch => '1.3.6.1.4.1.318.1.1.1.6.2.7',
  upsAdvControlBypassSwitchDefinition => 'PowerNet-MIB::upsAdvControlBypassSwitch',
  upsAdvControlRebootUpsWithOrWithoutAC => '1.3.6.1.4.1.318.1.1.1.6.2.8',
  upsAdvControlRebootUpsWithOrWithoutACDefinition => 'PowerNet-MIB::upsAdvControlRebootUpsWithOrWithoutAC',
  upsAdvControlFirmwareUpdate => '1.3.6.1.4.1.318.1.1.1.6.2.9',
  upsAdvControlFirmwareUpdateDefinition => 'PowerNet-MIB::upsAdvControlFirmwareUpdate',
  upsTest => '1.3.6.1.4.1.318.1.1.1.7',
  upsBasicTest => '1.3.6.1.4.1.318.1.1.1.7.1',
  upsAdvTest => '1.3.6.1.4.1.318.1.1.1.7.2',
  upsAdvTestDiagnosticSchedule => '1.3.6.1.4.1.318.1.1.1.7.2.1',
  upsAdvTestDiagnosticScheduleDefinition => 'PowerNet-MIB::upsAdvTestDiagnosticSchedule',
  upsAdvTestDiagnostics => '1.3.6.1.4.1.318.1.1.1.7.2.2',
  upsAdvTestDiagnosticsDefinition => 'PowerNet-MIB::upsAdvTestDiagnostics',
  upsAdvTestDiagnosticsResults => '1.3.6.1.4.1.318.1.1.1.7.2.3',
  upsAdvTestDiagnosticsResultsDefinition => 'PowerNet-MIB::upsAdvTestDiagnosticsResults',
  upsAdvTestLastDiagnosticsDate => '1.3.6.1.4.1.318.1.1.1.7.2.4',
  upsAdvTestRuntimeCalibration => '1.3.6.1.4.1.318.1.1.1.7.2.5',
  upsAdvTestRuntimeCalibrationDefinition => 'PowerNet-MIB::upsAdvTestRuntimeCalibration',
  upsAdvTestCalibrationResults => '1.3.6.1.4.1.318.1.1.1.7.2.6',
  upsAdvTestCalibrationResultsDefinition => 'PowerNet-MIB::upsAdvTestCalibrationResults',
  upsAdvTestCalibrationDate => '1.3.6.1.4.1.318.1.1.1.7.2.7',
  upsAdvTestDiagnosticTime => '1.3.6.1.4.1.318.1.1.1.7.2.8',
  upsAdvTestDiagnosticDay => '1.3.6.1.4.1.318.1.1.1.7.2.9',
  upsAdvTestDiagnosticDayDefinition => 'PowerNet-MIB::upsAdvTestDiagnosticDay',
  upsComm => '1.3.6.1.4.1.318.1.1.1.8',
  upsCommStatus => '1.3.6.1.4.1.318.1.1.1.8.1',
  upsCommStatusDefinition => 'PowerNet-MIB::upsCommStatus',
  upsPhase => '1.3.6.1.4.1.318.1.1.1.9',
  upsPhaseResetValues => '1.3.6.1.4.1.318.1.1.1.9.1',
  upsPhaseResetMaxMinValues => '1.3.6.1.4.1.318.1.1.1.9.1.1',
  upsPhaseResetMaxMinValuesDefinition => 'PowerNet-MIB::upsPhaseResetMaxMinValues',
  upsPhaseInput => '1.3.6.1.4.1.318.1.1.1.9.2',
  upsPhaseNumInputs => '1.3.6.1.4.1.318.1.1.1.9.2.1',
  upsPhaseInputTable => '1.3.6.1.4.1.318.1.1.1.9.2.2',
  upsPhaseInputEntry => '1.3.6.1.4.1.318.1.1.1.9.2.2.1',
  upsPhaseInputTableIndex => '1.3.6.1.4.1.318.1.1.1.9.2.2.1.1',
  upsPhaseNumInputPhases => '1.3.6.1.4.1.318.1.1.1.9.2.2.1.2',
  upsPhaseInputVoltageOrientation => '1.3.6.1.4.1.318.1.1.1.9.2.2.1.3',
  upsPhaseInputVoltageOrientationDefinition => 'PowerNet-MIB::upsPhaseInputVoltageOrientation',
  upsPhaseInputFrequency => '1.3.6.1.4.1.318.1.1.1.9.2.2.1.4',
  upsPhaseInputType => '1.3.6.1.4.1.318.1.1.1.9.2.2.1.5',
  upsPhaseInputTypeDefinition => 'PowerNet-MIB::upsPhaseInputType',
  upsPhaseInputName => '1.3.6.1.4.1.318.1.1.1.9.2.2.1.6',
  upsPhaseInputPhaseTable => '1.3.6.1.4.1.318.1.1.1.9.2.3',
  upsPhaseInputPhaseEntry => '1.3.6.1.4.1.318.1.1.1.9.2.3.1',
  upsPhaseInputPhaseTableIndex => '1.3.6.1.4.1.318.1.1.1.9.2.3.1.1',
  upsPhaseInputPhaseIndex => '1.3.6.1.4.1.318.1.1.1.9.2.3.1.2',
  upsPhaseInputVoltage => '1.3.6.1.4.1.318.1.1.1.9.2.3.1.3',
  upsPhaseInputMaxVoltage => '1.3.6.1.4.1.318.1.1.1.9.2.3.1.4',
  upsPhaseInputMinVoltage => '1.3.6.1.4.1.318.1.1.1.9.2.3.1.5',
  upsPhaseInputCurrent => '1.3.6.1.4.1.318.1.1.1.9.2.3.1.6',
  upsPhaseInputMaxCurrent => '1.3.6.1.4.1.318.1.1.1.9.2.3.1.7',
  upsPhaseInputMinCurrent => '1.3.6.1.4.1.318.1.1.1.9.2.3.1.8',
  upsPhaseInputPower => '1.3.6.1.4.1.318.1.1.1.9.2.3.1.9',
  upsPhaseInputMaxPower => '1.3.6.1.4.1.318.1.1.1.9.2.3.1.10',
  upsPhaseInputMinPower => '1.3.6.1.4.1.318.1.1.1.9.2.3.1.11',
  upsPhaseInputApparentPower => '1.3.6.1.4.1.318.1.1.1.9.2.3.1.12',
  upsPhaseInputPowerFactor => '1.3.6.1.4.1.318.1.1.1.9.2.3.1.13',
  upsPhaseOutput => '1.3.6.1.4.1.318.1.1.1.9.3',
  upsPhaseNumOutputs => '1.3.6.1.4.1.318.1.1.1.9.3.1',
  upsPhaseOutputTable => '1.3.6.1.4.1.318.1.1.1.9.3.2',
  upsPhaseOutputEntry => '1.3.6.1.4.1.318.1.1.1.9.3.2.1',
  upsPhaseOutputTableIndex => '1.3.6.1.4.1.318.1.1.1.9.3.2.1.1',
  upsPhaseNumOutputPhases => '1.3.6.1.4.1.318.1.1.1.9.3.2.1.2',
  upsPhaseOutputVoltageOrientation => '1.3.6.1.4.1.318.1.1.1.9.3.2.1.3',
  upsPhaseOutputVoltageOrientationDefinition => 'PowerNet-MIB::upsPhaseOutputVoltageOrientation',
  upsPhaseOutputFrequency => '1.3.6.1.4.1.318.1.1.1.9.3.2.1.4',
  upsPhaseOutputPhaseTable => '1.3.6.1.4.1.318.1.1.1.9.3.3',
  upsPhaseOutputPhaseEntry => '1.3.6.1.4.1.318.1.1.1.9.3.3.1',
  upsPhaseOutputPhaseTableIndex => '1.3.6.1.4.1.318.1.1.1.9.3.3.1.1',
  upsPhaseOutputPhaseIndex => '1.3.6.1.4.1.318.1.1.1.9.3.3.1.2',
  upsPhaseOutputVoltage => '1.3.6.1.4.1.318.1.1.1.9.3.3.1.3',
  upsPhaseOutputCurrent => '1.3.6.1.4.1.318.1.1.1.9.3.3.1.4',
  upsPhaseOutputMaxCurrent => '1.3.6.1.4.1.318.1.1.1.9.3.3.1.5',
  upsPhaseOutputMinCurrent => '1.3.6.1.4.1.318.1.1.1.9.3.3.1.6',
  upsPhaseOutputLoad => '1.3.6.1.4.1.318.1.1.1.9.3.3.1.7',
  upsPhaseOutputMaxLoad => '1.3.6.1.4.1.318.1.1.1.9.3.3.1.8',
  upsPhaseOutputMinLoad => '1.3.6.1.4.1.318.1.1.1.9.3.3.1.9',
  upsPhaseOutputPercentLoad => '1.3.6.1.4.1.318.1.1.1.9.3.3.1.10',
  upsPhaseOutputMaxPercentLoad => '1.3.6.1.4.1.318.1.1.1.9.3.3.1.11',
  upsPhaseOutputMinPercentLoad => '1.3.6.1.4.1.318.1.1.1.9.3.3.1.12',
  upsPhaseOutputPower => '1.3.6.1.4.1.318.1.1.1.9.3.3.1.13',
  upsPhaseOutputMaxPower => '1.3.6.1.4.1.318.1.1.1.9.3.3.1.14',
  upsPhaseOutputMinPower => '1.3.6.1.4.1.318.1.1.1.9.3.3.1.15',
  upsPhaseOutputPercentPower => '1.3.6.1.4.1.318.1.1.1.9.3.3.1.16',
  upsPhaseOutputMaxPercentPower => '1.3.6.1.4.1.318.1.1.1.9.3.3.1.17',
  upsPhaseOutputMinPercentPower => '1.3.6.1.4.1.318.1.1.1.9.3.3.1.18',
  upsPhaseOutputPowerFactor => '1.3.6.1.4.1.318.1.1.1.9.3.3.1.19',
  upsSyncCtrlGroup => '1.3.6.1.4.1.318.1.1.1.10',
  upsSyncCtrlGroupConfig => '1.3.6.1.4.1.318.1.1.1.10.1',
  upsSCGMembershipGroupNumber => '1.3.6.1.4.1.318.1.1.1.10.1.1',
  upsSCGActiveMembershipStatus => '1.3.6.1.4.1.318.1.1.1.10.1.2',
  upsSCGActiveMembershipStatusDefinition => 'PowerNet-MIB::upsSCGActiveMembershipStatus',
  upsSCGPowerSynchronizationDelayTime => '1.3.6.1.4.1.318.1.1.1.10.1.3',
  upsSCGReturnBatteryCapacityOffset => '1.3.6.1.4.1.318.1.1.1.10.1.4',
  upsSCGMultiCastIP => '1.3.6.1.4.1.318.1.1.1.10.1.5',
  upsSyncCtrlGroupStatus => '1.3.6.1.4.1.318.1.1.1.10.2',
  upsSCGNumOfGroupMembers => '1.3.6.1.4.1.318.1.1.1.10.2.1',
  upsSCGStatusTable => '1.3.6.1.4.1.318.1.1.1.10.2.2',
  upsSCGStatusEntry => '1.3.6.1.4.1.318.1.1.1.10.2.2.1',
  upsSCGStatusTableIndex => '1.3.6.1.4.1.318.1.1.1.10.2.2.1.1',
  upsSCGMemberIP => '1.3.6.1.4.1.318.1.1.1.10.2.2.1.2',
  upsSCGACInputStatus => '1.3.6.1.4.1.318.1.1.1.10.2.2.1.3',
  upsSCGACInputStatusDefinition => 'PowerNet-MIB::upsSCGACInputStatus',
  upsSCGACOutputStatus => '1.3.6.1.4.1.318.1.1.1.10.2.2.1.4',
  upsSCGACOutputStatusDefinition => 'PowerNet-MIB::upsSCGACOutputStatus',
  upsState => '1.3.6.1.4.1.318.1.1.1.11',
  upsBasicState => '1.3.6.1.4.1.318.1.1.1.11.1',
  upsBasicStateOutputState => '1.3.6.1.4.1.318.1.1.1.11.1.1',
  upsBasicStateOutputStateDefinition => 'PowerNet-MIB::upsBasicStateOutputState',
  upsAdvState => '1.3.6.1.4.1.318.1.1.1.11.2',
  upsAdvStateAbnormalConditions => '1.3.6.1.4.1.318.1.1.1.11.2.1',
  upsAdvStateSymmetra3PhaseSpecificFaults => '1.3.6.1.4.1.318.1.1.1.11.2.2',
  upsAdvStateDP300ESpecificFaults => '1.3.6.1.4.1.318.1.1.1.11.2.3',
  upsAdvStateSymmetraSpecificFaults => '1.3.6.1.4.1.318.1.1.1.11.2.4',
  upsAdvStateSmartUPSSpecificFaults => '1.3.6.1.4.1.318.1.1.1.11.2.5',
  upsAdvStateSystemMessages => '1.3.6.1.4.1.318.1.1.1.11.2.6',
  upsAdvStateTotaltimeonbattery => '1.3.6.1.4.1.318.1.1.1.11.2.7',
  upsAdvStateTotaltimeonbypass => '1.3.6.1.4.1.318.1.1.1.11.2.8',
  upsAdvStateTotaltimeonNormal => '1.3.6.1.4.1.318.1.1.1.11.2.9',
  upsAdvStateNumberoftimesonbattery => '1.3.6.1.4.1.318.1.1.1.11.2.10',
  upsAdvStateNumberoftimesbypass => '1.3.6.1.4.1.318.1.1.1.11.2.11',
  upsAdvStateNumberoftimesNormal => '1.3.6.1.4.1.318.1.1.1.11.2.12',
  upsAdvStateEcomode => '1.3.6.1.4.1.318.1.1.1.11.2.13',
  upsAdvStateEcomodeDefinition => 'PowerNet-MIB::upsAdvStateEcomode',
  upsOutletGroups => '1.3.6.1.4.1.318.1.1.1.12',
  upsOutletGroupStatus => '1.3.6.1.4.1.318.1.1.1.12.1',
  upsOutletGroupStatusTableSize => '1.3.6.1.4.1.318.1.1.1.12.1.1',
  upsOutletGroupStatusTable => '1.3.6.1.4.1.318.1.1.1.12.1.2',
  upsOutletGroupStatusEntry => '1.3.6.1.4.1.318.1.1.1.12.1.2.1',
  upsOutletGroupStatusIndex => '1.3.6.1.4.1.318.1.1.1.12.1.2.1.1',
  upsOutletGroupStatusName => '1.3.6.1.4.1.318.1.1.1.12.1.2.1.2',
  upsOutletGroupStatusGroupState => '1.3.6.1.4.1.318.1.1.1.12.1.2.1.3',
  upsOutletGroupStatusGroupStateDefinition => 'PowerNet-MIB::upsOutletGroupStatusGroupState',
  upsOutletGroupStatusCommandPending => '1.3.6.1.4.1.318.1.1.1.12.1.2.1.4',
  upsOutletGroupStatusCommandPendingDefinition => 'PowerNet-MIB::upsOutletGroupStatusCommandPending',
  upsOutletGroupStatusOutletType => '1.3.6.1.4.1.318.1.1.1.12.1.2.1.5',
  upsOutletGroupStatusOutletTypeDefinition => 'PowerNet-MIB::upsOutletGroupStatusOutletType',
  upsOutletGroupConfig => '1.3.6.1.4.1.318.1.1.1.12.2',
  upsOutletGroupConfigTableSize => '1.3.6.1.4.1.318.1.1.1.12.2.1',
  upsOutletGroupConfigTable => '1.3.6.1.4.1.318.1.1.1.12.2.2',
  upsOutletGroupConfigEntry => '1.3.6.1.4.1.318.1.1.1.12.2.2.1',
  upsOutletGroupConfigIndex => '1.3.6.1.4.1.318.1.1.1.12.2.2.1.1',
  upsOutletGroupConfigName => '1.3.6.1.4.1.318.1.1.1.12.2.2.1.2',
  upsOutletGroupConfigPowerOnDelay => '1.3.6.1.4.1.318.1.1.1.12.2.2.1.3',
  upsOutletGroupConfigPowerOffDelay => '1.3.6.1.4.1.318.1.1.1.12.2.2.1.4',
  upsOutletGroupConfigRebootDuration => '1.3.6.1.4.1.318.1.1.1.12.2.2.1.5',
  upsOutletGroupConfigMinReturnRuntime => '1.3.6.1.4.1.318.1.1.1.12.2.2.1.6',
  upsOutletGroupConfigOutletType => '1.3.6.1.4.1.318.1.1.1.12.2.2.1.7',
  upsOutletGroupConfigOutletTypeDefinition => 'PowerNet-MIB::upsOutletGroupConfigOutletType',
  upsOutletGroupConfigLoadShedControlSkipOffDelay => '1.3.6.1.4.1.318.1.1.1.12.2.2.1.8',
  upsOutletGroupConfigLoadShedControlSkipOffDelayDefinition => 'PowerNet-MIB::upsOutletGroupConfigLoadShedControlSkipOffDelay',
  upsOutletGroupConfigLoadShedControlAutoRestart => '1.3.6.1.4.1.318.1.1.1.12.2.2.1.9',
  upsOutletGroupConfigLoadShedControlAutoRestartDefinition => 'PowerNet-MIB::upsOutletGroupConfigLoadShedControlAutoRestart',
  upsOutletGroupConfigLoadShedControlTimeOnBattery => '1.3.6.1.4.1.318.1.1.1.12.2.2.1.10',
  upsOutletGroupConfigLoadShedControlTimeOnBatteryDefinition => 'PowerNet-MIB::upsOutletGroupConfigLoadShedControlTimeOnBattery',
  upsOutletGroupConfigLoadShedControlRuntimeRemaining => '1.3.6.1.4.1.318.1.1.1.12.2.2.1.11',
  upsOutletGroupConfigLoadShedControlRuntimeRemainingDefinition => 'PowerNet-MIB::upsOutletGroupConfigLoadShedControlRuntimeRemaining',
  upsOutletGroupConfigLoadShedControlInOverload => '1.3.6.1.4.1.318.1.1.1.12.2.2.1.12',
  upsOutletGroupConfigLoadShedControlInOverloadDefinition => 'PowerNet-MIB::upsOutletGroupConfigLoadShedControlInOverload',
  upsOutletGroupConfigLoadShedTimeOnBattery => '1.3.6.1.4.1.318.1.1.1.12.2.2.1.13',
  upsOutletGroupConfigLoadShedRuntimeRemaining => '1.3.6.1.4.1.318.1.1.1.12.2.2.1.14',
  upsOutletGroupControl => '1.3.6.1.4.1.318.1.1.1.12.3',
  upsOutletGroupControlTableSize => '1.3.6.1.4.1.318.1.1.1.12.3.1',
  upsOutletGroupControlTable => '1.3.6.1.4.1.318.1.1.1.12.3.2',
  upsOutletGroupControlEntry => '1.3.6.1.4.1.318.1.1.1.12.3.2.1',
  upsOutletGroupControlIndex => '1.3.6.1.4.1.318.1.1.1.12.3.2.1.1',
  upsOutletGroupControlName => '1.3.6.1.4.1.318.1.1.1.12.3.2.1.2',
  upsOutletGroupControlCommand => '1.3.6.1.4.1.318.1.1.1.12.3.2.1.3',
  upsOutletGroupControlCommandDefinition => 'PowerNet-MIB::upsOutletGroupControlCommand',
  upsOutletGroupControlOutletType => '1.3.6.1.4.1.318.1.1.1.12.3.2.1.4',
  upsOutletGroupControlOutletTypeDefinition => 'PowerNet-MIB::upsOutletGroupControlOutletType',
  upsDiagnostics => '1.3.6.1.4.1.318.1.1.1.13',
  upsDiagnosticIM => '1.3.6.1.4.1.318.1.1.1.13.1',
  upsDiagIMTableSize => '1.3.6.1.4.1.318.1.1.1.13.1.1',
  upsDiagIMTable => '1.3.6.1.4.1.318.1.1.1.13.1.2',
  upsDiagIMEntry => '1.3.6.1.4.1.318.1.1.1.13.1.2.1',
  upsDiagIMIndex => '1.3.6.1.4.1.318.1.1.1.13.1.2.1.1',
  upsDiagIMType => '1.3.6.1.4.1.318.1.1.1.13.1.2.1.2',
  upsDiagIMTypeDefinition => 'PowerNet-MIB::upsDiagIMType',
  upsDiagIMStatus => '1.3.6.1.4.1.318.1.1.1.13.1.2.1.3',
  upsDiagIMStatusDefinition => 'PowerNet-MIB::upsDiagIMStatus',
  upsDiagIMFirmwareRev => '1.3.6.1.4.1.318.1.1.1.13.1.2.1.4',
  upsDiagIMSlaveFirmwareRev => '1.3.6.1.4.1.318.1.1.1.13.1.2.1.5',
  upsDiagIMHardwareRev => '1.3.6.1.4.1.318.1.1.1.13.1.2.1.6',
  upsDiagIMSerialNum => '1.3.6.1.4.1.318.1.1.1.13.1.2.1.7',
  upsDiagIMManufactureDate => '1.3.6.1.4.1.318.1.1.1.13.1.2.1.8',
  upsDiagnosticPowerModules => '1.3.6.1.4.1.318.1.1.1.13.2',
  upsDiagPMTableSize => '1.3.6.1.4.1.318.1.1.1.13.2.1',
  upsDiagPMTable => '1.3.6.1.4.1.318.1.1.1.13.2.2',
  upsDiagPMEntry => '1.3.6.1.4.1.318.1.1.1.13.2.2.1',
  upsDiagPMIndex => '1.3.6.1.4.1.318.1.1.1.13.2.2.1.1',
  upsDiagPMStatus => '1.3.6.1.4.1.318.1.1.1.13.2.2.1.2',
  upsDiagPMStatusDefinition => 'PowerNet-MIB::upsDiagPMStatus',
  upsDiagPMFirmwareRev => '1.3.6.1.4.1.318.1.1.1.13.2.2.1.3',
  upsDiagPMHardwareRev => '1.3.6.1.4.1.318.1.1.1.13.2.2.1.4',
  upsDiagPMSerialNum => '1.3.6.1.4.1.318.1.1.1.13.2.2.1.5',
  upsDiagPMManufactureDate => '1.3.6.1.4.1.318.1.1.1.13.2.2.1.6',
  upsDiagPMLifetimeInfoTable => '1.3.6.1.4.1.318.1.1.1.13.2.3',
  upsDiagPMLifetimeInfoEntry => '1.3.6.1.4.1.318.1.1.1.13.2.3.1',
  upsDiagPMLifetimeInfoIndex => '1.3.6.1.4.1.318.1.1.1.13.2.3.1.1',
  upsDiagPMLifetimeStatus => '1.3.6.1.4.1.318.1.1.1.13.2.3.1.2',
  upsDiagPMLifetimeStatusDefinition => 'PowerNet-MIB::upsDiagPMLifetimeStatus',
  upsDiagPMEstmtdLifetimeRmng => '1.3.6.1.4.1.318.1.1.1.13.2.3.1.3',
  upsDiagPMEstmtdLifetimeRmngPct => '1.3.6.1.4.1.318.1.1.1.13.2.3.1.4',
  upsDiagPMFanLifetimeStatus => '1.3.6.1.4.1.318.1.1.1.13.2.3.1.5',
  upsDiagPMFanLifetimeStatusDefinition => 'PowerNet-MIB::upsDiagPMFanLifetimeStatus',
  upsDiagPMFanEstmtdLifetimeRmng => '1.3.6.1.4.1.318.1.1.1.13.2.3.1.6',
  upsDiagPMFanEstmtdLifetimeRmngPct => '1.3.6.1.4.1.318.1.1.1.13.2.3.1.7',
  upsDiagPMEnclDoorFltrTableSize => '1.3.6.1.4.1.318.1.1.1.13.2.4',
  upsDiagPMEnclDoorFltrTable => '1.3.6.1.4.1.318.1.1.1.13.2.5',
  upsDiagPMEnclDoorFltrEntry => '1.3.6.1.4.1.318.1.1.1.13.2.5.1',
  upsDiagPMEnclIndex => '1.3.6.1.4.1.318.1.1.1.13.2.5.1.1',
  upsDiagPMEnclDoorFltrLifetime => '1.3.6.1.4.1.318.1.1.1.13.2.5.1.2',
  upsDiagPMEnclDoorFltrLifetimeDefinition => 'PowerNet-MIB::upsDiagPMEnclDoorFltrLifetime',
  upsDiagPMEnclDoorFltrStatus => '1.3.6.1.4.1.318.1.1.1.13.2.5.1.3',
  upsDiagPMEnclDoorFltrStatusDefinition => 'PowerNet-MIB::upsDiagPMEnclDoorFltrStatus',
  upsDiagPMEnclDoorFltrEstmtdLifetimeRmng => '1.3.6.1.4.1.318.1.1.1.13.2.5.1.4',
  upsDiagPMEnclDoorFltrEstmtdLifetimeRmngPct => '1.3.6.1.4.1.318.1.1.1.13.2.5.1.5',
  upsDiagnosticBatteries => '1.3.6.1.4.1.318.1.1.1.13.3',
  upsDiagBatteryTableSize => '1.3.6.1.4.1.318.1.1.1.13.3.1',
  upsDiagBatteryTable => '1.3.6.1.4.1.318.1.1.1.13.3.2',
  upsDiagBatteryEntry => '1.3.6.1.4.1.318.1.1.1.13.3.2.1',
  upsDiagBatteryFrameIndex => '1.3.6.1.4.1.318.1.1.1.13.3.2.1.1',
  upsDiagBatteryIndex => '1.3.6.1.4.1.318.1.1.1.13.3.2.1.2',
  upsDiagBatteryStatus => '1.3.6.1.4.1.318.1.1.1.13.3.2.1.3',
  upsDiagBatteryStatusDefinition => 'PowerNet-MIB::upsDiagBatteryStatus',
  upsDiagBatterySerialNumber => '1.3.6.1.4.1.318.1.1.1.13.3.2.1.4',
  upsDiagBatteryFirmwareRev => '1.3.6.1.4.1.318.1.1.1.13.3.2.1.5',
  upsDiagBatteryManufactureDate => '1.3.6.1.4.1.318.1.1.1.13.3.2.1.6',
  upsDiagBatteryType => '1.3.6.1.4.1.318.1.1.1.13.3.2.1.7',
  upsDiagBatteryFramePresent => '1.3.6.1.4.1.318.1.1.1.13.3.2.1.8',
  upsDiagBatteryFramePresentDefinition => 'PowerNet-MIB::upsDiagBatteryFramePresent',
  upsDiagBatteryFrameTemperature => '1.3.6.1.4.1.318.1.1.1.13.3.2.1.9',
  upsDiagnosticSubsystem => '1.3.6.1.4.1.318.1.1.1.13.4',
  upsDiagSubSysFrameTableSize => '1.3.6.1.4.1.318.1.1.1.13.4.1',
  upsDiagSubSysFrameTable => '1.3.6.1.4.1.318.1.1.1.13.4.2',
  upsDiagSubSysFrameEntry => '1.3.6.1.4.1.318.1.1.1.13.4.2.1',
  upsDiagSubSysFrameIndex => '1.3.6.1.4.1.318.1.1.1.13.4.2.1.1',
  upsDiagSubSysFrameType => '1.3.6.1.4.1.318.1.1.1.13.4.2.1.2',
  upsDiagSubSysFrameTypeDefinition => 'PowerNet-MIB::upsDiagSubSysFrameType',
  upsDiagSubSysFrameFirmwareRev => '1.3.6.1.4.1.318.1.1.1.13.4.2.1.3',
  upsDiagSubSysFrameHardwareRev => '1.3.6.1.4.1.318.1.1.1.13.4.2.1.4',
  upsDiagSubSysFrameSerialNum => '1.3.6.1.4.1.318.1.1.1.13.4.2.1.5',
  upsDiagSubSysFrameManufactureDate => '1.3.6.1.4.1.318.1.1.1.13.4.2.1.6',
  upsDiagSubSysIntBypSwitchTableSize => '1.3.6.1.4.1.318.1.1.1.13.4.3',
  upsDiagSubSysIntBypSwitchTable => '1.3.6.1.4.1.318.1.1.1.13.4.4',
  upsDiagSubSysIntBypSwitchEntry => '1.3.6.1.4.1.318.1.1.1.13.4.4.1',
  upsDiagSubSysIntBypSwitchFrameIndex => '1.3.6.1.4.1.318.1.1.1.13.4.4.1.1',
  upsDiagSubSysIntBypSwitchIndex => '1.3.6.1.4.1.318.1.1.1.13.4.4.1.2',
  upsDiagSubSysIntBypSwitchStatus => '1.3.6.1.4.1.318.1.1.1.13.4.4.1.3',
  upsDiagSubSysIntBypSwitchStatusDefinition => 'PowerNet-MIB::upsDiagSubSysIntBypSwitchStatus',
  upsDiagSubSysIntBypSwitchFirmwareRev => '1.3.6.1.4.1.318.1.1.1.13.4.4.1.4',
  upsDiagSubSysIntBypSwitchHardwareRev => '1.3.6.1.4.1.318.1.1.1.13.4.4.1.5',
  upsDiagSubSysIntBypSwitchSerialNum => '1.3.6.1.4.1.318.1.1.1.13.4.4.1.6',
  upsDiagSubSysIntBypSwitchManufactureDate => '1.3.6.1.4.1.318.1.1.1.13.4.4.1.7',
  upsDiagSubSysBattMonitorTableSize => '1.3.6.1.4.1.318.1.1.1.13.4.5',
  upsDiagSubSysBattMonitorTable => '1.3.6.1.4.1.318.1.1.1.13.4.6',
  upsDiagSubSysBattMonitorEntry => '1.3.6.1.4.1.318.1.1.1.13.4.6.1',
  upsDiagSubSysBattMonitorFrameIndex => '1.3.6.1.4.1.318.1.1.1.13.4.6.1.1',
  upsDiagSubSysBattMonitorIndex => '1.3.6.1.4.1.318.1.1.1.13.4.6.1.2',
  upsDiagSubSysBattMonitorStatus => '1.3.6.1.4.1.318.1.1.1.13.4.6.1.3',
  upsDiagSubSysBattMonitorStatusDefinition => 'PowerNet-MIB::upsDiagSubSysBattMonitorStatus',
  upsDiagSubSysBattMonitorFirmwareRev => '1.3.6.1.4.1.318.1.1.1.13.4.6.1.4',
  upsDiagSubSysBattMonitorHardwareRev => '1.3.6.1.4.1.318.1.1.1.13.4.6.1.5',
  upsDiagSubSysBattMonitorSerialNum => '1.3.6.1.4.1.318.1.1.1.13.4.6.1.6',
  upsDiagSubSysBattMonitorManufactureDate => '1.3.6.1.4.1.318.1.1.1.13.4.6.1.7',
  upsDiagSubSysExternalSwitchGearTableSize => '1.3.6.1.4.1.318.1.1.1.13.4.7',
  upsDiagSubSysExternalSwitchGearTable => '1.3.6.1.4.1.318.1.1.1.13.4.8',
  upsDiagSubSysExternalSwitchGearEntry => '1.3.6.1.4.1.318.1.1.1.13.4.8.1',
  upsDiagSubSysExternalSwitchGearFrameIndex => '1.3.6.1.4.1.318.1.1.1.13.4.8.1.1',
  upsDiagSubSysExternalSwitchGearIndex => '1.3.6.1.4.1.318.1.1.1.13.4.8.1.2',
  upsDiagSubSysExternalSwitchGearStatus => '1.3.6.1.4.1.318.1.1.1.13.4.8.1.3',
  upsDiagSubSysExternalSwitchGearStatusDefinition => 'PowerNet-MIB::upsDiagSubSysExternalSwitchGearStatus',
  upsDiagSubSysExternalSwitchGearFirmwareRev => '1.3.6.1.4.1.318.1.1.1.13.4.8.1.4',
  upsDiagSubSysExternalSwitchGearHardwareRev => '1.3.6.1.4.1.318.1.1.1.13.4.8.1.5',
  upsDiagSubSysExternalSwitchGearSerialNum => '1.3.6.1.4.1.318.1.1.1.13.4.8.1.6',
  upsDiagSubSysExternalSwitchGearManufactureDate => '1.3.6.1.4.1.318.1.1.1.13.4.8.1.7',
  upsDiagSubSysDisplayInterfaceCardTableSize => '1.3.6.1.4.1.318.1.1.1.13.4.9',
  upsDiagSubSysDisplayInterfaceCardTable => '1.3.6.1.4.1.318.1.1.1.13.4.10',
  upsDiagSubSysDisplayInterfaceCardEntry => '1.3.6.1.4.1.318.1.1.1.13.4.10.1',
  upsDiagSubSysDisplayInterfaceCardFrameIndex => '1.3.6.1.4.1.318.1.1.1.13.4.10.1.1',
  upsDiagSubSysDisplayInterfaceCardIndex => '1.3.6.1.4.1.318.1.1.1.13.4.10.1.2',
  upsDiagSubSysDisplayInterfaceCardStatus => '1.3.6.1.4.1.318.1.1.1.13.4.10.1.3',
  upsDiagSubSysDisplayInterfaceCardStatusDefinition => 'PowerNet-MIB::upsDiagSubSysDisplayInterfaceCardStatus',
  upsDiagSubSysDCCircuitBreakerTableSize => '1.3.6.1.4.1.318.1.1.1.13.4.11',
  upsDiagSubSysDCCircuitBreakerTable => '1.3.6.1.4.1.318.1.1.1.13.4.12',
  upsDiagSubSysDCCircuitBreakerEntry => '1.3.6.1.4.1.318.1.1.1.13.4.12.1',
  upsDiagSubSysDCCircuitBreakerFrameIndex => '1.3.6.1.4.1.318.1.1.1.13.4.12.1.1',
  upsDiagSubSysDCCircuitBreakerIndex => '1.3.6.1.4.1.318.1.1.1.13.4.12.1.2',
  upsDiagSubSysDCCircuitBreakerStatus => '1.3.6.1.4.1.318.1.1.1.13.4.12.1.3',
  upsDiagSubSysDCCircuitBreakerStatusDefinition => 'PowerNet-MIB::upsDiagSubSysDCCircuitBreakerStatus',
  upsDiagSubSysSystemPowerSupplyTableSize => '1.3.6.1.4.1.318.1.1.1.13.4.13',
  upsDiagSubSysSystemPowerSupplyTable => '1.3.6.1.4.1.318.1.1.1.13.4.14',
  upsDiagSubSysSystemPowerSupplyEntry => '1.3.6.1.4.1.318.1.1.1.13.4.14.1',
  upsDiagSubSysSystemPowerSupplyFrameIndex => '1.3.6.1.4.1.318.1.1.1.13.4.14.1.1',
  upsDiagSubSysSystemPowerSupplyIndex => '1.3.6.1.4.1.318.1.1.1.13.4.14.1.2',
  upsDiagSubSysSystemPowerSupplyStatus => '1.3.6.1.4.1.318.1.1.1.13.4.14.1.3',
  upsDiagSubSysSystemPowerSupplyStatusDefinition => 'PowerNet-MIB::upsDiagSubSysSystemPowerSupplyStatus',
  upsDiagSubSysSystemPowerSupplyFirmwareRev => '1.3.6.1.4.1.318.1.1.1.13.4.14.1.4',
  upsDiagSubSysSystemPowerSupplyHardwareRev => '1.3.6.1.4.1.318.1.1.1.13.4.14.1.5',
  upsDiagSubSysSystemPowerSupplySerialNum => '1.3.6.1.4.1.318.1.1.1.13.4.14.1.6',
  upsDiagSubSysSystemPowerSupplyManufactureDate => '1.3.6.1.4.1.318.1.1.1.13.4.14.1.7',
  upsDiagSubSysXRCommunicationCardTableSize => '1.3.6.1.4.1.318.1.1.1.13.4.15',
  upsDiagSubSysXRCommunicationCardTable => '1.3.6.1.4.1.318.1.1.1.13.4.16',
  upsDiagSubSysXRCommunicationCardEntry => '1.3.6.1.4.1.318.1.1.1.13.4.16.1',
  upsDiagSubSysXRCommunicationCardFrameIndex => '1.3.6.1.4.1.318.1.1.1.13.4.16.1.1',
  upsDiagSubSysXRCommunicationCardIndex => '1.3.6.1.4.1.318.1.1.1.13.4.16.1.2',
  upsDiagSubSysXRCommunicationCardStatus => '1.3.6.1.4.1.318.1.1.1.13.4.16.1.3',
  upsDiagSubSysXRCommunicationCardStatusDefinition => 'PowerNet-MIB::upsDiagSubSysXRCommunicationCardStatus',
  upsDiagSubSysXRCommunicationCardFirmwareRev => '1.3.6.1.4.1.318.1.1.1.13.4.16.1.4',
  upsDiagSubSysXRCommunicationCardSerialNum => '1.3.6.1.4.1.318.1.1.1.13.4.16.1.5',
  upsDiagSubSysExternalPowerFrameBoardTableSize => '1.3.6.1.4.1.318.1.1.1.13.4.17',
  upsDiagSubSysExternalPowerFrameBoardTable => '1.3.6.1.4.1.318.1.1.1.13.4.18',
  upsDiagSubSysExternalPowerFrameBoardEntry => '1.3.6.1.4.1.318.1.1.1.13.4.18.1',
  upsDiagSubSysExternalPowerFrameBoardFrameIndex => '1.3.6.1.4.1.318.1.1.1.13.4.18.1.1',
  upsDiagSubSysExternalPowerFrameBoardIndex => '1.3.6.1.4.1.318.1.1.1.13.4.18.1.2',
  upsDiagSubSysExternalPowerFrameBoardStatus => '1.3.6.1.4.1.318.1.1.1.13.4.18.1.3',
  upsDiagSubSysExternalPowerFrameBoardStatusDefinition => 'PowerNet-MIB::upsDiagSubSysExternalPowerFrameBoardStatus',
  upsDiagSubSysChargerTableSize => '1.3.6.1.4.1.318.1.1.1.13.4.19',
  upsDiagSubSysChargerTable => '1.3.6.1.4.1.318.1.1.1.13.4.20',
  upsDiagSubSysChargerEntry => '1.3.6.1.4.1.318.1.1.1.13.4.20.1',
  upsDiagSubSysChargerFrameIndex => '1.3.6.1.4.1.318.1.1.1.13.4.20.1.1',
  upsDiagSubSysChargerIndex => '1.3.6.1.4.1.318.1.1.1.13.4.20.1.2',
  upsDiagSubSysChargerStatus => '1.3.6.1.4.1.318.1.1.1.13.4.20.1.3',
  upsDiagSubSysChargerStatusDefinition => 'PowerNet-MIB::upsDiagSubSysChargerStatus',
  upsDiagSubSysInverterTableSize => '1.3.6.1.4.1.318.1.1.1.13.4.21',
  upsDiagSubSysInverterTable => '1.3.6.1.4.1.318.1.1.1.13.4.22',
  upsDiagSubSysInverterEntry => '1.3.6.1.4.1.318.1.1.1.13.4.22.1',
  upsDiagSubSysInverterFrameIndex => '1.3.6.1.4.1.318.1.1.1.13.4.22.1.1',
  upsDiagSubSysInverterIndex => '1.3.6.1.4.1.318.1.1.1.13.4.22.1.2',
  upsDiagSubSysInverterStatus => '1.3.6.1.4.1.318.1.1.1.13.4.22.1.3',
  upsDiagSubSysInverterStatusDefinition => 'PowerNet-MIB::upsDiagSubSysInverterStatus',
  upsDiagSubSysInverterFirmwareRev => '1.3.6.1.4.1.318.1.1.1.13.4.22.1.4',
  upsDiagSubSysInverterHardwareRev => '1.3.6.1.4.1.318.1.1.1.13.4.22.1.5',
  upsDiagSubSysInverterSerialNum => '1.3.6.1.4.1.318.1.1.1.13.4.22.1.6',
  upsDiagSubSysInverterManufactureDate => '1.3.6.1.4.1.318.1.1.1.13.4.22.1.7',
  upsDiagSubSysPowerFactorCorrectionTableSize => '1.3.6.1.4.1.318.1.1.1.13.4.23',
  upsDiagSubSysPowerFactorCorrectionTable => '1.3.6.1.4.1.318.1.1.1.13.4.24',
  upsDiagSubSysPowerFactorCorrectionEntry => '1.3.6.1.4.1.318.1.1.1.13.4.24.1',
  upsDiagSubSysPowerFactorCorrectionFrameIndex => '1.3.6.1.4.1.318.1.1.1.13.4.24.1.1',
  upsDiagSubSysPowerFactorCorrectionIndex => '1.3.6.1.4.1.318.1.1.1.13.4.24.1.2',
  upsDiagSubSysPowerFactorCorrectionStatus => '1.3.6.1.4.1.318.1.1.1.13.4.24.1.3',
  upsDiagSubSysPowerFactorCorrectionStatusDefinition => 'PowerNet-MIB::upsDiagSubSysPowerFactorCorrectionStatus',
  upsDiagSubSysPowerFactorCorrectionFirmwareRev => '1.3.6.1.4.1.318.1.1.1.13.4.24.1.4',
  upsDiagSubSysPowerFactorCorrectionHardwareRev => '1.3.6.1.4.1.318.1.1.1.13.4.24.1.5',
  upsDiagSubSysPowerFactorCorrectionSerialNum => '1.3.6.1.4.1.318.1.1.1.13.4.24.1.6',
  upsDiagSubSysPowerFactorCorrectionManufactureDate => '1.3.6.1.4.1.318.1.1.1.13.4.24.1.7',
  upsDiagSubSysNetworkComCardTableSize => '1.3.6.1.4.1.318.1.1.1.13.4.25',
  upsDiagSubSysNetworkComCardTable => '1.3.6.1.4.1.318.1.1.1.13.4.26',
  upsDiagSubSysNetworkComCardEntry => '1.3.6.1.4.1.318.1.1.1.13.4.26.1',
  upsDiagSubSysNetworkComCardIndex => '1.3.6.1.4.1.318.1.1.1.13.4.26.1.1',
  upsDiagSubSysNetworkComCardModelNumber => '1.3.6.1.4.1.318.1.1.1.13.4.26.1.2',
  upsDiagSubSysNetworkComCardSerialNumber => '1.3.6.1.4.1.318.1.1.1.13.4.26.1.3',
  upsDiagSubSysNetworkComCardDateOfManufacture => '1.3.6.1.4.1.318.1.1.1.13.4.26.1.4',
  upsDiagSubSysNetworkComCardHardwareRev => '1.3.6.1.4.1.318.1.1.1.13.4.26.1.5',
  upsDiagSubSysNetworkComCardFirmwareAppRev => '1.3.6.1.4.1.318.1.1.1.13.4.26.1.6',
  upsDiagSubSysNetworkComCardFirmwareAppOSRev => '1.3.6.1.4.1.318.1.1.1.13.4.26.1.7',
  upsDiagnosticExternalDevices => '1.3.6.1.4.1.318.1.1.1.13.5',
  upsDiagSwitchGear => '1.3.6.1.4.1.318.1.1.1.13.5.1',
  upsDiagSwitchGearStatus => '1.3.6.1.4.1.318.1.1.1.13.5.1.1',
  upsDiagSwitchGearStatusDefinition => 'PowerNet-MIB::upsDiagSwitchGearStatus',
  upsDiagSwitchGearInputSwitchStatus => '1.3.6.1.4.1.318.1.1.1.13.5.1.2',
  upsDiagSwitchGearInputSwitchStatusDefinition => 'PowerNet-MIB::upsDiagSwitchGearInputSwitchStatus',
  upsDiagSwitchGearOutputSwitchStatus => '1.3.6.1.4.1.318.1.1.1.13.5.1.3',
  upsDiagSwitchGearOutputSwitchStatusDefinition => 'PowerNet-MIB::upsDiagSwitchGearOutputSwitchStatus',
  upsDiagSwitchGearBypassSwitchStatus => '1.3.6.1.4.1.318.1.1.1.13.5.1.4',
  upsDiagSwitchGearBypassSwitchStatusDefinition => 'PowerNet-MIB::upsDiagSwitchGearBypassSwitchStatus',
  upsDiagSwitchGearBypassInputSwitchStatus => '1.3.6.1.4.1.318.1.1.1.13.5.1.5',
  upsDiagSwitchGearBypassInputSwitchStatusDefinition => 'PowerNet-MIB::upsDiagSwitchGearBypassInputSwitchStatus',
  upsDiagSwitchGearBreakerTableSize => '1.3.6.1.4.1.318.1.1.1.13.5.1.6',
  upsDiagSwitchGearBreakerTable => '1.3.6.1.4.1.318.1.1.1.13.5.1.7',
  upsDiagSwitchGearBreakerEntry => '1.3.6.1.4.1.318.1.1.1.13.5.1.7.1',
  switchgearBreakerIndex => '1.3.6.1.4.1.318.1.1.1.13.5.1.7.1.1',
  switchgearBreakerPresent => '1.3.6.1.4.1.318.1.1.1.13.5.1.7.1.2',
  switchgearBreakerPresentDefinition => 'PowerNet-MIB::switchgearBreakerPresent',
  switchgearBreakerName => '1.3.6.1.4.1.318.1.1.1.13.5.1.7.1.3',
  switchgearBreakerType => '1.3.6.1.4.1.318.1.1.1.13.5.1.7.1.4',
  switchgearBreakerTypeDefinition => 'PowerNet-MIB::switchgearBreakerType',
  switchgearBreakerStatus => '1.3.6.1.4.1.318.1.1.1.13.5.1.7.1.5',
  switchgearBreakerStatusDefinition => 'PowerNet-MIB::switchgearBreakerStatus',
  upsDiagSubFeedBreakerTableSize => '1.3.6.1.4.1.318.1.1.1.13.5.1.8',
  upsDiagSubFeedBreakerTable => '1.3.6.1.4.1.318.1.1.1.13.5.1.9',
  upsDiagSubFeedBreakerEntry => '1.3.6.1.4.1.318.1.1.1.13.5.1.9.1',
  subfeedBreakerIndex => '1.3.6.1.4.1.318.1.1.1.13.5.1.9.1.1',
  subfeedBreakerPresent => '1.3.6.1.4.1.318.1.1.1.13.5.1.9.1.2',
  subfeedBreakerPresentDefinition => 'PowerNet-MIB::subfeedBreakerPresent',
  subfeedBreakerRating => '1.3.6.1.4.1.318.1.1.1.13.5.1.9.1.3',
  subfeedBreakerUpperAcceptPowerWarning => '1.3.6.1.4.1.318.1.1.1.13.5.1.9.1.4',
  subfeedBreakerUpperAcceptPowerCritical => '1.3.6.1.4.1.318.1.1.1.13.5.1.9.1.5',
  subfeedBreakerStatus => '1.3.6.1.4.1.318.1.1.1.13.5.1.9.1.6',
  subfeedBreakerStatusDefinition => 'PowerNet-MIB::subfeedBreakerStatus',
  subfeedBreakerName => '1.3.6.1.4.1.318.1.1.1.13.5.1.9.1.7',
  upsDiagSwitchGearInstallationLoadPct => '1.3.6.1.4.1.318.1.1.1.13.5.1.10',
  upsDiagSubFeedPhaseTable => '1.3.6.1.4.1.318.1.1.1.13.5.1.11',
  upsDiagSubFeedPhaseEntry => '1.3.6.1.4.1.318.1.1.1.13.5.1.11.1',
  upsDiagSubFeedBreakerIndex => '1.3.6.1.4.1.318.1.1.1.13.5.1.11.1.1',
  upsDiagSubFeedPhaseIndex => '1.3.6.1.4.1.318.1.1.1.13.5.1.11.1.2',
  upsDiagSubFeedPhaseCurrent => '1.3.6.1.4.1.318.1.1.1.13.5.1.11.1.3',
  upsDiagSubFeedPhaseCurrentAlternate => '1.3.6.1.4.1.318.1.1.1.13.5.1.11.1.4',
  upsDiagSwitchgearSerialNumber => '1.3.6.1.4.1.318.1.1.1.13.5.1.12',
  upsDiagMCCBBox => '1.3.6.1.4.1.318.1.1.1.13.5.2',
  upsDiagMCCBBoxStatus => '1.3.6.1.4.1.318.1.1.1.13.5.2.1',
  upsDiagMCCBBoxStatusDefinition => 'PowerNet-MIB::upsDiagMCCBBoxStatus',
  upsDiagTransformer => '1.3.6.1.4.1.318.1.1.1.13.5.3',
  upsDiagTransformerStatus => '1.3.6.1.4.1.318.1.1.1.13.5.3.1',
  upsDiagTransformerStatusDefinition => 'PowerNet-MIB::upsDiagTransformerStatus',
  upsDiagFlyWheel => '1.3.6.1.4.1.318.1.1.1.13.5.4',
  upsDiagFlyWheelStatus => '1.3.6.1.4.1.318.1.1.1.13.5.4.1',
  upsDiagFlyWheelStatusDefinition => 'PowerNet-MIB::upsDiagFlyWheelStatus',
  upsDiagnosticComBus => '1.3.6.1.4.1.318.1.1.1.13.6',
  upsDiagComBusInternalMIMStatus => '1.3.6.1.4.1.318.1.1.1.13.6.1',
  upsDiagComBusInternalMIMStatusDefinition => 'PowerNet-MIB::upsDiagComBusInternalMIMStatus',
  upsDiagComBusInternalRIMStatus => '1.3.6.1.4.1.318.1.1.1.13.6.2',
  upsDiagComBusInternalRIMStatusDefinition => 'PowerNet-MIB::upsDiagComBusInternalRIMStatus',
  upsDiagComBusMIMtoRIMStatus => '1.3.6.1.4.1.318.1.1.1.13.6.3',
  upsDiagComBusMIMtoRIMStatusDefinition => 'PowerNet-MIB::upsDiagComBusMIMtoRIMStatus',
  upsDiagComBusExternalMIMStatus => '1.3.6.1.4.1.318.1.1.1.13.6.4',
  upsDiagComBusExternalMIMStatusDefinition => 'PowerNet-MIB::upsDiagComBusExternalMIMStatus',
  upsDiagComBusExternalRIMStatus => '1.3.6.1.4.1.318.1.1.1.13.6.5',
  upsDiagComBusExternalRIMStatusDefinition => 'PowerNet-MIB::upsDiagComBusExternalRIMStatus',
  upsParallelSystem => '1.3.6.1.4.1.318.1.1.1.14',
  upsParallelSysLocalAddress => '1.3.6.1.4.1.318.1.1.1.14.1',
  upsParallelSysRemoteAddress => '1.3.6.1.4.1.318.1.1.1.14.2',
  upsParallelSysRedundancy => '1.3.6.1.4.1.318.1.1.1.14.3',
  upsParallelSysRedundancyDefinition => 'PowerNet-MIB::upsParallelSysRedundancy',
  upsParallelInputMaximumCurrent => '1.3.6.1.4.1.318.1.1.1.14.4',
  upsParallelTotalOutputPower => '1.3.6.1.4.1.318.1.1.1.14.5',
  upsParallelTotalOutputApparentPower => '1.3.6.1.4.1.318.1.1.1.14.6',
  upsParallelInputPhaseTable => '1.3.6.1.4.1.318.1.1.1.14.7',
  upsParallelInputPhaseEntry => '1.3.6.1.4.1.318.1.1.1.14.7.1',
  upsParallelInputPhaseTableIndex => '1.3.6.1.4.1.318.1.1.1.14.7.1.1',
  upsParallelInputPhaseIndex => '1.3.6.1.4.1.318.1.1.1.14.7.1.2',
  upsParallelInputCurrent => '1.3.6.1.4.1.318.1.1.1.14.7.1.3',
  upsParallelInputActivePower => '1.3.6.1.4.1.318.1.1.1.14.7.1.4',
  upsParallelInputApparentPower => '1.3.6.1.4.1.318.1.1.1.14.7.1.5',
  upsParallelInputVoltage => '1.3.6.1.4.1.318.1.1.1.14.7.1.6',
  upsParallelInputMaxVoltage => '1.3.6.1.4.1.318.1.1.1.14.7.1.7',
  upsParallelInputMaxCurrent => '1.3.6.1.4.1.318.1.1.1.14.7.1.8',
  upsParallelInputTotalActivePower => '1.3.6.1.4.1.318.1.1.1.14.7.1.9',
  upsParallelInputTotalApparentPower => '1.3.6.1.4.1.318.1.1.1.14.7.1.10',
  upsParallelOutputPhaseTable => '1.3.6.1.4.1.318.1.1.1.14.8',
  upsParallelOutputPhaseEntry => '1.3.6.1.4.1.318.1.1.1.14.8.1',
  upsParallelOutputPhaseTableIndex => '1.3.6.1.4.1.318.1.1.1.14.8.1.1',
  upsParallelOutputPhaseIndex => '1.3.6.1.4.1.318.1.1.1.14.8.1.2',
  upsParallelOutputCurrent => '1.3.6.1.4.1.318.1.1.1.14.8.1.3',
  upsParallelOutputLoad => '1.3.6.1.4.1.318.1.1.1.14.8.1.4',
  upsParallelOutputPercentLoad => '1.3.6.1.4.1.318.1.1.1.14.8.1.5',
  upsParallelOutputPower => '1.3.6.1.4.1.318.1.1.1.14.8.1.6',
  upsParallelOutputApparentPowerTable => '1.3.6.1.4.1.318.1.1.1.14.9',
  upsParallelOutputApparentPowerEntry => '1.3.6.1.4.1.318.1.1.1.14.9.1',
  upsParallelOutputApparentPowerTableIndex => '1.3.6.1.4.1.318.1.1.1.14.9.1.1',
  upsParallelOutputApparentPower => '1.3.6.1.4.1.318.1.1.1.14.9.1.2',
  upsParallelDiagSubSysBreakerTable => '1.3.6.1.4.1.318.1.1.1.14.10',
  upsParallelDiagSubSysBreakerEntry => '1.3.6.1.4.1.318.1.1.1.14.10.1',
  upsParallelDiagSubSysBreakerFrameIndex => '1.3.6.1.4.1.318.1.1.1.14.10.1.1',
  upsParallelDiagSubSysBreakerIndex => '1.3.6.1.4.1.318.1.1.1.14.10.1.2',
  upsParallelDiagSubSysBreakerStatus => '1.3.6.1.4.1.318.1.1.1.14.10.1.3',
  upsParallelDiagSubSysBreakerStatusDefinition => 'PowerNet-MIB::upsParallelDiagSubSysBreakerStatus',
  upsParallelDiagSubSysBreakerName => '1.3.6.1.4.1.318.1.1.1.14.10.1.4',
  upsParallelOutputTotalPercentLoad => '1.3.6.1.4.1.318.1.1.1.14.11',
  upsParallelOutputActivePowerTable => '1.3.6.1.4.1.318.1.1.1.14.12',
  upsParallelOutputActivePowerEntry => '1.3.6.1.4.1.318.1.1.1.14.12.1',
  upsParallelOutputActivePowerTableIndex => '1.3.6.1.4.1.318.1.1.1.14.12.1.1',
  upsParallelOutputActivePower => '1.3.6.1.4.1.318.1.1.1.14.12.1.2',
  upsParallelSysSwitchGearInstallationLoadPct => '1.3.6.1.4.1.318.1.1.1.14.13',
  upsParallelSysRedundancyStatus => '1.3.6.1.4.1.318.1.1.1.14.14',
  upsParallelSysRedundancyStatusDefinition => 'PowerNet-MIB::upsParallelSysRedundancyStatus',
  upsParallelSysName => '1.3.6.1.4.1.318.1.1.1.14.15',
  upsPhysicalLayout => '1.3.6.1.4.1.318.1.1.1.15',
  upsIOFrameLayoutPositionID => '1.3.6.1.4.1.318.1.1.1.15.1',
  upsBottomFeedFrameLayoutPositionID => '1.3.6.1.4.1.318.1.1.1.15.2',
  upsSwitchGearLayoutPositionID => '1.3.6.1.4.1.318.1.1.1.15.3',
  upsBatteryFrameLayoutTableSize => '1.3.6.1.4.1.318.1.1.1.15.4',
  upsBatteryFrameLayoutTable => '1.3.6.1.4.1.318.1.1.1.15.5',
  upsBatteryFrameLayoutEntry => '1.3.6.1.4.1.318.1.1.1.15.5.1',
  batteryFrameIndex => '1.3.6.1.4.1.318.1.1.1.15.5.1.1',
  batteryFramePositionID => '1.3.6.1.4.1.318.1.1.1.15.5.1.2',
  upsSideCarFrameLayoutTableSize => '1.3.6.1.4.1.318.1.1.1.15.6',
  upsSideCarFrameLayoutTable => '1.3.6.1.4.1.318.1.1.1.15.7',
  upsSideCarFrameLayoutEntry => '1.3.6.1.4.1.318.1.1.1.15.7.1',
  sideCarFrameIndex => '1.3.6.1.4.1.318.1.1.1.15.7.1.1',
  sideCarFramePositionID => '1.3.6.1.4.1.318.1.1.1.15.7.1.2',
  upsPowerFrameLayoutTableSize => '1.3.6.1.4.1.318.1.1.1.15.8',
  upsPowerFrameLayoutTable => '1.3.6.1.4.1.318.1.1.1.15.9',
  upsPowerFrameLayoutEntry => '1.3.6.1.4.1.318.1.1.1.15.9.1',
  powerFrameIndex => '1.3.6.1.4.1.318.1.1.1.15.9.1.1',
  powerFramePositionID => '1.3.6.1.4.1.318.1.1.1.15.9.1.2',
  upsIntegratedATS => '1.3.6.1.4.1.318.1.1.1.16',
  upsIntegratedATSSelectedSource => '1.3.6.1.4.1.318.1.1.1.16.1',
  upsIntegratedATSSelectedSourceDefinition => 'PowerNet-MIB::upsIntegratedATSSelectedSource',
  upsIntegratedATSPreferredSource => '1.3.6.1.4.1.318.1.1.1.16.2',
  upsIntegratedATSPreferredSourceDefinition => 'PowerNet-MIB::upsIntegratedATSPreferredSource',
  upsIntegratedATSUpsReturnStaggering => '1.3.6.1.4.1.318.1.1.1.16.3',
  upsIntegratedATSSourceTableSize => '1.3.6.1.4.1.318.1.1.1.16.4',
  upsIntegratedATSSourceTable => '1.3.6.1.4.1.318.1.1.1.16.5',
  upsIntegratedATSSourceEntry => '1.3.6.1.4.1.318.1.1.1.16.5.1',
  upsIntegratedATSSourceIndex => '1.3.6.1.4.1.318.1.1.1.16.5.1.1',
  upsIntegratedATSSourceName => '1.3.6.1.4.1.318.1.1.1.16.5.1.2',
  upsIntegratedATSSourceStatus => '1.3.6.1.4.1.318.1.1.1.16.5.1.3',
  upsIntegratedATSSourceStatusDefinition => 'PowerNet-MIB::upsIntegratedATSSourceStatus',
  upsIntegratedATSLineFailDelay => '1.3.6.1.4.1.318.1.1.1.16.5.1.4',
  upsIntegratedATSLineStabilityDelay => '1.3.6.1.4.1.318.1.1.1.16.5.1.5',
  upsDCOutput => '1.3.6.1.4.1.318.1.1.1.17',
  upsDCOutputStatus => '1.3.6.1.4.1.318.1.1.1.17.1',
  upsDCOutputStatusTableSize => '1.3.6.1.4.1.318.1.1.1.17.1.1',
  upsDCOutputStatusTable => '1.3.6.1.4.1.318.1.1.1.17.1.2',
  upsDCOutputStatusEntry => '1.3.6.1.4.1.318.1.1.1.17.1.2.1',
  upsDCOutputStatusTableIndex => '1.3.6.1.4.1.318.1.1.1.17.1.2.1.1',
  upsDCOutputStatusVoltageNominal => '1.3.6.1.4.1.318.1.1.1.17.1.2.1.2',
  upsDCOutputStatusCurrentRating => '1.3.6.1.4.1.318.1.1.1.17.1.2.1.3',
  upsDCOutputStatusVoltage => '1.3.6.1.4.1.318.1.1.1.17.1.2.1.4',
  upsDCOutputStatusCurrent => '1.3.6.1.4.1.318.1.1.1.17.1.2.1.5',
  upsDCOutputStatusAbnormalConditions => '1.3.6.1.4.1.318.1.1.1.17.1.2.1.6',
  measureUps => '1.3.6.1.4.1.318.1.1.2',
  mUpsEnviron => '1.3.6.1.4.1.318.1.1.2.1',
  mUpsEnvironAmbientTemperature => '1.3.6.1.4.1.318.1.1.2.1.1',
  mUpsEnvironRelativeHumidity => '1.3.6.1.4.1.318.1.1.2.1.2',
  mUpsEnvironAmbientTemperature2 => '1.3.6.1.4.1.318.1.1.2.1.3',
  mUpsEnvironRelativeHumidity2 => '1.3.6.1.4.1.318.1.1.2.1.4',
  mUpsContact => '1.3.6.1.4.1.318.1.1.2.2',
  mUpsContactNumContacts => '1.3.6.1.4.1.318.1.1.2.2.1',
  mUpsContactTable => '1.3.6.1.4.1.318.1.1.2.2.2',
  mUpsContactEntry => '1.3.6.1.4.1.318.1.1.2.2.2.1',
  contactNumber => '1.3.6.1.4.1.318.1.1.2.2.2.1.1',
  normalState => '1.3.6.1.4.1.318.1.1.2.2.2.1.2',
  normalStateDefinition => 'PowerNet-MIB::normalState',
  description => '1.3.6.1.4.1.318.1.1.2.2.2.1.3',
  monitoringStatus => '1.3.6.1.4.1.318.1.1.2.2.2.1.4',
  monitoringStatusDefinition => 'PowerNet-MIB::monitoringStatus',
  currentStatus => '1.3.6.1.4.1.318.1.1.2.2.2.1.5',
  currentStatusDefinition => 'PowerNet-MIB::currentStatus',
  miniSNMPadapter => '1.3.6.1.4.1.318.1.1.3',
  serialPort => '1.3.6.1.4.1.318.1.1.3.1',
  serialPort1 => '1.3.6.1.4.1.318.1.1.3.1.1',
  serialPort2 => '1.3.6.1.4.1.318.1.1.3.1.2',
  serialPort2Config => '1.3.6.1.4.1.318.1.1.3.1.2.1',
  serialPort2Mode => '1.3.6.1.4.1.318.1.1.3.1.2.1.1',
  serialPort2ModeDefinition => 'PowerNet-MIB::serialPort2Mode',
  serialPort2Control => '1.3.6.1.4.1.318.1.1.3.1.2.2',
  setPulseOnTXD => '1.3.6.1.4.1.318.1.1.3.1.2.2.1',
  setPulseOnTXDDefinition => 'PowerNet-MIB::setPulseOnTXD',
  masterswitch => '1.3.6.1.4.1.318.1.1.4',
  sPDUIdent => '1.3.6.1.4.1.318.1.1.4.1',
  sPDUIdentHardwareRev => '1.3.6.1.4.1.318.1.1.4.1.1',
  sPDUIdentFirmwareRev => '1.3.6.1.4.1.318.1.1.4.1.2',
  sPDUIdentDateOfManufacture => '1.3.6.1.4.1.318.1.1.4.1.3',
  sPDUIdentModelNumber => '1.3.6.1.4.1.318.1.1.4.1.4',
  sPDUIdentSerialNumber => '1.3.6.1.4.1.318.1.1.4.1.5',
  sPDUMasterControl => '1.3.6.1.4.1.318.1.1.4.2',
  sPDUMasterControlSwitch => '1.3.6.1.4.1.318.1.1.4.2.1',
  sPDUMasterControlSwitchDefinition => 'PowerNet-MIB::sPDUMasterControlSwitch',
  sPDUMasterState => '1.3.6.1.4.1.318.1.1.4.2.2',
  sPDUMasterPending => '1.3.6.1.4.1.318.1.1.4.2.3',
  sPDUMasterConfig => '1.3.6.1.4.1.318.1.1.4.3',
  sPDUMasterConfigPowerOn => '1.3.6.1.4.1.318.1.1.4.3.1',
  sPDUMasterConfigReboot => '1.3.6.1.4.1.318.1.1.4.3.2',
  sPDUMasterConfigPDUName => '1.3.6.1.4.1.318.1.1.4.3.3',
  sPDUOutletControl => '1.3.6.1.4.1.318.1.1.4.4',
  sPDUOutletControlTableSize => '1.3.6.1.4.1.318.1.1.4.4.1',
  sPDUOutletControlTable => '1.3.6.1.4.1.318.1.1.4.4.2',
  sPDUOutletControlEntry => '1.3.6.1.4.1.318.1.1.4.4.2.1',
  sPDUOutletControlIndex => '1.3.6.1.4.1.318.1.1.4.4.2.1.1',
  sPDUOutletPending => '1.3.6.1.4.1.318.1.1.4.4.2.1.2',
  sPDUOutletPendingDefinition => 'PowerNet-MIB::sPDUOutletPending',
  sPDUOutletCtl => '1.3.6.1.4.1.318.1.1.4.4.2.1.3',
  sPDUOutletCtlDefinition => 'PowerNet-MIB::sPDUOutletCtl',
  sPDUOutletCtlName => '1.3.6.1.4.1.318.1.1.4.4.2.1.4',
  sPDUOutletConfig => '1.3.6.1.4.1.318.1.1.4.5',
  sPDUOutletConfigTableSize => '1.3.6.1.4.1.318.1.1.4.5.1',
  sPDUOutletConfigTable => '1.3.6.1.4.1.318.1.1.4.5.2',
  sPDUOutletConfigEntry => '1.3.6.1.4.1.318.1.1.4.5.2.1',
  sPDUOutletConfigIndex => '1.3.6.1.4.1.318.1.1.4.5.2.1.1',
  sPDUOutletPowerOnTime => '1.3.6.1.4.1.318.1.1.4.5.2.1.2',
  sPDUOutletName => '1.3.6.1.4.1.318.1.1.4.5.2.1.3',
  sPDUOutletPowerOffTime => '1.3.6.1.4.1.318.1.1.4.5.2.1.4',
  sPDUOutletRebootDuration => '1.3.6.1.4.1.318.1.1.4.5.2.1.5',
  masterswitchVM => '1.3.6.1.4.1.318.1.1.5',
  sPDUIdentVM => '1.3.6.1.4.1.318.1.1.5.1',
  sPDUIdentVMTableSize => '1.3.6.1.4.1.318.1.1.5.1.1',
  sPDUIdentVMTable => '1.3.6.1.4.1.318.1.1.5.1.2',
  sPDUIdentVMEntry => '1.3.6.1.4.1.318.1.1.5.1.2.1',
  sPDUIdentVMIndex => '1.3.6.1.4.1.318.1.1.5.1.2.1.1',
  sPDUIdentNameVM => '1.3.6.1.4.1.318.1.1.5.1.2.1.2',
  sPDUIdentHardwareRevVM => '1.3.6.1.4.1.318.1.1.5.1.2.1.3',
  sPDUIdentFirmwareRevVM => '1.3.6.1.4.1.318.1.1.5.1.2.1.4',
  sPDUIdentDateOfManufactureVM => '1.3.6.1.4.1.318.1.1.5.1.2.1.5',
  sPDUIdentModelNumberVM => '1.3.6.1.4.1.318.1.1.5.1.2.1.6',
  sPDUIdentSerialNumberVM => '1.3.6.1.4.1.318.1.1.5.1.2.1.7',
  sPDUMasterControlVM => '1.3.6.1.4.1.318.1.1.5.2',
  sPDUMasterControlVMTableSize => '1.3.6.1.4.1.318.1.1.5.2.1',
  sPDUMasterControlVMTable => '1.3.6.1.4.1.318.1.1.5.2.2',
  sPDUMasterControlVMEntry => '1.3.6.1.4.1.318.1.1.5.2.2.1',
  sPDUMasterControlVMIndex => '1.3.6.1.4.1.318.1.1.5.2.2.1.1',
  sPDUMasterControlVMName => '1.3.6.1.4.1.318.1.1.5.2.2.1.2',
  sPDUMasterControlVMCommand => '1.3.6.1.4.1.318.1.1.5.2.2.1.3',
  sPDUMasterControlVMCommandDefinition => 'PowerNet-MIB::sPDUMasterControlVMCommand',
  sPDUMasterConfigVM => '1.3.6.1.4.1.318.1.1.5.3',
  sPDUMasterConfigVMTableSize => '1.3.6.1.4.1.318.1.1.5.3.1',
  sPDUMasterConfigVMTable => '1.3.6.1.4.1.318.1.1.5.3.2',
  sPDUMasterConfigVMEntry => '1.3.6.1.4.1.318.1.1.5.3.2.1',
  sPDUMasterConfigVMIndex => '1.3.6.1.4.1.318.1.1.5.3.2.1.1',
  sPDUMasterConfigVMName => '1.3.6.1.4.1.318.1.1.5.3.2.1.2',
  sPDUMasterConfigVMColdstartDelay => '1.3.6.1.4.1.318.1.1.5.3.2.1.3',
  sPDUMasterConfigVMAudioAlarmActivated => '1.3.6.1.4.1.318.1.1.5.3.2.1.4',
  sPDUMasterConfigVMAudioAlarmActivatedDefinition => 'PowerNet-MIB::sPDUMasterConfigVMAudioAlarmActivated',
  sPDUMasterConfigVMHighLoadWarningThreshold => '1.3.6.1.4.1.318.1.1.5.3.2.1.5',
  sPDUMasterConfigVMLowLoadWarningThreshold => '1.3.6.1.4.1.318.1.1.5.3.2.1.6',
  sPDUMasterConfigVMOverloadRestriction => '1.3.6.1.4.1.318.1.1.5.3.2.1.7',
  sPDUMasterConfigVMOverloadRestrictionDefinition => 'PowerNet-MIB::sPDUMasterConfigVMOverloadRestriction',
  sPDUMasterStatusVM => '1.3.6.1.4.1.318.1.1.5.4',
  sPDUMasterStatusVMTableSize => '1.3.6.1.4.1.318.1.1.5.4.1',
  sPDUMasterStatusVMTable => '1.3.6.1.4.1.318.1.1.5.4.2',
  sPDUMasterStatusVMEntry => '1.3.6.1.4.1.318.1.1.5.4.2.1',
  sPDUMasterStatusVMIndex => '1.3.6.1.4.1.318.1.1.5.4.2.1.1',
  sPDUMasterStatusVMName => '1.3.6.1.4.1.318.1.1.5.4.2.1.2',
  sPDUMasterStatusVMCommandPending => '1.3.6.1.4.1.318.1.1.5.4.2.1.3',
  sPDUMasterStatusVMCommandPendingDefinition => 'PowerNet-MIB::sPDUMasterStatusVMCommandPending',
  sPDUMasterStatusVMOverloadCondition => '1.3.6.1.4.1.318.1.1.5.4.2.1.4',
  sPDUMasterStatusVMOverloadConditionDefinition => 'PowerNet-MIB::sPDUMasterStatusVMOverloadCondition',
  sPDUMasterStatusVMLowLoadCondition => '1.3.6.1.4.1.318.1.1.5.4.2.1.5',
  sPDUMasterStatusVMLowLoadConditionDefinition => 'PowerNet-MIB::sPDUMasterStatusVMLowLoadCondition',
  sPDUMasterStatusVMCurrentLoad => '1.3.6.1.4.1.318.1.1.5.4.2.1.6',
  sPDUMasterStatusVMMaxLoad => '1.3.6.1.4.1.318.1.1.5.4.2.1.7',
  sPDUMasterStatusVMOutletCount => '1.3.6.1.4.1.318.1.1.5.4.2.1.8',
  sPDUMasterStatusVMRebootDuration => '1.3.6.1.4.1.318.1.1.5.4.2.1.9',
  sPDUOutletControlVM => '1.3.6.1.4.1.318.1.1.5.5',
  sPDUOutletControlVMTable => '1.3.6.1.4.1.318.1.1.5.5.1',
  sPDUOutletControlVMEntry => '1.3.6.1.4.1.318.1.1.5.5.1.1',
  sPDUOutletControlVMIndex => '1.3.6.1.4.1.318.1.1.5.5.1.1.1',
  sPDUOutletControlVMName => '1.3.6.1.4.1.318.1.1.5.5.1.1.2',
  sPDUOutletControlVMOutletIndex => '1.3.6.1.4.1.318.1.1.5.5.1.1.3',
  sPDUOutletControlVMOutletName => '1.3.6.1.4.1.318.1.1.5.5.1.1.4',
  sPDUOutletControlVMOutletCommand => '1.3.6.1.4.1.318.1.1.5.5.1.1.5',
  sPDUOutletControlVMOutletCommandDefinition => 'PowerNet-MIB::sPDUOutletControlVMOutletCommand',
  sPDUOutletConfigVM => '1.3.6.1.4.1.318.1.1.5.6',
  sPDUOutletConfigVMTable => '1.3.6.1.4.1.318.1.1.5.6.1',
  sPDUOutletConfigVMEntry => '1.3.6.1.4.1.318.1.1.5.6.1.1',
  sPDUOutletConfigVMIndex => '1.3.6.1.4.1.318.1.1.5.6.1.1.1',
  sPDUOutletConfigVMName => '1.3.6.1.4.1.318.1.1.5.6.1.1.2',
  sPDUOutletConfigVMOutletIndex => '1.3.6.1.4.1.318.1.1.5.6.1.1.3',
  sPDUOutletConfigVMOutletName => '1.3.6.1.4.1.318.1.1.5.6.1.1.4',
  sPDUOutletConfigVMPowerOnTime => '1.3.6.1.4.1.318.1.1.5.6.1.1.5',
  sPDUOutletConfigVMPowerOffTime => '1.3.6.1.4.1.318.1.1.5.6.1.1.6',
  sPDUOutletConfigVMRebootDuration => '1.3.6.1.4.1.318.1.1.5.6.1.1.7',
  sPDUOutletStatusVM => '1.3.6.1.4.1.318.1.1.5.7',
  sPDUOutletStatusVMTable => '1.3.6.1.4.1.318.1.1.5.7.1',
  sPDUOutletStatusVMEntry => '1.3.6.1.4.1.318.1.1.5.7.1.1',
  sPDUOutletStatusVMIndex => '1.3.6.1.4.1.318.1.1.5.7.1.1.1',
  sPDUOutletStatusVMName => '1.3.6.1.4.1.318.1.1.5.7.1.1.2',
  sPDUOutletStatusVMOutletIndex => '1.3.6.1.4.1.318.1.1.5.7.1.1.3',
  sPDUOutletStatusVMOutletName => '1.3.6.1.4.1.318.1.1.5.7.1.1.4',
  sPDUOutletStatusVMOutletState => '1.3.6.1.4.1.318.1.1.5.7.1.1.5',
  sPDUOutletStatusVMOutletStateDefinition => 'PowerNet-MIB::sPDUOutletStatusVMOutletState',
  sPDUOutletStatusVMCommandPending => '1.3.6.1.4.1.318.1.1.5.7.1.1.6',
  sPDUOutletStatusVMCommandPendingDefinition => 'PowerNet-MIB::sPDUOutletStatusVMCommandPending',
  masterswitchMSP => '1.3.6.1.4.1.318.1.1.6',
  sPDUIdentMSP => '1.3.6.1.4.1.318.1.1.6.1',
  sPDUIdentMSPTableSize => '1.3.6.1.4.1.318.1.1.6.1.1',
  sPDUIdentMSPTable => '1.3.6.1.4.1.318.1.1.6.1.2',
  sPDUIdentMSPEntry => '1.3.6.1.4.1.318.1.1.6.1.2.1',
  sPDUIdentMSPIndex => '1.3.6.1.4.1.318.1.1.6.1.2.1.1',
  sPDUIdentNameMSP => '1.3.6.1.4.1.318.1.1.6.1.2.1.2',
  sPDUIdentHardwareRevMSP => '1.3.6.1.4.1.318.1.1.6.1.2.1.3',
  sPDUIdentFirmwareRevMSP => '1.3.6.1.4.1.318.1.1.6.1.2.1.4',
  sPDUIdentDateOfManufactureMSP => '1.3.6.1.4.1.318.1.1.6.1.2.1.5',
  sPDUIdentModelNumberMSP => '1.3.6.1.4.1.318.1.1.6.1.2.1.6',
  sPDUIdentSerialNumberMSP => '1.3.6.1.4.1.318.1.1.6.1.2.1.7',
  sPDUMasterControlMSP => '1.3.6.1.4.1.318.1.1.6.2',
  sPDUMasterControlMSPTableSize => '1.3.6.1.4.1.318.1.1.6.2.1',
  sPDUMasterControlMSPTable => '1.3.6.1.4.1.318.1.1.6.2.2',
  sPDUMasterControlMSPEntry => '1.3.6.1.4.1.318.1.1.6.2.2.1',
  sPDUMasterControlMSPIndex => '1.3.6.1.4.1.318.1.1.6.2.2.1.1',
  sPDUMasterControlMSPName => '1.3.6.1.4.1.318.1.1.6.2.2.1.2',
  sPDUMasterControlMSPCommand => '1.3.6.1.4.1.318.1.1.6.2.2.1.3',
  sPDUMasterControlMSPCommandDefinition => 'PowerNet-MIB::sPDUMasterControlMSPCommand',
  sPDUMasterConfigMSP => '1.3.6.1.4.1.318.1.1.6.3',
  sPDUMasterConfigMSPTableSize => '1.3.6.1.4.1.318.1.1.6.3.1',
  sPDUMasterConfigMSPTable => '1.3.6.1.4.1.318.1.1.6.3.2',
  sPDUMasterConfigMSPEntry => '1.3.6.1.4.1.318.1.1.6.3.2.1',
  sPDUMasterConfigMSPIndex => '1.3.6.1.4.1.318.1.1.6.3.2.1.1',
  sPDUMasterConfigMSPName => '1.3.6.1.4.1.318.1.1.6.3.2.1.2',
  sPDUMasterConfigMSPPowerOnTimeDelay => '1.3.6.1.4.1.318.1.1.6.3.2.1.3',
  sPDUMasterConfigMSPManualButton => '1.3.6.1.4.1.318.1.1.6.3.2.1.4',
  sPDUMasterConfigMSPManualButtonDefinition => 'PowerNet-MIB::sPDUMasterConfigMSPManualButton',
  sPDUMasterStatusMSP => '1.3.6.1.4.1.318.1.1.6.4',
  sPDUMasterStatusMSPTableSize => '1.3.6.1.4.1.318.1.1.6.4.1',
  sPDUMasterStatusMSPTable => '1.3.6.1.4.1.318.1.1.6.4.2',
  sPDUMasterStatusMSPEntry => '1.3.6.1.4.1.318.1.1.6.4.2.1',
  sPDUMasterStatusMSPIndex => '1.3.6.1.4.1.318.1.1.6.4.2.1.1',
  sPDUMasterStatusMSPName => '1.3.6.1.4.1.318.1.1.6.4.2.1.2',
  sPDUMasterStatusMSPOutletCount => '1.3.6.1.4.1.318.1.1.6.4.2.1.3',
  sPDUOutletControlMSP => '1.3.6.1.4.1.318.1.1.6.5',
  sPDUOutletControlMSPTable => '1.3.6.1.4.1.318.1.1.6.5.1',
  sPDUOutletControlMSPEntry => '1.3.6.1.4.1.318.1.1.6.5.1.1',
  sPDUOutletControlMSPIndex => '1.3.6.1.4.1.318.1.1.6.5.1.1.1',
  sPDUOutletControlMSPName => '1.3.6.1.4.1.318.1.1.6.5.1.1.2',
  sPDUOutletControlMSPOutletIndex => '1.3.6.1.4.1.318.1.1.6.5.1.1.3',
  sPDUOutletControlMSPOutletName => '1.3.6.1.4.1.318.1.1.6.5.1.1.4',
  sPDUOutletControlMSPOutletCommand => '1.3.6.1.4.1.318.1.1.6.5.1.1.5',
  sPDUOutletControlMSPOutletCommandDefinition => 'PowerNet-MIB::sPDUOutletControlMSPOutletCommand',
  sPDUOutletConfigMSP => '1.3.6.1.4.1.318.1.1.6.6',
  sPDUOutletConfigMSPall => '1.3.6.1.4.1.318.1.1.6.6.1',
  sPDUOutletConfigMSPallTable => '1.3.6.1.4.1.318.1.1.6.6.1.1',
  sPDUOutletConfigMSPallEntry => '1.3.6.1.4.1.318.1.1.6.6.1.1.1',
  sPDUOutletConfigMSPallIndex => '1.3.6.1.4.1.318.1.1.6.6.1.1.1.1',
  sPDUOutletConfigMSPallName => '1.3.6.1.4.1.318.1.1.6.6.1.1.1.2',
  sPDUOutletConfigMSPallOutletIndex => '1.3.6.1.4.1.318.1.1.6.6.1.1.1.3',
  sPDUOutletConfigMSPallOutletName => '1.3.6.1.4.1.318.1.1.6.6.1.1.1.4',
  sPDUOutletConfigMSPallOutletCtrlMode => '1.3.6.1.4.1.318.1.1.6.6.1.1.1.5',
  sPDUOutletConfigMSPallOutletCtrlModeDefinition => 'PowerNet-MIB::sPDUOutletConfigMSPallOutletCtrlMode',
  sPDUOutletConfigMSPgs => '1.3.6.1.4.1.318.1.1.6.6.2',
  sPDUOutletConfigMSPgsTable => '1.3.6.1.4.1.318.1.1.6.6.2.1',
  sPDUOutletConfigMSPgsEntry => '1.3.6.1.4.1.318.1.1.6.6.2.1.1',
  sPDUOutletConfigMSPgsIndex => '1.3.6.1.4.1.318.1.1.6.6.2.1.1.1',
  sPDUOutletConfigMSPgsName => '1.3.6.1.4.1.318.1.1.6.6.2.1.1.2',
  sPDUOutletConfigMSPgsOutletIndex => '1.3.6.1.4.1.318.1.1.6.6.2.1.1.3',
  sPDUOutletConfigMSPgsOutletName => '1.3.6.1.4.1.318.1.1.6.6.2.1.1.4',
  sPDUOutletConfigMSPgsOutletCtrlMode => '1.3.6.1.4.1.318.1.1.6.6.2.1.1.5',
  sPDUOutletConfigMSPgsOutletCtrlModeDefinition => 'PowerNet-MIB::sPDUOutletConfigMSPgsOutletCtrlMode',
  sPDUOutletConfigMSPgsDeviceConfirm => '1.3.6.1.4.1.318.1.1.6.6.2.1.1.6',
  sPDUOutletConfigMSPgsDeviceConfirmDefinition => 'PowerNet-MIB::sPDUOutletConfigMSPgsDeviceConfirm',
  sPDUOutletConfigMSPgsLowBattWarning => '1.3.6.1.4.1.318.1.1.6.6.2.1.1.7',
  sPDUOutletConfigMSPgsLowBattMult => '1.3.6.1.4.1.318.1.1.6.6.2.1.1.8',
  sPDUOutletConfigMSPgsRestartDelay => '1.3.6.1.4.1.318.1.1.6.6.2.1.1.9',
  sPDUOutletConfigMSPgsPowerOnDelay => '1.3.6.1.4.1.318.1.1.6.6.2.1.1.10',
  sPDUOutletConfigMSPgsPowerOffDelay => '1.3.6.1.4.1.318.1.1.6.6.2.1.1.11',
  sPDUOutletConfigMSPgsBattCapThresh => '1.3.6.1.4.1.318.1.1.6.6.2.1.1.12',
  sPDUOutletConfigMSPgsRebootDuration => '1.3.6.1.4.1.318.1.1.6.6.2.1.1.13',
  sPDUOutletConfigMSPannun => '1.3.6.1.4.1.318.1.1.6.6.3',
  sPDUOutletConfigMSPannunTable => '1.3.6.1.4.1.318.1.1.6.6.3.1',
  sPDUOutletConfigMSPannunEntry => '1.3.6.1.4.1.318.1.1.6.6.3.1.1',
  sPDUOutletConfigMSPannunIndex => '1.3.6.1.4.1.318.1.1.6.6.3.1.1.1',
  sPDUOutletConfigMSPannunName => '1.3.6.1.4.1.318.1.1.6.6.3.1.1.2',
  sPDUOutletConfigMSPannunOutletIndex => '1.3.6.1.4.1.318.1.1.6.6.3.1.1.3',
  sPDUOutletConfigMSPannunOutletName => '1.3.6.1.4.1.318.1.1.6.6.3.1.1.4',
  sPDUOutletConfigMSPannunOutletCtrlMode => '1.3.6.1.4.1.318.1.1.6.6.3.1.1.5',
  sPDUOutletConfigMSPannunOutletCtrlModeDefinition => 'PowerNet-MIB::sPDUOutletConfigMSPannunOutletCtrlMode',
  sPDUOutletConfigMSPannunInitialState => '1.3.6.1.4.1.318.1.1.6.6.3.1.1.6',
  sPDUOutletConfigMSPannunInitialStateDefinition => 'PowerNet-MIB::sPDUOutletConfigMSPannunInitialState',
  sPDUOutletConfigMSPannunAlarmActionDly => '1.3.6.1.4.1.318.1.1.6.6.3.1.1.7',
  sPDUOutletConfigMSPmups => '1.3.6.1.4.1.318.1.1.6.6.4',
  sPDUOutletConfigMSPmupsTable => '1.3.6.1.4.1.318.1.1.6.6.4.1',
  sPDUOutletConfigMSPmupsEntry => '1.3.6.1.4.1.318.1.1.6.6.4.1.1',
  sPDUOutletConfigMSPmupsIndex => '1.3.6.1.4.1.318.1.1.6.6.4.1.1.1',
  sPDUOutletConfigMSPmupsName => '1.3.6.1.4.1.318.1.1.6.6.4.1.1.2',
  sPDUOutletConfigMSPmupsOutletIndex => '1.3.6.1.4.1.318.1.1.6.6.4.1.1.3',
  sPDUOutletConfigMSPmupsOutletName => '1.3.6.1.4.1.318.1.1.6.6.4.1.1.4',
  sPDUOutletConfigMSPmupsZone1 => '1.3.6.1.4.1.318.1.1.6.6.4.1.1.5',
  sPDUOutletConfigMSPmupsZone1Definition => 'PowerNet-MIB::sPDUOutletConfigMSPmupsZone1',
  sPDUOutletConfigMSPmupsZone2 => '1.3.6.1.4.1.318.1.1.6.6.4.1.1.6',
  sPDUOutletConfigMSPmupsZone2Definition => 'PowerNet-MIB::sPDUOutletConfigMSPmupsZone2',
  sPDUOutletConfigMSPmupsZone3 => '1.3.6.1.4.1.318.1.1.6.6.4.1.1.7',
  sPDUOutletConfigMSPmupsZone3Definition => 'PowerNet-MIB::sPDUOutletConfigMSPmupsZone3',
  sPDUOutletConfigMSPmupsZone4 => '1.3.6.1.4.1.318.1.1.6.6.4.1.1.8',
  sPDUOutletConfigMSPmupsZone4Definition => 'PowerNet-MIB::sPDUOutletConfigMSPmupsZone4',
  sPDUOutletConfigMSPmupsP1LowHum => '1.3.6.1.4.1.318.1.1.6.6.4.1.1.9',
  sPDUOutletConfigMSPmupsP1LowHumDefinition => 'PowerNet-MIB::sPDUOutletConfigMSPmupsP1LowHum',
  sPDUOutletConfigMSPmupsP1HiHum => '1.3.6.1.4.1.318.1.1.6.6.4.1.1.10',
  sPDUOutletConfigMSPmupsP1HiHumDefinition => 'PowerNet-MIB::sPDUOutletConfigMSPmupsP1HiHum',
  sPDUOutletConfigMSPmupsP1LowTemp => '1.3.6.1.4.1.318.1.1.6.6.4.1.1.11',
  sPDUOutletConfigMSPmupsP1LowTempDefinition => 'PowerNet-MIB::sPDUOutletConfigMSPmupsP1LowTemp',
  sPDUOutletConfigMSPmupsP1HiTemp => '1.3.6.1.4.1.318.1.1.6.6.4.1.1.12',
  sPDUOutletConfigMSPmupsP1HiTempDefinition => 'PowerNet-MIB::sPDUOutletConfigMSPmupsP1HiTemp',
  sPDUOutletConfigMSPmupsP2LowHum => '1.3.6.1.4.1.318.1.1.6.6.4.1.1.13',
  sPDUOutletConfigMSPmupsP2LowHumDefinition => 'PowerNet-MIB::sPDUOutletConfigMSPmupsP2LowHum',
  sPDUOutletConfigMSPmupsP2HiHum => '1.3.6.1.4.1.318.1.1.6.6.4.1.1.14',
  sPDUOutletConfigMSPmupsP2HiHumDefinition => 'PowerNet-MIB::sPDUOutletConfigMSPmupsP2HiHum',
  sPDUOutletConfigMSPmupsP2LowTemp => '1.3.6.1.4.1.318.1.1.6.6.4.1.1.15',
  sPDUOutletConfigMSPmupsP2LowTempDefinition => 'PowerNet-MIB::sPDUOutletConfigMSPmupsP2LowTemp',
  sPDUOutletConfigMSPmupsP2HiTemp => '1.3.6.1.4.1.318.1.1.6.6.4.1.1.16',
  sPDUOutletConfigMSPmupsP2HiTempDefinition => 'PowerNet-MIB::sPDUOutletConfigMSPmupsP2HiTemp',
  sPDUOutletStatusMSP => '1.3.6.1.4.1.318.1.1.6.7',
  sPDUOutletStatusMSPTable => '1.3.6.1.4.1.318.1.1.6.7.1',
  sPDUOutletStatusMSPEntry => '1.3.6.1.4.1.318.1.1.6.7.1.1',
  sPDUOutletStatusMSPIndex => '1.3.6.1.4.1.318.1.1.6.7.1.1.1',
  sPDUOutletStatusMSPName => '1.3.6.1.4.1.318.1.1.6.7.1.1.2',
  sPDUOutletStatusMSPOutletIndex => '1.3.6.1.4.1.318.1.1.6.7.1.1.3',
  sPDUOutletStatusMSPOutletName => '1.3.6.1.4.1.318.1.1.6.7.1.1.4',
  sPDUOutletStatusMSPOutletState => '1.3.6.1.4.1.318.1.1.6.7.1.1.5',
  sPDUOutletStatusMSPOutletStateDefinition => 'PowerNet-MIB::sPDUOutletStatusMSPOutletState',
  sPDUOutletStatusMSPCommandPending => '1.3.6.1.4.1.318.1.1.6.7.1.1.6',
  sPDUOutletStatusMSPCommandPendingDefinition => 'PowerNet-MIB::sPDUOutletStatusMSPCommandPending',
  sPDUOutletStatusMSPOutletCtrlMode => '1.3.6.1.4.1.318.1.1.6.7.1.1.7',
  sPDUOutletStatusMSPOutletCtrlModeDefinition => 'PowerNet-MIB::sPDUOutletStatusMSPOutletCtrlMode',
  dcDM3 => '1.3.6.1.4.1.318.1.1.7',
  dm3Ident => '1.3.6.1.4.1.318.1.1.7.1',
  dm3IdentSystem => '1.3.6.1.4.1.318.1.1.7.1.1',
  dm3IdentSysDescriptionTableSize => '1.3.6.1.4.1.318.1.1.7.1.1.1',
  dm3IdentSysDescriptionTable => '1.3.6.1.4.1.318.1.1.7.1.1.2',
  dm3IdentSysDescriptionEntry => '1.3.6.1.4.1.318.1.1.7.1.1.2.1',
  dm3IdentSysDescriptionIndex => '1.3.6.1.4.1.318.1.1.7.1.1.2.1.1',
  dm3IdentSysDescriptionText => '1.3.6.1.4.1.318.1.1.7.1.1.2.1.2',
  dm3IdentSysModel => '1.3.6.1.4.1.318.1.1.7.1.1.3',
  dm3IdentSysCntrlRev => '1.3.6.1.4.1.318.1.1.7.1.1.4',
  dm3IdentSysFWVersion => '1.3.6.1.4.1.318.1.1.7.1.1.5',
  dm3Config => '1.3.6.1.4.1.318.1.1.7.2',
  dm3ConfigSystem => '1.3.6.1.4.1.318.1.1.7.2.1',
  dm3ConfigSysDescriptionTableSize => '1.3.6.1.4.1.318.1.1.7.2.1.1',
  dm3ConfigSysDescriptionTable => '1.3.6.1.4.1.318.1.1.7.2.1.2',
  dm3ConfigSysDescriptionEntry => '1.3.6.1.4.1.318.1.1.7.2.1.2.1',
  dm3ConfigSysDescriptionIndex => '1.3.6.1.4.1.318.1.1.7.2.1.2.1.1',
  dm3ConfigSysDescriptionText => '1.3.6.1.4.1.318.1.1.7.2.1.2.1.2',
  dm3ConfigSysHighTempThresh => '1.3.6.1.4.1.318.1.1.7.2.1.3',
  dm3ConfigSysHighTempAlarm => '1.3.6.1.4.1.318.1.1.7.2.1.4',
  dm3ConfigSysHighTempAlarmDefinition => 'PowerNet-MIB::dm3ConfigSysHighTempAlarm',
  dm3ConfigSysLowTempThresh => '1.3.6.1.4.1.318.1.1.7.2.1.5',
  dm3ConfigSysLowTempAlarm => '1.3.6.1.4.1.318.1.1.7.2.1.6',
  dm3ConfigSysLowTempAlarmDefinition => 'PowerNet-MIB::dm3ConfigSysLowTempAlarm',
  dm3ConfigSysHardwareTempAlarm => '1.3.6.1.4.1.318.1.1.7.2.1.7',
  dm3ConfigSysHardwareTempAlarmDefinition => 'PowerNet-MIB::dm3ConfigSysHardwareTempAlarm',
  dm3ConfigSysRemoteAccess => '1.3.6.1.4.1.318.1.1.7.2.1.8',
  dm3ConfigSysRemoteAccessDefinition => 'PowerNet-MIB::dm3ConfigSysRemoteAccess',
  dm3ConfigLVD => '1.3.6.1.4.1.318.1.1.7.2.2',
  dm3ConfigLVDTableSize => '1.3.6.1.4.1.318.1.1.7.2.2.1',
  dm3ConfigLVDTable => '1.3.6.1.4.1.318.1.1.7.2.2.2',
  dm3ConfigLVDEntry => '1.3.6.1.4.1.318.1.1.7.2.2.2.1',
  dm3ConfigLVDIndex => '1.3.6.1.4.1.318.1.1.7.2.2.2.1.1',
  dm3ConfigLVDName => '1.3.6.1.4.1.318.1.1.7.2.2.2.1.2',
  dm3ConfigLVDEnable => '1.3.6.1.4.1.318.1.1.7.2.2.2.1.3',
  dm3ConfigLVDEnableDefinition => 'PowerNet-MIB::dm3ConfigLVDEnable',
  dm3ConfigLVDTripThresh => '1.3.6.1.4.1.318.1.1.7.2.2.2.1.4',
  dm3ConfigLVDResetThresh => '1.3.6.1.4.1.318.1.1.7.2.2.2.1.5',
  dm3ConfigLVDOpenAlarm => '1.3.6.1.4.1.318.1.1.7.2.2.2.1.6',
  dm3ConfigLVDOpenAlarmDefinition => 'PowerNet-MIB::dm3ConfigLVDOpenAlarm',
  dm3ConfigLVDHWAlarm => '1.3.6.1.4.1.318.1.1.7.2.2.2.1.7',
  dm3ConfigLVDHWAlarmDefinition => 'PowerNet-MIB::dm3ConfigLVDHWAlarm',
  dm3ConfigBattery => '1.3.6.1.4.1.318.1.1.7.2.3',
  dm3ConfigBattFloatVolt => '1.3.6.1.4.1.318.1.1.7.2.3.1',
  dm3ConfigBattMaxRecharge => '1.3.6.1.4.1.318.1.1.7.2.3.2',
  dm3ConfigBattDischargeThresh => '1.3.6.1.4.1.318.1.1.7.2.3.3',
  dm3ConfigBattDischargeAlarm => '1.3.6.1.4.1.318.1.1.7.2.3.4',
  dm3ConfigBattDischargeAlarmDefinition => 'PowerNet-MIB::dm3ConfigBattDischargeAlarm',
  dm3ConfigBattHighVoltThresh => '1.3.6.1.4.1.318.1.1.7.2.3.5',
  dm3ConfigBattHighVoltAlarm => '1.3.6.1.4.1.318.1.1.7.2.3.6',
  dm3ConfigBattHighVoltAlarmDefinition => 'PowerNet-MIB::dm3ConfigBattHighVoltAlarm',
  dm3ConfigBattLowVoltThresh => '1.3.6.1.4.1.318.1.1.7.2.3.7',
  dm3ConfigBattLowVoltAlarm => '1.3.6.1.4.1.318.1.1.7.2.3.8',
  dm3ConfigBattLowVoltAlarmDefinition => 'PowerNet-MIB::dm3ConfigBattLowVoltAlarm',
  dm3ConfigBattHighTempThresh => '1.3.6.1.4.1.318.1.1.7.2.3.9',
  dm3ConfigBattHighTempAlarm => '1.3.6.1.4.1.318.1.1.7.2.3.10',
  dm3ConfigBattHighTempAlarmDefinition => 'PowerNet-MIB::dm3ConfigBattHighTempAlarm',
  dm3ConfigBattLowTempThresh => '1.3.6.1.4.1.318.1.1.7.2.3.11',
  dm3ConfigBattLowTempAlarm => '1.3.6.1.4.1.318.1.1.7.2.3.12',
  dm3ConfigBattLowTempAlarmDefinition => 'PowerNet-MIB::dm3ConfigBattLowTempAlarm',
  dm3ConfigBattAmpHour => '1.3.6.1.4.1.318.1.1.7.2.3.13',
  dm3ConfigCompMethod => '1.3.6.1.4.1.318.1.1.7.2.3.14',
  dm3ConfigCompMethodDefinition => 'PowerNet-MIB::dm3ConfigCompMethod',
  dm3ConfigCompTempCoeff => '1.3.6.1.4.1.318.1.1.7.2.3.15',
  dm3ConfigHighKneeTemp => '1.3.6.1.4.1.318.1.1.7.2.3.16',
  dm3ConfigLowKneeTemp => '1.3.6.1.4.1.318.1.1.7.2.3.17',
  dm3ConfigBattHwCurrentAlarm => '1.3.6.1.4.1.318.1.1.7.2.3.18',
  dm3ConfigBattHwCurrentAlarmDefinition => 'PowerNet-MIB::dm3ConfigBattHwCurrentAlarm',
  dm3ConfigBattHwTempAlarm => '1.3.6.1.4.1.318.1.1.7.2.3.19',
  dm3ConfigBattHwTempAlarmDefinition => 'PowerNet-MIB::dm3ConfigBattHwTempAlarm',
  dm3ConfigPowerModules => '1.3.6.1.4.1.318.1.1.7.2.4',
  dm3ConfigRectifier => '1.3.6.1.4.1.318.1.1.7.2.4.1',
  dm3ConfigRectThresh => '1.3.6.1.4.1.318.1.1.7.2.4.1.1',
  dm3ConfigRectHighVoltThresh => '1.3.6.1.4.1.318.1.1.7.2.4.1.1.1',
  dm3ConfigRectLowVoltThresh => '1.3.6.1.4.1.318.1.1.7.2.4.1.1.2',
  dm3ConfigRectFailSafe => '1.3.6.1.4.1.318.1.1.7.2.4.1.1.3',
  dm3ConfigRectFailComm => '1.3.6.1.4.1.318.1.1.7.2.4.1.1.4',
  dm3ConfigRectAlarms => '1.3.6.1.4.1.318.1.1.7.2.4.1.2',
  dm3ConfigRectHighVoltAlarm => '1.3.6.1.4.1.318.1.1.7.2.4.1.2.1',
  dm3ConfigRectHighVoltAlarmDefinition => 'PowerNet-MIB::dm3ConfigRectHighVoltAlarm',
  dm3ConfigRectLowVoltAlarm => '1.3.6.1.4.1.318.1.1.7.2.4.1.2.2',
  dm3ConfigRectLowVoltAlarmDefinition => 'PowerNet-MIB::dm3ConfigRectLowVoltAlarm',
  dm3ConfigRectConfigAlarm => '1.3.6.1.4.1.318.1.1.7.2.4.1.2.3',
  dm3ConfigRectConfigAlarmDefinition => 'PowerNet-MIB::dm3ConfigRectConfigAlarm',
  dm3ConfigRect1ofNAlarm => '1.3.6.1.4.1.318.1.1.7.2.4.1.2.4',
  dm3ConfigRect1ofNAlarmDefinition => 'PowerNet-MIB::dm3ConfigRect1ofNAlarm',
  dm3ConfigRect2ofNAlarm => '1.3.6.1.4.1.318.1.1.7.2.4.1.2.5',
  dm3ConfigRect2ofNAlarmDefinition => 'PowerNet-MIB::dm3ConfigRect2ofNAlarm',
  dm3ConfigRectDiagAlarm => '1.3.6.1.4.1.318.1.1.7.2.4.1.2.6',
  dm3ConfigRectDiagAlarmDefinition => 'PowerNet-MIB::dm3ConfigRectDiagAlarm',
  dm3ConfigRectImbalanceAlarm => '1.3.6.1.4.1.318.1.1.7.2.4.1.2.7',
  dm3ConfigRectImbalanceAlarmDefinition => 'PowerNet-MIB::dm3ConfigRectImbalanceAlarm',
  dm3ConfigRectCurrLimitAlarm => '1.3.6.1.4.1.318.1.1.7.2.4.1.2.8',
  dm3ConfigRectCurrLimitAlarmDefinition => 'PowerNet-MIB::dm3ConfigRectCurrLimitAlarm',
  dm3ConfigRectStandbyAlarm => '1.3.6.1.4.1.318.1.1.7.2.4.1.2.9',
  dm3ConfigRectStandbyAlarmDefinition => 'PowerNet-MIB::dm3ConfigRectStandbyAlarm',
  dm3ConfigRectFanFailAlarm => '1.3.6.1.4.1.318.1.1.7.2.4.1.2.10',
  dm3ConfigRectFanFailAlarmDefinition => 'PowerNet-MIB::dm3ConfigRectFanFailAlarm',
  dm3ConfigRectFailAlarm => '1.3.6.1.4.1.318.1.1.7.2.4.1.2.11',
  dm3ConfigRectFailAlarmDefinition => 'PowerNet-MIB::dm3ConfigRectFailAlarm',
  dm3ConfigRectHwVoltAlarm => '1.3.6.1.4.1.318.1.1.7.2.4.1.2.12',
  dm3ConfigRectHwVoltAlarmDefinition => 'PowerNet-MIB::dm3ConfigRectHwVoltAlarm',
  dm3ConfigConverter => '1.3.6.1.4.1.318.1.1.7.2.4.2',
  dm3ConfigConvThresh => '1.3.6.1.4.1.318.1.1.7.2.4.2.1',
  dm3ConfigConvHighVoltThresh => '1.3.6.1.4.1.318.1.1.7.2.4.2.1.1',
  dm3ConfigConvLowVoltThresh => '1.3.6.1.4.1.318.1.1.7.2.4.2.1.2',
  dm3ConfigConvFailSafe => '1.3.6.1.4.1.318.1.1.7.2.4.2.1.3',
  dm3ConfigConvSetPoint => '1.3.6.1.4.1.318.1.1.7.2.4.2.1.4',
  dm3ConfigConvFailMax => '1.3.6.1.4.1.318.1.1.7.2.4.2.1.5',
  dm3ConfigConvFailMin => '1.3.6.1.4.1.318.1.1.7.2.4.2.1.6',
  dm3ConfigConvFailComm => '1.3.6.1.4.1.318.1.1.7.2.4.2.1.7',
  dm3ConfigConvAlarms => '1.3.6.1.4.1.318.1.1.7.2.4.2.2',
  dm3ConfigConvHighVoltAlarm => '1.3.6.1.4.1.318.1.1.7.2.4.2.2.1',
  dm3ConfigConvHighVoltAlarmDefinition => 'PowerNet-MIB::dm3ConfigConvHighVoltAlarm',
  dm3ConfigConvLowVoltAlarm => '1.3.6.1.4.1.318.1.1.7.2.4.2.2.2',
  dm3ConfigConvLowVoltAlarmDefinition => 'PowerNet-MIB::dm3ConfigConvLowVoltAlarm',
  dm3ConfigConvConfigAlarm => '1.3.6.1.4.1.318.1.1.7.2.4.2.2.3',
  dm3ConfigConvConfigAlarmDefinition => 'PowerNet-MIB::dm3ConfigConvConfigAlarm',
  dm3ConfigConv1ofNAlarm => '1.3.6.1.4.1.318.1.1.7.2.4.2.2.4',
  dm3ConfigConv1ofNAlarmDefinition => 'PowerNet-MIB::dm3ConfigConv1ofNAlarm',
  dm3ConfigConv2ofNAlarm => '1.3.6.1.4.1.318.1.1.7.2.4.2.2.5',
  dm3ConfigConv2ofNAlarmDefinition => 'PowerNet-MIB::dm3ConfigConv2ofNAlarm',
  dm3ConfigConvDiagAlarm => '1.3.6.1.4.1.318.1.1.7.2.4.2.2.6',
  dm3ConfigConvDiagAlarmDefinition => 'PowerNet-MIB::dm3ConfigConvDiagAlarm',
  dm3ConfigConvImbalanceAlarm => '1.3.6.1.4.1.318.1.1.7.2.4.2.2.7',
  dm3ConfigConvImbalanceAlarmDefinition => 'PowerNet-MIB::dm3ConfigConvImbalanceAlarm',
  dm3ConfigConvCurrLimitAlarm => '1.3.6.1.4.1.318.1.1.7.2.4.2.2.8',
  dm3ConfigConvCurrLimitAlarmDefinition => 'PowerNet-MIB::dm3ConfigConvCurrLimitAlarm',
  dm3ConfigConvStandbyAlarm => '1.3.6.1.4.1.318.1.1.7.2.4.2.2.9',
  dm3ConfigConvStandbyAlarmDefinition => 'PowerNet-MIB::dm3ConfigConvStandbyAlarm',
  dm3ConfigConvFanFailAlarm => '1.3.6.1.4.1.318.1.1.7.2.4.2.2.10',
  dm3ConfigConvFanFailAlarmDefinition => 'PowerNet-MIB::dm3ConfigConvFanFailAlarm',
  dm3ConfigConvFailAlarm => '1.3.6.1.4.1.318.1.1.7.2.4.2.2.11',
  dm3ConfigConvFailAlarmDefinition => 'PowerNet-MIB::dm3ConfigConvFailAlarm',
  dm3ConfigConvHwVoltAlarm => '1.3.6.1.4.1.318.1.1.7.2.4.2.2.12',
  dm3ConfigConvHwVoltAlarmDefinition => 'PowerNet-MIB::dm3ConfigConvHwVoltAlarm',
  dm3ConfigRelays => '1.3.6.1.4.1.318.1.1.7.2.5',
  dm3ConfigOutputRelays => '1.3.6.1.4.1.318.1.1.7.2.5.1',
  dm3ConfigOutRlyTableSize => '1.3.6.1.4.1.318.1.1.7.2.5.1.1',
  dm3ConfigOutRlyTable => '1.3.6.1.4.1.318.1.1.7.2.5.1.2',
  dm3ConfigOutRlyEntry => '1.3.6.1.4.1.318.1.1.7.2.5.1.2.1',
  dm3ConfigOutRlyIndex => '1.3.6.1.4.1.318.1.1.7.2.5.1.2.1.1',
  dm3ConfigOutRlyName => '1.3.6.1.4.1.318.1.1.7.2.5.1.2.1.2',
  dm3ConfigOutRlyDelay => '1.3.6.1.4.1.318.1.1.7.2.5.1.2.1.3',
  dm3ConfigOutRlyAlarm => '1.3.6.1.4.1.318.1.1.7.2.5.1.2.1.4',
  dm3ConfigOutRlyAlarmDefinition => 'PowerNet-MIB::dm3ConfigOutRlyAlarm',
  dm3ConfigInputRelays => '1.3.6.1.4.1.318.1.1.7.2.5.2',
  dm3ConfigInRlyTableSize => '1.3.6.1.4.1.318.1.1.7.2.5.2.1',
  dm3ConfigInRlyTable => '1.3.6.1.4.1.318.1.1.7.2.5.2.2',
  dm3ConfigInRlyEntry => '1.3.6.1.4.1.318.1.1.7.2.5.2.2.1',
  dm3ConfigInRlyIndex => '1.3.6.1.4.1.318.1.1.7.2.5.2.2.1.1',
  dm3ConfigInRlyName => '1.3.6.1.4.1.318.1.1.7.2.5.2.2.1.2',
  dm3ConfigInRlyDelay => '1.3.6.1.4.1.318.1.1.7.2.5.2.2.1.3',
  dm3ConfigInRlyAlarm => '1.3.6.1.4.1.318.1.1.7.2.5.2.2.1.4',
  dm3ConfigInRlyAlarmDefinition => 'PowerNet-MIB::dm3ConfigInRlyAlarm',
  dm3ConfigDistribution => '1.3.6.1.4.1.318.1.1.7.2.6',
  dm3ConfigBreakers => '1.3.6.1.4.1.318.1.1.7.2.6.1',
  dm3ConfigBreakersTableSize => '1.3.6.1.4.1.318.1.1.7.2.6.1.1',
  dm3ConfigBreakersTable => '1.3.6.1.4.1.318.1.1.7.2.6.1.2',
  dm3ConfigBreakersEntry => '1.3.6.1.4.1.318.1.1.7.2.6.1.2.1',
  dm3ConfigBreakersIndex => '1.3.6.1.4.1.318.1.1.7.2.6.1.2.1.1',
  dm3ConfigBreakersName => '1.3.6.1.4.1.318.1.1.7.2.6.1.2.1.2',
  dm3ConfigBreakersAlarm => '1.3.6.1.4.1.318.1.1.7.2.6.1.2.1.3',
  dm3ConfigBreakersAlarmDefinition => 'PowerNet-MIB::dm3ConfigBreakersAlarm',
  dm3ConfigFuses => '1.3.6.1.4.1.318.1.1.7.2.6.2',
  dm3ConfigFusesTableSize => '1.3.6.1.4.1.318.1.1.7.2.6.2.1',
  dm3ConfigFusesTable => '1.3.6.1.4.1.318.1.1.7.2.6.2.2',
  dm3ConfigFusesEntry => '1.3.6.1.4.1.318.1.1.7.2.6.2.2.1',
  dm3ConfigFusesIndex => '1.3.6.1.4.1.318.1.1.7.2.6.2.2.1.1',
  dm3ConfigFusesName => '1.3.6.1.4.1.318.1.1.7.2.6.2.2.1.2',
  dm3ConfigFusesAlarm => '1.3.6.1.4.1.318.1.1.7.2.6.2.2.1.3',
  dm3ConfigFusesAlarmDefinition => 'PowerNet-MIB::dm3ConfigFusesAlarm',
  dm3Status => '1.3.6.1.4.1.318.1.1.7.3',
  dm3StatusSystem => '1.3.6.1.4.1.318.1.1.7.3.1',
  dm3StatusSystemTemp => '1.3.6.1.4.1.318.1.1.7.3.1.1',
  dm3StatusSystemStart => '1.3.6.1.4.1.318.1.1.7.3.1.2',
  dm3StatusSysRemoteAccess => '1.3.6.1.4.1.318.1.1.7.3.1.3',
  dm3StatusSysRemoteAccessDefinition => 'PowerNet-MIB::dm3StatusSysRemoteAccess',
  dm3StatusSysSecurityLevel => '1.3.6.1.4.1.318.1.1.7.3.1.4',
  dm3StatusSysTempSanity => '1.3.6.1.4.1.318.1.1.7.3.1.5',
  dm3StatusSysTempSanityDefinition => 'PowerNet-MIB::dm3StatusSysTempSanity',
  dm3StatusSysAlarmState => '1.3.6.1.4.1.318.1.1.7.3.1.6',
  dm3StatusSysAlarmStateDefinition => 'PowerNet-MIB::dm3StatusSysAlarmState',
  dm3StatusSysTempUnits => '1.3.6.1.4.1.318.1.1.7.3.1.7',
  dm3StatusSysTempUnitsDefinition => 'PowerNet-MIB::dm3StatusSysTempUnits',
  dm3StatusAlarms => '1.3.6.1.4.1.318.1.1.7.3.2',
  dm3StatusAlarmsTableSize => '1.3.6.1.4.1.318.1.1.7.3.2.1',
  dm3StatusAlarmsTable => '1.3.6.1.4.1.318.1.1.7.3.2.2',
  dm3StatusAlarmsEntry => '1.3.6.1.4.1.318.1.1.7.3.2.2.1',
  dm3StatusAlarmsIndex => '1.3.6.1.4.1.318.1.1.7.3.2.2.1.1',
  dm3StatusAlarmsText => '1.3.6.1.4.1.318.1.1.7.3.2.2.1.2',
  dm3StatusBattery => '1.3.6.1.4.1.318.1.1.7.3.3',
  dm3StatusBattCurrent => '1.3.6.1.4.1.318.1.1.7.3.3.1',
  dm3StatusBattTemp => '1.3.6.1.4.1.318.1.1.7.3.3.2',
  dm3StatusBattCurrentSanity => '1.3.6.1.4.1.318.1.1.7.3.3.3',
  dm3StatusBattCurrentSanityDefinition => 'PowerNet-MIB::dm3StatusBattCurrentSanity',
  dm3StatusBattTempSanity => '1.3.6.1.4.1.318.1.1.7.3.3.4',
  dm3StatusBattTempSanityDefinition => 'PowerNet-MIB::dm3StatusBattTempSanity',
  dm3StatusOEM => '1.3.6.1.4.1.318.1.1.7.3.4',
  dm3StatusOEMrectOffset => '1.3.6.1.4.1.318.1.1.7.3.4.1',
  dm3StatusOEMrectGain => '1.3.6.1.4.1.318.1.1.7.3.4.2',
  dm3StatusOEMconvOffset => '1.3.6.1.4.1.318.1.1.7.3.4.3',
  dm3StatusOEMconvGain => '1.3.6.1.4.1.318.1.1.7.3.4.4',
  dm3StatusOEMshuntOffset => '1.3.6.1.4.1.318.1.1.7.3.4.5',
  dm3StatusOEMshuntGain => '1.3.6.1.4.1.318.1.1.7.3.4.6',
  dm3StatusLVD => '1.3.6.1.4.1.318.1.1.7.3.5',
  dm3StatusLVDTableSize => '1.3.6.1.4.1.318.1.1.7.3.5.1',
  dm3StatusLVDTable => '1.3.6.1.4.1.318.1.1.7.3.5.2',
  dm3StatusLVDEntry => '1.3.6.1.4.1.318.1.1.7.3.5.2.1',
  dm3StatusLVDIndex => '1.3.6.1.4.1.318.1.1.7.3.5.2.1.1',
  dm3StatusLVDName => '1.3.6.1.4.1.318.1.1.7.3.5.2.1.2',
  dm3StatusLVDState => '1.3.6.1.4.1.318.1.1.7.3.5.2.1.3',
  dm3StatusLVDStateDefinition => 'PowerNet-MIB::dm3StatusLVDState',
  dm3StatusLVDHwFault => '1.3.6.1.4.1.318.1.1.7.3.5.2.1.4',
  dm3StatusLVDHwFaultDefinition => 'PowerNet-MIB::dm3StatusLVDHwFault',
  dm3StatusPowerModules => '1.3.6.1.4.1.318.1.1.7.3.6',
  dm3StatusRectifier => '1.3.6.1.4.1.318.1.1.7.3.6.1',
  dm3StatusRectTableSize => '1.3.6.1.4.1.318.1.1.7.3.6.1.1',
  dm3StatusRectTable => '1.3.6.1.4.1.318.1.1.7.3.6.1.2',
  dm3StatusRectEntry => '1.3.6.1.4.1.318.1.1.7.3.6.1.2.1',
  dm3StatusRectIndex => '1.3.6.1.4.1.318.1.1.7.3.6.1.2.1.1',
  dm3StatusRectID => '1.3.6.1.4.1.318.1.1.7.3.6.1.2.1.2',
  dm3StatusRectDesc => '1.3.6.1.4.1.318.1.1.7.3.6.1.2.1.3',
  dm3StatusRectCurrent => '1.3.6.1.4.1.318.1.1.7.3.6.1.2.1.4',
  dm3StatusRectCurrentLimit => '1.3.6.1.4.1.318.1.1.7.3.6.1.2.1.5',
  dm3StatusRectCurrentLimitDefinition => 'PowerNet-MIB::dm3StatusRectCurrentLimit',
  dm3StatusRectStandby => '1.3.6.1.4.1.318.1.1.7.3.6.1.2.1.6',
  dm3StatusRectStandbyDefinition => 'PowerNet-MIB::dm3StatusRectStandby',
  dm3StatusRectFanFail => '1.3.6.1.4.1.318.1.1.7.3.6.1.2.1.7',
  dm3StatusRectFanFailDefinition => 'PowerNet-MIB::dm3StatusRectFanFail',
  dm3StatusRectFail => '1.3.6.1.4.1.318.1.1.7.3.6.1.2.1.8',
  dm3StatusRectFailDefinition => 'PowerNet-MIB::dm3StatusRectFail',
  dm3StatusRectDevType => '1.3.6.1.4.1.318.1.1.7.3.6.1.2.1.9',
  dm3StatusRectPhyAddr => '1.3.6.1.4.1.318.1.1.7.3.6.1.2.1.10',
  dm3StatusRectCfg => '1.3.6.1.4.1.318.1.1.7.3.6.1.2.1.11',
  dm3StatusRectCfgDefinition => 'PowerNet-MIB::dm3StatusRectCfg',
  dm3StatusRectPcbRev => '1.3.6.1.4.1.318.1.1.7.3.6.1.2.1.12',
  dm3StatusRectFwVer => '1.3.6.1.4.1.318.1.1.7.3.6.1.2.1.13',
  dm3StatusRectPresent => '1.3.6.1.4.1.318.1.1.7.3.6.1.2.1.14',
  dm3StatusRectPresentDefinition => 'PowerNet-MIB::dm3StatusRectPresent',
  dm3StatusRectDiagPass => '1.3.6.1.4.1.318.1.1.7.3.6.1.2.1.15',
  dm3StatusRectDiagPassDefinition => 'PowerNet-MIB::dm3StatusRectDiagPass',
  dm3StatusRectState => '1.3.6.1.4.1.318.1.1.7.3.6.1.2.1.16',
  dm3StatusSysRectVoltSanity => '1.3.6.1.4.1.318.1.1.7.3.6.1.3',
  dm3StatusSysRectVoltSanityDefinition => 'PowerNet-MIB::dm3StatusSysRectVoltSanity',
  dm3StatusSysRectAvailable => '1.3.6.1.4.1.318.1.1.7.3.6.1.4',
  dm3StatusSysRectAvailableDefinition => 'PowerNet-MIB::dm3StatusSysRectAvailable',
  dm3StatusSysRectType => '1.3.6.1.4.1.318.1.1.7.3.6.1.5',
  dm3StatusSysRectVoltage => '1.3.6.1.4.1.318.1.1.7.3.6.1.6',
  dm3StatusSysRectCurrent => '1.3.6.1.4.1.318.1.1.7.3.6.1.7',
  dm3StatusConverter => '1.3.6.1.4.1.318.1.1.7.3.6.2',
  dm3StatusConvTableSize => '1.3.6.1.4.1.318.1.1.7.3.6.2.1',
  dm3StatusConvTable => '1.3.6.1.4.1.318.1.1.7.3.6.2.2',
  dm3StatusConvEntry => '1.3.6.1.4.1.318.1.1.7.3.6.2.2.1',
  dm3StatusConvIndex => '1.3.6.1.4.1.318.1.1.7.3.6.2.2.1.1',
  dm3StatusConvID => '1.3.6.1.4.1.318.1.1.7.3.6.2.2.1.2',
  dm3StatusConvDesc => '1.3.6.1.4.1.318.1.1.7.3.6.2.2.1.3',
  dm3StatusConvCurrent => '1.3.6.1.4.1.318.1.1.7.3.6.2.2.1.4',
  dm3StatusConvCurrentLimit => '1.3.6.1.4.1.318.1.1.7.3.6.2.2.1.5',
  dm3StatusConvCurrentLimitDefinition => 'PowerNet-MIB::dm3StatusConvCurrentLimit',
  dm3StatusConvStandby => '1.3.6.1.4.1.318.1.1.7.3.6.2.2.1.6',
  dm3StatusConvStandbyDefinition => 'PowerNet-MIB::dm3StatusConvStandby',
  dm3StatusConvFanFail => '1.3.6.1.4.1.318.1.1.7.3.6.2.2.1.7',
  dm3StatusConvFanFailDefinition => 'PowerNet-MIB::dm3StatusConvFanFail',
  dm3StatusConvFail => '1.3.6.1.4.1.318.1.1.7.3.6.2.2.1.8',
  dm3StatusConvFailDefinition => 'PowerNet-MIB::dm3StatusConvFail',
  dm3StatusConvDevType => '1.3.6.1.4.1.318.1.1.7.3.6.2.2.1.9',
  dm3StatusConvPhyAddr => '1.3.6.1.4.1.318.1.1.7.3.6.2.2.1.10',
  dm3StatusConvCfg => '1.3.6.1.4.1.318.1.1.7.3.6.2.2.1.11',
  dm3StatusConvCfgDefinition => 'PowerNet-MIB::dm3StatusConvCfg',
  dm3StatusConvPcbRev => '1.3.6.1.4.1.318.1.1.7.3.6.2.2.1.12',
  dm3StatusConvFwVer => '1.3.6.1.4.1.318.1.1.7.3.6.2.2.1.13',
  dm3StatusConvPresent => '1.3.6.1.4.1.318.1.1.7.3.6.2.2.1.14',
  dm3StatusConvPresentDefinition => 'PowerNet-MIB::dm3StatusConvPresent',
  dm3StatusConvDiagPass => '1.3.6.1.4.1.318.1.1.7.3.6.2.2.1.15',
  dm3StatusConvDiagPassDefinition => 'PowerNet-MIB::dm3StatusConvDiagPass',
  dm3StatusConvState => '1.3.6.1.4.1.318.1.1.7.3.6.2.2.1.16',
  dm3StatusSysConvVoltSanity => '1.3.6.1.4.1.318.1.1.7.3.6.2.3',
  dm3StatusSysConvVoltSanityDefinition => 'PowerNet-MIB::dm3StatusSysConvVoltSanity',
  dm3StatusSysConvAvailable => '1.3.6.1.4.1.318.1.1.7.3.6.2.4',
  dm3StatusSysConvAvailableDefinition => 'PowerNet-MIB::dm3StatusSysConvAvailable',
  dm3StatusSysConvType => '1.3.6.1.4.1.318.1.1.7.3.6.2.5',
  dm3StatusSysConvVoltage => '1.3.6.1.4.1.318.1.1.7.3.6.2.6',
  dm3StatusSysConvCurrent => '1.3.6.1.4.1.318.1.1.7.3.6.2.7',
  dm3StatusRelays => '1.3.6.1.4.1.318.1.1.7.3.7',
  dm3StatusOutputRelays => '1.3.6.1.4.1.318.1.1.7.3.7.1',
  dm3StatusOutRlyTableSize => '1.3.6.1.4.1.318.1.1.7.3.7.1.1',
  dm3StatusOutRlyTable => '1.3.6.1.4.1.318.1.1.7.3.7.1.2',
  dm3StatusOutRlyEntry => '1.3.6.1.4.1.318.1.1.7.3.7.1.2.1',
  dm3StatusOutRlyIndex => '1.3.6.1.4.1.318.1.1.7.3.7.1.2.1.1',
  dm3StatusOutRlyName => '1.3.6.1.4.1.318.1.1.7.3.7.1.2.1.2',
  dm3StatusOutRlyStatus => '1.3.6.1.4.1.318.1.1.7.3.7.1.2.1.3',
  dm3StatusOutRlyStatusDefinition => 'PowerNet-MIB::dm3StatusOutRlyStatus',
  dm3StatusInputRelays => '1.3.6.1.4.1.318.1.1.7.3.7.2',
  dm3StatusInRlyTableSize => '1.3.6.1.4.1.318.1.1.7.3.7.2.1',
  dm3StatusInRlyTable => '1.3.6.1.4.1.318.1.1.7.3.7.2.2',
  dm3StatusInRlyEntry => '1.3.6.1.4.1.318.1.1.7.3.7.2.2.1',
  dm3StatusInRlyIndex => '1.3.6.1.4.1.318.1.1.7.3.7.2.2.1.1',
  dm3StatusInRlyName => '1.3.6.1.4.1.318.1.1.7.3.7.2.2.1.2',
  dm3StatusInRlyStatus => '1.3.6.1.4.1.318.1.1.7.3.7.2.2.1.3',
  dm3StatusInRlyStatusDefinition => 'PowerNet-MIB::dm3StatusInRlyStatus',
  dm3StatusDistribution => '1.3.6.1.4.1.318.1.1.7.3.8',
  dm3StatusBreakers => '1.3.6.1.4.1.318.1.1.7.3.8.1',
  dm3StatusBreakersTableSize => '1.3.6.1.4.1.318.1.1.7.3.8.1.1',
  dm3StatusBreakersTable => '1.3.6.1.4.1.318.1.1.7.3.8.1.2',
  dm3StatusBreakersEntry => '1.3.6.1.4.1.318.1.1.7.3.8.1.2.1',
  dm3StatusBreakersIndex => '1.3.6.1.4.1.318.1.1.7.3.8.1.2.1.1',
  dm3StatusBreakersName => '1.3.6.1.4.1.318.1.1.7.3.8.1.2.1.2',
  dm3StatusBreakersStatus => '1.3.6.1.4.1.318.1.1.7.3.8.1.2.1.3',
  dm3StatusBreakersStatusDefinition => 'PowerNet-MIB::dm3StatusBreakersStatus',
  dm3StatusFuses => '1.3.6.1.4.1.318.1.1.7.3.8.2',
  dm3StatusFusesTableSize => '1.3.6.1.4.1.318.1.1.7.3.8.2.1',
  dm3StatusFusesTable => '1.3.6.1.4.1.318.1.1.7.3.8.2.2',
  dm3StatusFusesEntry => '1.3.6.1.4.1.318.1.1.7.3.8.2.2.1',
  dm3StatusFusesIndex => '1.3.6.1.4.1.318.1.1.7.3.8.2.2.1.1',
  dm3StatusFusesName => '1.3.6.1.4.1.318.1.1.7.3.8.2.2.1.2',
  dm3StatusFusesStatus => '1.3.6.1.4.1.318.1.1.7.3.8.2.2.1.3',
  dm3StatusFusesStatusDefinition => 'PowerNet-MIB::dm3StatusFusesStatus',
  automaticTransferSwitch => '1.3.6.1.4.1.318.1.1.8',
  atsIdent => '1.3.6.1.4.1.318.1.1.8.1',
  atsIdentHardwareRev => '1.3.6.1.4.1.318.1.1.8.1.1',
  atsIdentFirmwareRev => '1.3.6.1.4.1.318.1.1.8.1.2',
  atsIdentFirmwareDate => '1.3.6.1.4.1.318.1.1.8.1.3',
  atsIdentDateOfManufacture => '1.3.6.1.4.1.318.1.1.8.1.4',
  atsIdentModelNumber => '1.3.6.1.4.1.318.1.1.8.1.5',
  atsIdentSerialNumber => '1.3.6.1.4.1.318.1.1.8.1.6',
  atsIdentNominalLineVoltage => '1.3.6.1.4.1.318.1.1.8.1.7',
  atsIdentNominalLineFrequency => '1.3.6.1.4.1.318.1.1.8.1.8',
  atsIdentDeviceRating => '1.3.6.1.4.1.318.1.1.8.1.9',
  atsCalibration => '1.3.6.1.4.1.318.1.1.8.2',
  atsCalibrationInput => '1.3.6.1.4.1.318.1.1.8.2.1',
  atsCalibrationNumInputs => '1.3.6.1.4.1.318.1.1.8.2.1.1',
  atsCalibrationNumInputPhases => '1.3.6.1.4.1.318.1.1.8.2.1.2',
  atsCalibrationInputPhaseTable => '1.3.6.1.4.1.318.1.1.8.2.1.3',
  atsCalibrationInputPhaseEntry => '1.3.6.1.4.1.318.1.1.8.2.1.3.1',
  atsCalibrationInputTableIndex => '1.3.6.1.4.1.318.1.1.8.2.1.3.1.1',
  atsCalibrationInputPhaseTableIndex => '1.3.6.1.4.1.318.1.1.8.2.1.3.1.2',
  atsLineVoltageCalibrationFactor => '1.3.6.1.4.1.318.1.1.8.2.1.3.1.3',
  atsCalibrationPowerSupply => '1.3.6.1.4.1.318.1.1.8.2.2',
  atsCalibrationPowerSupplyVoltages => '1.3.6.1.4.1.318.1.1.8.2.2.1',
  atsCalibrationPowerSupplyVoltageTable => '1.3.6.1.4.1.318.1.1.8.2.2.2',
  atsCalibrationPowerSupplyVoltageEntry => '1.3.6.1.4.1.318.1.1.8.2.2.2.1',
  atsCalibrationPowerSupplyVoltageTableIndex => '1.3.6.1.4.1.318.1.1.8.2.2.2.1.1',
  atsCalibrationPowerSupplyVoltage => '1.3.6.1.4.1.318.1.1.8.2.2.2.1.2',
  atsCalibrationPowerSupplyVoltageDefinition => 'PowerNet-MIB::atsCalibrationPowerSupplyVoltage',
  atsPowerSupplyVoltageCalibrationFactor => '1.3.6.1.4.1.318.1.1.8.2.2.2.1.3',
  atsCalibrationOutput => '1.3.6.1.4.1.318.1.1.8.2.3',
  atsCalibrationNumOutputs => '1.3.6.1.4.1.318.1.1.8.2.3.1',
  atsCalibrationNumOutputPhases => '1.3.6.1.4.1.318.1.1.8.2.3.2',
  atsCalibrationOutputTable => '1.3.6.1.4.1.318.1.1.8.2.3.3',
  atsCalibrationOutputEntry => '1.3.6.1.4.1.318.1.1.8.2.3.3.1',
  atsCalibrationOutputTableIndex => '1.3.6.1.4.1.318.1.1.8.2.3.3.1.1',
  atsCalibrationOutputPhasesTableIndex => '1.3.6.1.4.1.318.1.1.8.2.3.3.1.2',
  atsCalibrationOutputPhasesTableIndexDefinition => 'PowerNet-MIB::atsCalibrationOutputPhasesTableIndex',
  atsOutputCurrentCalibrationFactor => '1.3.6.1.4.1.318.1.1.8.2.3.3.1.3',
  atsControl => '1.3.6.1.4.1.318.1.1.8.3',
  atsControlResetATS => '1.3.6.1.4.1.318.1.1.8.3.1',
  atsControlResetATSDefinition => 'PowerNet-MIB::atsControlResetATS',
  atsControlClearAllAlarms => '1.3.6.1.4.1.318.1.1.8.3.2',
  atsControlClearAllAlarmsDefinition => 'PowerNet-MIB::atsControlClearAllAlarms',
  atsConfig => '1.3.6.1.4.1.318.1.1.8.4',
  atsConfigProductName => '1.3.6.1.4.1.318.1.1.8.4.1',
  atsConfigPreferredSource => '1.3.6.1.4.1.318.1.1.8.4.2',
  atsConfigPreferredSourceDefinition => 'PowerNet-MIB::atsConfigPreferredSource',
  atsConfigFrontPanelLockout => '1.3.6.1.4.1.318.1.1.8.4.3',
  atsConfigFrontPanelLockoutDefinition => 'PowerNet-MIB::atsConfigFrontPanelLockout',
  atsConfigVoltageSensitivity => '1.3.6.1.4.1.318.1.1.8.4.4',
  atsConfigVoltageSensitivityDefinition => 'PowerNet-MIB::atsConfigVoltageSensitivity',
  atsConfigTransferVoltageRange => '1.3.6.1.4.1.318.1.1.8.4.5',
  atsConfigTransferVoltageRangeDefinition => 'PowerNet-MIB::atsConfigTransferVoltageRange',
  atsConfigCurrentLimit => '1.3.6.1.4.1.318.1.1.8.4.6',
  atsConfigResetValues => '1.3.6.1.4.1.318.1.1.8.4.7',
  atsConfigResetValuesDefinition => 'PowerNet-MIB::atsConfigResetValues',
  atsConfigLineVRMS => '1.3.6.1.4.1.318.1.1.8.4.8',
  atsConfigLineVRMSNarrowLimit => '1.3.6.1.4.1.318.1.1.8.4.9',
  atsConfigLineVRMSMediumLimit => '1.3.6.1.4.1.318.1.1.8.4.10',
  atsConfigLineVRMSWideLimit => '1.3.6.1.4.1.318.1.1.8.4.11',
  atsConfigFrequencyDeviation => '1.3.6.1.4.1.318.1.1.8.4.12',
  atsConfigFrequencyDeviationDefinition => 'PowerNet-MIB::atsConfigFrequencyDeviation',
  atsConfigBankTableSize => '1.3.6.1.4.1.318.1.1.8.4.13',
  atsConfigBankTable => '1.3.6.1.4.1.318.1.1.8.4.14',
  atsConfigBankEntry => '1.3.6.1.4.1.318.1.1.8.4.14.1',
  atsConfigBankTableIndex => '1.3.6.1.4.1.318.1.1.8.4.14.1.1',
  atsConfigBank => '1.3.6.1.4.1.318.1.1.8.4.14.1.2',
  atsConfigBankDefinition => 'PowerNet-MIB::atsConfigBank',
  atsConfigBankLowLoadThreshold => '1.3.6.1.4.1.318.1.1.8.4.14.1.3',
  atsConfigBankNearOverLoadThreshold => '1.3.6.1.4.1.318.1.1.8.4.14.1.4',
  atsConfigBankOverLoadThreshold => '1.3.6.1.4.1.318.1.1.8.4.14.1.5',
  atsConfigPhaseTableSize => '1.3.6.1.4.1.318.1.1.8.4.15',
  atsConfigPhaseTable => '1.3.6.1.4.1.318.1.1.8.4.16',
  atsConfigPhaseEntry => '1.3.6.1.4.1.318.1.1.8.4.16.1',
  atsConfigPhaseTableIndex => '1.3.6.1.4.1.318.1.1.8.4.16.1.1',
  atsConfigPhase => '1.3.6.1.4.1.318.1.1.8.4.16.1.2',
  atsConfigPhaseDefinition => 'PowerNet-MIB::atsConfigPhase',
  atsConfigPhaseLowLoadThreshold => '1.3.6.1.4.1.318.1.1.8.4.16.1.3',
  atsConfigPhaseNearOverLoadThreshold => '1.3.6.1.4.1.318.1.1.8.4.16.1.4',
  atsConfigPhaseOverLoadThreshold => '1.3.6.1.4.1.318.1.1.8.4.16.1.5',
  atsStatus => '1.3.6.1.4.1.318.1.1.8.5',
  atsStatusDeviceStatus => '1.3.6.1.4.1.318.1.1.8.5.1',
  atsStatusCommStatus => '1.3.6.1.4.1.318.1.1.8.5.1.1',
  atsStatusCommStatusDefinition => 'PowerNet-MIB::atsStatusCommStatus',
  atsStatusSelectedSource => '1.3.6.1.4.1.318.1.1.8.5.1.2',
  atsStatusSelectedSourceDefinition => 'PowerNet-MIB::atsStatusSelectedSource',
  atsStatusRedundancyState => '1.3.6.1.4.1.318.1.1.8.5.1.3',
  atsStatusRedundancyStateDefinition => 'PowerNet-MIB::atsStatusRedundancyState',
  atsStatusOverCurrentState => '1.3.6.1.4.1.318.1.1.8.5.1.4',
  atsStatusOverCurrentStateDefinition => 'PowerNet-MIB::atsStatusOverCurrentState',
  atsStatus5VPowerSupply => '1.3.6.1.4.1.318.1.1.8.5.1.5',
  atsStatus5VPowerSupplyDefinition => 'PowerNet-MIB::atsStatus5VPowerSupply',
  atsStatus24VPowerSupply => '1.3.6.1.4.1.318.1.1.8.5.1.6',
  atsStatus24VPowerSupplyDefinition => 'PowerNet-MIB::atsStatus24VPowerSupply',
  atsStatus24VSourceBPowerSupply => '1.3.6.1.4.1.318.1.1.8.5.1.7',
  atsStatus24VSourceBPowerSupplyDefinition => 'PowerNet-MIB::atsStatus24VSourceBPowerSupply',
  atsStatusPlus12VPowerSupply => '1.3.6.1.4.1.318.1.1.8.5.1.8',
  atsStatusPlus12VPowerSupplyDefinition => 'PowerNet-MIB::atsStatusPlus12VPowerSupply',
  atsStatusMinus12VPowerSupply => '1.3.6.1.4.1.318.1.1.8.5.1.9',
  atsStatusMinus12VPowerSupplyDefinition => 'PowerNet-MIB::atsStatusMinus12VPowerSupply',
  atsStatusSwitchStatus => '1.3.6.1.4.1.318.1.1.8.5.1.10',
  atsStatusSwitchStatusDefinition => 'PowerNet-MIB::atsStatusSwitchStatus',
  atsStatusFrontPanel => '1.3.6.1.4.1.318.1.1.8.5.1.11',
  atsStatusFrontPanelDefinition => 'PowerNet-MIB::atsStatusFrontPanel',
  atsStatusSourceAStatus => '1.3.6.1.4.1.318.1.1.8.5.1.12',
  atsStatusSourceAStatusDefinition => 'PowerNet-MIB::atsStatusSourceAStatus',
  atsStatusSourceBStatus => '1.3.6.1.4.1.318.1.1.8.5.1.13',
  atsStatusSourceBStatusDefinition => 'PowerNet-MIB::atsStatusSourceBStatus',
  atsStatusPhaseSyncStatus => '1.3.6.1.4.1.318.1.1.8.5.1.14',
  atsStatusPhaseSyncStatusDefinition => 'PowerNet-MIB::atsStatusPhaseSyncStatus',
  atsStatusVoltageOutStatus => '1.3.6.1.4.1.318.1.1.8.5.1.15',
  atsStatusVoltageOutStatusDefinition => 'PowerNet-MIB::atsStatusVoltageOutStatus',
  atsStatusHardwareStatus => '1.3.6.1.4.1.318.1.1.8.5.1.16',
  atsStatusHardwareStatusDefinition => 'PowerNet-MIB::atsStatusHardwareStatus',
  atsStatusResetValues => '1.3.6.1.4.1.318.1.1.8.5.2',
  atsStatusResetMaxMinValues => '1.3.6.1.4.1.318.1.1.8.5.2.1',
  atsStatusResetMaxMinValuesDefinition => 'PowerNet-MIB::atsStatusResetMaxMinValues',
  atsStatusInput => '1.3.6.1.4.1.318.1.1.8.5.3',
  atsNumInputs => '1.3.6.1.4.1.318.1.1.8.5.3.1',
  atsInputTable => '1.3.6.1.4.1.318.1.1.8.5.3.2',
  atsInputEntry => '1.3.6.1.4.1.318.1.1.8.5.3.2.1',
  atsInputTableIndex => '1.3.6.1.4.1.318.1.1.8.5.3.2.1.1',
  atsNumInputPhases => '1.3.6.1.4.1.318.1.1.8.5.3.2.1.2',
  atsInputVoltageOrientation => '1.3.6.1.4.1.318.1.1.8.5.3.2.1.3',
  atsInputVoltageOrientationDefinition => 'PowerNet-MIB::atsInputVoltageOrientation',
  atsInputFrequency => '1.3.6.1.4.1.318.1.1.8.5.3.2.1.4',
  atsInputType => '1.3.6.1.4.1.318.1.1.8.5.3.2.1.5',
  atsInputTypeDefinition => 'PowerNet-MIB::atsInputType',
  atsInputName => '1.3.6.1.4.1.318.1.1.8.5.3.2.1.6',
  atsInputPhaseTable => '1.3.6.1.4.1.318.1.1.8.5.3.3',
  atsInputPhaseEntry => '1.3.6.1.4.1.318.1.1.8.5.3.3.1',
  atsInputPhaseTableIndex => '1.3.6.1.4.1.318.1.1.8.5.3.3.1.1',
  atsInputPhaseIndex => '1.3.6.1.4.1.318.1.1.8.5.3.3.1.2',
  atsInputVoltage => '1.3.6.1.4.1.318.1.1.8.5.3.3.1.3',
  atsInputMaxVoltage => '1.3.6.1.4.1.318.1.1.8.5.3.3.1.4',
  atsInputMinVoltage => '1.3.6.1.4.1.318.1.1.8.5.3.3.1.5',
  atsInputCurrent => '1.3.6.1.4.1.318.1.1.8.5.3.3.1.6',
  atsInputMaxCurrent => '1.3.6.1.4.1.318.1.1.8.5.3.3.1.7',
  atsInputMinCurrent => '1.3.6.1.4.1.318.1.1.8.5.3.3.1.8',
  atsInputPower => '1.3.6.1.4.1.318.1.1.8.5.3.3.1.9',
  atsInputMaxPower => '1.3.6.1.4.1.318.1.1.8.5.3.3.1.10',
  atsInputMinPower => '1.3.6.1.4.1.318.1.1.8.5.3.3.1.11',
  atsStatusOutput => '1.3.6.1.4.1.318.1.1.8.5.4',
  atsNumOutputs => '1.3.6.1.4.1.318.1.1.8.5.4.1',
  atsOutputTable => '1.3.6.1.4.1.318.1.1.8.5.4.2',
  atsOutputEntry => '1.3.6.1.4.1.318.1.1.8.5.4.2.1',
  atsOutputTableIndex => '1.3.6.1.4.1.318.1.1.8.5.4.2.1.1',
  atsNumOutputPhases => '1.3.6.1.4.1.318.1.1.8.5.4.2.1.2',
  atsOutputVoltageOrientation => '1.3.6.1.4.1.318.1.1.8.5.4.2.1.3',
  atsOutputVoltageOrientationDefinition => 'PowerNet-MIB::atsOutputVoltageOrientation',
  atsOutputFrequency => '1.3.6.1.4.1.318.1.1.8.5.4.2.1.4',
  atsOutputPhaseTable => '1.3.6.1.4.1.318.1.1.8.5.4.3',
  atsOutputPhaseEntry => '1.3.6.1.4.1.318.1.1.8.5.4.3.1',
  atsOutputPhaseTableIndex => '1.3.6.1.4.1.318.1.1.8.5.4.3.1.1',
  atsOutputPhaseIndex => '1.3.6.1.4.1.318.1.1.8.5.4.3.1.2',
  atsOutputPhaseIndexDefinition => 'PowerNet-MIB::atsOutputPhaseIndex',
  atsOutputVoltage => '1.3.6.1.4.1.318.1.1.8.5.4.3.1.3',
  atsOutputCurrent => '1.3.6.1.4.1.318.1.1.8.5.4.3.1.4',
  atsOutputMaxCurrent => '1.3.6.1.4.1.318.1.1.8.5.4.3.1.5',
  atsOutputMinCurrent => '1.3.6.1.4.1.318.1.1.8.5.4.3.1.6',
  atsOutputLoad => '1.3.6.1.4.1.318.1.1.8.5.4.3.1.7',
  atsOutputMaxLoad => '1.3.6.1.4.1.318.1.1.8.5.4.3.1.8',
  atsOutputMinLoad => '1.3.6.1.4.1.318.1.1.8.5.4.3.1.9',
  atsOutputPercentLoad => '1.3.6.1.4.1.318.1.1.8.5.4.3.1.10',
  atsOutputMaxPercentLoad => '1.3.6.1.4.1.318.1.1.8.5.4.3.1.11',
  atsOutputMinPercentLoad => '1.3.6.1.4.1.318.1.1.8.5.4.3.1.12',
  atsOutputPower => '1.3.6.1.4.1.318.1.1.8.5.4.3.1.13',
  atsOutputMaxPower => '1.3.6.1.4.1.318.1.1.8.5.4.3.1.14',
  atsOutputMinPower => '1.3.6.1.4.1.318.1.1.8.5.4.3.1.15',
  atsOutputPercentPower => '1.3.6.1.4.1.318.1.1.8.5.4.3.1.16',
  atsOutputMaxPercentPower => '1.3.6.1.4.1.318.1.1.8.5.4.3.1.17',
  atsOutputMinPercentPower => '1.3.6.1.4.1.318.1.1.8.5.4.3.1.18',
  atsOutputPhaseState => '1.3.6.1.4.1.318.1.1.8.5.4.3.1.19',
  atsOutputPhaseStateDefinition => 'PowerNet-MIB::atsOutputPhaseState',
  atsOutputBankTableSize => '1.3.6.1.4.1.318.1.1.8.5.4.4',
  atsOutputBankTable => '1.3.6.1.4.1.318.1.1.8.5.4.5',
  atsOutputBankEntry => '1.3.6.1.4.1.318.1.1.8.5.4.5.1',
  atsOutputBankTableIndex => '1.3.6.1.4.1.318.1.1.8.5.4.5.1.1',
  atsOutputPhase => '1.3.6.1.4.1.318.1.1.8.5.4.5.1.2',
  atsOutputPhaseDefinition => 'PowerNet-MIB::atsOutputPhase',
  atsOutputBank => '1.3.6.1.4.1.318.1.1.8.5.4.5.1.3',
  atsOutputBankDefinition => 'PowerNet-MIB::atsOutputBank',
  atsOutputBankCurrent => '1.3.6.1.4.1.318.1.1.8.5.4.5.1.4',
  atsOutputBankState => '1.3.6.1.4.1.318.1.1.8.5.4.5.1.5',
  atsOutputBankStateDefinition => 'PowerNet-MIB::atsOutputBankState',
  atsOutputBankOutputVoltage => '1.3.6.1.4.1.318.1.1.8.5.4.5.1.6',
  atsOutputBankMaxCurrent => '1.3.6.1.4.1.318.1.1.8.5.4.5.1.7',
  atsOutputBankMinCurrent => '1.3.6.1.4.1.318.1.1.8.5.4.5.1.8',
  atsOutputBankLoad => '1.3.6.1.4.1.318.1.1.8.5.4.5.1.9',
  atsOutputBankMaxLoad => '1.3.6.1.4.1.318.1.1.8.5.4.5.1.10',
  atsOutputBankMinLoad => '1.3.6.1.4.1.318.1.1.8.5.4.5.1.11',
  atsOutputBankPercentLoad => '1.3.6.1.4.1.318.1.1.8.5.4.5.1.12',
  atsOutputBankMaxPercentLoad => '1.3.6.1.4.1.318.1.1.8.5.4.5.1.13',
  atsOutputBankMinPercentLoad => '1.3.6.1.4.1.318.1.1.8.5.4.5.1.14',
  atsOutputBankPower => '1.3.6.1.4.1.318.1.1.8.5.4.5.1.15',
  atsOutputBankMaxPower => '1.3.6.1.4.1.318.1.1.8.5.4.5.1.16',
  atsOutputBankMinPower => '1.3.6.1.4.1.318.1.1.8.5.4.5.1.17',
  atsOutputBankPercentPower => '1.3.6.1.4.1.318.1.1.8.5.4.5.1.18',
  atsOutputBankMaxPercentPower => '1.3.6.1.4.1.318.1.1.8.5.4.5.1.19',
  atsOutputBankMinPercentPower => '1.3.6.1.4.1.318.1.1.8.5.4.5.1.20',
  dc2 => '1.3.6.1.4.1.318.1.1.9',
  dcmim2Ident => '1.3.6.1.4.1.318.1.1.9.1',
  dcmim2IdentSystem => '1.3.6.1.4.1.318.1.1.9.1.1',
  dcmim2IdentSysFWVersion => '1.3.6.1.4.1.318.1.1.9.1.1.1',
  dcmim2Control => '1.3.6.1.4.1.318.1.1.9.2',
  dcmim2ControlSystem => '1.3.6.1.4.1.318.1.1.9.2.1',
  dcmim2ControlRunFunctBatteryTest => '1.3.6.1.4.1.318.1.1.9.2.1.1',
  dcmim2ControlRunFunctBatteryTestDefinition => 'PowerNet-MIB::dcmim2ControlRunFunctBatteryTest',
  dcmim2ControlRunCapacityBatteryTest => '1.3.6.1.4.1.318.1.1.9.2.1.2',
  dcmim2ControlRunCapacityBatteryTestDefinition => 'PowerNet-MIB::dcmim2ControlRunCapacityBatteryTest',
  dcmim2Config => '1.3.6.1.4.1.318.1.1.9.3',
  dcmim2ConfigSystem => '1.3.6.1.4.1.318.1.1.9.3.1',
  dcmim2ConfigSysHighTempTrip => '1.3.6.1.4.1.318.1.1.9.3.1.1',
  dcmim2ConfigSysHighTempReset => '1.3.6.1.4.1.318.1.1.9.3.1.2',
  dcmim2ConfigSysLowTempTrip => '1.3.6.1.4.1.318.1.1.9.3.1.3',
  dcmim2ConfigSysLowTempReset => '1.3.6.1.4.1.318.1.1.9.3.1.4',
  dcmim2ConfigBattery => '1.3.6.1.4.1.318.1.1.9.3.2',
  dcmim2ConfigBattFloatVolt => '1.3.6.1.4.1.318.1.1.9.3.2.1',
  dcmim2ConfigBattMaxRecharge => '1.3.6.1.4.1.318.1.1.9.3.2.2',
  dcmim2ConfigBattMfgCapacity => '1.3.6.1.4.1.318.1.1.9.3.2.3',
  dcmim2ConfigBattType => '1.3.6.1.4.1.318.1.1.9.3.2.4',
  dcmim2ConfigBattFunctTestDuration => '1.3.6.1.4.1.318.1.1.9.3.2.5',
  dcmim2ConfigBattFunctTestThresh => '1.3.6.1.4.1.318.1.1.9.3.2.6',
  dcmim2ConfigBattCapacityTestPercent => '1.3.6.1.4.1.318.1.1.9.3.2.7',
  dcmim2ConfigBattCapacityTestEndThresh => '1.3.6.1.4.1.318.1.1.9.3.2.8',
  dcmim2ConfigBattCapacityTestCurrent => '1.3.6.1.4.1.318.1.1.9.3.2.9',
  dcmim2ConfigLVD => '1.3.6.1.4.1.318.1.1.9.3.3',
  dcmim2ConfigLVDTableSize => '1.3.6.1.4.1.318.1.1.9.3.3.1',
  dcmim2ConfigLVDTable => '1.3.6.1.4.1.318.1.1.9.3.3.2',
  dcmim2ConfigLVDEntry => '1.3.6.1.4.1.318.1.1.9.3.3.2.1',
  dcmim2ConfigLVDIndex => '1.3.6.1.4.1.318.1.1.9.3.3.2.1.1',
  dcmim2ConfigLVDTrip => '1.3.6.1.4.1.318.1.1.9.3.3.2.1.2',
  dcmim2ConfigLVDReset => '1.3.6.1.4.1.318.1.1.9.3.3.2.1.3',
  dcmim2ConfigLVDState => '1.3.6.1.4.1.318.1.1.9.3.3.2.1.4',
  dcmim2ConfigLVDStateDefinition => 'PowerNet-MIB::dcmim2ConfigLVDState',
  dcmim2Status => '1.3.6.1.4.1.318.1.1.9.4',
  dcmim2StatusSystem => '1.3.6.1.4.1.318.1.1.9.4.1',
  dcmim2StatusSysRectCurrent => '1.3.6.1.4.1.318.1.1.9.4.1.1',
  dcmim2StatusSysLoadCurrent => '1.3.6.1.4.1.318.1.1.9.4.1.2',
  dcmim2StatusSysBusVoltage => '1.3.6.1.4.1.318.1.1.9.4.1.3',
  dcmim2StatusSysAmbientTemp => '1.3.6.1.4.1.318.1.1.9.4.1.4',
  dcmim2StatusSysUpTime => '1.3.6.1.4.1.318.1.1.9.4.1.5',
  dcmim2StatusSysTempUnits => '1.3.6.1.4.1.318.1.1.9.4.1.6',
  dcmim2StatusSysTempUnitsDefinition => 'PowerNet-MIB::dcmim2StatusSysTempUnits',
  dcmim2StatusRectifier => '1.3.6.1.4.1.318.1.1.9.4.2',
  dcmim2StatusRectTableSize => '1.3.6.1.4.1.318.1.1.9.4.2.1',
  dcmim2StatusRectTable => '1.3.6.1.4.1.318.1.1.9.4.2.2',
  dcmim2StatusRectEntry => '1.3.6.1.4.1.318.1.1.9.4.2.2.1',
  dcmim2StatusRectIndex => '1.3.6.1.4.1.318.1.1.9.4.2.2.1.1',
  dcmim2StatusRectDevType => '1.3.6.1.4.1.318.1.1.9.4.2.2.1.2',
  dcmim2StatusRectID => '1.3.6.1.4.1.318.1.1.9.4.2.2.1.3',
  dcmim2StatusRectPhyAddr => '1.3.6.1.4.1.318.1.1.9.4.2.2.1.4',
  dcmim2StatusRectFail => '1.3.6.1.4.1.318.1.1.9.4.2.2.1.5',
  dcmim2StatusRectFailDefinition => 'PowerNet-MIB::dcmim2StatusRectFail',
  dcmim2StatusRectCurrent => '1.3.6.1.4.1.318.1.1.9.4.2.2.1.6',
  dcmim2StatusBattery => '1.3.6.1.4.1.318.1.1.9.4.3',
  dcmim2StatusBattFloatVolt => '1.3.6.1.4.1.318.1.1.9.4.3.1',
  dcmim2StatusBattCurrent => '1.3.6.1.4.1.318.1.1.9.4.3.2',
  dcmim2StatusBattTemp => '1.3.6.1.4.1.318.1.1.9.4.3.3',
  dcmim2StatusBattMfgCapacity => '1.3.6.1.4.1.318.1.1.9.4.3.4',
  dcmim2StatusBattTestCapacity => '1.3.6.1.4.1.318.1.1.9.4.3.5',
  dcmim2StatusBattFunctTestResult => '1.3.6.1.4.1.318.1.1.9.4.3.6',
  dcmim2StatusBattFunctTestResultDefinition => 'PowerNet-MIB::dcmim2StatusBattFunctTestResult',
  dcmim2StatusBattCapacityTestResult => '1.3.6.1.4.1.318.1.1.9.4.3.7',
  dcmim2StatusBattCapacityTestResultDefinition => 'PowerNet-MIB::dcmim2StatusBattCapacityTestResult',
  dcmim2StatusLVD => '1.3.6.1.4.1.318.1.1.9.4.4',
  dcmim2StatusLVDTableSize => '1.3.6.1.4.1.318.1.1.9.4.4.1',
  dcmim2StatusLVDTable => '1.3.6.1.4.1.318.1.1.9.4.4.2',
  dcmim2StatusLVDEntry => '1.3.6.1.4.1.318.1.1.9.4.4.2.1',
  dcmim2StatusLVDIndex => '1.3.6.1.4.1.318.1.1.9.4.4.2.1.1',
  dcmim2StatusLVDState => '1.3.6.1.4.1.318.1.1.9.4.4.2.1.2',
  dcmim2StatusLVDStateDefinition => 'PowerNet-MIB::dcmim2StatusLVDState',
  dcmim2StatusAlarms => '1.3.6.1.4.1.318.1.1.9.4.5',
  dcmim2StatusAlarmsTableSize => '1.3.6.1.4.1.318.1.1.9.4.5.1',
  dcmim2StatusAlarmsTable => '1.3.6.1.4.1.318.1.1.9.4.5.2',
  dcmim2StatusAlarmsEntry => '1.3.6.1.4.1.318.1.1.9.4.5.2.1',
  dcmim2StatusAlarmsIndex => '1.3.6.1.4.1.318.1.1.9.4.5.2.1.1',
  dcmim2StatusAlarmsText => '1.3.6.1.4.1.318.1.1.9.4.5.2.1.2',
  environmentalMonitor => '1.3.6.1.4.1.318.1.1.10',
  external => '1.3.6.1.4.1.318.1.1.10.1',
  emIdent => '1.3.6.1.4.1.318.1.1.10.1.1',
  emIdentFirmwareRevision => '1.3.6.1.4.1.318.1.1.10.1.1.1',
  emConfig => '1.3.6.1.4.1.318.1.1.10.1.2',
  emConfigProbesNumProbes => '1.3.6.1.4.1.318.1.1.10.1.2.1',
  emConfigProbesTable => '1.3.6.1.4.1.318.1.1.10.1.2.2',
  emConfigProbesEntry => '1.3.6.1.4.1.318.1.1.10.1.2.2.1',
  emConfigProbeNumber => '1.3.6.1.4.1.318.1.1.10.1.2.2.1.1',
  emConfigProbeName => '1.3.6.1.4.1.318.1.1.10.1.2.2.1.2',
  emConfigProbeHighTempThreshold => '1.3.6.1.4.1.318.1.1.10.1.2.2.1.3',
  emConfigProbeLowTempThreshold => '1.3.6.1.4.1.318.1.1.10.1.2.2.1.4',
  emConfigProbeTempUnits => '1.3.6.1.4.1.318.1.1.10.1.2.2.1.5',
  emConfigProbeTempUnitsDefinition => 'PowerNet-MIB::emConfigProbeTempUnits',
  emConfigProbeHighHumidThreshold => '1.3.6.1.4.1.318.1.1.10.1.2.2.1.6',
  emConfigProbeLowHumidThreshold => '1.3.6.1.4.1.318.1.1.10.1.2.2.1.7',
  emConfigProbeHighTempEnable => '1.3.6.1.4.1.318.1.1.10.1.2.2.1.8',
  emConfigProbeHighTempEnableDefinition => 'PowerNet-MIB::emConfigProbeHighTempEnable',
  emConfigProbeLowTempEnable => '1.3.6.1.4.1.318.1.1.10.1.2.2.1.9',
  emConfigProbeLowTempEnableDefinition => 'PowerNet-MIB::emConfigProbeLowTempEnable',
  emConfigProbeHighHumidEnable => '1.3.6.1.4.1.318.1.1.10.1.2.2.1.10',
  emConfigProbeHighHumidEnableDefinition => 'PowerNet-MIB::emConfigProbeHighHumidEnable',
  emConfigProbeLowHumidEnable => '1.3.6.1.4.1.318.1.1.10.1.2.2.1.11',
  emConfigProbeLowHumidEnableDefinition => 'PowerNet-MIB::emConfigProbeLowHumidEnable',
  emConfigProbeMaxTempThreshold => '1.3.6.1.4.1.318.1.1.10.1.2.2.1.12',
  emConfigProbeMinTempThreshold => '1.3.6.1.4.1.318.1.1.10.1.2.2.1.13',
  emConfigProbeMaxHumidThreshold => '1.3.6.1.4.1.318.1.1.10.1.2.2.1.14',
  emConfigProbeMinHumidThreshold => '1.3.6.1.4.1.318.1.1.10.1.2.2.1.15',
  emConfigProbeMaxTempEnable => '1.3.6.1.4.1.318.1.1.10.1.2.2.1.16',
  emConfigProbeMaxTempEnableDefinition => 'PowerNet-MIB::emConfigProbeMaxTempEnable',
  emConfigProbeMinTempEnable => '1.3.6.1.4.1.318.1.1.10.1.2.2.1.17',
  emConfigProbeMinTempEnableDefinition => 'PowerNet-MIB::emConfigProbeMinTempEnable',
  emConfigProbeMaxHumidEnable => '1.3.6.1.4.1.318.1.1.10.1.2.2.1.18',
  emConfigProbeMaxHumidEnableDefinition => 'PowerNet-MIB::emConfigProbeMaxHumidEnable',
  emConfigProbeMinHumidEnable => '1.3.6.1.4.1.318.1.1.10.1.2.2.1.19',
  emConfigProbeMinHumidEnableDefinition => 'PowerNet-MIB::emConfigProbeMinHumidEnable',
  emConfigProbeTempHysteresis => '1.3.6.1.4.1.318.1.1.10.1.2.2.1.20',
  emConfigProbeHumidHysteresis => '1.3.6.1.4.1.318.1.1.10.1.2.2.1.21',
  emConfigProbeLocation => '1.3.6.1.4.1.318.1.1.10.1.2.2.1.22',
  emConfigContactsNumContacts => '1.3.6.1.4.1.318.1.1.10.1.2.3',
  emConfigContactsTable => '1.3.6.1.4.1.318.1.1.10.1.2.4',
  emConfigContactsEntry => '1.3.6.1.4.1.318.1.1.10.1.2.4.1',
  emConfigContactNumber => '1.3.6.1.4.1.318.1.1.10.1.2.4.1.1',
  emConfigContactName => '1.3.6.1.4.1.318.1.1.10.1.2.4.1.2',
  emConfigContactEnable => '1.3.6.1.4.1.318.1.1.10.1.2.4.1.3',
  emConfigContactEnableDefinition => 'PowerNet-MIB::emConfigContactEnable',
  emConfigContactSeverity => '1.3.6.1.4.1.318.1.1.10.1.2.4.1.4',
  emConfigContactSeverityDefinition => 'PowerNet-MIB::emConfigContactSeverity',
  emConfigContactNormalState => '1.3.6.1.4.1.318.1.1.10.1.2.4.1.5',
  emConfigContactNormalStateDefinition => 'PowerNet-MIB::emConfigContactNormalState',
  emConfigContactLocation => '1.3.6.1.4.1.318.1.1.10.1.2.4.1.6',
  emStatus => '1.3.6.1.4.1.318.1.1.10.1.3',
  emStatusCommStatus => '1.3.6.1.4.1.318.1.1.10.1.3.1',
  emStatusCommStatusDefinition => 'PowerNet-MIB::emStatusCommStatus',
  emStatusProbesNumProbes => '1.3.6.1.4.1.318.1.1.10.1.3.2',
  emStatusProbesTable => '1.3.6.1.4.1.318.1.1.10.1.3.3',
  emStatusProbesEntry => '1.3.6.1.4.1.318.1.1.10.1.3.3.1',
  emStatusProbeNumber => '1.3.6.1.4.1.318.1.1.10.1.3.3.1.1',
  emStatusProbeName => '1.3.6.1.4.1.318.1.1.10.1.3.3.1.2',
  emStatusProbeStatus => '1.3.6.1.4.1.318.1.1.10.1.3.3.1.3',
  emStatusProbeStatusDefinition => 'PowerNet-MIB::emStatusProbeStatus',
  emStatusProbeCurrentTemp => '1.3.6.1.4.1.318.1.1.10.1.3.3.1.4',
  emStatusProbeTempUnits => '1.3.6.1.4.1.318.1.1.10.1.3.3.1.5',
  emStatusProbeTempUnitsDefinition => 'PowerNet-MIB::emStatusProbeTempUnits',
  emStatusProbeCurrentHumid => '1.3.6.1.4.1.318.1.1.10.1.3.3.1.6',
  emStatusProbeHighTempViolation => '1.3.6.1.4.1.318.1.1.10.1.3.3.1.7',
  emStatusProbeHighTempViolationDefinition => 'PowerNet-MIB::emStatusProbeHighTempViolation',
  emStatusProbeLowTempViolation => '1.3.6.1.4.1.318.1.1.10.1.3.3.1.8',
  emStatusProbeLowTempViolationDefinition => 'PowerNet-MIB::emStatusProbeLowTempViolation',
  emStatusProbeHighHumidViolation => '1.3.6.1.4.1.318.1.1.10.1.3.3.1.9',
  emStatusProbeHighHumidViolationDefinition => 'PowerNet-MIB::emStatusProbeHighHumidViolation',
  emStatusProbeLowHumidViolation => '1.3.6.1.4.1.318.1.1.10.1.3.3.1.10',
  emStatusProbeLowHumidViolationDefinition => 'PowerNet-MIB::emStatusProbeLowHumidViolation',
  emStatusProbeMaxTempViolation => '1.3.6.1.4.1.318.1.1.10.1.3.3.1.11',
  emStatusProbeMaxTempViolationDefinition => 'PowerNet-MIB::emStatusProbeMaxTempViolation',
  emStatusProbeMinTempViolation => '1.3.6.1.4.1.318.1.1.10.1.3.3.1.12',
  emStatusProbeMinTempViolationDefinition => 'PowerNet-MIB::emStatusProbeMinTempViolation',
  emStatusProbeMaxHumidViolation => '1.3.6.1.4.1.318.1.1.10.1.3.3.1.13',
  emStatusProbeMaxHumidViolationDefinition => 'PowerNet-MIB::emStatusProbeMaxHumidViolation',
  emStatusProbeMinHumidViolation => '1.3.6.1.4.1.318.1.1.10.1.3.3.1.14',
  emStatusProbeMinHumidViolationDefinition => 'PowerNet-MIB::emStatusProbeMinHumidViolation',
  emStatusContactsNumContacts => '1.3.6.1.4.1.318.1.1.10.1.3.4',
  emStatusContactsTable => '1.3.6.1.4.1.318.1.1.10.1.3.5',
  emStatusContactsEntry => '1.3.6.1.4.1.318.1.1.10.1.3.5.1',
  emStatusContactNumber => '1.3.6.1.4.1.318.1.1.10.1.3.5.1.1',
  emStatusContactName => '1.3.6.1.4.1.318.1.1.10.1.3.5.1.2',
  emStatusContactStatus => '1.3.6.1.4.1.318.1.1.10.1.3.5.1.3',
  emStatusContactStatusDefinition => 'PowerNet-MIB::emStatusContactStatus',
  integrated => '1.3.6.1.4.1.318.1.1.10.2',
  iemIdent => '1.3.6.1.4.1.318.1.1.10.2.1',
  iemIdentHardwareRevision => '1.3.6.1.4.1.318.1.1.10.2.1.1',
  iemConfig => '1.3.6.1.4.1.318.1.1.10.2.2',
  iemConfigProbesNumProbes => '1.3.6.1.4.1.318.1.1.10.2.2.1',
  iemConfigProbesTable => '1.3.6.1.4.1.318.1.1.10.2.2.2',
  iemConfigProbesEntry => '1.3.6.1.4.1.318.1.1.10.2.2.2.1',
  iemConfigProbeNumber => '1.3.6.1.4.1.318.1.1.10.2.2.2.1.1',
  iemConfigProbeName => '1.3.6.1.4.1.318.1.1.10.2.2.2.1.2',
  iemConfigProbeHighTempThreshold => '1.3.6.1.4.1.318.1.1.10.2.2.2.1.3',
  iemConfigProbeLowTempThreshold => '1.3.6.1.4.1.318.1.1.10.2.2.2.1.4',
  iemConfigProbeTempUnits => '1.3.6.1.4.1.318.1.1.10.2.2.2.1.5',
  iemConfigProbeTempUnitsDefinition => 'PowerNet-MIB::iemConfigProbeTempUnits',
  iemConfigProbeHighHumidThreshold => '1.3.6.1.4.1.318.1.1.10.2.2.2.1.6',
  iemConfigProbeLowHumidThreshold => '1.3.6.1.4.1.318.1.1.10.2.2.2.1.7',
  iemConfigProbeHighTempEnable => '1.3.6.1.4.1.318.1.1.10.2.2.2.1.8',
  iemConfigProbeHighTempEnableDefinition => 'PowerNet-MIB::iemConfigProbeHighTempEnable',
  iemConfigProbeLowTempEnable => '1.3.6.1.4.1.318.1.1.10.2.2.2.1.9',
  iemConfigProbeLowTempEnableDefinition => 'PowerNet-MIB::iemConfigProbeLowTempEnable',
  iemConfigProbeHighHumidEnable => '1.3.6.1.4.1.318.1.1.10.2.2.2.1.10',
  iemConfigProbeHighHumidEnableDefinition => 'PowerNet-MIB::iemConfigProbeHighHumidEnable',
  iemConfigProbeLowHumidEnable => '1.3.6.1.4.1.318.1.1.10.2.2.2.1.11',
  iemConfigProbeLowHumidEnableDefinition => 'PowerNet-MIB::iemConfigProbeLowHumidEnable',
  iemConfigProbeMaxTempThreshold => '1.3.6.1.4.1.318.1.1.10.2.2.2.1.12',
  iemConfigProbeMinTempThreshold => '1.3.6.1.4.1.318.1.1.10.2.2.2.1.13',
  iemConfigProbeMaxHumidThreshold => '1.3.6.1.4.1.318.1.1.10.2.2.2.1.14',
  iemConfigProbeMinHumidThreshold => '1.3.6.1.4.1.318.1.1.10.2.2.2.1.15',
  iemConfigProbeMaxTempEnable => '1.3.6.1.4.1.318.1.1.10.2.2.2.1.16',
  iemConfigProbeMaxTempEnableDefinition => 'PowerNet-MIB::iemConfigProbeMaxTempEnable',
  iemConfigProbeMinTempEnable => '1.3.6.1.4.1.318.1.1.10.2.2.2.1.17',
  iemConfigProbeMinTempEnableDefinition => 'PowerNet-MIB::iemConfigProbeMinTempEnable',
  iemConfigProbeMaxHumidEnable => '1.3.6.1.4.1.318.1.1.10.2.2.2.1.18',
  iemConfigProbeMaxHumidEnableDefinition => 'PowerNet-MIB::iemConfigProbeMaxHumidEnable',
  iemConfigProbeMinHumidEnable => '1.3.6.1.4.1.318.1.1.10.2.2.2.1.19',
  iemConfigProbeMinHumidEnableDefinition => 'PowerNet-MIB::iemConfigProbeMinHumidEnable',
  iemConfigProbeTempHysteresis => '1.3.6.1.4.1.318.1.1.10.2.2.2.1.20',
  iemConfigProbeHumidHysteresis => '1.3.6.1.4.1.318.1.1.10.2.2.2.1.21',
  iemConfigProbeLocation => '1.3.6.1.4.1.318.1.1.10.2.2.2.1.22',
  iemConfigContactsNumContacts => '1.3.6.1.4.1.318.1.1.10.2.2.3',
  iemConfigContactsTable => '1.3.6.1.4.1.318.1.1.10.2.2.4',
  iemConfigContactsEntry => '1.3.6.1.4.1.318.1.1.10.2.2.4.1',
  iemConfigContactNumber => '1.3.6.1.4.1.318.1.1.10.2.2.4.1.1',
  iemConfigContactName => '1.3.6.1.4.1.318.1.1.10.2.2.4.1.2',
  iemConfigContactEnable => '1.3.6.1.4.1.318.1.1.10.2.2.4.1.3',
  iemConfigContactEnableDefinition => 'PowerNet-MIB::iemConfigContactEnable',
  iemConfigContactSeverity => '1.3.6.1.4.1.318.1.1.10.2.2.4.1.4',
  iemConfigContactSeverityDefinition => 'PowerNet-MIB::iemConfigContactSeverity',
  iemConfigContactNormalState => '1.3.6.1.4.1.318.1.1.10.2.2.4.1.5',
  iemConfigContactNormalStateDefinition => 'PowerNet-MIB::iemConfigContactNormalState',
  iemConfigContactLocation => '1.3.6.1.4.1.318.1.1.10.2.2.4.1.6',
  iemConfigConfigRelaysNumRelays => '1.3.6.1.4.1.318.1.1.10.2.2.5',
  iemConfigRelaysTable => '1.3.6.1.4.1.318.1.1.10.2.2.6',
  iemConfigRelaysEntry => '1.3.6.1.4.1.318.1.1.10.2.2.6.1',
  iemConfigRelayNumber => '1.3.6.1.4.1.318.1.1.10.2.2.6.1.1',
  iemConfigRelayName => '1.3.6.1.4.1.318.1.1.10.2.2.6.1.2',
  iemConfigRelayNormalState => '1.3.6.1.4.1.318.1.1.10.2.2.6.1.3',
  iemConfigRelayNormalStateDefinition => 'PowerNet-MIB::iemConfigRelayNormalState',
  iemConfigRelayFaultCondition => '1.3.6.1.4.1.318.1.1.10.2.2.6.1.4',
  iemStatus => '1.3.6.1.4.1.318.1.1.10.2.3',
  iemStatusProbesNumProbes => '1.3.6.1.4.1.318.1.1.10.2.3.1',
  iemStatusProbesTable => '1.3.6.1.4.1.318.1.1.10.2.3.2',
  iemStatusProbesEntry => '1.3.6.1.4.1.318.1.1.10.2.3.2.1',
  iemStatusProbeNumber => '1.3.6.1.4.1.318.1.1.10.2.3.2.1.1',
  iemStatusProbeName => '1.3.6.1.4.1.318.1.1.10.2.3.2.1.2',
  iemStatusProbeStatus => '1.3.6.1.4.1.318.1.1.10.2.3.2.1.3',
  iemStatusProbeStatusDefinition => 'PowerNet-MIB::iemStatusProbeStatus',
  iemStatusProbeCurrentTemp => '1.3.6.1.4.1.318.1.1.10.2.3.2.1.4',
  iemStatusProbeTempUnits => '1.3.6.1.4.1.318.1.1.10.2.3.2.1.5',
  iemStatusProbeTempUnitsDefinition => 'PowerNet-MIB::iemStatusProbeTempUnits',
  iemStatusProbeCurrentHumid => '1.3.6.1.4.1.318.1.1.10.2.3.2.1.6',
  iemStatusProbeHighTempViolation => '1.3.6.1.4.1.318.1.1.10.2.3.2.1.7',
  iemStatusProbeHighTempViolationDefinition => 'PowerNet-MIB::iemStatusProbeHighTempViolation',
  iemStatusProbeLowTempViolation => '1.3.6.1.4.1.318.1.1.10.2.3.2.1.8',
  iemStatusProbeLowTempViolationDefinition => 'PowerNet-MIB::iemStatusProbeLowTempViolation',
  iemStatusProbeHighHumidViolation => '1.3.6.1.4.1.318.1.1.10.2.3.2.1.9',
  iemStatusProbeHighHumidViolationDefinition => 'PowerNet-MIB::iemStatusProbeHighHumidViolation',
  iemStatusProbeLowHumidViolation => '1.3.6.1.4.1.318.1.1.10.2.3.2.1.10',
  iemStatusProbeLowHumidViolationDefinition => 'PowerNet-MIB::iemStatusProbeLowHumidViolation',
  iemStatusProbeMaxTempViolation => '1.3.6.1.4.1.318.1.1.10.2.3.2.1.11',
  iemStatusProbeMaxTempViolationDefinition => 'PowerNet-MIB::iemStatusProbeMaxTempViolation',
  iemStatusProbeMinTempViolation => '1.3.6.1.4.1.318.1.1.10.2.3.2.1.12',
  iemStatusProbeMinTempViolationDefinition => 'PowerNet-MIB::iemStatusProbeMinTempViolation',
  iemStatusProbeMaxHumidViolation => '1.3.6.1.4.1.318.1.1.10.2.3.2.1.13',
  iemStatusProbeMaxHumidViolationDefinition => 'PowerNet-MIB::iemStatusProbeMaxHumidViolation',
  iemStatusProbeMinHumidViolation => '1.3.6.1.4.1.318.1.1.10.2.3.2.1.14',
  iemStatusProbeMinHumidViolationDefinition => 'PowerNet-MIB::iemStatusProbeMinHumidViolation',
  iemStatusProbeLocation => '1.3.6.1.4.1.318.1.1.10.2.3.2.1.15',
  iemStatusContactsNumContacts => '1.3.6.1.4.1.318.1.1.10.2.3.3',
  iemStatusContactsTable => '1.3.6.1.4.1.318.1.1.10.2.3.4',
  iemStatusContactsEntry => '1.3.6.1.4.1.318.1.1.10.2.3.4.1',
  iemStatusContactNumber => '1.3.6.1.4.1.318.1.1.10.2.3.4.1.1',
  iemStatusContactName => '1.3.6.1.4.1.318.1.1.10.2.3.4.1.2',
  iemStatusContactStatus => '1.3.6.1.4.1.318.1.1.10.2.3.4.1.3',
  iemStatusContactStatusDefinition => 'PowerNet-MIB::iemStatusContactStatus',
  iemStatusRelaysNumRelays => '1.3.6.1.4.1.318.1.1.10.2.3.6',
  iemStatusRelaysTable => '1.3.6.1.4.1.318.1.1.10.2.3.7',
  iemStatusRelaysEntry => '1.3.6.1.4.1.318.1.1.10.2.3.7.1',
  iemStatusRelayNumber => '1.3.6.1.4.1.318.1.1.10.2.3.7.1.1',
  iemStatusRelayName => '1.3.6.1.4.1.318.1.1.10.2.3.7.1.2',
  iemStatusRelayStatus => '1.3.6.1.4.1.318.1.1.10.2.3.7.1.3',
  iemStatusRelayStatusDefinition => 'PowerNet-MIB::iemStatusRelayStatus',
  envMgtSystem => '1.3.6.1.4.1.318.1.1.10.3',
  emsIdent => '1.3.6.1.4.1.318.1.1.10.3.1',
  emsIdentEMSName => '1.3.6.1.4.1.318.1.1.10.3.1.1',
  emsIdentProductNumber => '1.3.6.1.4.1.318.1.1.10.3.1.2',
  emsIdentFirmwareRev => '1.3.6.1.4.1.318.1.1.10.3.1.3',
  emsIdentHardwareRev => '1.3.6.1.4.1.318.1.1.10.3.1.4',
  emsIdentDateOfManufacture => '1.3.6.1.4.1.318.1.1.10.3.1.5',
  emsIdentSerialNumber => '1.3.6.1.4.1.318.1.1.10.3.1.6',
  emsOutputRelayControl => '1.3.6.1.4.1.318.1.1.10.3.2',
  emsOutputRelayControlTable => '1.3.6.1.4.1.318.1.1.10.3.2.1',
  emsOutputRelayControlEntry => '1.3.6.1.4.1.318.1.1.10.3.2.1.1',
  emsOutputRelayControlOutputRelayIndex => '1.3.6.1.4.1.318.1.1.10.3.2.1.1.1',
  emsOutputRelayControlOutputRelayName => '1.3.6.1.4.1.318.1.1.10.3.2.1.1.2',
  emsOutputRelayControlOutputRelayCommand => '1.3.6.1.4.1.318.1.1.10.3.2.1.1.3',
  emsOutputRelayControlOutputRelayCommandDefinition => 'PowerNet-MIB::emsOutputRelayControlOutputRelayCommand',
  emsOutletControl => '1.3.6.1.4.1.318.1.1.10.3.3',
  emsOutletControlTable => '1.3.6.1.4.1.318.1.1.10.3.3.1',
  emsOutletControlEntry => '1.3.6.1.4.1.318.1.1.10.3.3.1.1',
  emsOutletControlOutletIndex => '1.3.6.1.4.1.318.1.1.10.3.3.1.1.1',
  emsOutletControlOutletName => '1.3.6.1.4.1.318.1.1.10.3.3.1.1.2',
  emsOutletControlOutletCommand => '1.3.6.1.4.1.318.1.1.10.3.3.1.1.3',
  emsOutletControlOutletCommandDefinition => 'PowerNet-MIB::emsOutletControlOutletCommand',
  emsSensorControl => '1.3.6.1.4.1.318.1.1.10.3.4',
  emsSensorControlTable => '1.3.6.1.4.1.318.1.1.10.3.4.1',
  emsSensorControlEntry => '1.3.6.1.4.1.318.1.1.10.3.4.1.1',
  emsSensorControlSensorIndex => '1.3.6.1.4.1.318.1.1.10.3.4.1.1.1',
  emsSensorControlSensorSystemName => '1.3.6.1.4.1.318.1.1.10.3.4.1.1.2',
  emsSensorControlSensorUserName => '1.3.6.1.4.1.318.1.1.10.3.4.1.1.3',
  emsSensorControlSensorCommand => '1.3.6.1.4.1.318.1.1.10.3.4.1.1.4',
  emsSensorControlSensorCommandDefinition => 'PowerNet-MIB::emsSensorControlSensorCommand',
  emsAlarmDeviceControl => '1.3.6.1.4.1.318.1.1.10.3.5',
  emsAlarmDeviceControlTable => '1.3.6.1.4.1.318.1.1.10.3.5.1',
  emsAlarmDeviceControlEntry => '1.3.6.1.4.1.318.1.1.10.3.5.1.1',
  emsAlarmDeviceControlDeviceIndex => '1.3.6.1.4.1.318.1.1.10.3.5.1.1.1',
  emsAlarmDeviceControlDeviceName => '1.3.6.1.4.1.318.1.1.10.3.5.1.1.2',
  emsAlarmDeviceControlDeviceCommand => '1.3.6.1.4.1.318.1.1.10.3.5.1.1.3',
  emsAlarmDeviceControlDeviceCommandDefinition => 'PowerNet-MIB::emsAlarmDeviceControlDeviceCommand',
  emsConfig => '1.3.6.1.4.1.318.1.1.10.3.6',
  emsConfigName => '1.3.6.1.4.1.318.1.1.10.3.6.1',
  emsConfigCheckLogLight => '1.3.6.1.4.1.318.1.1.10.3.6.2',
  emsConfigCheckLogLightDefinition => 'PowerNet-MIB::emsConfigCheckLogLight',
  emsProbeConfig => '1.3.6.1.4.1.318.1.1.10.3.7',
  emsProbeConfigTable => '1.3.6.1.4.1.318.1.1.10.3.7.1',
  emsProbeConfigEntry => '1.3.6.1.4.1.318.1.1.10.3.7.1.1',
  emsProbeConfigProbeIndex => '1.3.6.1.4.1.318.1.1.10.3.7.1.1.1',
  emsProbeConfigProbeName => '1.3.6.1.4.1.318.1.1.10.3.7.1.1.2',
  emsProbeConfigProbeHighTempThresh => '1.3.6.1.4.1.318.1.1.10.3.7.1.1.3',
  emsProbeConfigProbeLowTempThresh => '1.3.6.1.4.1.318.1.1.10.3.7.1.1.4',
  emsProbeConfigProbeHighHumidityThresh => '1.3.6.1.4.1.318.1.1.10.3.7.1.1.5',
  emsProbeConfigProbeLowHumidityThresh => '1.3.6.1.4.1.318.1.1.10.3.7.1.1.6',
  emsProbeConfigProbeMaxTempThresh => '1.3.6.1.4.1.318.1.1.10.3.7.1.1.7',
  emsProbeConfigProbeMinTempThresh => '1.3.6.1.4.1.318.1.1.10.3.7.1.1.8',
  emsProbeConfigProbeDeltaTemp => '1.3.6.1.4.1.318.1.1.10.3.7.1.1.9',
  emsProbeConfigProbeMaxHumidityThresh => '1.3.6.1.4.1.318.1.1.10.3.7.1.1.10',
  emsProbeConfigProbeMinHumidityThresh => '1.3.6.1.4.1.318.1.1.10.3.7.1.1.11',
  emsProbeConfigProbeDeltaHumidity => '1.3.6.1.4.1.318.1.1.10.3.7.1.1.12',
  emsProbeConfigProbeSTIncTempVariance => '1.3.6.1.4.1.318.1.1.10.3.7.1.1.13',
  emsProbeConfigProbeSTIncTempTime => '1.3.6.1.4.1.318.1.1.10.3.7.1.1.14',
  emsProbeConfigProbeSTDecTempVariance => '1.3.6.1.4.1.318.1.1.10.3.7.1.1.15',
  emsProbeConfigProbeSTDecTempTime => '1.3.6.1.4.1.318.1.1.10.3.7.1.1.16',
  emsProbeConfigProbeLTIncTempVariance => '1.3.6.1.4.1.318.1.1.10.3.7.1.1.17',
  emsProbeConfigProbeLTIncTempTime => '1.3.6.1.4.1.318.1.1.10.3.7.1.1.18',
  emsProbeConfigProbeLTDecTempVariance => '1.3.6.1.4.1.318.1.1.10.3.7.1.1.19',
  emsProbeConfigProbeLTDecTempTime => '1.3.6.1.4.1.318.1.1.10.3.7.1.1.20',
  emsInputContactConfig => '1.3.6.1.4.1.318.1.1.10.3.8',
  emsInputContactConfigTable => '1.3.6.1.4.1.318.1.1.10.3.8.1',
  emsInputContactConfigEntry => '1.3.6.1.4.1.318.1.1.10.3.8.1.1',
  emsInputContactConfigInputContactIndex => '1.3.6.1.4.1.318.1.1.10.3.8.1.1.1',
  emsInputContactConfigInputContactName => '1.3.6.1.4.1.318.1.1.10.3.8.1.1.2',
  emsInputContactConfigInputContactNormalState => '1.3.6.1.4.1.318.1.1.10.3.8.1.1.3',
  emsInputContactConfigInputContactNormalStateDefinition => 'PowerNet-MIB::emsInputContactConfigInputContactNormalState',
  emsOutputRelayConfig => '1.3.6.1.4.1.318.1.1.10.3.9',
  emsOutputRelayConfigTable => '1.3.6.1.4.1.318.1.1.10.3.9.1',
  emsOutputRelayConfigEntry => '1.3.6.1.4.1.318.1.1.10.3.9.1.1',
  emsOutputRelayConfigOutputRelayIndex => '1.3.6.1.4.1.318.1.1.10.3.9.1.1.1',
  emsOutputRelayConfigOutputRelayName => '1.3.6.1.4.1.318.1.1.10.3.9.1.1.2',
  emsOutputRelayConfigOutputRelayNormalState => '1.3.6.1.4.1.318.1.1.10.3.9.1.1.3',
  emsOutputRelayConfigOutputRelayNormalStateDefinition => 'PowerNet-MIB::emsOutputRelayConfigOutputRelayNormalState',
  emsOutletConfig => '1.3.6.1.4.1.318.1.1.10.3.10',
  emsOutletConfigTable => '1.3.6.1.4.1.318.1.1.10.3.10.1',
  emsOutletConfigEntry => '1.3.6.1.4.1.318.1.1.10.3.10.1.1',
  emsOutletConfigOutletIndex => '1.3.6.1.4.1.318.1.1.10.3.10.1.1.1',
  emsOutletConfigOutletName => '1.3.6.1.4.1.318.1.1.10.3.10.1.1.2',
  emsOutletConfigOutletNormalState => '1.3.6.1.4.1.318.1.1.10.3.10.1.1.3',
  emsOutletConfigOutletNormalStateDefinition => 'PowerNet-MIB::emsOutletConfigOutletNormalState',
  emsSensorConfig => '1.3.6.1.4.1.318.1.1.10.3.11',
  emsSensorConfigTable => '1.3.6.1.4.1.318.1.1.10.3.11.1',
  emsSensorConfigEntry => '1.3.6.1.4.1.318.1.1.10.3.11.1.1',
  emsSensorConfigSensorIndex => '1.3.6.1.4.1.318.1.1.10.3.11.1.1.1',
  emsSensorConfigSensorSystemName => '1.3.6.1.4.1.318.1.1.10.3.11.1.1.2',
  emsSensorConfigSensorUserName => '1.3.6.1.4.1.318.1.1.10.3.11.1.1.3',
  emsSensorConfigSensorNormalState => '1.3.6.1.4.1.318.1.1.10.3.11.1.1.4',
  emsSensorConfigSensorNormalStateDefinition => 'PowerNet-MIB::emsSensorConfigSensorNormalState',
  emsSensorConfigSensorAlarmDelay => '1.3.6.1.4.1.318.1.1.10.3.11.1.1.5',
  emsStatus => '1.3.6.1.4.1.318.1.1.10.3.12',
  emsStatusEMSName => '1.3.6.1.4.1.318.1.1.10.3.12.1',
  emsStatusCommStatus => '1.3.6.1.4.1.318.1.1.10.3.12.2',
  emsStatusCommStatusDefinition => 'PowerNet-MIB::emsStatusCommStatus',
  emsStatusProbeCount => '1.3.6.1.4.1.318.1.1.10.3.12.3',
  emsStatusInputContactCount => '1.3.6.1.4.1.318.1.1.10.3.12.4',
  emsStatusOutputRelayCount => '1.3.6.1.4.1.318.1.1.10.3.12.5',
  emsStatusOutletCount => '1.3.6.1.4.1.318.1.1.10.3.12.6',
  emsStatusSensorCount => '1.3.6.1.4.1.318.1.1.10.3.12.7',
  emsStatusAlinkAruDeviceCount => '1.3.6.1.4.1.318.1.1.10.3.12.8',
  emsStatusAlinkProbeDeviceCount => '1.3.6.1.4.1.318.1.1.10.3.12.9',
  emsStatusAlarmDeviceCount => '1.3.6.1.4.1.318.1.1.10.3.12.10',
  emsStatusSysTempUnits => '1.3.6.1.4.1.318.1.1.10.3.12.11',
  emsStatusSysTempUnitsDefinition => 'PowerNet-MIB::emsStatusSysTempUnits',
  emsStatusCheckLogLight => '1.3.6.1.4.1.318.1.1.10.3.12.12',
  emsStatusCheckLogLightDefinition => 'PowerNet-MIB::emsStatusCheckLogLight',
  emsStatusHardwareStatus => '1.3.6.1.4.1.318.1.1.10.3.12.13',
  emsProbeStatus => '1.3.6.1.4.1.318.1.1.10.3.13',
  emsProbeStatusTable => '1.3.6.1.4.1.318.1.1.10.3.13.1',
  emsProbeStatusEntry => '1.3.6.1.4.1.318.1.1.10.3.13.1.1',
  emsProbeStatusProbeIndex => '1.3.6.1.4.1.318.1.1.10.3.13.1.1.1',
  emsProbeStatusProbeName => '1.3.6.1.4.1.318.1.1.10.3.13.1.1.2',
  emsProbeStatusProbeTemperature => '1.3.6.1.4.1.318.1.1.10.3.13.1.1.3',
  emsProbeStatusProbeHighTempThresh => '1.3.6.1.4.1.318.1.1.10.3.13.1.1.4',
  emsProbeStatusProbeLowTempThresh => '1.3.6.1.4.1.318.1.1.10.3.13.1.1.5',
  emsProbeStatusProbeHumidity => '1.3.6.1.4.1.318.1.1.10.3.13.1.1.6',
  emsProbeStatusProbeHighHumidityThresh => '1.3.6.1.4.1.318.1.1.10.3.13.1.1.7',
  emsProbeStatusProbeLowHumidityThresh => '1.3.6.1.4.1.318.1.1.10.3.13.1.1.8',
  emsProbeStatusProbeSerialNumber => '1.3.6.1.4.1.318.1.1.10.3.13.1.1.9',
  emsProbeStatusProbeCommStatus => '1.3.6.1.4.1.318.1.1.10.3.13.1.1.10',
  emsProbeStatusProbeCommStatusDefinition => 'PowerNet-MIB::emsProbeStatusProbeCommStatus',
  emsProbeStatusProbeAlarmStatus => '1.3.6.1.4.1.318.1.1.10.3.13.1.1.11',
  emsProbeStatusProbeMaxTempThresh => '1.3.6.1.4.1.318.1.1.10.3.13.1.1.12',
  emsProbeStatusProbeMinTempThresh => '1.3.6.1.4.1.318.1.1.10.3.13.1.1.13',
  emsProbeStatusProbeMaxHumidityThresh => '1.3.6.1.4.1.318.1.1.10.3.13.1.1.14',
  emsProbeStatusProbeMinHumidityThresh => '1.3.6.1.4.1.318.1.1.10.3.13.1.1.15',
  emsInputContactStatus => '1.3.6.1.4.1.318.1.1.10.3.14',
  emsInputContactStatusTable => '1.3.6.1.4.1.318.1.1.10.3.14.1',
  emsInputContactStatusEntry => '1.3.6.1.4.1.318.1.1.10.3.14.1.1',
  emsInputContactStatusInputContactIndex => '1.3.6.1.4.1.318.1.1.10.3.14.1.1.1',
  emsInputContactStatusInputContactName => '1.3.6.1.4.1.318.1.1.10.3.14.1.1.2',
  emsInputContactStatusInputContactState => '1.3.6.1.4.1.318.1.1.10.3.14.1.1.3',
  emsInputContactStatusInputContactStateDefinition => 'PowerNet-MIB::emsInputContactStatusInputContactState',
  emsInputContactStatusInputContactNormalState => '1.3.6.1.4.1.318.1.1.10.3.14.1.1.4',
  emsInputContactStatusInputContactNormalStateDefinition => 'PowerNet-MIB::emsInputContactStatusInputContactNormalState',
  emsOutputRelayStatus => '1.3.6.1.4.1.318.1.1.10.3.15',
  emsOutputRelayStatusTable => '1.3.6.1.4.1.318.1.1.10.3.15.1',
  emsOutputRelayStatusEntry => '1.3.6.1.4.1.318.1.1.10.3.15.1.1',
  emsOutputRelayStatusOutputRelayIndex => '1.3.6.1.4.1.318.1.1.10.3.15.1.1.1',
  emsOutputRelayStatusOutputRelayName => '1.3.6.1.4.1.318.1.1.10.3.15.1.1.2',
  emsOutputRelayStatusOutputRelayState => '1.3.6.1.4.1.318.1.1.10.3.15.1.1.3',
  emsOutputRelayStatusOutputRelayStateDefinition => 'PowerNet-MIB::emsOutputRelayStatusOutputRelayState',
  emsOutputRelayStatusOutputRelayNormalState => '1.3.6.1.4.1.318.1.1.10.3.15.1.1.4',
  emsOutputRelayStatusOutputRelayNormalStateDefinition => 'PowerNet-MIB::emsOutputRelayStatusOutputRelayNormalState',
  emsOutletStatus => '1.3.6.1.4.1.318.1.1.10.3.16',
  emsOutletStatusTable => '1.3.6.1.4.1.318.1.1.10.3.16.1',
  emsOutletStatusEntry => '1.3.6.1.4.1.318.1.1.10.3.16.1.1',
  emsOutletStatusOutletIndex => '1.3.6.1.4.1.318.1.1.10.3.16.1.1.1',
  emsOutletStatusOutletName => '1.3.6.1.4.1.318.1.1.10.3.16.1.1.2',
  emsOutletStatusOutletState => '1.3.6.1.4.1.318.1.1.10.3.16.1.1.3',
  emsOutletStatusOutletStateDefinition => 'PowerNet-MIB::emsOutletStatusOutletState',
  emsOutletStatusOutletNormalState => '1.3.6.1.4.1.318.1.1.10.3.16.1.1.4',
  emsOutletStatusOutletNormalStateDefinition => 'PowerNet-MIB::emsOutletStatusOutletNormalState',
  emsAlarmDeviceStatus => '1.3.6.1.4.1.318.1.1.10.3.17',
  emsAlarmDeviceStatusTable => '1.3.6.1.4.1.318.1.1.10.3.17.1',
  emsAlarmDeviceStatusEntry => '1.3.6.1.4.1.318.1.1.10.3.17.1.1',
  emsAlarmDeviceStatusDeviceIndex => '1.3.6.1.4.1.318.1.1.10.3.17.1.1.1',
  emsAlarmDeviceStatusDeviceName => '1.3.6.1.4.1.318.1.1.10.3.17.1.1.2',
  emsAlarmDeviceStatusDeviceState => '1.3.6.1.4.1.318.1.1.10.3.17.1.1.3',
  emsAlarmDeviceStatusDeviceStateDefinition => 'PowerNet-MIB::emsAlarmDeviceStatusDeviceState',
  emsSensorStatus => '1.3.6.1.4.1.318.1.1.10.3.18',
  emsSensorStatusTable => '1.3.6.1.4.1.318.1.1.10.3.18.1',
  emsSensorStatusEntry => '1.3.6.1.4.1.318.1.1.10.3.18.1.1',
  emsSensorStatusSensorIndex => '1.3.6.1.4.1.318.1.1.10.3.18.1.1.1',
  emsSensorStatusSensorSystemName => '1.3.6.1.4.1.318.1.1.10.3.18.1.1.2',
  emsSensorStatusSensorName => '1.3.6.1.4.1.318.1.1.10.3.18.1.1.3',
  emsSensorStatusSensorState => '1.3.6.1.4.1.318.1.1.10.3.18.1.1.4',
  emsSensorStatusSensorStateDefinition => 'PowerNet-MIB::emsSensorStatusSensorState',
  emsSensorStatusSensorNormalState => '1.3.6.1.4.1.318.1.1.10.3.18.1.1.5',
  emsSensorStatusSensorNormalStateDefinition => 'PowerNet-MIB::emsSensorStatusSensorNormalState',
  emsSensorStatusSensorAlarmDelay => '1.3.6.1.4.1.318.1.1.10.3.18.1.1.6',
  modEnvMgr => '1.3.6.1.4.1.318.1.1.10.4',
  memModules => '1.3.6.1.4.1.318.1.1.10.4.1',
  memModulesStatusTableSize => '1.3.6.1.4.1.318.1.1.10.4.1.1',
  memModulesStatusTable => '1.3.6.1.4.1.318.1.1.10.4.1.2',
  memModulesStatusEntry => '1.3.6.1.4.1.318.1.1.10.4.1.2.1',
  memModulesStatusModuleNumber => '1.3.6.1.4.1.318.1.1.10.4.1.2.1.1',
  memModulesStatusModuleName => '1.3.6.1.4.1.318.1.1.10.4.1.2.1.2',
  memModulesStatusModuleLocation => '1.3.6.1.4.1.318.1.1.10.4.1.2.1.3',
  memModulesStatusModelNumber => '1.3.6.1.4.1.318.1.1.10.4.1.2.1.4',
  memModulesStatusSerialNumber => '1.3.6.1.4.1.318.1.1.10.4.1.2.1.5',
  memModulesStatusFirmwareRev => '1.3.6.1.4.1.318.1.1.10.4.1.2.1.6',
  memModulesStatusHardwareRev => '1.3.6.1.4.1.318.1.1.10.4.1.2.1.7',
  memModulesConfigTableSize => '1.3.6.1.4.1.318.1.1.10.4.1.3',
  memModulesConfigTable => '1.3.6.1.4.1.318.1.1.10.4.1.4',
  memModulesConfigEntry => '1.3.6.1.4.1.318.1.1.10.4.1.4.1',
  memModulesConfigModuleNumber => '1.3.6.1.4.1.318.1.1.10.4.1.4.1.1',
  memModulesConfigModuleName => '1.3.6.1.4.1.318.1.1.10.4.1.4.1.2',
  memModulesConfigModuleLocation => '1.3.6.1.4.1.318.1.1.10.4.1.4.1.3',
  memSensors => '1.3.6.1.4.1.318.1.1.10.4.2',
  memSensorsStatusSysTempUnits => '1.3.6.1.4.1.318.1.1.10.4.2.1',
  memSensorsStatusSysTempUnitsDefinition => 'PowerNet-MIB::memSensorsStatusSysTempUnits',
  memSensorsStatusTableSize => '1.3.6.1.4.1.318.1.1.10.4.2.2',
  memSensorsStatusTable => '1.3.6.1.4.1.318.1.1.10.4.2.3',
  memSensorsStatusEntry => '1.3.6.1.4.1.318.1.1.10.4.2.3.1',
  memSensorsStatusModuleNumber => '1.3.6.1.4.1.318.1.1.10.4.2.3.1.1',
  memSensorsStatusSensorNumber => '1.3.6.1.4.1.318.1.1.10.4.2.3.1.2',
  memSensorsStatusSensorName => '1.3.6.1.4.1.318.1.1.10.4.2.3.1.3',
  memSensorsStatusSensorLocation => '1.3.6.1.4.1.318.1.1.10.4.2.3.1.4',
  memSensorsTemperature => '1.3.6.1.4.1.318.1.1.10.4.2.3.1.5',
  memSensorsHumidity => '1.3.6.1.4.1.318.1.1.10.4.2.3.1.6',
  memSensorsCommStatus => '1.3.6.1.4.1.318.1.1.10.4.2.3.1.7',
  memSensorsCommStatusDefinition => 'PowerNet-MIB::memSensorsCommStatus',
  memSensorsAlarmStatus => '1.3.6.1.4.1.318.1.1.10.4.2.3.1.8',
  memSensorsAlarmStatusDefinition => 'PowerNet-MIB::memSensorsAlarmStatus',
  memSensorsConfigTableSize => '1.3.6.1.4.1.318.1.1.10.4.2.4',
  memSensorsConfigTable => '1.3.6.1.4.1.318.1.1.10.4.2.5',
  memSensorsConfigEntry => '1.3.6.1.4.1.318.1.1.10.4.2.5.1',
  memSensorsConfigModuleNumber => '1.3.6.1.4.1.318.1.1.10.4.2.5.1.1',
  memSensorsConfigSensorNumber => '1.3.6.1.4.1.318.1.1.10.4.2.5.1.2',
  memSensorsName => '1.3.6.1.4.1.318.1.1.10.4.2.5.1.3',
  memSensorsLocation => '1.3.6.1.4.1.318.1.1.10.4.2.5.1.4',
  memSensorsAlarmGeneration => '1.3.6.1.4.1.318.1.1.10.4.2.5.1.5',
  memSensorsAlarmGenerationDefinition => 'PowerNet-MIB::memSensorsAlarmGeneration',
  memSensorsTempMaxThresh => '1.3.6.1.4.1.318.1.1.10.4.2.5.1.6',
  memSensorsTempHighThresh => '1.3.6.1.4.1.318.1.1.10.4.2.5.1.7',
  memSensorsTempLowThresh => '1.3.6.1.4.1.318.1.1.10.4.2.5.1.8',
  memSensorsTempMinThresh => '1.3.6.1.4.1.318.1.1.10.4.2.5.1.9',
  memSensorsTempThreshHysteresis => '1.3.6.1.4.1.318.1.1.10.4.2.5.1.10',
  memSensorsTempShortDecRateThreshValue => '1.3.6.1.4.1.318.1.1.10.4.2.5.1.11',
  memSensorsTempShortDecRateThreshTime => '1.3.6.1.4.1.318.1.1.10.4.2.5.1.12',
  memSensorsTempShortIncRateThreshValue => '1.3.6.1.4.1.318.1.1.10.4.2.5.1.13',
  memSensorsTempShortIncRateThreshTime => '1.3.6.1.4.1.318.1.1.10.4.2.5.1.14',
  memSensorsTempLongDecRateThreshValue => '1.3.6.1.4.1.318.1.1.10.4.2.5.1.15',
  memSensorsTempLongDecRateThreshTime => '1.3.6.1.4.1.318.1.1.10.4.2.5.1.16',
  memSensorsTempLongIncRateThreshValue => '1.3.6.1.4.1.318.1.1.10.4.2.5.1.17',
  memSensorsTempLongIncRateThreshTime => '1.3.6.1.4.1.318.1.1.10.4.2.5.1.18',
  memSensorsHumidityMaxThresh => '1.3.6.1.4.1.318.1.1.10.4.2.5.1.19',
  memSensorsHumidityHighThresh => '1.3.6.1.4.1.318.1.1.10.4.2.5.1.20',
  memSensorsHumidityLowThresh => '1.3.6.1.4.1.318.1.1.10.4.2.5.1.21',
  memSensorsHumidityMinThresh => '1.3.6.1.4.1.318.1.1.10.4.2.5.1.22',
  memSensorsHumidityThreshHysteresis => '1.3.6.1.4.1.318.1.1.10.4.2.5.1.23',
  memInputs => '1.3.6.1.4.1.318.1.1.10.4.3',
  memInputsStatusTableSize => '1.3.6.1.4.1.318.1.1.10.4.3.1',
  memInputsStatusTable => '1.3.6.1.4.1.318.1.1.10.4.3.2',
  memInputsStatusEntry => '1.3.6.1.4.1.318.1.1.10.4.3.2.1',
  memInputsStatusModuleNumber => '1.3.6.1.4.1.318.1.1.10.4.3.2.1.1',
  memInputsStatusInputNumber => '1.3.6.1.4.1.318.1.1.10.4.3.2.1.2',
  memInputsStatusInputName => '1.3.6.1.4.1.318.1.1.10.4.3.2.1.3',
  memInputsStatusInputLocation => '1.3.6.1.4.1.318.1.1.10.4.3.2.1.4',
  memInputsStatusCurrentState => '1.3.6.1.4.1.318.1.1.10.4.3.2.1.5',
  memInputsStatusCurrentStateDefinition => 'PowerNet-MIB::memInputsStatusCurrentState',
  memInputsStatusCurrentAnalogValue => '1.3.6.1.4.1.318.1.1.10.4.3.2.1.6',
  memInputsStatusAlarmStatus => '1.3.6.1.4.1.318.1.1.10.4.3.2.1.7',
  memInputsStatusAlarmStatusDefinition => 'PowerNet-MIB::memInputsStatusAlarmStatus',
  memInputsCommStatus => '1.3.6.1.4.1.318.1.1.10.4.3.2.1.8',
  memInputsCommStatusDefinition => 'PowerNet-MIB::memInputsCommStatus',
  memInputsConfigTableSize => '1.3.6.1.4.1.318.1.1.10.4.3.3',
  memInputsConfigTable => '1.3.6.1.4.1.318.1.1.10.4.3.4',
  memInputsConfigEntry => '1.3.6.1.4.1.318.1.1.10.4.3.4.1',
  memInputsConfigModuleNumber => '1.3.6.1.4.1.318.1.1.10.4.3.4.1.1',
  memInputsConfigInputNumber => '1.3.6.1.4.1.318.1.1.10.4.3.4.1.2',
  memInputName => '1.3.6.1.4.1.318.1.1.10.4.3.4.1.3',
  memInputLocation => '1.3.6.1.4.1.318.1.1.10.4.3.4.1.4',
  memInputType => '1.3.6.1.4.1.318.1.1.10.4.3.4.1.5',
  memInputTypeDefinition => 'PowerNet-MIB::memInputType',
  memInputAlarmGeneration => '1.3.6.1.4.1.318.1.1.10.4.3.4.1.6',
  memInputAlarmGenerationDefinition => 'PowerNet-MIB::memInputAlarmGeneration',
  memInputNormalState => '1.3.6.1.4.1.318.1.1.10.4.3.4.1.7',
  memInputNormalStateDefinition => 'PowerNet-MIB::memInputNormalState',
  memInputAbnormalSeverity => '1.3.6.1.4.1.318.1.1.10.4.3.4.1.8',
  memInputAbnormalSeverityDefinition => 'PowerNet-MIB::memInputAbnormalSeverity',
  memInputNumberCalibrationPoints => '1.3.6.1.4.1.318.1.1.10.4.3.4.1.9',
  memInputAnalogCalibrationPoint1 => '1.3.6.1.4.1.318.1.1.10.4.3.4.1.10',
  memInputAnalogCalibrationPoint2 => '1.3.6.1.4.1.318.1.1.10.4.3.4.1.11',
  memInputAnalogCalibrationPoint3 => '1.3.6.1.4.1.318.1.1.10.4.3.4.1.12',
  memInputAnalogCalibrationPoint4 => '1.3.6.1.4.1.318.1.1.10.4.3.4.1.13',
  memInputAnalogCalibrationPoint5 => '1.3.6.1.4.1.318.1.1.10.4.3.4.1.14',
  memInputAnalogCalibrationPoint1Value => '1.3.6.1.4.1.318.1.1.10.4.3.4.1.15',
  memInputAnalogCalibrationPoint2Value => '1.3.6.1.4.1.318.1.1.10.4.3.4.1.16',
  memInputAnalogCalibrationPoint3Value => '1.3.6.1.4.1.318.1.1.10.4.3.4.1.17',
  memInputAnalogCalibrationPoint4Value => '1.3.6.1.4.1.318.1.1.10.4.3.4.1.18',
  memInputAnalogCalibrationPoint5Value => '1.3.6.1.4.1.318.1.1.10.4.3.4.1.19',
  memInputAnalogMeasurementUnits => '1.3.6.1.4.1.318.1.1.10.4.3.4.1.20',
  memInputAnalogMaxThresh => '1.3.6.1.4.1.318.1.1.10.4.3.4.1.21',
  memInputAnalogHighThresh => '1.3.6.1.4.1.318.1.1.10.4.3.4.1.22',
  memInputAnalogLowThresh => '1.3.6.1.4.1.318.1.1.10.4.3.4.1.23',
  memInputAnalogMinThresh => '1.3.6.1.4.1.318.1.1.10.4.3.4.1.24',
  memInputAnalogThreshHysteresis => '1.3.6.1.4.1.318.1.1.10.4.3.4.1.25',
  memOutputs => '1.3.6.1.4.1.318.1.1.10.4.4',
  memOutputStatusTableSize => '1.3.6.1.4.1.318.1.1.10.4.4.1',
  memOutputStatusTable => '1.3.6.1.4.1.318.1.1.10.4.4.2',
  memOutputStatusEntry => '1.3.6.1.4.1.318.1.1.10.4.4.2.1',
  memOutputStatusModuleNumber => '1.3.6.1.4.1.318.1.1.10.4.4.2.1.1',
  memOutputStatusOutputNumber => '1.3.6.1.4.1.318.1.1.10.4.4.2.1.2',
  memOutputStatusOutputName => '1.3.6.1.4.1.318.1.1.10.4.4.2.1.3',
  memOutputStatusOutputLocation => '1.3.6.1.4.1.318.1.1.10.4.4.2.1.4',
  memOutputStatusCurrentState => '1.3.6.1.4.1.318.1.1.10.4.4.2.1.5',
  memOutputStatusCurrentStateDefinition => 'PowerNet-MIB::memOutputStatusCurrentState',
  memOutputConfigTableSize => '1.3.6.1.4.1.318.1.1.10.4.4.3',
  memOutputConfigTable => '1.3.6.1.4.1.318.1.1.10.4.4.4',
  memOutputConfigEntry => '1.3.6.1.4.1.318.1.1.10.4.4.4.1',
  memOutputConfigModuleNumber => '1.3.6.1.4.1.318.1.1.10.4.4.4.1.1',
  memOutputConfigOutputNumber => '1.3.6.1.4.1.318.1.1.10.4.4.4.1.2',
  memOutputName => '1.3.6.1.4.1.318.1.1.10.4.4.4.1.3',
  memOutputLocation => '1.3.6.1.4.1.318.1.1.10.4.4.4.1.4',
  memOutputNormalState => '1.3.6.1.4.1.318.1.1.10.4.4.4.1.5',
  memOutputNormalStateDefinition => 'PowerNet-MIB::memOutputNormalState',
  memOutputAction => '1.3.6.1.4.1.318.1.1.10.4.4.4.1.6',
  memOutputActionDefinition => 'PowerNet-MIB::memOutputAction',
  memOutlets => '1.3.6.1.4.1.318.1.1.10.4.5',
  memOutletStatusTableSize => '1.3.6.1.4.1.318.1.1.10.4.5.1',
  memOutletStatusTable => '1.3.6.1.4.1.318.1.1.10.4.5.2',
  memOutletStatusEntry => '1.3.6.1.4.1.318.1.1.10.4.5.2.1',
  memOutletStatusModuleNumber => '1.3.6.1.4.1.318.1.1.10.4.5.2.1.1',
  memOutletStatusOutletNumber => '1.3.6.1.4.1.318.1.1.10.4.5.2.1.2',
  memOutletStatusOutletName => '1.3.6.1.4.1.318.1.1.10.4.5.2.1.3',
  memOutletStatusOutletLocation => '1.3.6.1.4.1.318.1.1.10.4.5.2.1.4',
  memOutletStatusCurrentState => '1.3.6.1.4.1.318.1.1.10.4.5.2.1.5',
  memOutletStatusCurrentStateDefinition => 'PowerNet-MIB::memOutletStatusCurrentState',
  memOutletConfigTableSize => '1.3.6.1.4.1.318.1.1.10.4.5.3',
  memOutletConfigTable => '1.3.6.1.4.1.318.1.1.10.4.5.4',
  memOutletConfigEntry => '1.3.6.1.4.1.318.1.1.10.4.5.4.1',
  memOutletConfigModuleNumber => '1.3.6.1.4.1.318.1.1.10.4.5.4.1.1',
  memOutletConfigOutletNumber => '1.3.6.1.4.1.318.1.1.10.4.5.4.1.2',
  memOutletName => '1.3.6.1.4.1.318.1.1.10.4.5.4.1.3',
  memOutletLocation => '1.3.6.1.4.1.318.1.1.10.4.5.4.1.4',
  memOutletNormalState => '1.3.6.1.4.1.318.1.1.10.4.5.4.1.5',
  memOutletNormalStateDefinition => 'PowerNet-MIB::memOutletNormalState',
  memOutletAction => '1.3.6.1.4.1.318.1.1.10.4.5.4.1.6',
  memOutletActionDefinition => 'PowerNet-MIB::memOutletAction',
  memBeacons => '1.3.6.1.4.1.318.1.1.10.4.6',
  memBeaconStatusTableSize => '1.3.6.1.4.1.318.1.1.10.4.6.1',
  memBeaconStatusTable => '1.3.6.1.4.1.318.1.1.10.4.6.2',
  memBeaconStatusEntry => '1.3.6.1.4.1.318.1.1.10.4.6.2.1',
  memBeaconStatusModuleNumber => '1.3.6.1.4.1.318.1.1.10.4.6.2.1.1',
  memBeaconStatusBeaconNumber => '1.3.6.1.4.1.318.1.1.10.4.6.2.1.2',
  memBeaconStatusBeaconName => '1.3.6.1.4.1.318.1.1.10.4.6.2.1.3',
  memBeaconStatusBeaconLocation => '1.3.6.1.4.1.318.1.1.10.4.6.2.1.4',
  memBeaconStatusCurrentState => '1.3.6.1.4.1.318.1.1.10.4.6.2.1.5',
  memBeaconStatusCurrentStateDefinition => 'PowerNet-MIB::memBeaconStatusCurrentState',
  memBeaconConfigTableSize => '1.3.6.1.4.1.318.1.1.10.4.6.3',
  memBeaconConfigTable => '1.3.6.1.4.1.318.1.1.10.4.6.4',
  memBeaconConfigEntry => '1.3.6.1.4.1.318.1.1.10.4.6.4.1',
  memBeaconConfigModuleNumber => '1.3.6.1.4.1.318.1.1.10.4.6.4.1.1',
  memBeaconConfigBeaconNumber => '1.3.6.1.4.1.318.1.1.10.4.6.4.1.2',
  memBeaconConfigName => '1.3.6.1.4.1.318.1.1.10.4.6.4.1.3',
  memBeaconConfigLocation => '1.3.6.1.4.1.318.1.1.10.4.6.4.1.4',
  memBeaconAction => '1.3.6.1.4.1.318.1.1.10.4.6.4.1.5',
  memBeaconActionDefinition => 'PowerNet-MIB::memBeaconAction',
  netlock => '1.3.6.1.4.1.318.1.1.11',
  nlIdent => '1.3.6.1.4.1.318.1.1.11.1',
  nlStatus => '1.3.6.1.4.1.318.1.1.11.2',
  rPDU => '1.3.6.1.4.1.318.1.1.12',
  rPDUIdent => '1.3.6.1.4.1.318.1.1.12.1',
  rPDUIdentName => '1.3.6.1.4.1.318.1.1.12.1.1',
  rPDUIdentHardwareRev => '1.3.6.1.4.1.318.1.1.12.1.2',
  rPDUIdentFirmwareRev => '1.3.6.1.4.1.318.1.1.12.1.3',
  rPDUIdentDateOfManufacture => '1.3.6.1.4.1.318.1.1.12.1.4',
  rPDUIdentModelNumber => '1.3.6.1.4.1.318.1.1.12.1.5',
  rPDUIdentSerialNumber => '1.3.6.1.4.1.318.1.1.12.1.6',
  rPDUIdentDeviceRating => '1.3.6.1.4.1.318.1.1.12.1.7',
  rPDUIdentDeviceNumOutlets => '1.3.6.1.4.1.318.1.1.12.1.8',
  rPDUIdentDeviceNumPhases => '1.3.6.1.4.1.318.1.1.12.1.9',
  rPDUIdentDeviceNumBreakers => '1.3.6.1.4.1.318.1.1.12.1.10',
  rPDUIdentDeviceBreakerRating => '1.3.6.1.4.1.318.1.1.12.1.11',
  rPDUIdentDeviceOrientation => '1.3.6.1.4.1.318.1.1.12.1.12',
  rPDUIdentDeviceOrientationDefinition => 'PowerNet-MIB::rPDUIdentDeviceOrientation',
  rPDUIdentDeviceOutletLayout => '1.3.6.1.4.1.318.1.1.12.1.13',
  rPDUIdentDeviceOutletLayoutDefinition => 'PowerNet-MIB::rPDUIdentDeviceOutletLayout',
  rPDUIdentDeviceDisplayOrientation => '1.3.6.1.4.1.318.1.1.12.1.14',
  rPDUIdentDeviceDisplayOrientationDefinition => 'PowerNet-MIB::rPDUIdentDeviceDisplayOrientation',
  rPDUIdentDeviceLinetoLineVoltage => '1.3.6.1.4.1.318.1.1.12.1.15',
  rPDUIdentDevicePowerWatts => '1.3.6.1.4.1.318.1.1.12.1.16',
  rPDUIdentDevicePowerFactor => '1.3.6.1.4.1.318.1.1.12.1.17',
  rPDUIdentDevicePowerVA => '1.3.6.1.4.1.318.1.1.12.1.18',
  rPDUIdentDeviceLinetoNeutralVoltage => '1.3.6.1.4.1.318.1.1.12.1.19',
  rPDULoad => '1.3.6.1.4.1.318.1.1.12.2',
  rPDULoadDevice => '1.3.6.1.4.1.318.1.1.12.2.1',
  rPDULoadDevMaxPhaseLoad => '1.3.6.1.4.1.318.1.1.12.2.1.1',
  rPDULoadDevNumPhases => '1.3.6.1.4.1.318.1.1.12.2.1.2',
  rPDULoadDevMaxBankLoad => '1.3.6.1.4.1.318.1.1.12.2.1.3',
  rPDULoadDevNumBanks => '1.3.6.1.4.1.318.1.1.12.2.1.4',
  rPDULoadDevBankTableSize => '1.3.6.1.4.1.318.1.1.12.2.1.5',
  rPDULoadDevBankTable => '1.3.6.1.4.1.318.1.1.12.2.1.6',
  rPDULoadDevBankEntry => '1.3.6.1.4.1.318.1.1.12.2.1.6.1',
  rPDULoadDevBankIndex => '1.3.6.1.4.1.318.1.1.12.2.1.6.1.1',
  rPDULoadDevBankNumber => '1.3.6.1.4.1.318.1.1.12.2.1.6.1.2',
  rPDULoadDevBankMaxLoad => '1.3.6.1.4.1.318.1.1.12.2.1.6.1.3',
  rPDULoadDevMaxOutletTableSize => '1.3.6.1.4.1.318.1.1.12.2.1.7',
  rPDULoadDevMaxOutletTable => '1.3.6.1.4.1.318.1.1.12.2.1.8',
  rPDULoadDevMaxOutletEntry => '1.3.6.1.4.1.318.1.1.12.2.1.8.1',
  rPDULoadDevOutletIndex => '1.3.6.1.4.1.318.1.1.12.2.1.8.1.1',
  rPDULoadDevOutletNumber => '1.3.6.1.4.1.318.1.1.12.2.1.8.1.2',
  rPDULoadDevMaxOutletLoad => '1.3.6.1.4.1.318.1.1.12.2.1.8.1.3',
  rPDULoadPhaseConfig => '1.3.6.1.4.1.318.1.1.12.2.2',
  rPDULoadPhaseConfigTable => '1.3.6.1.4.1.318.1.1.12.2.2.1',
  rPDULoadPhaseConfigEntry => '1.3.6.1.4.1.318.1.1.12.2.2.1.1',
  rPDULoadPhaseConfigIndex => '1.3.6.1.4.1.318.1.1.12.2.2.1.1.1',
  rPDULoadPhaseConfigIndexDefinition => 'PowerNet-MIB::rPDULoadPhaseConfigIndex',
  rPDULoadPhaseConfigLowLoadThreshold => '1.3.6.1.4.1.318.1.1.12.2.2.1.1.2',
  rPDULoadPhaseConfigNearOverloadThreshold => '1.3.6.1.4.1.318.1.1.12.2.2.1.1.3',
  rPDULoadPhaseConfigOverloadThreshold => '1.3.6.1.4.1.318.1.1.12.2.2.1.1.4',
  rPDULoadPhaseConfigAlarm => '1.3.6.1.4.1.318.1.1.12.2.2.1.1.5',
  rPDULoadPhaseConfigAlarmDefinition => 'PowerNet-MIB::rPDULoadPhaseConfigAlarm',
  rPDULoadStatus => '1.3.6.1.4.1.318.1.1.12.2.3',
  rPDULoadStatusTable => '1.3.6.1.4.1.318.1.1.12.2.3.1',
  rPDULoadStatusEntry => '1.3.6.1.4.1.318.1.1.12.2.3.1.1',
  rPDULoadStatusIndex => '1.3.6.1.4.1.318.1.1.12.2.3.1.1.1',
  rPDULoadStatusLoad => '1.3.6.1.4.1.318.1.1.12.2.3.1.1.2',
  rPDULoadStatusLoadState => '1.3.6.1.4.1.318.1.1.12.2.3.1.1.3',
  rPDULoadStatusLoadStateDefinition => 'PowerNet-MIB::rPDULoadStatusLoadState',
  rPDULoadStatusPhaseNumber => '1.3.6.1.4.1.318.1.1.12.2.3.1.1.4',
  rPDULoadStatusBankNumber => '1.3.6.1.4.1.318.1.1.12.2.3.1.1.5',
  rPDULoadBankConfig => '1.3.6.1.4.1.318.1.1.12.2.4',
  rPDULoadBankConfigTable => '1.3.6.1.4.1.318.1.1.12.2.4.1',
  rPDULoadBankConfigEntry => '1.3.6.1.4.1.318.1.1.12.2.4.1.1',
  rPDULoadBankConfigIndex => '1.3.6.1.4.1.318.1.1.12.2.4.1.1.1',
  rPDULoadBankConfigLowLoadThreshold => '1.3.6.1.4.1.318.1.1.12.2.4.1.1.2',
  rPDULoadBankConfigNearOverloadThreshold => '1.3.6.1.4.1.318.1.1.12.2.4.1.1.3',
  rPDULoadBankConfigOverloadThreshold => '1.3.6.1.4.1.318.1.1.12.2.4.1.1.4',
  rPDULoadBankConfigAlarm => '1.3.6.1.4.1.318.1.1.12.2.4.1.1.5',
  rPDULoadBankConfigAlarmDefinition => 'PowerNet-MIB::rPDULoadBankConfigAlarm',
  rPDUOutlet => '1.3.6.1.4.1.318.1.1.12.3',
  rPDUOutletDevice => '1.3.6.1.4.1.318.1.1.12.3.1',
  rPDUOutletDevCommand => '1.3.6.1.4.1.318.1.1.12.3.1.1',
  rPDUOutletDevCommandDefinition => 'PowerNet-MIB::rPDUOutletDevCommand',
  rPDUOutletDevColdstartDelay => '1.3.6.1.4.1.318.1.1.12.3.1.2',
  rPDUOutletDevNumCntrlOutlets => '1.3.6.1.4.1.318.1.1.12.3.1.3',
  rPDUOutletDevNumTotalOutlets => '1.3.6.1.4.1.318.1.1.12.3.1.4',
  rPDUOutletDevMonitoredOutlets => '1.3.6.1.4.1.318.1.1.12.3.1.5',
  rPDUOutletPhase => '1.3.6.1.4.1.318.1.1.12.3.2',
  rPDUOutletPhaseTable => '1.3.6.1.4.1.318.1.1.12.3.2.1',
  rPDUOutletPhaseEntry => '1.3.6.1.4.1.318.1.1.12.3.2.1.1',
  rPDUOutletPhaseIndex => '1.3.6.1.4.1.318.1.1.12.3.2.1.1.1',
  rPDUOutletPhaseIndexDefinition => 'PowerNet-MIB::rPDUOutletPhaseIndex',
  rPDUOutletPhaseOverloadRestriction => '1.3.6.1.4.1.318.1.1.12.3.2.1.1.2',
  rPDUOutletPhaseOverloadRestrictionDefinition => 'PowerNet-MIB::rPDUOutletPhaseOverloadRestriction',
  rPDUOutletControl => '1.3.6.1.4.1.318.1.1.12.3.3',
  rPDUOutletControlTable => '1.3.6.1.4.1.318.1.1.12.3.3.1',
  rPDUOutletControlEntry => '1.3.6.1.4.1.318.1.1.12.3.3.1.1',
  rPDUOutletControlIndex => '1.3.6.1.4.1.318.1.1.12.3.3.1.1.1',
  rPDUOutletControlOutletName => '1.3.6.1.4.1.318.1.1.12.3.3.1.1.2',
  rPDUOutletControlOutletPhase => '1.3.6.1.4.1.318.1.1.12.3.3.1.1.3',
  rPDUOutletControlOutletPhaseDefinition => 'PowerNet-MIB::rPDUOutletControlOutletPhase',
  rPDUOutletControlOutletCommand => '1.3.6.1.4.1.318.1.1.12.3.3.1.1.4',
  rPDUOutletControlOutletCommandDefinition => 'PowerNet-MIB::rPDUOutletControlOutletCommand',
  rPDUOutletControlOutletBank => '1.3.6.1.4.1.318.1.1.12.3.3.1.1.5',
  rPDUOutletConfig => '1.3.6.1.4.1.318.1.1.12.3.4',
  rPDUOutletConfigTable => '1.3.6.1.4.1.318.1.1.12.3.4.1',
  rPDUOutletConfigEntry => '1.3.6.1.4.1.318.1.1.12.3.4.1.1',
  rPDUOutletConfigIndex => '1.3.6.1.4.1.318.1.1.12.3.4.1.1.1',
  rPDUOutletConfigOutletName => '1.3.6.1.4.1.318.1.1.12.3.4.1.1.2',
  rPDUOutletConfigOutletPhase => '1.3.6.1.4.1.318.1.1.12.3.4.1.1.3',
  rPDUOutletConfigOutletPhaseDefinition => 'PowerNet-MIB::rPDUOutletConfigOutletPhase',
  rPDUOutletConfigPowerOnTime => '1.3.6.1.4.1.318.1.1.12.3.4.1.1.4',
  rPDUOutletConfigPowerOffTime => '1.3.6.1.4.1.318.1.1.12.3.4.1.1.5',
  rPDUOutletConfigRebootDuration => '1.3.6.1.4.1.318.1.1.12.3.4.1.1.6',
  rPDUOutletConfigOutletBank => '1.3.6.1.4.1.318.1.1.12.3.4.1.1.7',
  rPDUOutletConfigMonitoredTableSize => '1.3.6.1.4.1.318.1.1.12.3.4.2',
  rPDUOutletConfigMonitoredTable => '1.3.6.1.4.1.318.1.1.12.3.4.3',
  rPDUOutletConfigMonitoredEntry => '1.3.6.1.4.1.318.1.1.12.3.4.3.1',
  rPDUOutletConfigMonitoredIndex => '1.3.6.1.4.1.318.1.1.12.3.4.3.1.1',
  rPDUOutletConfigMonitoredName => '1.3.6.1.4.1.318.1.1.12.3.4.3.1.2',
  rPDUOutletConfigMonitoredNumber => '1.3.6.1.4.1.318.1.1.12.3.4.3.1.3',
  rPDUOutletConfigMonitoredLowLoadThreshold => '1.3.6.1.4.1.318.1.1.12.3.4.3.1.4',
  rPDUOutletConfigMonitoredNearOverloadThreshold => '1.3.6.1.4.1.318.1.1.12.3.4.3.1.5',
  rPDUOutletConfigMonitoredOverloadThreshold => '1.3.6.1.4.1.318.1.1.12.3.4.3.1.6',
  rPDUOutletStatus => '1.3.6.1.4.1.318.1.1.12.3.5',
  rPDUOutletStatusTable => '1.3.6.1.4.1.318.1.1.12.3.5.1',
  rPDUOutletStatusEntry => '1.3.6.1.4.1.318.1.1.12.3.5.1.1',
  rPDUOutletStatusIndex => '1.3.6.1.4.1.318.1.1.12.3.5.1.1.1',
  rPDUOutletStatusOutletName => '1.3.6.1.4.1.318.1.1.12.3.5.1.1.2',
  rPDUOutletStatusOutletPhase => '1.3.6.1.4.1.318.1.1.12.3.5.1.1.3',
  rPDUOutletStatusOutletPhaseDefinition => 'PowerNet-MIB::rPDUOutletStatusOutletPhase',
  rPDUOutletStatusOutletState => '1.3.6.1.4.1.318.1.1.12.3.5.1.1.4',
  rPDUOutletStatusOutletStateDefinition => 'PowerNet-MIB::rPDUOutletStatusOutletState',
  rPDUOutletStatusCommandPending => '1.3.6.1.4.1.318.1.1.12.3.5.1.1.5',
  rPDUOutletStatusCommandPendingDefinition => 'PowerNet-MIB::rPDUOutletStatusCommandPending',
  rPDUOutletStatusOutletBank => '1.3.6.1.4.1.318.1.1.12.3.5.1.1.6',
  rPDUOutletStatusLoad => '1.3.6.1.4.1.318.1.1.12.3.5.1.1.7',
  rPDUOutletBank => '1.3.6.1.4.1.318.1.1.12.3.6',
  rPDUOutletBankTable => '1.3.6.1.4.1.318.1.1.12.3.6.1',
  rPDUOutletBankEntry => '1.3.6.1.4.1.318.1.1.12.3.6.1.1',
  rPDUOutletBankIndex => '1.3.6.1.4.1.318.1.1.12.3.6.1.1.1',
  rPDUOutletBankOverloadRestriction => '1.3.6.1.4.1.318.1.1.12.3.6.1.1.2',
  rPDUOutletBankOverloadRestrictionDefinition => 'PowerNet-MIB::rPDUOutletBankOverloadRestriction',
  rPDUPowerSupply => '1.3.6.1.4.1.318.1.1.12.4',
  rPDUPowerSupplyDevice => '1.3.6.1.4.1.318.1.1.12.4.1',
  rPDUPowerSupply1Status => '1.3.6.1.4.1.318.1.1.12.4.1.1',
  rPDUPowerSupply1StatusDefinition => 'PowerNet-MIB::rPDUPowerSupply1Status',
  rPDUPowerSupply2Status => '1.3.6.1.4.1.318.1.1.12.4.1.2',
  rPDUPowerSupply2StatusDefinition => 'PowerNet-MIB::rPDUPowerSupply2Status',
  rPDUPowerSupplyAlarm => '1.3.6.1.4.1.318.1.1.12.4.1.3',
  rPDUPowerSupplyAlarmDefinition => 'PowerNet-MIB::rPDUPowerSupplyAlarm',
  rPDUStatus => '1.3.6.1.4.1.318.1.1.12.5',
  rPDUStatusBankTableSize => '1.3.6.1.4.1.318.1.1.12.5.1',
  rPDUStatusBankTable => '1.3.6.1.4.1.318.1.1.12.5.2',
  rPDUStatusBankEntry => '1.3.6.1.4.1.318.1.1.12.5.2.1',
  rPDUStatusBankIndex => '1.3.6.1.4.1.318.1.1.12.5.2.1.1',
  rPDUStatusBankNumber => '1.3.6.1.4.1.318.1.1.12.5.2.1.2',
  rPDUStatusBankState => '1.3.6.1.4.1.318.1.1.12.5.2.1.3',
  rPDUStatusBankStateDefinition => 'PowerNet-MIB::rPDUStatusBankState',
  rPDUStatusPhaseTableSize => '1.3.6.1.4.1.318.1.1.12.5.3',
  rPDUStatusPhaseTable => '1.3.6.1.4.1.318.1.1.12.5.4',
  rPDUStatusPhaseEntry => '1.3.6.1.4.1.318.1.1.12.5.4.1',
  rPDUStatusPhaseIndex => '1.3.6.1.4.1.318.1.1.12.5.4.1.1',
  rPDUStatusPhaseNumber => '1.3.6.1.4.1.318.1.1.12.5.4.1.2',
  rPDUStatusPhaseState => '1.3.6.1.4.1.318.1.1.12.5.4.1.3',
  rPDUStatusPhaseStateDefinition => 'PowerNet-MIB::rPDUStatusPhaseState',
  rPDUStatusOutletTableSize => '1.3.6.1.4.1.318.1.1.12.5.5',
  rPDUStatusOutletTable => '1.3.6.1.4.1.318.1.1.12.5.6',
  rPDUStatusOutletEntry => '1.3.6.1.4.1.318.1.1.12.5.6.1',
  rPDUStatusOutletIndex => '1.3.6.1.4.1.318.1.1.12.5.6.1.1',
  rPDUStatusOutletNumber => '1.3.6.1.4.1.318.1.1.12.5.6.1.2',
  rPDUStatusOutletState => '1.3.6.1.4.1.318.1.1.12.5.6.1.3',
  rPDUStatusOutletStateDefinition => 'PowerNet-MIB::rPDUStatusOutletState',
  airConditioners => '1.3.6.1.4.1.318.1.1.13',
  airFM => '1.3.6.1.4.1.318.1.1.13.1',
  airFMIdent => '1.3.6.1.4.1.318.1.1.13.1.1',
  airFMIdentName => '1.3.6.1.4.1.318.1.1.13.1.1.1',
  airFMIdentTableSize => '1.3.6.1.4.1.318.1.1.13.1.1.2',
  airFMIdentTable => '1.3.6.1.4.1.318.1.1.13.1.1.3',
  airFMIdentEntry => '1.3.6.1.4.1.318.1.1.13.1.1.3.1',
  airFMIdentModuleIndex => '1.3.6.1.4.1.318.1.1.13.1.1.3.1.1',
  airFMIdentModuleModelNumber => '1.3.6.1.4.1.318.1.1.13.1.1.3.1.2',
  airFMIdentModuleDateOfMfg => '1.3.6.1.4.1.318.1.1.13.1.1.3.1.3',
  airFMIdentModuleSerialNumber => '1.3.6.1.4.1.318.1.1.13.1.1.3.1.4',
  airFMIdentModuleFirmwareRev => '1.3.6.1.4.1.318.1.1.13.1.1.3.1.5',
  airFMIdentModuleHardwareRev => '1.3.6.1.4.1.318.1.1.13.1.1.3.1.6',
  airFMIdentLocation => '1.3.6.1.4.1.318.1.1.13.1.1.4',
  airFMIdentContact => '1.3.6.1.4.1.318.1.1.13.1.1.5',
  airFMStatus => '1.3.6.1.4.1.318.1.1.13.1.2',
  airFMStatusSystemOn => '1.3.6.1.4.1.318.1.1.13.1.2.1',
  airFMStatusSystemOnDefinition => 'PowerNet-MIB::airFMStatusSystemOn',
  airFMStatusSystemAverageRetTempC => '1.3.6.1.4.1.318.1.1.13.1.2.2',
  airFMStatusSystemAverageRetTempF => '1.3.6.1.4.1.318.1.1.13.1.2.3',
  airFMStatusSystemAverageRetHum => '1.3.6.1.4.1.318.1.1.13.1.2.4',
  airFMStatusSystemActionTempC => '1.3.6.1.4.1.318.1.1.13.1.2.5',
  airFMStatusSystemActionTempF => '1.3.6.1.4.1.318.1.1.13.1.2.6',
  airFMStatusSystemActionHum => '1.3.6.1.4.1.318.1.1.13.1.2.7',
  airFMStatusSystemRemoteHighTempC => '1.3.6.1.4.1.318.1.1.13.1.2.8',
  airFMStatusSystemRemoteHighTempF => '1.3.6.1.4.1.318.1.1.13.1.2.9',
  airFMStatusSystemRemoteAvgTempC => '1.3.6.1.4.1.318.1.1.13.1.2.10',
  airFMStatusSystemRemoteAvgTempF => '1.3.6.1.4.1.318.1.1.13.1.2.11',
  airFMStatusSystemRemoteAvgHum => '1.3.6.1.4.1.318.1.1.13.1.2.12',
  airFMStatusSystemRemoteLowTempC => '1.3.6.1.4.1.318.1.1.13.1.2.13',
  airFMStatusSystemRemoteLowTempF => '1.3.6.1.4.1.318.1.1.13.1.2.14',
  airFMStatusSystemCoolingEnabled => '1.3.6.1.4.1.318.1.1.13.1.2.15',
  airFMStatusSystemCoolingEnabledDefinition => 'PowerNet-MIB::airFMStatusSystemCoolingEnabled',
  airFMStatusSystemReheatingEnabled => '1.3.6.1.4.1.318.1.1.13.1.2.16',
  airFMStatusSystemReheatingEnabledDefinition => 'PowerNet-MIB::airFMStatusSystemReheatingEnabled',
  airFMStatusSystemHumidifyEnabled => '1.3.6.1.4.1.318.1.1.13.1.2.17',
  airFMStatusSystemHumidifyEnabledDefinition => 'PowerNet-MIB::airFMStatusSystemHumidifyEnabled',
  airFMStatusSystemDehumidifyEnabled => '1.3.6.1.4.1.318.1.1.13.1.2.18',
  airFMStatusSystemDehumidifyEnabledDefinition => 'PowerNet-MIB::airFMStatusSystemDehumidifyEnabled',
  airFMStatusModuleTableSize => '1.3.6.1.4.1.318.1.1.13.1.2.19',
  airFMStatusModuleTable => '1.3.6.1.4.1.318.1.1.13.1.2.20',
  airFMStatusModuleEntry => '1.3.6.1.4.1.318.1.1.13.1.2.20.1',
  airFMStatusModuleIndex => '1.3.6.1.4.1.318.1.1.13.1.2.20.1.1',
  airFMStatusModuleOutputCapacity => '1.3.6.1.4.1.318.1.1.13.1.2.20.1.2',
  airFMStatusModuleSupplyTempC => '1.3.6.1.4.1.318.1.1.13.1.2.20.1.3',
  airFMStatusModuleSupplyTempF => '1.3.6.1.4.1.318.1.1.13.1.2.20.1.4',
  airFMStatusModuleSupplyHum => '1.3.6.1.4.1.318.1.1.13.1.2.20.1.5',
  airFMStatusModuleReturnTempC => '1.3.6.1.4.1.318.1.1.13.1.2.20.1.6',
  airFMStatusModuleReturnTempF => '1.3.6.1.4.1.318.1.1.13.1.2.20.1.7',
  airFMStatusModuleReturnHum => '1.3.6.1.4.1.318.1.1.13.1.2.20.1.8',
  airFMGroup => '1.3.6.1.4.1.318.1.1.13.1.3',
  airFMGroupSysStatus => '1.3.6.1.4.1.318.1.1.13.1.3.1',
  airFMGroupSysStatusDefinition => 'PowerNet-MIB::airFMGroupSysStatus',
  airFMGroupSysRuntime => '1.3.6.1.4.1.318.1.1.13.1.3.2',
  airFMGroupSysRole => '1.3.6.1.4.1.318.1.1.13.1.3.3',
  airFMGroupSysRoleDefinition => 'PowerNet-MIB::airFMGroupSysRole',
  airFMGroupSysRoles => '1.3.6.1.4.1.318.1.1.13.1.3.4',
  airFMGroupSysRolesTableSize => '1.3.6.1.4.1.318.1.1.13.1.3.4.1',
  airFMGroupSysRolesTable => '1.3.6.1.4.1.318.1.1.13.1.3.4.2',
  airFMGroupSysRolesEntry => '1.3.6.1.4.1.318.1.1.13.1.3.4.2.1',
  airFMGroupSysIndex => '1.3.6.1.4.1.318.1.1.13.1.3.4.2.1.1',
  airFMGroupSysRoleStatus => '1.3.6.1.4.1.318.1.1.13.1.3.4.2.1.2',
  airFMGroupSysRoleStatusDefinition => 'PowerNet-MIB::airFMGroupSysRoleStatus',
  airFMGroupSysPresentRole => '1.3.6.1.4.1.318.1.1.13.1.3.4.2.1.3',
  airFMGroupSysPresentRoleDefinition => 'PowerNet-MIB::airFMGroupSysPresentRole',
  airFMGroupSysManualRoleSetting => '1.3.6.1.4.1.318.1.1.13.1.3.4.2.1.4',
  airFMGroupSysManualRoleSettingDefinition => 'PowerNet-MIB::airFMGroupSysManualRoleSetting',
  airFMGroupSysRunHours => '1.3.6.1.4.1.318.1.1.13.1.3.4.2.1.5',
  airFMGroupSysComm => '1.3.6.1.4.1.318.1.1.13.1.3.4.2.1.6',
  airFMGroupSysCommDefinition => 'PowerNet-MIB::airFMGroupSysComm',
  airFMGroupSysIPAddress => '1.3.6.1.4.1.318.1.1.13.1.3.4.2.1.7',
  airFMGroupSysRoleAssignment => '1.3.6.1.4.1.318.1.1.13.1.3.4.3',
  airFMGroupSysRoleAssignmentDefinition => 'PowerNet-MIB::airFMGroupSysRoleAssignment',
  airFMGroupAutoRoleNumPrimary => '1.3.6.1.4.1.318.1.1.13.1.3.4.4',
  airFMGroupAutoRoleNumPrimaryDefinition => 'PowerNet-MIB::airFMGroupAutoRoleNumPrimary',
  airFMGroupCfg => '1.3.6.1.4.1.318.1.1.13.1.3.5',
  airFMGroupCfgName => '1.3.6.1.4.1.318.1.1.13.1.3.5.1',
  airFMGroupCfgNumSystems => '1.3.6.1.4.1.318.1.1.13.1.3.5.2',
  airFMGroupCfgNumSystemsDefinition => 'PowerNet-MIB::airFMGroupCfgNumSystems',
  airFMGroupCfgIdleBlower => '1.3.6.1.4.1.318.1.1.13.1.3.5.3',
  airFMGroupCfgIdleBlowerDefinition => 'PowerNet-MIB::airFMGroupCfgIdleBlower',
  airFMGroupCfgShutdownSmoke => '1.3.6.1.4.1.318.1.1.13.1.3.5.4',
  airFMGroupCfgShutdownSmokeDefinition => 'PowerNet-MIB::airFMGroupCfgShutdownSmoke',
  airFMGroupCfgShutdownFire => '1.3.6.1.4.1.318.1.1.13.1.3.5.5',
  airFMGroupCfgShutdownFireDefinition => 'PowerNet-MIB::airFMGroupCfgShutdownFire',
  airFMGroupCfgFailoverCommLoss => '1.3.6.1.4.1.318.1.1.13.1.3.5.6',
  airFMGroupCfgFailoverCommLossDefinition => 'PowerNet-MIB::airFMGroupCfgFailoverCommLoss',
  airFMGroupCfgDmdFightStatus => '1.3.6.1.4.1.318.1.1.13.1.3.5.7',
  airFMGroupCfgDmdFightStatusDefinition => 'PowerNet-MIB::airFMGroupCfgDmdFightStatus',
  airFMGroupCfgDmdFightSetting => '1.3.6.1.4.1.318.1.1.13.1.3.5.8',
  airFMGroupCfgDmdFightSettingDefinition => 'PowerNet-MIB::airFMGroupCfgDmdFightSetting',
  airFMGroupCfgSetpointShareStatus => '1.3.6.1.4.1.318.1.1.13.1.3.5.9',
  airFMGroupCfgSetpointShareStatusDefinition => 'PowerNet-MIB::airFMGroupCfgSetpointShareStatus',
  airFMGroupCfgSetpointShareSetting => '1.3.6.1.4.1.318.1.1.13.1.3.5.10',
  airFMGroupCfgSetpointShareSettingDefinition => 'PowerNet-MIB::airFMGroupCfgSetpointShareSetting',
  airFMGroupCfgResetFieldServiceDefaults => '1.3.6.1.4.1.318.1.1.13.1.3.5.11',
  airFMGroupCfgResetFieldServiceDefaultsDefinition => 'PowerNet-MIB::airFMGroupCfgResetFieldServiceDefaults',
  airFMGroupLoadShare => '1.3.6.1.4.1.318.1.1.13.1.3.6',
  airFMGroupLoadShareCoolRequests => '1.3.6.1.4.1.318.1.1.13.1.3.6.1',
  airFMGroupLoadShareCoolRequestsDefinition => 'PowerNet-MIB::airFMGroupLoadShareCoolRequests',
  airFMGroupLoadShareCoolThreshC => '1.3.6.1.4.1.318.1.1.13.1.3.6.2',
  airFMGroupLoadShareCoolThreshF => '1.3.6.1.4.1.318.1.1.13.1.3.6.3',
  airFMGroupLoadShareReheatRequests => '1.3.6.1.4.1.318.1.1.13.1.3.6.4',
  airFMGroupLoadShareReheatRequestsDefinition => 'PowerNet-MIB::airFMGroupLoadShareReheatRequests',
  airFMGroupLoadShareReheatThreshC => '1.3.6.1.4.1.318.1.1.13.1.3.6.5',
  airFMGroupLoadShareReheatThreshF => '1.3.6.1.4.1.318.1.1.13.1.3.6.6',
  airFMGroupLoadShareHumRequests => '1.3.6.1.4.1.318.1.1.13.1.3.6.7',
  airFMGroupLoadShareHumRequestsDefinition => 'PowerNet-MIB::airFMGroupLoadShareHumRequests',
  airFMGroupLoadShareHumThresh => '1.3.6.1.4.1.318.1.1.13.1.3.6.8',
  airFMGroupLoadShareDehumRequests => '1.3.6.1.4.1.318.1.1.13.1.3.6.9',
  airFMGroupLoadShareDehumRequestsDefinition => 'PowerNet-MIB::airFMGroupLoadShareDehumRequests',
  airFMGroupLoadShareDehumThresh => '1.3.6.1.4.1.318.1.1.13.1.3.6.10',
  airFMGroupFailover => '1.3.6.1.4.1.318.1.1.13.1.3.7',
  airFMGroupFailoverSys => '1.3.6.1.4.1.318.1.1.13.1.3.7.1',
  airFMGroupFailoverSysAnyMinorAlarm => '1.3.6.1.4.1.318.1.1.13.1.3.7.1.1',
  airFMGroupFailoverSysAnyMinorAlarmDefinition => 'PowerNet-MIB::airFMGroupFailoverSysAnyMinorAlarm',
  airFMGroupFailoverSysAnyMajorAlarm => '1.3.6.1.4.1.318.1.1.13.1.3.7.1.2',
  airFMGroupFailoverSysAnyMajorAlarmDefinition => 'PowerNet-MIB::airFMGroupFailoverSysAnyMajorAlarm',
  airFMGroupFailoverSysHighEnvTemp => '1.3.6.1.4.1.318.1.1.13.1.3.7.1.3',
  airFMGroupFailoverSysHighEnvTempDefinition => 'PowerNet-MIB::airFMGroupFailoverSysHighEnvTemp',
  airFMGroupFailoverSysLowEnvTemp => '1.3.6.1.4.1.318.1.1.13.1.3.7.1.4',
  airFMGroupFailoverSysLowEnvTempDefinition => 'PowerNet-MIB::airFMGroupFailoverSysLowEnvTemp',
  airFMGroupFailoverSysHighEnvHum => '1.3.6.1.4.1.318.1.1.13.1.3.7.1.5',
  airFMGroupFailoverSysHighEnvHumDefinition => 'PowerNet-MIB::airFMGroupFailoverSysHighEnvHum',
  airFMGroupFailoverSysLowEnvHum => '1.3.6.1.4.1.318.1.1.13.1.3.7.1.6',
  airFMGroupFailoverSysLowEnvHumDefinition => 'PowerNet-MIB::airFMGroupFailoverSysLowEnvHum',
  airFMGroupFailoverSysFireAlarm => '1.3.6.1.4.1.318.1.1.13.1.3.7.1.7',
  airFMGroupFailoverSysFireAlarmDefinition => 'PowerNet-MIB::airFMGroupFailoverSysFireAlarm',
  airFMGroupFailoverSysSmokeAlarm => '1.3.6.1.4.1.318.1.1.13.1.3.7.1.8',
  airFMGroupFailoverSysSmokeAlarmDefinition => 'PowerNet-MIB::airFMGroupFailoverSysSmokeAlarm',
  airFMGroupFailoverSysCommLost => '1.3.6.1.4.1.318.1.1.13.1.3.7.1.9',
  airFMGroupFailoverSysCommLostDefinition => 'PowerNet-MIB::airFMGroupFailoverSysCommLost',
  airFMGroupFailoverSysSupplySensorFail => '1.3.6.1.4.1.318.1.1.13.1.3.7.1.10',
  airFMGroupFailoverSysSupplySensorFailDefinition => 'PowerNet-MIB::airFMGroupFailoverSysSupplySensorFail',
  airFMGroupFailoverSysReturnSensorFail => '1.3.6.1.4.1.318.1.1.13.1.3.7.1.11',
  airFMGroupFailoverSysReturnSensorFailDefinition => 'PowerNet-MIB::airFMGroupFailoverSysReturnSensorFail',
  airFMGroupFailoverSysPrimarySensorFail => '1.3.6.1.4.1.318.1.1.13.1.3.7.1.12',
  airFMGroupFailoverSysPrimarySensorFailDefinition => 'PowerNet-MIB::airFMGroupFailoverSysPrimarySensorFail',
  airFMGroupFailoverSysSecondarySensorFail => '1.3.6.1.4.1.318.1.1.13.1.3.7.1.13',
  airFMGroupFailoverSysSecondarySensorFailDefinition => 'PowerNet-MIB::airFMGroupFailoverSysSecondarySensorFail',
  airFMGroupFailoverSysNoSensorsAvailable => '1.3.6.1.4.1.318.1.1.13.1.3.7.1.14',
  airFMGroupFailoverSysNoSensorsAvailableDefinition => 'PowerNet-MIB::airFMGroupFailoverSysNoSensorsAvailable',
  airFMGroupFailoverMod => '1.3.6.1.4.1.318.1.1.13.1.3.7.2',
  airFMGroupFailoverModMaintRequired => '1.3.6.1.4.1.318.1.1.13.1.3.7.2.1',
  airFMGroupFailoverModMaintRequiredDefinition => 'PowerNet-MIB::airFMGroupFailoverModMaintRequired',
  airFMGroupFailoverModCoolFail => '1.3.6.1.4.1.318.1.1.13.1.3.7.2.2',
  airFMGroupFailoverModCoolFailDefinition => 'PowerNet-MIB::airFMGroupFailoverModCoolFail',
  airFMGroupFailoverModHumFail => '1.3.6.1.4.1.318.1.1.13.1.3.7.2.3',
  airFMGroupFailoverModHumFailDefinition => 'PowerNet-MIB::airFMGroupFailoverModHumFail',
  airFMGroupFailoverModBlwrCntrl1Fail => '1.3.6.1.4.1.318.1.1.13.1.3.7.2.4',
  airFMGroupFailoverModBlwrCntrl1FailDefinition => 'PowerNet-MIB::airFMGroupFailoverModBlwrCntrl1Fail',
  airFMGroupFailoverModBlwrCntrl2Fail => '1.3.6.1.4.1.318.1.1.13.1.3.7.2.5',
  airFMGroupFailoverModBlwrCntrl2FailDefinition => 'PowerNet-MIB::airFMGroupFailoverModBlwrCntrl2Fail',
  airFMGroupFailoverModHighFilterDP => '1.3.6.1.4.1.318.1.1.13.1.3.7.2.6',
  airFMGroupFailoverModHighFilterDPDefinition => 'PowerNet-MIB::airFMGroupFailoverModHighFilterDP',
  airFMGroupFailoverModHighSupplyTemp => '1.3.6.1.4.1.318.1.1.13.1.3.7.2.7',
  airFMGroupFailoverModHighSupplyTempDefinition => 'PowerNet-MIB::airFMGroupFailoverModHighSupplyTemp',
  airFMGroupFailoverModLowSupplyTemp => '1.3.6.1.4.1.318.1.1.13.1.3.7.2.8',
  airFMGroupFailoverModLowSupplyTempDefinition => 'PowerNet-MIB::airFMGroupFailoverModLowSupplyTemp',
  airFMGroupFailoverModLossOrLowAirFlow => '1.3.6.1.4.1.318.1.1.13.1.3.7.2.9',
  airFMGroupFailoverModLossOrLowAirFlowDefinition => 'PowerNet-MIB::airFMGroupFailoverModLossOrLowAirFlow',
  airFMGroupFailoverModHumReplaceCylinder => '1.3.6.1.4.1.318.1.1.13.1.3.7.2.10',
  airFMGroupFailoverModHumReplaceCylinderDefinition => 'PowerNet-MIB::airFMGroupFailoverModHumReplaceCylinder',
  airFMGroupFailoverModAirBlockInterlockOpen => '1.3.6.1.4.1.318.1.1.13.1.3.7.2.11',
  airFMGroupFailoverModAirBlockInterlockOpenDefinition => 'PowerNet-MIB::airFMGroupFailoverModAirBlockInterlockOpen',
  airFMGroupFailoverModWaterDetected => '1.3.6.1.4.1.318.1.1.13.1.3.7.2.12',
  airFMGroupFailoverModWaterDetectedDefinition => 'PowerNet-MIB::airFMGroupFailoverModWaterDetected',
  airFMGroupFailoverModCondensatePumpFail => '1.3.6.1.4.1.318.1.1.13.1.3.7.2.13',
  airFMGroupFailoverModCondensatePumpFailDefinition => 'PowerNet-MIB::airFMGroupFailoverModCondensatePumpFail',
  airFMSystem => '1.3.6.1.4.1.318.1.1.13.1.4',
  airFMSysStatus => '1.3.6.1.4.1.318.1.1.13.1.4.1',
  airFMSysNumber => '1.3.6.1.4.1.318.1.1.13.1.4.1.1',
  airFMSysNumberDefinition => 'PowerNet-MIB::airFMSysNumber',
  airFMSysPresentStatus => '1.3.6.1.4.1.318.1.1.13.1.4.1.2',
  airFMSysPresentStatusDefinition => 'PowerNet-MIB::airFMSysPresentStatus',
  airFMSysPresentRole => '1.3.6.1.4.1.318.1.1.13.1.4.1.3',
  airFMSysPresentRoleDefinition => 'PowerNet-MIB::airFMSysPresentRole',
  airFMSysRunHours => '1.3.6.1.4.1.318.1.1.13.1.4.1.4',
  airFMSysCoilFluidTempC => '1.3.6.1.4.1.318.1.1.13.1.4.1.5',
  airFMSysCoilFluidTempF => '1.3.6.1.4.1.318.1.1.13.1.4.1.6',
  airFMSysHotWaterTempC => '1.3.6.1.4.1.318.1.1.13.1.4.1.7',
  airFMSysHotWaterTempF => '1.3.6.1.4.1.318.1.1.13.1.4.1.8',
  airFMSysAvgReturnTempC => '1.3.6.1.4.1.318.1.1.13.1.4.1.9',
  airFMSysAvgReturnTempF => '1.3.6.1.4.1.318.1.1.13.1.4.1.10',
  airFMSysAvgReturnHum => '1.3.6.1.4.1.318.1.1.13.1.4.1.11',
  airFMSysAvgRemoteTempC => '1.3.6.1.4.1.318.1.1.13.1.4.1.12',
  airFMSysAvgRemoteTempF => '1.3.6.1.4.1.318.1.1.13.1.4.1.13',
  airFMSysAvgRemoteHum => '1.3.6.1.4.1.318.1.1.13.1.4.1.14',
  airFMSysMaxRemoteTempC => '1.3.6.1.4.1.318.1.1.13.1.4.1.15',
  airFMSysMaxRemoteTempF => '1.3.6.1.4.1.318.1.1.13.1.4.1.16',
  airFMSysMinRemoteTempC => '1.3.6.1.4.1.318.1.1.13.1.4.1.17',
  airFMSysMinRemoteTempF => '1.3.6.1.4.1.318.1.1.13.1.4.1.18',
  airFMSysTempCtrlMethod => '1.3.6.1.4.1.318.1.1.13.1.4.1.19',
  airFMSysTempCtrlMethodDefinition => 'PowerNet-MIB::airFMSysTempCtrlMethod',
  airFMSysActualTempCtrlMethod => '1.3.6.1.4.1.318.1.1.13.1.4.1.20',
  airFMSysActualTempCtrlMethodDefinition => 'PowerNet-MIB::airFMSysActualTempCtrlMethod',
  airFMSysHumCtrlMethod => '1.3.6.1.4.1.318.1.1.13.1.4.1.21',
  airFMSysHumCtrlMethodDefinition => 'PowerNet-MIB::airFMSysHumCtrlMethod',
  airFMSysActualHumCtrlMethod => '1.3.6.1.4.1.318.1.1.13.1.4.1.22',
  airFMSysActualHumCtrlMethodDefinition => 'PowerNet-MIB::airFMSysActualHumCtrlMethod',
  airFMSysCtrlTempC => '1.3.6.1.4.1.318.1.1.13.1.4.1.23',
  airFMSysCtrlTempF => '1.3.6.1.4.1.318.1.1.13.1.4.1.24',
  airFMSysCtrlHum => '1.3.6.1.4.1.318.1.1.13.1.4.1.25',
  airFMSysDemands => '1.3.6.1.4.1.318.1.1.13.1.4.2',
  airFMSysDXCoolingDmd => '1.3.6.1.4.1.318.1.1.13.1.4.2.1',
  airFMSysDXDehumDmd => '1.3.6.1.4.1.318.1.1.13.1.4.2.2',
  airFMSysDXActualCoolDehum => '1.3.6.1.4.1.318.1.1.13.1.4.2.3',
  airFMSysCoilFluidCoolDmd => '1.3.6.1.4.1.318.1.1.13.1.4.2.4',
  airFMSysCoilFluidDehumDmd => '1.3.6.1.4.1.318.1.1.13.1.4.2.5',
  airFMSysCoilFluidActualCoolDehum => '1.3.6.1.4.1.318.1.1.13.1.4.2.6',
  airFMSysElectricReheatDmd => '1.3.6.1.4.1.318.1.1.13.1.4.2.7',
  airFMSysActualElectricReheat => '1.3.6.1.4.1.318.1.1.13.1.4.2.8',
  airFMSysSteamHotGasReheatDmd => '1.3.6.1.4.1.318.1.1.13.1.4.2.9',
  airFMSysSteamHotGasReheatDmdDefinition => 'PowerNet-MIB::airFMSysSteamHotGasReheatDmd',
  airFMSysActualSteamHotGasReheat => '1.3.6.1.4.1.318.1.1.13.1.4.2.10',
  airFMSysActualSteamHotGasReheatDefinition => 'PowerNet-MIB::airFMSysActualSteamHotGasReheat',
  airFMSysSteamElectrodeHumDmd => '1.3.6.1.4.1.318.1.1.13.1.4.2.11',
  airFMSysActualSteamElectrodeHum => '1.3.6.1.4.1.318.1.1.13.1.4.2.12',
  airFMSysSteamHumDmd => '1.3.6.1.4.1.318.1.1.13.1.4.2.13',
  airFMSysSteamHumDmdDefinition => 'PowerNet-MIB::airFMSysSteamHumDmd',
  airFMSysActualSteamHum => '1.3.6.1.4.1.318.1.1.13.1.4.2.14',
  airFMSysActualSteamHumDefinition => 'PowerNet-MIB::airFMSysActualSteamHum',
  airFMSysSetup => '1.3.6.1.4.1.318.1.1.13.1.4.3',
  airFMSysNumModules => '1.3.6.1.4.1.318.1.1.13.1.4.3.1',
  airFMSysNumModulesDefinition => 'PowerNet-MIB::airFMSysNumModules',
  airFMSysNumPCIOMs => '1.3.6.1.4.1.318.1.1.13.1.4.3.2',
  airFMSysNumPCIOMsDefinition => 'PowerNet-MIB::airFMSysNumPCIOMs',
  airFMSysMainsVlt => '1.3.6.1.4.1.318.1.1.13.1.4.3.3',
  airFMSysUPSVlt => '1.3.6.1.4.1.318.1.1.13.1.4.3.4',
  airFMSysCoilCfg => '1.3.6.1.4.1.318.1.1.13.1.4.3.5',
  airFMSysCoilCfgDefinition => 'PowerNet-MIB::airFMSysCoilCfg',
  airFMSysRefrigType => '1.3.6.1.4.1.318.1.1.13.1.4.3.6',
  airFMSysRefrigTypeDefinition => 'PowerNet-MIB::airFMSysRefrigType',
  airFMSysHeatRejection => '1.3.6.1.4.1.318.1.1.13.1.4.3.7',
  airFMSysHeatRejectionDefinition => 'PowerNet-MIB::airFMSysHeatRejection',
  airFMSysDischAirPtrn => '1.3.6.1.4.1.318.1.1.13.1.4.3.8',
  airFMSysDischAirPtrnDefinition => 'PowerNet-MIB::airFMSysDischAirPtrn',
  airFMSysAirFltr => '1.3.6.1.4.1.318.1.1.13.1.4.3.9',
  airFMSysAirFltrDefinition => 'PowerNet-MIB::airFMSysAirFltr',
  airFMSysFlowSwitch => '1.3.6.1.4.1.318.1.1.13.1.4.3.10',
  airFMSysFlowSwitchDefinition => 'PowerNet-MIB::airFMSysFlowSwitch',
  airFMSysCoilFluidVlvAct => '1.3.6.1.4.1.318.1.1.13.1.4.3.11',
  airFMSysCoilFluidVlvActDefinition => 'PowerNet-MIB::airFMSysCoilFluidVlvAct',
  airFMSysCoilFluidVlvType => '1.3.6.1.4.1.318.1.1.13.1.4.3.12',
  airFMSysCoilFluidVlvTypeDefinition => 'PowerNet-MIB::airFMSysCoilFluidVlvType',
  airFMSysCndsrFluidVlvAct => '1.3.6.1.4.1.318.1.1.13.1.4.3.13',
  airFMSysCndsrFluidVlvActDefinition => 'PowerNet-MIB::airFMSysCndsrFluidVlvAct',
  airFMSysCndsrFluidVlvType => '1.3.6.1.4.1.318.1.1.13.1.4.3.14',
  airFMSysCndsrFluidVlvTypeDefinition => 'PowerNet-MIB::airFMSysCndsrFluidVlvType',
  airFMSysHotWaterVlvAct => '1.3.6.1.4.1.318.1.1.13.1.4.3.15',
  airFMSysHotWaterVlvActDefinition => 'PowerNet-MIB::airFMSysHotWaterVlvAct',
  airFMSysNumRemoteSensors => '1.3.6.1.4.1.318.1.1.13.1.4.3.16',
  airFMSysConfig => '1.3.6.1.4.1.318.1.1.13.1.4.4',
  airFMSysPrimaryControlSensor => '1.3.6.1.4.1.318.1.1.13.1.4.4.1',
  airFMSysPrimaryControlSensorDefinition => 'PowerNet-MIB::airFMSysPrimaryControlSensor',
  airFMSysRemoteSensorData => '1.3.6.1.4.1.318.1.1.13.1.4.4.2',
  airFMSysRemoteSensorDataDefinition => 'PowerNet-MIB::airFMSysRemoteSensorData',
  airFMSysFastStartup => '1.3.6.1.4.1.318.1.1.13.1.4.4.3',
  airFMSysFastStartupDefinition => 'PowerNet-MIB::airFMSysFastStartup',
  airFMSysStartupDelay => '1.3.6.1.4.1.318.1.1.13.1.4.4.4',
  airFMSysModeDelay => '1.3.6.1.4.1.318.1.1.13.1.4.4.5',
  airFMSysCommLossShutdownDelay => '1.3.6.1.4.1.318.1.1.13.1.4.4.6',
  airFMSysResetSysFailure => '1.3.6.1.4.1.318.1.1.13.1.4.4.7',
  airFMSysResetSysFailureDefinition => 'PowerNet-MIB::airFMSysResetSysFailure',
  airFMSysResetUserDflts => '1.3.6.1.4.1.318.1.1.13.1.4.4.8',
  airFMSysResetUserDfltsDefinition => 'PowerNet-MIB::airFMSysResetUserDflts',
  airFMSysResetFldSrvcDflts => '1.3.6.1.4.1.318.1.1.13.1.4.4.9',
  airFMSysResetFldSrvcDfltsDefinition => 'PowerNet-MIB::airFMSysResetFldSrvcDflts',
  airFMSysResetRunHours => '1.3.6.1.4.1.318.1.1.13.1.4.4.10',
  airFMSysResetRunHoursDefinition => 'PowerNet-MIB::airFMSysResetRunHours',
  airFMSysCooling => '1.3.6.1.4.1.318.1.1.13.1.4.5',
  airFMSysCompMinOnTime => '1.3.6.1.4.1.318.1.1.13.1.4.5.1',
  airFMSysCompMinOffTime => '1.3.6.1.4.1.318.1.1.13.1.4.5.2',
  airFMSysCompRotPeriod => '1.3.6.1.4.1.318.1.1.13.1.4.5.3',
  airFMSysEconIsolVlvOpenDelay => '1.3.6.1.4.1.318.1.1.13.1.4.5.4',
  airFMSysEconIsolVlvCloseDelay => '1.3.6.1.4.1.318.1.1.13.1.4.5.5',
  airFMSysCndsrFluidVlvCloseDelay => '1.3.6.1.4.1.318.1.1.13.1.4.5.6',
  airFMSysInterstageDelay => '1.3.6.1.4.1.318.1.1.13.1.4.5.7',
  airFMSysCoolState => '1.3.6.1.4.1.318.1.1.13.1.4.5.8',
  airFMSysCoolStateDefinition => 'PowerNet-MIB::airFMSysCoolState',
  airFMSysCoolEssFunction => '1.3.6.1.4.1.318.1.1.13.1.4.5.9',
  airFMSysCoolEssFunctionDefinition => 'PowerNet-MIB::airFMSysCoolEssFunction',
  airFMSysCoolSetpointC => '1.3.6.1.4.1.318.1.1.13.1.4.5.10',
  airFMSysCoolSetpointF => '1.3.6.1.4.1.318.1.1.13.1.4.5.11',
  airFMSysCoolDeadbandC => '1.3.6.1.4.1.318.1.1.13.1.4.5.12',
  airFMSysCoolDeadbandF => '1.3.6.1.4.1.318.1.1.13.1.4.5.13',
  airFMSysCoolEconIsolFunction => '1.3.6.1.4.1.318.1.1.13.1.4.5.14',
  airFMSysCoolEconIsolFunctionDefinition => 'PowerNet-MIB::airFMSysCoolEconIsolFunction',
  airFMSysSuctPresCompensation => '1.3.6.1.4.1.318.1.1.13.1.4.5.15',
  airFMSysSuctPresCompensationDefinition => 'PowerNet-MIB::airFMSysSuctPresCompensation',
  airFMSysCoilFluidActivThreshC => '1.3.6.1.4.1.318.1.1.13.1.4.5.16',
  airFMSysCoilFluidActivThreshF => '1.3.6.1.4.1.318.1.1.13.1.4.5.17',
  airFMSysCoilFluidActivDeadbandC => '1.3.6.1.4.1.318.1.1.13.1.4.5.18',
  airFMSysCoilFluidActivDeadbandF => '1.3.6.1.4.1.318.1.1.13.1.4.5.19',
  airFMSysCoolPIDMethod => '1.3.6.1.4.1.318.1.1.13.1.4.5.20',
  airFMSysCoolPIDMethodDefinition => 'PowerNet-MIB::airFMSysCoolPIDMethod',
  airFMSysCoolPIDGainP => '1.3.6.1.4.1.318.1.1.13.1.4.5.21',
  airFMSysCoolPIDResetRateI => '1.3.6.1.4.1.318.1.1.13.1.4.5.22',
  airFMSysCoolPIDDerivativeD => '1.3.6.1.4.1.318.1.1.13.1.4.5.23',
  airFMSysHumidify => '1.3.6.1.4.1.318.1.1.13.1.4.6',
  airFMSysHumState => '1.3.6.1.4.1.318.1.1.13.1.4.6.1',
  airFMSysHumStateDefinition => 'PowerNet-MIB::airFMSysHumState',
  airFMSysHumEssFunction => '1.3.6.1.4.1.318.1.1.13.1.4.6.2',
  airFMSysHumEssFunctionDefinition => 'PowerNet-MIB::airFMSysHumEssFunction',
  airFMSysHumSetpoint => '1.3.6.1.4.1.318.1.1.13.1.4.6.3',
  airFMSysHumDeadband => '1.3.6.1.4.1.318.1.1.13.1.4.6.4',
  airFMSysHumCtrlSetting => '1.3.6.1.4.1.318.1.1.13.1.4.6.5',
  airFMSysHumCtrlSettingDefinition => 'PowerNet-MIB::airFMSysHumCtrlSetting',
  airFMSysActualHumCtrl => '1.3.6.1.4.1.318.1.1.13.1.4.6.6',
  airFMSysActualHumCtrlDefinition => 'PowerNet-MIB::airFMSysActualHumCtrl',
  airFMSysHumSensBand => '1.3.6.1.4.1.318.1.1.13.1.4.6.7',
  airFMSysDehumidify => '1.3.6.1.4.1.318.1.1.13.1.4.7',
  airFMSysDehumState => '1.3.6.1.4.1.318.1.1.13.1.4.7.1',
  airFMSysDehumStateDefinition => 'PowerNet-MIB::airFMSysDehumState',
  airFMSysDehumEssFunction => '1.3.6.1.4.1.318.1.1.13.1.4.7.2',
  airFMSysDehumEssFunctionDefinition => 'PowerNet-MIB::airFMSysDehumEssFunction',
  airFMSysDehumSetpoint => '1.3.6.1.4.1.318.1.1.13.1.4.7.3',
  airFMSysDehumDeadband => '1.3.6.1.4.1.318.1.1.13.1.4.7.4',
  airFMSysDehumCapacity => '1.3.6.1.4.1.318.1.1.13.1.4.7.5',
  airFMSysDehumCapacityDefinition => 'PowerNet-MIB::airFMSysDehumCapacity',
  airFMSysDehumPIDMethod => '1.3.6.1.4.1.318.1.1.13.1.4.7.6',
  airFMSysDehumPIDMethodDefinition => 'PowerNet-MIB::airFMSysDehumPIDMethod',
  airFMSysDehumPIDGainP => '1.3.6.1.4.1.318.1.1.13.1.4.7.7',
  airFMSysDehumPIDResetRateI => '1.3.6.1.4.1.318.1.1.13.1.4.7.8',
  airFMSysDehumPIDDerivativeD => '1.3.6.1.4.1.318.1.1.13.1.4.7.9',
  airFMSysReheat => '1.3.6.1.4.1.318.1.1.13.1.4.8',
  airFMSysReheatState => '1.3.6.1.4.1.318.1.1.13.1.4.8.1',
  airFMSysReheatStateDefinition => 'PowerNet-MIB::airFMSysReheatState',
  airFMSysReheatEssFunction => '1.3.6.1.4.1.318.1.1.13.1.4.8.2',
  airFMSysReheatEssFunctionDefinition => 'PowerNet-MIB::airFMSysReheatEssFunction',
  airFMSysReheatSetpointC => '1.3.6.1.4.1.318.1.1.13.1.4.8.3',
  airFMSysReheatSetpointF => '1.3.6.1.4.1.318.1.1.13.1.4.8.4',
  airFMSysReheatDeadbandC => '1.3.6.1.4.1.318.1.1.13.1.4.8.5',
  airFMSysReheatDeadbandF => '1.3.6.1.4.1.318.1.1.13.1.4.8.6',
  airFMSysReheatPIDMethod => '1.3.6.1.4.1.318.1.1.13.1.4.8.7',
  airFMSysReheatPIDMethodDefinition => 'PowerNet-MIB::airFMSysReheatPIDMethod',
  airFMSysReheatPIDGainP => '1.3.6.1.4.1.318.1.1.13.1.4.8.8',
  airFMSysReheatPIDResetRateI => '1.3.6.1.4.1.318.1.1.13.1.4.8.9',
  airFMSysReheatPIDDerivativeD => '1.3.6.1.4.1.318.1.1.13.1.4.8.10',
  airFMSysThresholds => '1.3.6.1.4.1.318.1.1.13.1.4.9',
  airFMSysHighSplyTempC => '1.3.6.1.4.1.318.1.1.13.1.4.9.1',
  airFMSysHighSplyTempF => '1.3.6.1.4.1.318.1.1.13.1.4.9.2',
  airFMSysLowSplyTempC => '1.3.6.1.4.1.318.1.1.13.1.4.9.3',
  airFMSysLowSplyTempF => '1.3.6.1.4.1.318.1.1.13.1.4.9.4',
  airFMSysHighCoilFluidTempC => '1.3.6.1.4.1.318.1.1.13.1.4.9.5',
  airFMSysHighCoilFluidTempF => '1.3.6.1.4.1.318.1.1.13.1.4.9.6',
  airFMSysLowCoilFluidTempC => '1.3.6.1.4.1.318.1.1.13.1.4.9.7',
  airFMSysLowCoilFluidTempF => '1.3.6.1.4.1.318.1.1.13.1.4.9.8',
  airFMSysHighCtrlTempC => '1.3.6.1.4.1.318.1.1.13.1.4.9.9',
  airFMSysHighCtrlTempF => '1.3.6.1.4.1.318.1.1.13.1.4.9.10',
  airFMSysLowCtrlTempC => '1.3.6.1.4.1.318.1.1.13.1.4.9.11',
  airFMSysLowCtrlTempF => '1.3.6.1.4.1.318.1.1.13.1.4.9.12',
  airFMSysHighCtrlHum => '1.3.6.1.4.1.318.1.1.13.1.4.9.13',
  airFMSysLowCtrlHum => '1.3.6.1.4.1.318.1.1.13.1.4.9.14',
  airFMSysTempAlarmDelay => '1.3.6.1.4.1.318.1.1.13.1.4.9.15',
  airFMSysHumAlarmDelay => '1.3.6.1.4.1.318.1.1.13.1.4.9.16',
  airFMSysInputs => '1.3.6.1.4.1.318.1.1.13.1.4.10',
  airFMSysInputTableSize => '1.3.6.1.4.1.318.1.1.13.1.4.10.1',
  airFMSysInputTable => '1.3.6.1.4.1.318.1.1.13.1.4.10.2',
  airFMSysInputEntry => '1.3.6.1.4.1.318.1.1.13.1.4.10.2.1',
  airFMSysInputIndex => '1.3.6.1.4.1.318.1.1.13.1.4.10.2.1.1',
  airFMSysInputName => '1.3.6.1.4.1.318.1.1.13.1.4.10.2.1.2',
  airFMSysInputStatus => '1.3.6.1.4.1.318.1.1.13.1.4.10.2.1.3',
  airFMSysInputStatusDefinition => 'PowerNet-MIB::airFMSysInputStatus',
  airFMSysInputNormalState => '1.3.6.1.4.1.318.1.1.13.1.4.10.2.1.4',
  airFMSysInputNormalStateDefinition => 'PowerNet-MIB::airFMSysInputNormalState',
  airFMSysInputDelay => '1.3.6.1.4.1.318.1.1.13.1.4.10.2.1.5',
  airFMSysInputAlarmAction => '1.3.6.1.4.1.318.1.1.13.1.4.10.2.1.6',
  airFMSysInputAlarmActionDefinition => 'PowerNet-MIB::airFMSysInputAlarmAction',
  airFMSysOutputs => '1.3.6.1.4.1.318.1.1.13.1.4.11',
  airFMSysOutputTableSize => '1.3.6.1.4.1.318.1.1.13.1.4.11.1',
  airFMSysOutputTable => '1.3.6.1.4.1.318.1.1.13.1.4.11.2',
  airFMSysOutputEntry => '1.3.6.1.4.1.318.1.1.13.1.4.11.2.1',
  airFMSysOutputIndex => '1.3.6.1.4.1.318.1.1.13.1.4.11.2.1.1',
  airFMSysOutputStatus => '1.3.6.1.4.1.318.1.1.13.1.4.11.2.1.2',
  airFMSysOutputStatusDefinition => 'PowerNet-MIB::airFMSysOutputStatus',
  airFMSysOutputNormalState => '1.3.6.1.4.1.318.1.1.13.1.4.11.2.1.3',
  airFMSysOutputNormalStateDefinition => 'PowerNet-MIB::airFMSysOutputNormalState',
  airFMSysAlarmMap => '1.3.6.1.4.1.318.1.1.13.1.4.12',
  airFMSysAlarmMapSys => '1.3.6.1.4.1.318.1.1.13.1.4.12.1',
  airFMSysAlarmMapSysTableSize => '1.3.6.1.4.1.318.1.1.13.1.4.12.1.1',
  airFMSysAlarmMapSysTable => '1.3.6.1.4.1.318.1.1.13.1.4.12.1.2',
  airFMSysAlarmMapSysEntry => '1.3.6.1.4.1.318.1.1.13.1.4.12.1.2.1',
  airFMSysAlarmMapSysOutputIndex => '1.3.6.1.4.1.318.1.1.13.1.4.12.1.2.1.1',
  airFMSysAlarmMapSysAnyAlarm => '1.3.6.1.4.1.318.1.1.13.1.4.12.1.2.1.2',
  airFMSysAlarmMapSysAnyAlarmDefinition => 'PowerNet-MIB::airFMSysAlarmMapSysAnyAlarm',
  airFMSysAlarmMapSystemOn => '1.3.6.1.4.1.318.1.1.13.1.4.12.1.2.1.3',
  airFMSysAlarmMapSystemOnDefinition => 'PowerNet-MIB::airFMSysAlarmMapSystemOn',
  airFMSysAlarmMapSystemOffline => '1.3.6.1.4.1.318.1.1.13.1.4.12.1.2.1.4',
  airFMSysAlarmMapSystemOfflineDefinition => 'PowerNet-MIB::airFMSysAlarmMapSystemOffline',
  airFMSysAlarmMapSysHighEnvTemp => '1.3.6.1.4.1.318.1.1.13.1.4.12.1.2.1.5',
  airFMSysAlarmMapSysHighEnvTempDefinition => 'PowerNet-MIB::airFMSysAlarmMapSysHighEnvTemp',
  airFMSysAlarmMapSysLowEnvTemp => '1.3.6.1.4.1.318.1.1.13.1.4.12.1.2.1.6',
  airFMSysAlarmMapSysLowEnvTempDefinition => 'PowerNet-MIB::airFMSysAlarmMapSysLowEnvTemp',
  airFMSysAlarmMapSysHighEnvHum => '1.3.6.1.4.1.318.1.1.13.1.4.12.1.2.1.7',
  airFMSysAlarmMapSysHighEnvHumDefinition => 'PowerNet-MIB::airFMSysAlarmMapSysHighEnvHum',
  airFMSysAlarmMapSysLowEnvHum => '1.3.6.1.4.1.318.1.1.13.1.4.12.1.2.1.8',
  airFMSysAlarmMapSysLowEnvHumDefinition => 'PowerNet-MIB::airFMSysAlarmMapSysLowEnvHum',
  airFMSysAlarmMapSysFireDet => '1.3.6.1.4.1.318.1.1.13.1.4.12.1.2.1.9',
  airFMSysAlarmMapSysFireDetDefinition => 'PowerNet-MIB::airFMSysAlarmMapSysFireDet',
  airFMSysAlarmMapSysSmokeDet => '1.3.6.1.4.1.318.1.1.13.1.4.12.1.2.1.10',
  airFMSysAlarmMapSysSmokeDetDefinition => 'PowerNet-MIB::airFMSysAlarmMapSysSmokeDet',
  airFMSysAlarmMapSysEconIsol => '1.3.6.1.4.1.318.1.1.13.1.4.12.1.2.1.11',
  airFMSysAlarmMapSysEconIsolDefinition => 'PowerNet-MIB::airFMSysAlarmMapSysEconIsol',
  airFMSysAlarmMapSysSupplySensFail => '1.3.6.1.4.1.318.1.1.13.1.4.12.1.2.1.12',
  airFMSysAlarmMapSysSupplySensFailDefinition => 'PowerNet-MIB::airFMSysAlarmMapSysSupplySensFail',
  airFMSysAlarmMapSysReturnSensFail => '1.3.6.1.4.1.318.1.1.13.1.4.12.1.2.1.13',
  airFMSysAlarmMapSysReturnSensFailDefinition => 'PowerNet-MIB::airFMSysAlarmMapSysReturnSensFail',
  airFMSysAlarmMapSysRemSensRemoved => '1.3.6.1.4.1.318.1.1.13.1.4.12.1.2.1.14',
  airFMSysAlarmMapSysRemSensRemovedDefinition => 'PowerNet-MIB::airFMSysAlarmMapSysRemSensRemoved',
  airFMSysAlarmMapSysPrimSensFail => '1.3.6.1.4.1.318.1.1.13.1.4.12.1.2.1.15',
  airFMSysAlarmMapSysPrimSensFailDefinition => 'PowerNet-MIB::airFMSysAlarmMapSysPrimSensFail',
  airFMSysAlarmMapSysSecSensFail => '1.3.6.1.4.1.318.1.1.13.1.4.12.1.2.1.16',
  airFMSysAlarmMapSysSecSensFailDefinition => 'PowerNet-MIB::airFMSysAlarmMapSysSecSensFail',
  airFMSysAlarmMapSysSecSensActive => '1.3.6.1.4.1.318.1.1.13.1.4.12.1.2.1.17',
  airFMSysAlarmMapSysSecSensActiveDefinition => 'PowerNet-MIB::airFMSysAlarmMapSysSecSensActive',
  airFMSysAlarmMapMainMod => '1.3.6.1.4.1.318.1.1.13.1.4.12.2',
  airFMSysAlarmMapMainModTableSize => '1.3.6.1.4.1.318.1.1.13.1.4.12.2.1',
  airFMSysAlarmMapMainModTable => '1.3.6.1.4.1.318.1.1.13.1.4.12.2.2',
  airFMSysAlarmMapMainModEntry => '1.3.6.1.4.1.318.1.1.13.1.4.12.2.2.1',
  airFMSysAlarmMapMainModOutputIndex => '1.3.6.1.4.1.318.1.1.13.1.4.12.2.2.1.1',
  airFMSysAlarmMapMainModAnyAlarm => '1.3.6.1.4.1.318.1.1.13.1.4.12.2.2.1.2',
  airFMSysAlarmMapMainModAnyAlarmDefinition => 'PowerNet-MIB::airFMSysAlarmMapMainModAnyAlarm',
  airFMSysAlarmMapMainModMaintReq => '1.3.6.1.4.1.318.1.1.13.1.4.12.2.2.1.3',
  airFMSysAlarmMapMainModMaintReqDefinition => 'PowerNet-MIB::airFMSysAlarmMapMainModMaintReq',
  airFMSysAlarmMapMainModCoolFail => '1.3.6.1.4.1.318.1.1.13.1.4.12.2.2.1.4',
  airFMSysAlarmMapMainModCoolFailDefinition => 'PowerNet-MIB::airFMSysAlarmMapMainModCoolFail',
  airFMSysAlarmMapMainModHighSupplyTemp => '1.3.6.1.4.1.318.1.1.13.1.4.12.2.2.1.5',
  airFMSysAlarmMapMainModHighSupplyTempDefinition => 'PowerNet-MIB::airFMSysAlarmMapMainModHighSupplyTemp',
  airFMSysAlarmMapMainModLowSupplyTemp => '1.3.6.1.4.1.318.1.1.13.1.4.12.2.2.1.6',
  airFMSysAlarmMapMainModLowSupplyTempDefinition => 'PowerNet-MIB::airFMSysAlarmMapMainModLowSupplyTemp',
  airFMSysAlarmMapMainModHumFail => '1.3.6.1.4.1.318.1.1.13.1.4.12.2.2.1.7',
  airFMSysAlarmMapMainModHumFailDefinition => 'PowerNet-MIB::airFMSysAlarmMapMainModHumFail',
  airFMSysAlarmMapMainModHumReplCyl => '1.3.6.1.4.1.318.1.1.13.1.4.12.2.2.1.8',
  airFMSysAlarmMapMainModHumReplCylDefinition => 'PowerNet-MIB::airFMSysAlarmMapMainModHumReplCyl',
  airFMSysAlarmMapMainModCondPumpFail => '1.3.6.1.4.1.318.1.1.13.1.4.12.2.2.1.9',
  airFMSysAlarmMapMainModCondPumpFailDefinition => 'PowerNet-MIB::airFMSysAlarmMapMainModCondPumpFail',
  airFMSysAlarmMapMainModBlwrCntl1Fail => '1.3.6.1.4.1.318.1.1.13.1.4.12.2.2.1.10',
  airFMSysAlarmMapMainModBlwrCntl1FailDefinition => 'PowerNet-MIB::airFMSysAlarmMapMainModBlwrCntl1Fail',
  airFMSysAlarmMapMainModBlwrCntl2Fail => '1.3.6.1.4.1.318.1.1.13.1.4.12.2.2.1.11',
  airFMSysAlarmMapMainModBlwrCntl2FailDefinition => 'PowerNet-MIB::airFMSysAlarmMapMainModBlwrCntl2Fail',
  airFMSysAlarmMapMainModHighFltrDP => '1.3.6.1.4.1.318.1.1.13.1.4.12.2.2.1.12',
  airFMSysAlarmMapMainModHighFltrDPDefinition => 'PowerNet-MIB::airFMSysAlarmMapMainModHighFltrDP',
  airFMSysAlarmMapMainModLowAirFlow => '1.3.6.1.4.1.318.1.1.13.1.4.12.2.2.1.13',
  airFMSysAlarmMapMainModLowAirFlowDefinition => 'PowerNet-MIB::airFMSysAlarmMapMainModLowAirFlow',
  airFMSysAlarmMapMainModAirBlckIntOpen => '1.3.6.1.4.1.318.1.1.13.1.4.12.2.2.1.14',
  airFMSysAlarmMapMainModAirBlckIntOpenDefinition => 'PowerNet-MIB::airFMSysAlarmMapMainModAirBlckIntOpen',
  airFMSysAlarmMapMainModWaterDetected => '1.3.6.1.4.1.318.1.1.13.1.4.12.2.2.1.15',
  airFMSysAlarmMapMainModWaterDetectedDefinition => 'PowerNet-MIB::airFMSysAlarmMapMainModWaterDetected',
  airFMSysAlarmMapExpMod1 => '1.3.6.1.4.1.318.1.1.13.1.4.12.3',
  airFMSysAlarmMapExpMod1TableSize => '1.3.6.1.4.1.318.1.1.13.1.4.12.3.1',
  airFMSysAlarmMapExpMod1Table => '1.3.6.1.4.1.318.1.1.13.1.4.12.3.2',
  airFMSysAlarmMapExpMod1Entry => '1.3.6.1.4.1.318.1.1.13.1.4.12.3.2.1',
  airFMSysAlarmMapExpMod1OutputIndex => '1.3.6.1.4.1.318.1.1.13.1.4.12.3.2.1.1',
  airFMSysAlarmMapExpMod1AnyAlarm => '1.3.6.1.4.1.318.1.1.13.1.4.12.3.2.1.2',
  airFMSysAlarmMapExpMod1AnyAlarmDefinition => 'PowerNet-MIB::airFMSysAlarmMapExpMod1AnyAlarm',
  airFMSysAlarmMapExpMod1MaintReq => '1.3.6.1.4.1.318.1.1.13.1.4.12.3.2.1.3',
  airFMSysAlarmMapExpMod1MaintReqDefinition => 'PowerNet-MIB::airFMSysAlarmMapExpMod1MaintReq',
  airFMSysAlarmMapExpMod1CoolFail => '1.3.6.1.4.1.318.1.1.13.1.4.12.3.2.1.4',
  airFMSysAlarmMapExpMod1CoolFailDefinition => 'PowerNet-MIB::airFMSysAlarmMapExpMod1CoolFail',
  airFMSysAlarmMapExpMod1HighSupplyTemp => '1.3.6.1.4.1.318.1.1.13.1.4.12.3.2.1.5',
  airFMSysAlarmMapExpMod1HighSupplyTempDefinition => 'PowerNet-MIB::airFMSysAlarmMapExpMod1HighSupplyTemp',
  airFMSysAlarmMapExpMod1LowSupplyTemp => '1.3.6.1.4.1.318.1.1.13.1.4.12.3.2.1.6',
  airFMSysAlarmMapExpMod1LowSupplyTempDefinition => 'PowerNet-MIB::airFMSysAlarmMapExpMod1LowSupplyTemp',
  airFMSysAlarmMapExpMod1HumFail => '1.3.6.1.4.1.318.1.1.13.1.4.12.3.2.1.7',
  airFMSysAlarmMapExpMod1HumFailDefinition => 'PowerNet-MIB::airFMSysAlarmMapExpMod1HumFail',
  airFMSysAlarmMapExpMod1HumReplCyl => '1.3.6.1.4.1.318.1.1.13.1.4.12.3.2.1.8',
  airFMSysAlarmMapExpMod1HumReplCylDefinition => 'PowerNet-MIB::airFMSysAlarmMapExpMod1HumReplCyl',
  airFMSysAlarmMapExpMod1CondPumpFail => '1.3.6.1.4.1.318.1.1.13.1.4.12.3.2.1.9',
  airFMSysAlarmMapExpMod1CondPumpFailDefinition => 'PowerNet-MIB::airFMSysAlarmMapExpMod1CondPumpFail',
  airFMSysAlarmMapExpMod1BlwrCntl1Fail => '1.3.6.1.4.1.318.1.1.13.1.4.12.3.2.1.10',
  airFMSysAlarmMapExpMod1BlwrCntl1FailDefinition => 'PowerNet-MIB::airFMSysAlarmMapExpMod1BlwrCntl1Fail',
  airFMSysAlarmMapExpMod1BlwrCntl2Fail => '1.3.6.1.4.1.318.1.1.13.1.4.12.3.2.1.11',
  airFMSysAlarmMapExpMod1BlwrCntl2FailDefinition => 'PowerNet-MIB::airFMSysAlarmMapExpMod1BlwrCntl2Fail',
  airFMSysAlarmMapExpMod1HighFltrDP => '1.3.6.1.4.1.318.1.1.13.1.4.12.3.2.1.12',
  airFMSysAlarmMapExpMod1HighFltrDPDefinition => 'PowerNet-MIB::airFMSysAlarmMapExpMod1HighFltrDP',
  airFMSysAlarmMapExpMod1LowAirFlow => '1.3.6.1.4.1.318.1.1.13.1.4.12.3.2.1.13',
  airFMSysAlarmMapExpMod1LowAirFlowDefinition => 'PowerNet-MIB::airFMSysAlarmMapExpMod1LowAirFlow',
  airFMSysAlarmMapExpMod1AirBlckIntOpen => '1.3.6.1.4.1.318.1.1.13.1.4.12.3.2.1.14',
  airFMSysAlarmMapExpMod1AirBlckIntOpenDefinition => 'PowerNet-MIB::airFMSysAlarmMapExpMod1AirBlckIntOpen',
  airFMSysAlarmMapExpMod1WaterDetected => '1.3.6.1.4.1.318.1.1.13.1.4.12.3.2.1.15',
  airFMSysAlarmMapExpMod1WaterDetectedDefinition => 'PowerNet-MIB::airFMSysAlarmMapExpMod1WaterDetected',
  airFMSysAlarmMapExpMod2 => '1.3.6.1.4.1.318.1.1.13.1.4.12.4',
  airFMSysAlarmMapExpMod2TableSize => '1.3.6.1.4.1.318.1.1.13.1.4.12.4.1',
  airFMSysAlarmMapExpMod2Table => '1.3.6.1.4.1.318.1.1.13.1.4.12.4.2',
  airFMSysAlarmMapExpMod2Entry => '1.3.6.1.4.1.318.1.1.13.1.4.12.4.2.1',
  airFMSysAlarmMapExpMod2OutputIndex => '1.3.6.1.4.1.318.1.1.13.1.4.12.4.2.1.1',
  airFMSysAlarmMapExpMod2AnyAlarm => '1.3.6.1.4.1.318.1.1.13.1.4.12.4.2.1.2',
  airFMSysAlarmMapExpMod2AnyAlarmDefinition => 'PowerNet-MIB::airFMSysAlarmMapExpMod2AnyAlarm',
  airFMSysAlarmMapExpMod2MaintReq => '1.3.6.1.4.1.318.1.1.13.1.4.12.4.2.1.3',
  airFMSysAlarmMapExpMod2MaintReqDefinition => 'PowerNet-MIB::airFMSysAlarmMapExpMod2MaintReq',
  airFMSysAlarmMapExpMod2CoolFail => '1.3.6.1.4.1.318.1.1.13.1.4.12.4.2.1.4',
  airFMSysAlarmMapExpMod2CoolFailDefinition => 'PowerNet-MIB::airFMSysAlarmMapExpMod2CoolFail',
  airFMSysAlarmMapExpMod2HighSupplyTemp => '1.3.6.1.4.1.318.1.1.13.1.4.12.4.2.1.5',
  airFMSysAlarmMapExpMod2HighSupplyTempDefinition => 'PowerNet-MIB::airFMSysAlarmMapExpMod2HighSupplyTemp',
  airFMSysAlarmMapExpMod2LowSupplyTemp => '1.3.6.1.4.1.318.1.1.13.1.4.12.4.2.1.6',
  airFMSysAlarmMapExpMod2LowSupplyTempDefinition => 'PowerNet-MIB::airFMSysAlarmMapExpMod2LowSupplyTemp',
  airFMSysAlarmMapExpMod2HumFail => '1.3.6.1.4.1.318.1.1.13.1.4.12.4.2.1.7',
  airFMSysAlarmMapExpMod2HumFailDefinition => 'PowerNet-MIB::airFMSysAlarmMapExpMod2HumFail',
  airFMSysAlarmMapExpMod2HumReplCyl => '1.3.6.1.4.1.318.1.1.13.1.4.12.4.2.1.8',
  airFMSysAlarmMapExpMod2HumReplCylDefinition => 'PowerNet-MIB::airFMSysAlarmMapExpMod2HumReplCyl',
  airFMSysAlarmMapExpMod2CondPumpFail => '1.3.6.1.4.1.318.1.1.13.1.4.12.4.2.1.9',
  airFMSysAlarmMapExpMod2CondPumpFailDefinition => 'PowerNet-MIB::airFMSysAlarmMapExpMod2CondPumpFail',
  airFMSysAlarmMapExpMod2BlwrCntl1Fail => '1.3.6.1.4.1.318.1.1.13.1.4.12.4.2.1.10',
  airFMSysAlarmMapExpMod2BlwrCntl1FailDefinition => 'PowerNet-MIB::airFMSysAlarmMapExpMod2BlwrCntl1Fail',
  airFMSysAlarmMapExpMod2BlwrCntl2Fail => '1.3.6.1.4.1.318.1.1.13.1.4.12.4.2.1.11',
  airFMSysAlarmMapExpMod2BlwrCntl2FailDefinition => 'PowerNet-MIB::airFMSysAlarmMapExpMod2BlwrCntl2Fail',
  airFMSysAlarmMapExpMod2HighFltrDP => '1.3.6.1.4.1.318.1.1.13.1.4.12.4.2.1.12',
  airFMSysAlarmMapExpMod2HighFltrDPDefinition => 'PowerNet-MIB::airFMSysAlarmMapExpMod2HighFltrDP',
  airFMSysAlarmMapExpMod2LowAirFlow => '1.3.6.1.4.1.318.1.1.13.1.4.12.4.2.1.13',
  airFMSysAlarmMapExpMod2LowAirFlowDefinition => 'PowerNet-MIB::airFMSysAlarmMapExpMod2LowAirFlow',
  airFMSysAlarmMapExpMod2AirBlckIntOpen => '1.3.6.1.4.1.318.1.1.13.1.4.12.4.2.1.14',
  airFMSysAlarmMapExpMod2AirBlckIntOpenDefinition => 'PowerNet-MIB::airFMSysAlarmMapExpMod2AirBlckIntOpen',
  airFMSysAlarmMapExpMod2WaterDetected => '1.3.6.1.4.1.318.1.1.13.1.4.12.4.2.1.15',
  airFMSysAlarmMapExpMod2WaterDetectedDefinition => 'PowerNet-MIB::airFMSysAlarmMapExpMod2WaterDetected',
  airFMSysAlarmMapInput => '1.3.6.1.4.1.318.1.1.13.1.4.12.5',
  airFMSysAlarmMapInputTableSize => '1.3.6.1.4.1.318.1.1.13.1.4.12.5.1',
  airFMSysAlarmMapInputTable => '1.3.6.1.4.1.318.1.1.13.1.4.12.5.2',
  airFMSysAlarmMapInputEntry => '1.3.6.1.4.1.318.1.1.13.1.4.12.5.2.1',
  airFMSysAlarmMapInputOutputIndex => '1.3.6.1.4.1.318.1.1.13.1.4.12.5.2.1.1',
  airFMSysAlarmMapInput1 => '1.3.6.1.4.1.318.1.1.13.1.4.12.5.2.1.2',
  airFMSysAlarmMapInput1Definition => 'PowerNet-MIB::airFMSysAlarmMapInput1',
  airFMSysAlarmMapInput2 => '1.3.6.1.4.1.318.1.1.13.1.4.12.5.2.1.3',
  airFMSysAlarmMapInput2Definition => 'PowerNet-MIB::airFMSysAlarmMapInput2',
  airFMSysAlarmMapInput3 => '1.3.6.1.4.1.318.1.1.13.1.4.12.5.2.1.4',
  airFMSysAlarmMapInput3Definition => 'PowerNet-MIB::airFMSysAlarmMapInput3',
  airFMSysAlarmMapInput4 => '1.3.6.1.4.1.318.1.1.13.1.4.12.5.2.1.5',
  airFMSysAlarmMapInput4Definition => 'PowerNet-MIB::airFMSysAlarmMapInput4',
  airFMSysAlarmMapInput5 => '1.3.6.1.4.1.318.1.1.13.1.4.12.5.2.1.6',
  airFMSysAlarmMapInput5Definition => 'PowerNet-MIB::airFMSysAlarmMapInput5',
  airFMSysAlarmMapInput6 => '1.3.6.1.4.1.318.1.1.13.1.4.12.5.2.1.7',
  airFMSysAlarmMapInput6Definition => 'PowerNet-MIB::airFMSysAlarmMapInput6',
  airFMSysAlarmMapInput7 => '1.3.6.1.4.1.318.1.1.13.1.4.12.5.2.1.8',
  airFMSysAlarmMapInput7Definition => 'PowerNet-MIB::airFMSysAlarmMapInput7',
  airFMSysAlarmMapInput8 => '1.3.6.1.4.1.318.1.1.13.1.4.12.5.2.1.9',
  airFMSysAlarmMapInput8Definition => 'PowerNet-MIB::airFMSysAlarmMapInput8',
  airFMSysAlarmMapInput9 => '1.3.6.1.4.1.318.1.1.13.1.4.12.5.2.1.10',
  airFMSysAlarmMapInput9Definition => 'PowerNet-MIB::airFMSysAlarmMapInput9',
  airFMSysAlarmMapInput10 => '1.3.6.1.4.1.318.1.1.13.1.4.12.5.2.1.11',
  airFMSysAlarmMapInput10Definition => 'PowerNet-MIB::airFMSysAlarmMapInput10',
  airFMSysAlarmMapInput11 => '1.3.6.1.4.1.318.1.1.13.1.4.12.5.2.1.12',
  airFMSysAlarmMapInput11Definition => 'PowerNet-MIB::airFMSysAlarmMapInput11',
  airFMSysAlarmMapInput12 => '1.3.6.1.4.1.318.1.1.13.1.4.12.5.2.1.13',
  airFMSysAlarmMapInput12Definition => 'PowerNet-MIB::airFMSysAlarmMapInput12',
  airFMSysAlarmMapInput13 => '1.3.6.1.4.1.318.1.1.13.1.4.12.5.2.1.14',
  airFMSysAlarmMapInput13Definition => 'PowerNet-MIB::airFMSysAlarmMapInput13',
  airFMSysAlarmMapInput14 => '1.3.6.1.4.1.318.1.1.13.1.4.12.5.2.1.15',
  airFMSysAlarmMapInput14Definition => 'PowerNet-MIB::airFMSysAlarmMapInput14',
  airFMSysAlarmMapInput15 => '1.3.6.1.4.1.318.1.1.13.1.4.12.5.2.1.16',
  airFMSysAlarmMapInput15Definition => 'PowerNet-MIB::airFMSysAlarmMapInput15',
  airFMSysAlarmMapInput16 => '1.3.6.1.4.1.318.1.1.13.1.4.12.5.2.1.17',
  airFMSysAlarmMapInput16Definition => 'PowerNet-MIB::airFMSysAlarmMapInput16',
  airFMSysAlarmMapOutput => '1.3.6.1.4.1.318.1.1.13.1.4.12.6',
  airFMSysAlarmMapOutputTableSize => '1.3.6.1.4.1.318.1.1.13.1.4.12.6.1',
  airFMSysAlarmMapOutputTable => '1.3.6.1.4.1.318.1.1.13.1.4.12.6.2',
  airFMSysAlarmMapOutputEntry => '1.3.6.1.4.1.318.1.1.13.1.4.12.6.2.1',
  airFMSysAlarmMapOutputIndex => '1.3.6.1.4.1.318.1.1.13.1.4.12.6.2.1.1',
  airFMSysAlarmMapOutput1 => '1.3.6.1.4.1.318.1.1.13.1.4.12.6.2.1.2',
  airFMSysAlarmMapOutput1Definition => 'PowerNet-MIB::airFMSysAlarmMapOutput1',
  airFMSysAlarmMapOutput2 => '1.3.6.1.4.1.318.1.1.13.1.4.12.6.2.1.3',
  airFMSysAlarmMapOutput2Definition => 'PowerNet-MIB::airFMSysAlarmMapOutput2',
  airFMSysAlarmMapOutput3 => '1.3.6.1.4.1.318.1.1.13.1.4.12.6.2.1.4',
  airFMSysAlarmMapOutput3Definition => 'PowerNet-MIB::airFMSysAlarmMapOutput3',
  airFMSysAlarmMapOutput4 => '1.3.6.1.4.1.318.1.1.13.1.4.12.6.2.1.5',
  airFMSysAlarmMapOutput4Definition => 'PowerNet-MIB::airFMSysAlarmMapOutput4',
  airFMSysAlarmMapOutput5 => '1.3.6.1.4.1.318.1.1.13.1.4.12.6.2.1.6',
  airFMSysAlarmMapOutput5Definition => 'PowerNet-MIB::airFMSysAlarmMapOutput5',
  airFMSysAlarmMapOutput6 => '1.3.6.1.4.1.318.1.1.13.1.4.12.6.2.1.7',
  airFMSysAlarmMapOutput6Definition => 'PowerNet-MIB::airFMSysAlarmMapOutput6',
  airFMSysAlarmMapOutput7 => '1.3.6.1.4.1.318.1.1.13.1.4.12.6.2.1.8',
  airFMSysAlarmMapOutput7Definition => 'PowerNet-MIB::airFMSysAlarmMapOutput7',
  airFMSysAlarmMapOutput8 => '1.3.6.1.4.1.318.1.1.13.1.4.12.6.2.1.9',
  airFMSysAlarmMapOutput8Definition => 'PowerNet-MIB::airFMSysAlarmMapOutput8',
  airFMSysAlarmMapOutput9 => '1.3.6.1.4.1.318.1.1.13.1.4.12.6.2.1.10',
  airFMSysAlarmMapOutput9Definition => 'PowerNet-MIB::airFMSysAlarmMapOutput9',
  airFMSysAlarmMapOutput10 => '1.3.6.1.4.1.318.1.1.13.1.4.12.6.2.1.11',
  airFMSysAlarmMapOutput10Definition => 'PowerNet-MIB::airFMSysAlarmMapOutput10',
  airFMSysAlarmMapOutput11 => '1.3.6.1.4.1.318.1.1.13.1.4.12.6.2.1.12',
  airFMSysAlarmMapOutput11Definition => 'PowerNet-MIB::airFMSysAlarmMapOutput11',
  airFMSysAlarmMapOutput12 => '1.3.6.1.4.1.318.1.1.13.1.4.12.6.2.1.13',
  airFMSysAlarmMapOutput12Definition => 'PowerNet-MIB::airFMSysAlarmMapOutput12',
  airFMSysAlarmMapOutput13 => '1.3.6.1.4.1.318.1.1.13.1.4.12.6.2.1.14',
  airFMSysAlarmMapOutput13Definition => 'PowerNet-MIB::airFMSysAlarmMapOutput13',
  airFMSysAlarmMapOutput14 => '1.3.6.1.4.1.318.1.1.13.1.4.12.6.2.1.15',
  airFMSysAlarmMapOutput14Definition => 'PowerNet-MIB::airFMSysAlarmMapOutput14',
  airFMSysAlarmMapOutput15 => '1.3.6.1.4.1.318.1.1.13.1.4.12.6.2.1.16',
  airFMSysAlarmMapOutput15Definition => 'PowerNet-MIB::airFMSysAlarmMapOutput15',
  airFMSysAlarmMapOutput16 => '1.3.6.1.4.1.318.1.1.13.1.4.12.6.2.1.17',
  airFMSysAlarmMapOutput16Definition => 'PowerNet-MIB::airFMSysAlarmMapOutput16',
  airFMModule => '1.3.6.1.4.1.318.1.1.13.1.5',
  airFMModIdent => '1.3.6.1.4.1.318.1.1.13.1.5.1',
  airFMModIdentTableSize => '1.3.6.1.4.1.318.1.1.13.1.5.1.1',
  airFMModIdentTable => '1.3.6.1.4.1.318.1.1.13.1.5.1.2',
  airFMModIdentEntry => '1.3.6.1.4.1.318.1.1.13.1.5.1.2.1',
  airFMModIdentModuleIndex => '1.3.6.1.4.1.318.1.1.13.1.5.1.2.1.1',
  airFMModModelNumber => '1.3.6.1.4.1.318.1.1.13.1.5.1.2.1.2',
  airFMModSerialNumber => '1.3.6.1.4.1.318.1.1.13.1.5.1.2.1.3',
  airFMModManufactureDate => '1.3.6.1.4.1.318.1.1.13.1.5.1.2.1.4',
  airFMModFirmwareRev => '1.3.6.1.4.1.318.1.1.13.1.5.1.2.1.5',
  airFMModHardwareRev => '1.3.6.1.4.1.318.1.1.13.1.5.1.2.1.6',
  airFMModStatus => '1.3.6.1.4.1.318.1.1.13.1.5.2',
  airFMModStatusTableSize => '1.3.6.1.4.1.318.1.1.13.1.5.2.1',
  airFMModStatusTable => '1.3.6.1.4.1.318.1.1.13.1.5.2.2',
  airFMModStatusEntry => '1.3.6.1.4.1.318.1.1.13.1.5.2.2.1',
  airFMModStatusModuleIndex => '1.3.6.1.4.1.318.1.1.13.1.5.2.2.1.1',
  airFMModSupplyTempC => '1.3.6.1.4.1.318.1.1.13.1.5.2.2.1.2',
  airFMModSupplyTempF => '1.3.6.1.4.1.318.1.1.13.1.5.2.2.1.3',
  airFMModSupplyHum => '1.3.6.1.4.1.318.1.1.13.1.5.2.2.1.4',
  airFMModReturnTempC => '1.3.6.1.4.1.318.1.1.13.1.5.2.2.1.5',
  airFMModReturnTempF => '1.3.6.1.4.1.318.1.1.13.1.5.2.2.1.6',
  airFMModReturnHum => '1.3.6.1.4.1.318.1.1.13.1.5.2.2.1.7',
  airFMModFilterDiffPresPa => '1.3.6.1.4.1.318.1.1.13.1.5.2.2.1.8',
  airFMModFilterDiffPresInWC => '1.3.6.1.4.1.318.1.1.13.1.5.2.2.1.9',
  airFMModCoilDiffPresPa => '1.3.6.1.4.1.318.1.1.13.1.5.2.2.1.10',
  airFMModCoilDiffPresInWC => '1.3.6.1.4.1.318.1.1.13.1.5.2.2.1.11',
  airFMModProperties => '1.3.6.1.4.1.318.1.1.13.1.5.3',
  airFMModPropTableSize => '1.3.6.1.4.1.318.1.1.13.1.5.3.1',
  airFMModPropTable => '1.3.6.1.4.1.318.1.1.13.1.5.3.2',
  airFMModPropEntry => '1.3.6.1.4.1.318.1.1.13.1.5.3.2.1',
  airFMModPropModuleIndex => '1.3.6.1.4.1.318.1.1.13.1.5.3.2.1.1',
  airFMModOutputCapacity => '1.3.6.1.4.1.318.1.1.13.1.5.3.2.1.2',
  airFMModOutputCapacityDefinition => 'PowerNet-MIB::airFMModOutputCapacity',
  airFMModCapacityCtrl => '1.3.6.1.4.1.318.1.1.13.1.5.3.2.1.3',
  airFMModCapacityCtrlDefinition => 'PowerNet-MIB::airFMModCapacityCtrl',
  airFMModHeaterType => '1.3.6.1.4.1.318.1.1.13.1.5.3.2.1.4',
  airFMModHeaterTypeDefinition => 'PowerNet-MIB::airFMModHeaterType',
  airFMModElectricHeaterType => '1.3.6.1.4.1.318.1.1.13.1.5.3.2.1.5',
  airFMModElectricHeaterTypeDefinition => 'PowerNet-MIB::airFMModElectricHeaterType',
  airFMModHumidifierType => '1.3.6.1.4.1.318.1.1.13.1.5.3.2.1.6',
  airFMModHumidifierTypeDefinition => 'PowerNet-MIB::airFMModHumidifierType',
  airFMModBlwrFreqSetting => '1.3.6.1.4.1.318.1.1.13.1.5.3.2.1.7',
  airFMModNomCoilDiffPresPa => '1.3.6.1.4.1.318.1.1.13.1.5.3.2.1.8',
  airFMModNomCoilDiffPresInWC => '1.3.6.1.4.1.318.1.1.13.1.5.3.2.1.9',
  airFMModCondPump => '1.3.6.1.4.1.318.1.1.13.1.5.3.2.1.10',
  airFMModCondPumpDefinition => 'PowerNet-MIB::airFMModCondPump',
  airFMModFireDetector => '1.3.6.1.4.1.318.1.1.13.1.5.3.2.1.11',
  airFMModFireDetectorDefinition => 'PowerNet-MIB::airFMModFireDetector',
  airFMModSmokeDetector => '1.3.6.1.4.1.318.1.1.13.1.5.3.2.1.12',
  airFMModSmokeDetectorDefinition => 'PowerNet-MIB::airFMModSmokeDetector',
  airFMModWaterDetector => '1.3.6.1.4.1.318.1.1.13.1.5.3.2.1.13',
  airFMModWaterDetectorDefinition => 'PowerNet-MIB::airFMModWaterDetector',
  airFMModCooling => '1.3.6.1.4.1.318.1.1.13.1.5.4',
  airFMModCoolTableSize => '1.3.6.1.4.1.318.1.1.13.1.5.4.1',
  airFMModCoolTable => '1.3.6.1.4.1.318.1.1.13.1.5.4.2',
  airFMModCoolEntry => '1.3.6.1.4.1.318.1.1.13.1.5.4.2.1',
  airFMModCoolModuleIndex => '1.3.6.1.4.1.318.1.1.13.1.5.4.2.1.1',
  airFMModComp1 => '1.3.6.1.4.1.318.1.1.13.1.5.4.2.1.2',
  airFMModComp1Definition => 'PowerNet-MIB::airFMModComp1',
  airFMModComp2 => '1.3.6.1.4.1.318.1.1.13.1.5.4.2.1.3',
  airFMModComp2Definition => 'PowerNet-MIB::airFMModComp2',
  airFMModSuctPresKPa => '1.3.6.1.4.1.318.1.1.13.1.5.4.2.1.4',
  airFMModSuctPresPSI => '1.3.6.1.4.1.318.1.1.13.1.5.4.2.1.5',
  airFMModDischPresKPa => '1.3.6.1.4.1.318.1.1.13.1.5.4.2.1.6',
  airFMModDischPresPSI => '1.3.6.1.4.1.318.1.1.13.1.5.4.2.1.7',
  airFMModCondFluidVlvPos => '1.3.6.1.4.1.318.1.1.13.1.5.4.2.1.8',
  airFMModCoilFluidVlvPos => '1.3.6.1.4.1.318.1.1.13.1.5.4.2.1.9',
  airFMModHumidity => '1.3.6.1.4.1.318.1.1.13.1.5.5',
  airFMModHumTableSize => '1.3.6.1.4.1.318.1.1.13.1.5.5.1',
  airFMModHumTable => '1.3.6.1.4.1.318.1.1.13.1.5.5.2',
  airFMModHumEntry => '1.3.6.1.4.1.318.1.1.13.1.5.5.2.1',
  airFMModHumModuleIndex => '1.3.6.1.4.1.318.1.1.13.1.5.5.2.1.1',
  airFMModHumidifier => '1.3.6.1.4.1.318.1.1.13.1.5.5.2.1.2',
  airFMModHumidifierDefinition => 'PowerNet-MIB::airFMModHumidifier',
  airFMModElectrodeCurrent => '1.3.6.1.4.1.318.1.1.13.1.5.5.2.1.3',
  airFMModHumActualOutput => '1.3.6.1.4.1.318.1.1.13.1.5.5.2.1.4',
  airFMModWaterConductivity => '1.3.6.1.4.1.318.1.1.13.1.5.5.2.1.5',
  airFMModHotWaterVlvPos => '1.3.6.1.4.1.318.1.1.13.1.5.5.2.1.6',
  airFMModStmElectHumMode => '1.3.6.1.4.1.318.1.1.13.1.5.5.2.1.7',
  airFMModStmElectHumModeDefinition => 'PowerNet-MIB::airFMModStmElectHumMode',
  airFMModBlower1 => '1.3.6.1.4.1.318.1.1.13.1.5.6',
  airFMModBlwr1TableSize => '1.3.6.1.4.1.318.1.1.13.1.5.6.1',
  airFMModBlwr1Table => '1.3.6.1.4.1.318.1.1.13.1.5.6.2',
  airFMModBlwr1Entry => '1.3.6.1.4.1.318.1.1.13.1.5.6.2.1',
  airFMModBlwr1ModuleIndex => '1.3.6.1.4.1.318.1.1.13.1.5.6.2.1.1',
  airFMModBlwr1CtrlType => '1.3.6.1.4.1.318.1.1.13.1.5.6.2.1.2',
  airFMModBlwr1CtrlTypeDefinition => 'PowerNet-MIB::airFMModBlwr1CtrlType',
  airFMModBlwr1CmdFreq => '1.3.6.1.4.1.318.1.1.13.1.5.6.2.1.3',
  airFMModBlwr1ActFreq => '1.3.6.1.4.1.318.1.1.13.1.5.6.2.1.4',
  airFMModBlwr1Poles => '1.3.6.1.4.1.318.1.1.13.1.5.6.2.1.5',
  airFMModBlwr1RatedHorsePower => '1.3.6.1.4.1.318.1.1.13.1.5.6.2.1.6',
  airFMModBlwr1RatedCurrent => '1.3.6.1.4.1.318.1.1.13.1.5.6.2.1.7',
  airFMModBlwr1ActTorq => '1.3.6.1.4.1.318.1.1.13.1.5.6.2.1.8',
  airFMModBlwr1Current => '1.3.6.1.4.1.318.1.1.13.1.5.6.2.1.9',
  airFMModBlwr1Vlt => '1.3.6.1.4.1.318.1.1.13.1.5.6.2.1.10',
  airFMModBlwr1DCLinkVlt => '1.3.6.1.4.1.318.1.1.13.1.5.6.2.1.11',
  airFMModBlwr1AccTime => '1.3.6.1.4.1.318.1.1.13.1.5.6.2.1.12',
  airFMModBlwr1DecTime => '1.3.6.1.4.1.318.1.1.13.1.5.6.2.1.13',
  airFMModBlwr1CapLife => '1.3.6.1.4.1.318.1.1.13.1.5.6.2.1.14',
  airFMModBlwr1CtrlCoolFanLife => '1.3.6.1.4.1.318.1.1.13.1.5.6.2.1.15',
  airFMModBlwr1ElOvMode => '1.3.6.1.4.1.318.1.1.13.1.5.6.2.1.16',
  airFMModBlwr1ElOvModeDefinition => 'PowerNet-MIB::airFMModBlwr1ElOvMode',
  airFMModBlwr1ElOvSetting => '1.3.6.1.4.1.318.1.1.13.1.5.6.2.1.17',
  airFMModBlwr1ElOvTimeConst => '1.3.6.1.4.1.318.1.1.13.1.5.6.2.1.18',
  airFMModBlwr1FanPower => '1.3.6.1.4.1.318.1.1.13.1.5.6.2.1.19',
  airFMModBlwr1HeatsinkTempC => '1.3.6.1.4.1.318.1.1.13.1.5.6.2.1.20',
  airFMModBlwr1HeatsinkTempF => '1.3.6.1.4.1.318.1.1.13.1.5.6.2.1.21',
  airFMModBlwr1ChokeTempC => '1.3.6.1.4.1.318.1.1.13.1.5.6.2.1.22',
  airFMModBlwr1ChokeTempF => '1.3.6.1.4.1.318.1.1.13.1.5.6.2.1.23',
  airFMModBlwr1InverterTempC => '1.3.6.1.4.1.318.1.1.13.1.5.6.2.1.24',
  airFMModBlwr1InverterTempF => '1.3.6.1.4.1.318.1.1.13.1.5.6.2.1.25',
  airFMModBlower2 => '1.3.6.1.4.1.318.1.1.13.1.5.7',
  airFMModBlwr2TableSize => '1.3.6.1.4.1.318.1.1.13.1.5.7.1',
  airFMModBlwr2Table => '1.3.6.1.4.1.318.1.1.13.1.5.7.2',
  airFMModBlwr2Entry => '1.3.6.1.4.1.318.1.1.13.1.5.7.2.1',
  airFMModBlwr2ModuleIndex => '1.3.6.1.4.1.318.1.1.13.1.5.7.2.1.1',
  airFMModBlwr2CtrlType => '1.3.6.1.4.1.318.1.1.13.1.5.7.2.1.2',
  airFMModBlwr2CtrlTypeDefinition => 'PowerNet-MIB::airFMModBlwr2CtrlType',
  airFMModBlwr2CmdFreq => '1.3.6.1.4.1.318.1.1.13.1.5.7.2.1.3',
  airFMModBlwr2ActFreq => '1.3.6.1.4.1.318.1.1.13.1.5.7.2.1.4',
  airFMModBlwr2Poles => '1.3.6.1.4.1.318.1.1.13.1.5.7.2.1.5',
  airFMModBlwr2RatedHorsePower => '1.3.6.1.4.1.318.1.1.13.1.5.7.2.1.6',
  airFMModBlwr2RatedCurrent => '1.3.6.1.4.1.318.1.1.13.1.5.7.2.1.7',
  airFMModBlwr2ActTorq => '1.3.6.1.4.1.318.1.1.13.1.5.7.2.1.8',
  airFMModBlwr2Current => '1.3.6.1.4.1.318.1.1.13.1.5.7.2.1.9',
  airFMModBlwr2Vlt => '1.3.6.1.4.1.318.1.1.13.1.5.7.2.1.10',
  airFMModBlwr2DCLinkVlt => '1.3.6.1.4.1.318.1.1.13.1.5.7.2.1.11',
  airFMModBlwr2AccTime => '1.3.6.1.4.1.318.1.1.13.1.5.7.2.1.12',
  airFMModBlwr2DecTime => '1.3.6.1.4.1.318.1.1.13.1.5.7.2.1.13',
  airFMModBlwr2CapLife => '1.3.6.1.4.1.318.1.1.13.1.5.7.2.1.14',
  airFMModBlwr2CtrlCoolFanLife => '1.3.6.1.4.1.318.1.1.13.1.5.7.2.1.15',
  airFMModBlwr2ElOvMode => '1.3.6.1.4.1.318.1.1.13.1.5.7.2.1.16',
  airFMModBlwr2ElOvModeDefinition => 'PowerNet-MIB::airFMModBlwr2ElOvMode',
  airFMModBlwr2ElOvSetting => '1.3.6.1.4.1.318.1.1.13.1.5.7.2.1.17',
  airFMModBlwr2ElOvTimeConst => '1.3.6.1.4.1.318.1.1.13.1.5.7.2.1.18',
  airFMModBlwr2FanPower => '1.3.6.1.4.1.318.1.1.13.1.5.7.2.1.19',
  airFMModBlwr2HeatsinkTempC => '1.3.6.1.4.1.318.1.1.13.1.5.7.2.1.20',
  airFMModBlwr2HeatsinkTempF => '1.3.6.1.4.1.318.1.1.13.1.5.7.2.1.21',
  airFMModBlwr2ChokeTempC => '1.3.6.1.4.1.318.1.1.13.1.5.7.2.1.22',
  airFMModBlwr2ChokeTempF => '1.3.6.1.4.1.318.1.1.13.1.5.7.2.1.23',
  airFMModBlwr2InverterTempC => '1.3.6.1.4.1.318.1.1.13.1.5.7.2.1.24',
  airFMModBlwr2InverterTempF => '1.3.6.1.4.1.318.1.1.13.1.5.7.2.1.25',
  airFMModRunHours => '1.3.6.1.4.1.318.1.1.13.1.5.8',
  airFMModRHTableSize => '1.3.6.1.4.1.318.1.1.13.1.5.8.1',
  airFMModRHTable => '1.3.6.1.4.1.318.1.1.13.1.5.8.2',
  airFMModRHEntry => '1.3.6.1.4.1.318.1.1.13.1.5.8.2.1',
  airFMModRHModuleIndex => '1.3.6.1.4.1.318.1.1.13.1.5.8.2.1.1',
  airFMModRHComp1 => '1.3.6.1.4.1.318.1.1.13.1.5.8.2.1.2',
  airFMModRHComp2 => '1.3.6.1.4.1.318.1.1.13.1.5.8.2.1.3',
  airFMModRHHeater => '1.3.6.1.4.1.318.1.1.13.1.5.8.2.1.4',
  airFMModRHHum => '1.3.6.1.4.1.318.1.1.13.1.5.8.2.1.5',
  airFMModRHBlwr1 => '1.3.6.1.4.1.318.1.1.13.1.5.8.2.1.6',
  airFMModRHBlwr2 => '1.3.6.1.4.1.318.1.1.13.1.5.8.2.1.7',
  airFMModRHBlwrCtrl1 => '1.3.6.1.4.1.318.1.1.13.1.5.8.2.1.8',
  airFMModRHBlwrCtrl2 => '1.3.6.1.4.1.318.1.1.13.1.5.8.2.1.9',
  airFMModRHComp1Reset => '1.3.6.1.4.1.318.1.1.13.1.5.8.2.1.10',
  airFMModRHComp1ResetDefinition => 'PowerNet-MIB::airFMModRHComp1Reset',
  airFMModRHComp2Reset => '1.3.6.1.4.1.318.1.1.13.1.5.8.2.1.11',
  airFMModRHComp2ResetDefinition => 'PowerNet-MIB::airFMModRHComp2Reset',
  airFMModRHHeaterReset => '1.3.6.1.4.1.318.1.1.13.1.5.8.2.1.12',
  airFMModRHHeaterResetDefinition => 'PowerNet-MIB::airFMModRHHeaterReset',
  airFMModRHHumReset => '1.3.6.1.4.1.318.1.1.13.1.5.8.2.1.13',
  airFMModRHHumResetDefinition => 'PowerNet-MIB::airFMModRHHumReset',
  airFMModRHBlwr1Reset => '1.3.6.1.4.1.318.1.1.13.1.5.8.2.1.14',
  airFMModRHBlwr1ResetDefinition => 'PowerNet-MIB::airFMModRHBlwr1Reset',
  airFMModRHBlwr2Reset => '1.3.6.1.4.1.318.1.1.13.1.5.8.2.1.15',
  airFMModRHBlwr2ResetDefinition => 'PowerNet-MIB::airFMModRHBlwr2Reset',
  airFMModServIntervals => '1.3.6.1.4.1.318.1.1.13.1.5.9',
  airFMModServIntComp1 => '1.3.6.1.4.1.318.1.1.13.1.5.9.1',
  airFMModServIntComp2 => '1.3.6.1.4.1.318.1.1.13.1.5.9.2',
  airFMModServIntHeater => '1.3.6.1.4.1.318.1.1.13.1.5.9.3',
  airFMModServIntHum => '1.3.6.1.4.1.318.1.1.13.1.5.9.4',
  airFMModServIntBlwr1 => '1.3.6.1.4.1.318.1.1.13.1.5.9.5',
  airFMModServIntBlwr2 => '1.3.6.1.4.1.318.1.1.13.1.5.9.6',
  airFMModServIntBlwrCtrl1 => '1.3.6.1.4.1.318.1.1.13.1.5.9.7',
  airFMModServIntBlwrCtrl2 => '1.3.6.1.4.1.318.1.1.13.1.5.9.8',
  airFMModServIntResets => '1.3.6.1.4.1.318.1.1.13.1.5.10',
  airFMModServIntResetTableSize => '1.3.6.1.4.1.318.1.1.13.1.5.10.1',
  airFMModServIntResetTable => '1.3.6.1.4.1.318.1.1.13.1.5.10.2',
  airFMModServIntResetEntry => '1.3.6.1.4.1.318.1.1.13.1.5.10.2.1',
  airFMModServIntResetModuleIndex => '1.3.6.1.4.1.318.1.1.13.1.5.10.2.1.1',
  airFMModServIntComp1Reset => '1.3.6.1.4.1.318.1.1.13.1.5.10.2.1.2',
  airFMModServIntComp1ResetDefinition => 'PowerNet-MIB::airFMModServIntComp1Reset',
  airFMModServIntComp2Reset => '1.3.6.1.4.1.318.1.1.13.1.5.10.2.1.3',
  airFMModServIntComp2ResetDefinition => 'PowerNet-MIB::airFMModServIntComp2Reset',
  airFMModServIntHeaterReset => '1.3.6.1.4.1.318.1.1.13.1.5.10.2.1.4',
  airFMModServIntHeaterResetDefinition => 'PowerNet-MIB::airFMModServIntHeaterReset',
  airFMModServIntHumReset => '1.3.6.1.4.1.318.1.1.13.1.5.10.2.1.5',
  airFMModServIntHumResetDefinition => 'PowerNet-MIB::airFMModServIntHumReset',
  airFMModServIntBlwr1Reset => '1.3.6.1.4.1.318.1.1.13.1.5.10.2.1.6',
  airFMModServIntBlwr1ResetDefinition => 'PowerNet-MIB::airFMModServIntBlwr1Reset',
  airFMModServIntBlwr2Reset => '1.3.6.1.4.1.318.1.1.13.1.5.10.2.1.7',
  airFMModServIntBlwr2ResetDefinition => 'PowerNet-MIB::airFMModServIntBlwr2Reset',
  airFMModServIntBlwrCtrl1Reset => '1.3.6.1.4.1.318.1.1.13.1.5.10.2.1.8',
  airFMModServIntBlwrCtrl1ResetDefinition => 'PowerNet-MIB::airFMModServIntBlwrCtrl1Reset',
  airFMModServIntBlwrCtrl2Reset => '1.3.6.1.4.1.318.1.1.13.1.5.10.2.1.9',
  airFMModServIntBlwrCtrl2ResetDefinition => 'PowerNet-MIB::airFMModServIntBlwrCtrl2Reset',
  airFMAlarms => '1.3.6.1.4.1.318.1.1.13.1.6',
  airFMAlarmClearActiveGroupAlarms => '1.3.6.1.4.1.318.1.1.13.1.6.1',
  airFMAlarmClearActiveGroupAlarmsDefinition => 'PowerNet-MIB::airFMAlarmClearActiveGroupAlarms',
  airFMAlarmClearActiveSysModAlarms => '1.3.6.1.4.1.318.1.1.13.1.6.2',
  airFMAlarmClearActiveSysModAlarmsDefinition => 'PowerNet-MIB::airFMAlarmClearActiveSysModAlarms',
  airFMAlarmConditionsTableSize => '1.3.6.1.4.1.318.1.1.13.1.6.3',
  airFMAlarmConditionsTable => '1.3.6.1.4.1.318.1.1.13.1.6.4',
  airFMAlarmConditionsEntry => '1.3.6.1.4.1.318.1.1.13.1.6.4.1',
  airFMAlarmConditionsIndex => '1.3.6.1.4.1.318.1.1.13.1.6.4.1.1',
  airFMAlarmSeverity => '1.3.6.1.4.1.318.1.1.13.1.6.4.1.2',
  airFMAlarmSeverityDefinition => 'PowerNet-MIB::airFMAlarmSeverity',
  airFMAlarmType => '1.3.6.1.4.1.318.1.1.13.1.6.4.1.3',
  airFMAlarmTypeDefinition => 'PowerNet-MIB::airFMAlarmType',
  airFMEventCode => '1.3.6.1.4.1.318.1.1.13.1.6.4.1.4',
  airFMAlarmDate => '1.3.6.1.4.1.318.1.1.13.1.6.4.1.5',
  airFMAlarmTime => '1.3.6.1.4.1.318.1.1.13.1.6.4.1.6',
  airFMAlarmDescription => '1.3.6.1.4.1.318.1.1.13.1.6.4.1.7',
  airPA => '1.3.6.1.4.1.318.1.1.13.2',
  airPAIdent => '1.3.6.1.4.1.318.1.1.13.2.1',
  airPAIdentName => '1.3.6.1.4.1.318.1.1.13.2.1.1',
  airPAModelNumber => '1.3.6.1.4.1.318.1.1.13.2.1.2',
  airPADateOfManufacture => '1.3.6.1.4.1.318.1.1.13.2.1.3',
  airPASerialNumber => '1.3.6.1.4.1.318.1.1.13.2.1.4',
  airPAFirmwareRevision => '1.3.6.1.4.1.318.1.1.13.2.1.5',
  airPAHardwareRevision => '1.3.6.1.4.1.318.1.1.13.2.1.6',
  airPAStatus => '1.3.6.1.4.1.318.1.1.13.2.2',
  airPASystemPower => '1.3.6.1.4.1.318.1.1.13.2.2.1',
  airPASystemPowerDefinition => 'PowerNet-MIB::airPASystemPower',
  airPAOperatingMode => '1.3.6.1.4.1.318.1.1.13.2.2.2',
  airPAOperatingModeDefinition => 'PowerNet-MIB::airPAOperatingMode',
  airPASetpointTempF => '1.3.6.1.4.1.318.1.1.13.2.2.3',
  airPASetpointTempC => '1.3.6.1.4.1.318.1.1.13.2.2.4',
  airPABlowerSpeed => '1.3.6.1.4.1.318.1.1.13.2.2.5',
  airPABlowerSpeedDefinition => 'PowerNet-MIB::airPABlowerSpeed',
  airPACompressor => '1.3.6.1.4.1.318.1.1.13.2.2.6',
  airPACompressorDefinition => 'PowerNet-MIB::airPACompressor',
  airPACondenserFan => '1.3.6.1.4.1.318.1.1.13.2.2.7',
  airPACondenserFanDefinition => 'PowerNet-MIB::airPACondenserFan',
  airPACondensatePump => '1.3.6.1.4.1.318.1.1.13.2.2.8',
  airPACondensatePumpDefinition => 'PowerNet-MIB::airPACondensatePump',
  airPASupplyTempF => '1.3.6.1.4.1.318.1.1.13.2.2.9',
  airPASupplyTempC => '1.3.6.1.4.1.318.1.1.13.2.2.10',
  airPAReturnTempF => '1.3.6.1.4.1.318.1.1.13.2.2.11',
  airPAReturnTempC => '1.3.6.1.4.1.318.1.1.13.2.2.12',
  airPARemoteTempF => '1.3.6.1.4.1.318.1.1.13.2.2.13',
  airPARemoteTempC => '1.3.6.1.4.1.318.1.1.13.2.2.14',
  airPARemoteHumidity => '1.3.6.1.4.1.318.1.1.13.2.2.15',
  airIR => '1.3.6.1.4.1.318.1.1.13.3',
  airIRAlarms => '1.3.6.1.4.1.318.1.1.13.3.1',
  airIRAlarmConditionsTableSize => '1.3.6.1.4.1.318.1.1.13.3.1.1',
  airIRAlarmConditionsTable => '1.3.6.1.4.1.318.1.1.13.3.1.2',
  airIRAlarmConditionsEntry => '1.3.6.1.4.1.318.1.1.13.3.1.2.1',
  airIRAlarmConditionsIndex => '1.3.6.1.4.1.318.1.1.13.3.1.2.1.1',
  airIREventCode => '1.3.6.1.4.1.318.1.1.13.3.1.2.1.2',
  airIRAlarmDescription => '1.3.6.1.4.1.318.1.1.13.3.1.2.1.3',
  airIRRC => '1.3.6.1.4.1.318.1.1.13.3.2',
  airIRRCGroup => '1.3.6.1.4.1.318.1.1.13.3.2.1',
  airIRRCGroupStatus => '1.3.6.1.4.1.318.1.1.13.3.2.1.1',
  airIRRCGroupStatusCoolOutput => '1.3.6.1.4.1.318.1.1.13.3.2.1.1.1',
  airIRRCGroupStatusCoolDemand => '1.3.6.1.4.1.318.1.1.13.3.2.1.1.2',
  airIRRCGroupStatusAirFlowUS => '1.3.6.1.4.1.318.1.1.13.3.2.1.1.3',
  airIRRCGroupStatusAirFlowMetric => '1.3.6.1.4.1.318.1.1.13.3.2.1.1.4',
  airIRRCGroupStatusMaxRackInletTempUS => '1.3.6.1.4.1.318.1.1.13.3.2.1.1.5',
  airIRRCGroupStatusMaxRackInletTempMetric => '1.3.6.1.4.1.318.1.1.13.3.2.1.1.6',
  airIRRCGroupStatusMinRackInletTempUS => '1.3.6.1.4.1.318.1.1.13.3.2.1.1.7',
  airIRRCGroupStatusMinRackInletTempMetric => '1.3.6.1.4.1.318.1.1.13.3.2.1.1.8',
  airIRRCGroupStatusActiveFlowControlStatus => '1.3.6.1.4.1.318.1.1.13.3.2.1.1.9',
  airIRRCGroupStatusActiveFlowControlStatusDefinition => 'PowerNet-MIB::airIRRCGroupStatusActiveFlowControlStatus',
  airIRRCGroupSetpoints => '1.3.6.1.4.1.318.1.1.13.3.2.1.2',
  airIRRCGroupSetpointsCoolUS => '1.3.6.1.4.1.318.1.1.13.3.2.1.2.1',
  airIRRCGroupSetpointsCoolMetric => '1.3.6.1.4.1.318.1.1.13.3.2.1.2.2',
  airIRRCGroupSetpointsSupplyAirUS => '1.3.6.1.4.1.318.1.1.13.3.2.1.2.3',
  airIRRCGroupSetpointsSupplyAirMetric => '1.3.6.1.4.1.318.1.1.13.3.2.1.2.4',
  airIRRCGroupSetpointsFanSpeedPreference => '1.3.6.1.4.1.318.1.1.13.3.2.1.2.5',
  airIRRCGroupSetpointsFanSpeedPreferenceDefinition => 'PowerNet-MIB::airIRRCGroupSetpointsFanSpeedPreference',
  airIRRCGroupSetpointsFanSpeedControl => '1.3.6.1.4.1.318.1.1.13.3.2.1.2.6',
  airIRRCGroupSetpointsFanSpeedControlDefinition => 'PowerNet-MIB::airIRRCGroupSetpointsFanSpeedControl',
  airIRRCGroupSetpointsActiveFlowControlBias => '1.3.6.1.4.1.318.1.1.13.3.2.1.2.7',
  airIRRCGroupSetpointsActiveFlowControlBiasDefinition => 'PowerNet-MIB::airIRRCGroupSetpointsActiveFlowControlBias',
  airIRRCGroupConfig => '1.3.6.1.4.1.318.1.1.13.3.2.1.3',
  airIRRCGroupConfigNumberofCoolingUnits => '1.3.6.1.4.1.318.1.1.13.3.2.1.3.1',
  airIRRCGroupConfigConfigurationType => '1.3.6.1.4.1.318.1.1.13.3.2.1.3.2',
  airIRRCGroupConfigConfigurationTypeDefinition => 'PowerNet-MIB::airIRRCGroupConfigConfigurationType',
  airIRRCGroupConfigPctGlycol => '1.3.6.1.4.1.318.1.1.13.3.2.1.3.3',
  airIRRCGroupConfigCoolGainP => '1.3.6.1.4.1.318.1.1.13.3.2.1.3.4',
  airIRRCGroupConfigCoolResetRateI => '1.3.6.1.4.1.318.1.1.13.3.2.1.3.5',
  airIRRCGroupConfigCoolDerivativeD => '1.3.6.1.4.1.318.1.1.13.3.2.1.3.6',
  airIRRCGroupConfigMaxFanSpeed => '1.3.6.1.4.1.318.1.1.13.3.2.1.3.7',
  airIRRCGroupConfigNumberOfActiveFlowControllers => '1.3.6.1.4.1.318.1.1.13.3.2.1.3.8',
  airIRRCGroupConfigActiveFlowControllerLampTest => '1.3.6.1.4.1.318.1.1.13.3.2.1.3.9',
  airIRRCGroupConfigActiveFlowControllerLampTestDefinition => 'PowerNet-MIB::airIRRCGroupConfigActiveFlowControllerLampTest',
  airIRRCGroupConfigAltitudeUS => '1.3.6.1.4.1.318.1.1.13.3.2.1.3.10',
  airIRRCGroupConfigAltitudeMetric => '1.3.6.1.4.1.318.1.1.13.3.2.1.3.11',
  airIRRCUnit => '1.3.6.1.4.1.318.1.1.13.3.2.2',
  airIRRCUnitIdent => '1.3.6.1.4.1.318.1.1.13.3.2.2.1',
  airIRRCUnitIdentID => '1.3.6.1.4.1.318.1.1.13.3.2.2.1.1',
  airIRRCUnitIdentName => '1.3.6.1.4.1.318.1.1.13.3.2.2.1.2',
  airIRRCUnitIdentLocation => '1.3.6.1.4.1.318.1.1.13.3.2.2.1.3',
  airIRRCUnitIdentModelNumber => '1.3.6.1.4.1.318.1.1.13.3.2.2.1.4',
  airIRRCUnitIdentSerialNumber => '1.3.6.1.4.1.318.1.1.13.3.2.2.1.5',
  airIRRCUnitIdentFirmwareRevision => '1.3.6.1.4.1.318.1.1.13.3.2.2.1.6',
  airIRRCUnitIdentHardwareRevision => '1.3.6.1.4.1.318.1.1.13.3.2.2.1.7',
  airIRRCUnitIdentManufactureDate => '1.3.6.1.4.1.318.1.1.13.3.2.2.1.8',
  airIRRCUnitStatus => '1.3.6.1.4.1.318.1.1.13.3.2.2.2',
  airIRRCUnitStatusOperateMode => '1.3.6.1.4.1.318.1.1.13.3.2.2.2.1',
  airIRRCUnitStatusOperateModeDefinition => 'PowerNet-MIB::airIRRCUnitStatusOperateMode',
  airIRRCUnitStatusCoolOutput => '1.3.6.1.4.1.318.1.1.13.3.2.2.2.2',
  airIRRCUnitStatusCoolDemand => '1.3.6.1.4.1.318.1.1.13.3.2.2.2.3',
  airIRRCUnitStatusAirFlowUS => '1.3.6.1.4.1.318.1.1.13.3.2.2.2.4',
  airIRRCUnitStatusAirFlowMetric => '1.3.6.1.4.1.318.1.1.13.3.2.2.2.5',
  airIRRCUnitStatusRackInletTempUS => '1.3.6.1.4.1.318.1.1.13.3.2.2.2.6',
  airIRRCUnitStatusRackInletTempMetric => '1.3.6.1.4.1.318.1.1.13.3.2.2.2.7',
  airIRRCUnitStatusSupplyAirTempUS => '1.3.6.1.4.1.318.1.1.13.3.2.2.2.8',
  airIRRCUnitStatusSupplyAirTempMetric => '1.3.6.1.4.1.318.1.1.13.3.2.2.2.9',
  airIRRCUnitStatusReturnAirTempUS => '1.3.6.1.4.1.318.1.1.13.3.2.2.2.10',
  airIRRCUnitStatusReturnAirTempMetric => '1.3.6.1.4.1.318.1.1.13.3.2.2.2.11',
  airIRRCUnitStatusContainmtDPUS => '1.3.6.1.4.1.318.1.1.13.3.2.2.2.12',
  airIRRCUnitStatusContainmtDPMetric => '1.3.6.1.4.1.318.1.1.13.3.2.2.2.13',
  airIRRCUnitStatusFilterDPUS => '1.3.6.1.4.1.318.1.1.13.3.2.2.2.14',
  airIRRCUnitStatusFilterDPMetric => '1.3.6.1.4.1.318.1.1.13.3.2.2.2.15',
  airIRRCUnitStatusFanSpeed => '1.3.6.1.4.1.318.1.1.13.3.2.2.2.16',
  airIRRCUnitStatusInputState => '1.3.6.1.4.1.318.1.1.13.3.2.2.2.17',
  airIRRCUnitStatusInputStateDefinition => 'PowerNet-MIB::airIRRCUnitStatusInputState',
  airIRRCUnitStatusOutputState => '1.3.6.1.4.1.318.1.1.13.3.2.2.2.18',
  airIRRCUnitStatusOutputStateDefinition => 'PowerNet-MIB::airIRRCUnitStatusOutputState',
  airIRRCUnitStatusActivePowerSource => '1.3.6.1.4.1.318.1.1.13.3.2.2.2.19',
  airIRRCUnitStatusActivePowerSourceDefinition => 'PowerNet-MIB::airIRRCUnitStatusActivePowerSource',
  airIRRCUnitStatusFluidValvePosition => '1.3.6.1.4.1.318.1.1.13.3.2.2.2.20',
  airIRRCUnitStatusFluidFlowUS => '1.3.6.1.4.1.318.1.1.13.3.2.2.2.21',
  airIRRCUnitStatusFluidFlowMetric => '1.3.6.1.4.1.318.1.1.13.3.2.2.2.22',
  airIRRCUnitStatusEnteringFluidTemperatureUS => '1.3.6.1.4.1.318.1.1.13.3.2.2.2.23',
  airIRRCUnitStatusEnteringFluidTemperatureMetric => '1.3.6.1.4.1.318.1.1.13.3.2.2.2.24',
  airIRRCUnitStatusLeavingFluidTemperatureUS => '1.3.6.1.4.1.318.1.1.13.3.2.2.2.25',
  airIRRCUnitStatusLeavingFluidTemperatureMetric => '1.3.6.1.4.1.318.1.1.13.3.2.2.2.26',
  airIRRCUnitRunHours => '1.3.6.1.4.1.318.1.1.13.3.2.2.3',
  airIRRCUnitRunHoursAirFilter => '1.3.6.1.4.1.318.1.1.13.3.2.2.3.1',
  airIRRCUnitRunHoursFan1 => '1.3.6.1.4.1.318.1.1.13.3.2.2.3.2',
  airIRRCUnitRunHoursFan2 => '1.3.6.1.4.1.318.1.1.13.3.2.2.3.3',
  airIRRCUnitRunHoursFan3 => '1.3.6.1.4.1.318.1.1.13.3.2.2.3.4',
  airIRRCUnitRunHoursFan4 => '1.3.6.1.4.1.318.1.1.13.3.2.2.3.5',
  airIRRCUnitRunHoursFan5 => '1.3.6.1.4.1.318.1.1.13.3.2.2.3.6',
  airIRRCUnitRunHoursFan6 => '1.3.6.1.4.1.318.1.1.13.3.2.2.3.7',
  airIRRCUnitRunHoursFan7 => '1.3.6.1.4.1.318.1.1.13.3.2.2.3.8',
  airIRRCUnitRunHoursFan8 => '1.3.6.1.4.1.318.1.1.13.3.2.2.3.9',
  airIRRCUnitRunHoursFanPowerSupplyLeft => '1.3.6.1.4.1.318.1.1.13.3.2.2.3.10',
  airIRRCUnitRunHoursFanPowerSupplyRight => '1.3.6.1.4.1.318.1.1.13.3.2.2.3.11',
  airIRRCUnitRunHoursCondensatePump => '1.3.6.1.4.1.318.1.1.13.3.2.2.3.12',
  airIRRCUnitRunHoursFanPowerSupplyFeedALeft => '1.3.6.1.4.1.318.1.1.13.3.2.2.3.13',
  airIRRCUnitRunHoursFanPowerSupplyFeedARight => '1.3.6.1.4.1.318.1.1.13.3.2.2.3.14',
  airIRRCUnitRunHoursFanPowerSupplyFeedBLeft => '1.3.6.1.4.1.318.1.1.13.3.2.2.3.15',
  airIRRCUnitRunHoursFanPowerSupplyFeedBRight => '1.3.6.1.4.1.318.1.1.13.3.2.2.3.16',
  airIRRCUnitServiceIntervals => '1.3.6.1.4.1.318.1.1.13.3.2.2.4',
  airIRRCUnitServiceIntervalsAirFilter => '1.3.6.1.4.1.318.1.1.13.3.2.2.4.1',
  airIRRCUnitServiceIntervalsAirFilterAlarm => '1.3.6.1.4.1.318.1.1.13.3.2.2.4.2',
  airIRRCUnitServiceIntervalsAirFilterAlarmDefinition => 'PowerNet-MIB::airIRRCUnitServiceIntervalsAirFilterAlarm',
  airIRRCUnitThresholds => '1.3.6.1.4.1.318.1.1.13.3.2.2.5',
  airIRRCUnitThresholdsRackInletHighTempUS => '1.3.6.1.4.1.318.1.1.13.3.2.2.5.1',
  airIRRCUnitThresholdsRackInletHighTempMetric => '1.3.6.1.4.1.318.1.1.13.3.2.2.5.2',
  airIRRCUnitThresholdsSupplyAirHighTempUS => '1.3.6.1.4.1.318.1.1.13.3.2.2.5.3',
  airIRRCUnitThresholdsSupplyAirHighTempMetric => '1.3.6.1.4.1.318.1.1.13.3.2.2.5.4',
  airIRRCUnitThresholdsReturnAirHighTempUS => '1.3.6.1.4.1.318.1.1.13.3.2.2.5.5',
  airIRRCUnitThresholdsReturnAirHighTempMetric => '1.3.6.1.4.1.318.1.1.13.3.2.2.5.6',
  airIRRCUnitThresholdsEnteringFluidHighTempUS => '1.3.6.1.4.1.318.1.1.13.3.2.2.5.7',
  airIRRCUnitThresholdsEnteringFluidHighTempMetric => '1.3.6.1.4.1.318.1.1.13.3.2.2.5.8',
  airIRRCUnitConfig => '1.3.6.1.4.1.318.1.1.13.3.2.2.6',
  airIRRCUnitConfigCoolCapacity => '1.3.6.1.4.1.318.1.1.13.3.2.2.6.1',
  airIRRCUnitConfigCoolCapacityDefinition => 'PowerNet-MIB::airIRRCUnitConfigCoolCapacity',
  airIRRCUnitConfigStartupDelay => '1.3.6.1.4.1.318.1.1.13.3.2.2.6.2',
  airIRRCUnitConfigIdleOnLeakDetect => '1.3.6.1.4.1.318.1.1.13.3.2.2.6.3',
  airIRRCUnitConfigIdleOnLeakDetectDefinition => 'PowerNet-MIB::airIRRCUnitConfigIdleOnLeakDetect',
  airIRRCUnitConfigPowerSource => '1.3.6.1.4.1.318.1.1.13.3.2.2.6.4',
  airIRRCUnitConfigPowerSourceDefinition => 'PowerNet-MIB::airIRRCUnitConfigPowerSource',
  airIRRCUnitConfigInputNormalState => '1.3.6.1.4.1.318.1.1.13.3.2.2.6.5',
  airIRRCUnitConfigInputNormalStateDefinition => 'PowerNet-MIB::airIRRCUnitConfigInputNormalState',
  airIRRCUnitConfigOutputNormalState => '1.3.6.1.4.1.318.1.1.13.3.2.2.6.6',
  airIRRCUnitConfigOutputNormalStateDefinition => 'PowerNet-MIB::airIRRCUnitConfigOutputNormalState',
  airIRRCUnitConfigOutputSource => '1.3.6.1.4.1.318.1.1.13.3.2.2.6.7',
  airIRRCUnitConfigOutputSourceDefinition => 'PowerNet-MIB::airIRRCUnitConfigOutputSource',
  airIRRCUnitConfigIdleOnCoolFail => '1.3.6.1.4.1.318.1.1.13.3.2.2.6.8',
  airIRRCUnitConfigIdleOnCoolFailDefinition => 'PowerNet-MIB::airIRRCUnitConfigIdleOnCoolFail',
  airIRRP => '1.3.6.1.4.1.318.1.1.13.3.3',
  airIRRP100 => '1.3.6.1.4.1.318.1.1.13.3.3.1',
  airIRRP100Group => '1.3.6.1.4.1.318.1.1.13.3.3.1.1',
  airIRRP100GroupStatus => '1.3.6.1.4.1.318.1.1.13.3.3.1.1.1',
  airIRRP100GroupStatusAirFlowUS => '1.3.6.1.4.1.318.1.1.13.3.3.1.1.1.1',
  airIRRP100GroupStatusAirFlowMetric => '1.3.6.1.4.1.318.1.1.13.3.3.1.1.1.2',
  airIRRP100GroupStatusMaxRackInletTempUS => '1.3.6.1.4.1.318.1.1.13.3.3.1.1.1.3',
  airIRRP100GroupStatusMaxRackInletTempMetric => '1.3.6.1.4.1.318.1.1.13.3.3.1.1.1.4',
  airIRRP100GroupStatusMinRackInletTempUS => '1.3.6.1.4.1.318.1.1.13.3.3.1.1.1.5',
  airIRRP100GroupStatusMinRackInletTempMetric => '1.3.6.1.4.1.318.1.1.13.3.3.1.1.1.6',
  airIRRP100GroupStatusCoolDemand => '1.3.6.1.4.1.318.1.1.13.3.3.1.1.1.7',
  airIRRP100GroupStatusCoolOutput => '1.3.6.1.4.1.318.1.1.13.3.3.1.1.1.8',
  airIRRP100GroupStatusHumidifyDemand => '1.3.6.1.4.1.318.1.1.13.3.3.1.1.1.9',
  airIRRP100GroupStatusHumidifyOutput => '1.3.6.1.4.1.318.1.1.13.3.3.1.1.1.10',
  airIRRP100GroupStatusDehumidifyDemand => '1.3.6.1.4.1.318.1.1.13.3.3.1.1.1.11',
  airIRRP100GroupStatusDehumidifyOutput => '1.3.6.1.4.1.318.1.1.13.3.3.1.1.1.12',
  airIRRP100GroupStatusReheatDemand => '1.3.6.1.4.1.318.1.1.13.3.3.1.1.1.13',
  airIRRP100GroupStatusReheatOutput => '1.3.6.1.4.1.318.1.1.13.3.3.1.1.1.14',
  airIRRP100GroupStatusActiveFlowControlStatus => '1.3.6.1.4.1.318.1.1.13.3.3.1.1.1.15',
  airIRRP100GroupStatusActiveFlowControlStatusDefinition => 'PowerNet-MIB::airIRRP100GroupStatusActiveFlowControlStatus',
  airIRRP100GroupStatusDewPointTempUS => '1.3.6.1.4.1.318.1.1.13.3.3.1.1.1.16',
  airIRRP100GroupStatusDewPointTempMetric => '1.3.6.1.4.1.318.1.1.13.3.3.1.1.1.17',
  airIRRP100GroupSetpoints => '1.3.6.1.4.1.318.1.1.13.3.3.1.1.2',
  airIRRP100GroupSetpointsCoolUS => '1.3.6.1.4.1.318.1.1.13.3.3.1.1.2.1',
  airIRRP100GroupSetpointsCoolMetric => '1.3.6.1.4.1.318.1.1.13.3.3.1.1.2.2',
  airIRRP100GroupSetpointsSupplyAirUS => '1.3.6.1.4.1.318.1.1.13.3.3.1.1.2.3',
  airIRRP100GroupSetpointsSupplyAirMetric => '1.3.6.1.4.1.318.1.1.13.3.3.1.1.2.4',
  airIRRP100GroupSetpointsHumidify => '1.3.6.1.4.1.318.1.1.13.3.3.1.1.2.5',
  airIRRP100GroupSetpointsDehumidify => '1.3.6.1.4.1.318.1.1.13.3.3.1.1.2.6',
  airIRRP100GroupSetpointsDehumidifyDeadband => '1.3.6.1.4.1.318.1.1.13.3.3.1.1.2.7',
  airIRRP100GroupSetpointsReheatUS => '1.3.6.1.4.1.318.1.1.13.3.3.1.1.2.8',
  airIRRP100GroupSetpointsReheatMetric => '1.3.6.1.4.1.318.1.1.13.3.3.1.1.2.9',
  airIRRP100GroupSetpointsFanSpeedPreference => '1.3.6.1.4.1.318.1.1.13.3.3.1.1.2.10',
  airIRRP100GroupSetpointsFanSpeedPreferenceDefinition => 'PowerNet-MIB::airIRRP100GroupSetpointsFanSpeedPreference',
  airIRRP100GroupSetpointsFanSpeedControl => '1.3.6.1.4.1.318.1.1.13.3.3.1.1.2.11',
  airIRRP100GroupSetpointsFanSpeedControlDefinition => 'PowerNet-MIB::airIRRP100GroupSetpointsFanSpeedControl',
  airIRRP100GroupSetpointsActiveFlowControlBias => '1.3.6.1.4.1.318.1.1.13.3.3.1.1.2.12',
  airIRRP100GroupSetpointsActiveFlowControlBiasDefinition => 'PowerNet-MIB::airIRRP100GroupSetpointsActiveFlowControlBias',
  airIRRP100GroupConfig => '1.3.6.1.4.1.318.1.1.13.3.3.1.1.3',
  airIRRP100GroupConfigNumberofCoolingUnits => '1.3.6.1.4.1.318.1.1.13.3.3.1.1.3.1',
  airIRRP100GroupConfigConfigurationType => '1.3.6.1.4.1.318.1.1.13.3.3.1.1.3.2',
  airIRRP100GroupConfigConfigurationTypeDefinition => 'PowerNet-MIB::airIRRP100GroupConfigConfigurationType',
  airIRRP100GroupConfigCoolGainP => '1.3.6.1.4.1.318.1.1.13.3.3.1.1.3.3',
  airIRRP100GroupConfigCoolResetRateI => '1.3.6.1.4.1.318.1.1.13.3.3.1.1.3.4',
  airIRRP100GroupConfigCoolDerivativeD => '1.3.6.1.4.1.318.1.1.13.3.3.1.1.3.5',
  airIRRP100GroupConfigHumidifySensitivityBand => '1.3.6.1.4.1.318.1.1.13.3.3.1.1.3.6',
  airIRRP100GroupConfigReheatGainP => '1.3.6.1.4.1.318.1.1.13.3.3.1.1.3.7',
  airIRRP100GroupConfigReheatResetRateI => '1.3.6.1.4.1.318.1.1.13.3.3.1.1.3.8',
  airIRRP100GroupConfigReheatDerivativeD => '1.3.6.1.4.1.318.1.1.13.3.3.1.1.3.9',
  airIRRP100GroupConfigNumberofBackupUnits => '1.3.6.1.4.1.318.1.1.13.3.3.1.1.3.10',
  airIRRP100GroupConfigRuntimeBalancingEnable => '1.3.6.1.4.1.318.1.1.13.3.3.1.1.3.11',
  airIRRP100GroupConfigRuntimeBalancingEnableDefinition => 'PowerNet-MIB::airIRRP100GroupConfigRuntimeBalancingEnable',
  airIRRP100GroupConfigLoadAssistEnable => '1.3.6.1.4.1.318.1.1.13.3.3.1.1.3.12',
  airIRRP100GroupConfigLoadAssistEnableDefinition => 'PowerNet-MIB::airIRRP100GroupConfigLoadAssistEnable',
  airIRRP100GroupConfigFullRPBackups => '1.3.6.1.4.1.318.1.1.13.3.3.1.1.3.13',
  airIRRP100GroupConfigMaxFanSpeed => '1.3.6.1.4.1.318.1.1.13.3.3.1.1.3.14',
  airIRRP100GroupConfigNumberOfActiveFlowControllers => '1.3.6.1.4.1.318.1.1.13.3.3.1.1.3.15',
  airIRRP100GroupConfigActiveFlowControllerLampTest => '1.3.6.1.4.1.318.1.1.13.3.3.1.1.3.16',
  airIRRP100GroupConfigActiveFlowControllerLampTestDefinition => 'PowerNet-MIB::airIRRP100GroupConfigActiveFlowControllerLampTest',
  airIRRP100GroupConfigAltitudeUS => '1.3.6.1.4.1.318.1.1.13.3.3.1.1.3.17',
  airIRRP100GroupConfigAltitudeMetric => '1.3.6.1.4.1.318.1.1.13.3.3.1.1.3.18',
  airIRRP100Unit => '1.3.6.1.4.1.318.1.1.13.3.3.1.2',
  airIRRP100UnitIdent => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.1',
  airIRRP100UnitIdentID => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.1.1',
  airIRRP100UnitIdentName => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.1.2',
  airIRRP100UnitIdentLocation => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.1.3',
  airIRRP100UnitIdentModelNumber => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.1.4',
  airIRRP100UnitIdentSerialNumber => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.1.5',
  airIRRP100UnitIdentFirmwareRevision => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.1.6',
  airIRRP100UnitIdentHardwareRevision => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.1.7',
  airIRRP100UnitIdentManufactureDate => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.1.8',
  airIRRP100UnitStatus => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.2',
  airIRRP100UnitStatusOperateMode => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.2.1',
  airIRRP100UnitStatusOperateModeDefinition => 'PowerNet-MIB::airIRRP100UnitStatusOperateMode',
  airIRRP100UnitStatusRackInletTempUS => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.2.2',
  airIRRP100UnitStatusRackInletTempMetric => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.2.3',
  airIRRP100UnitStatusSupplyAirTempUS => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.2.4',
  airIRRP100UnitStatusSupplyAirTempMetric => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.2.5',
  airIRRP100UnitStatusReturnAirTempUS => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.2.6',
  airIRRP100UnitStatusReturnAirTempMetric => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.2.7',
  airIRRP100UnitStatusSupplyHumidity => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.2.8',
  airIRRP100UnitStatusReturnHumidity => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.2.9',
  airIRRP100UnitStatusAirFlowUS => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.2.10',
  airIRRP100UnitStatusAirFlowMetric => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.2.11',
  airIRRP100UnitStatusFanSpeed => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.2.12',
  airIRRP100UnitStatusCoolDemand => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.2.13',
  airIRRP100UnitStatusCoolOutput => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.2.14',
  airIRRP100UnitStatusHumidifyDemand => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.2.15',
  airIRRP100UnitStatusHumidifyOutput => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.2.16',
  airIRRP100UnitStatusDehumidifyDemand => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.2.17',
  airIRRP100UnitStatusDehumidifyOutput => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.2.18',
  airIRRP100UnitStatusReheatDemand => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.2.19',
  airIRRP100UnitStatusReheatOutput => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.2.20',
  airIRRP100UnitStatusInputState => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.2.21',
  airIRRP100UnitStatusInputStateDefinition => 'PowerNet-MIB::airIRRP100UnitStatusInputState',
  airIRRP100UnitStatusOutputState => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.2.22',
  airIRRP100UnitStatusOutputStateDefinition => 'PowerNet-MIB::airIRRP100UnitStatusOutputState',
  airIRRP100UnitStatusRackInletTemperature1US => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.2.23',
  airIRRP100UnitStatusRackInletTemperature1Metric => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.2.24',
  airIRRP100UnitStatusRackInletTemperature2US => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.2.25',
  airIRRP100UnitStatusRackInletTemperature2Metric => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.2.26',
  airIRRP100UnitStatusRackInletTemperature3US => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.2.27',
  airIRRP100UnitStatusRackInletTemperature3Metric => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.2.28',
  airIRRP100UnitStatusFilterDPUS => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.2.29',
  airIRRP100UnitStatusFilterDPMetric => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.2.30',
  airIRRP100UnitStatusContainmtDPUS => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.2.31',
  airIRRP100UnitStatusContainmtDPMetric => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.2.32',
  airIRRP100UnitStatusHumidifierCurrent => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.2.33',
  airIRRP100UnitStatusHumidifierWaterConductivity => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.2.34',
  airIRRP100UnitStatusCompressorDriveSpeed => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.2.35',
  airIRRP100UnitStatusCompressorDrivePower => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.2.36',
  airIRRP100UnitStatusCompressorDriveVoltage => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.2.37',
  airIRRP100UnitStatusCompressorDriveCurrent => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.2.38',
  airIRRP100UnitStatusCompressorDriveDCLinkVoltage => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.2.39',
  airIRRP100UnitStatusCompressorDriveHeatSinkTempUS => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.2.40',
  airIRRP100UnitStatusCompressorDriveHeatSinkTempMetric => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.2.41',
  airIRRP100UnitStatusCompressorDriveControlCardTempUS => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.2.42',
  airIRRP100UnitStatusCompressorDriveControlCardTempMetric => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.2.43',
  airIRRP100UnitStatusCompressorDriveWarningStatus => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.2.44',
  airIRRP100UnitStatusCompressorDriveAlarmStatus => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.2.45',
  airIRRP100UnitStatusSuctionPressureUS => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.2.46',
  airIRRP100UnitStatusSuctionPressureMetric => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.2.47',
  airIRRP100UnitStatusDischargePressureUS => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.2.48',
  airIRRP100UnitStatusDischargePressureMetric => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.2.49',
  airIRRP100UnitStatusLeakSensor => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.2.50',
  airIRRP100UnitStatusLeakSensorDefinition => 'PowerNet-MIB::airIRRP100UnitStatusLeakSensor',
  airIRRP100UnitRunHours => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.3',
  airIRRP100UnitRunHoursAirFilter => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.3.1',
  airIRRP100UnitRunHoursCondensatePump => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.3.2',
  airIRRP100UnitRunHoursHumidifier => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.3.3',
  airIRRP100UnitRunHoursFan1 => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.3.4',
  airIRRP100UnitRunHoursHeater1 => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.3.5',
  airIRRP100UnitRunHoursFan2 => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.3.6',
  airIRRP100UnitRunHoursHeater2 => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.3.7',
  airIRRP100UnitRunHoursCompressor => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.3.8',
  airIRRP100UnitRunHoursSystem => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.3.9',
  airIRRP100UnitServiceIntervals => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.4',
  airIRRP100UnitServiceIntervalAirFilter => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.4.1',
  airIRRP100UnitServiceIntervalAirFilterAlarm => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.4.2',
  airIRRP100UnitServiceIntervalAirFilterAlarmDefinition => 'PowerNet-MIB::airIRRP100UnitServiceIntervalAirFilterAlarm',
  airIRRP100UnitServiceIntervalHumidifier => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.4.3',
  airIRRP100UnitServiceIntervalHumidifierAlarm => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.4.4',
  airIRRP100UnitServiceIntervalHumidifierAlarmDefinition => 'PowerNet-MIB::airIRRP100UnitServiceIntervalHumidifierAlarm',
  airIRRP100UnitServiceIntervalHeater => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.4.5',
  airIRRP100UnitServiceIntervalHeaterAlarm => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.4.6',
  airIRRP100UnitServiceIntervalHeaterAlarmDefinition => 'PowerNet-MIB::airIRRP100UnitServiceIntervalHeaterAlarm',
  airIRRP100UnitServiceIntervalCompressor => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.4.7',
  airIRRP100UnitServiceIntervalCompressorAlarm => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.4.8',
  airIRRP100UnitServiceIntervalCompressorAlarmDefinition => 'PowerNet-MIB::airIRRP100UnitServiceIntervalCompressorAlarm',
  airIRRP100UnitServiceIntervalCondensatePump => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.4.9',
  airIRRP100UnitServiceIntervalCondensatePumpAlarm => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.4.10',
  airIRRP100UnitServiceIntervalCondensatePumpAlarmDefinition => 'PowerNet-MIB::airIRRP100UnitServiceIntervalCondensatePumpAlarm',
  airIRRP100UnitServiceIntervalFans => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.4.11',
  airIRRP100UnitServiceIntervalFansAlarm => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.4.12',
  airIRRP100UnitServiceIntervalFansAlarmDefinition => 'PowerNet-MIB::airIRRP100UnitServiceIntervalFansAlarm',
  airIRRP100UnitThresholds => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.5',
  airIRRP100UnitThresholdsRackInletHighTempUS => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.5.1',
  airIRRP100UnitThresholdsRackInletHighTempMetric => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.5.2',
  airIRRP100UnitThresholdsSupplyAirHighTempUS => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.5.3',
  airIRRP100UnitThresholdsSupplyAirHighTempMetric => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.5.4',
  airIRRP100UnitThresholdsReturnAirHighTempUS => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.5.5',
  airIRRP100UnitThresholdsReturnAirHighTempMetric => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.5.6',
  airIRRP100UnitThresholdsSupplyHumidityHigh => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.5.7',
  airIRRP100UnitThresholdsSupplyHumidityLow => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.5.8',
  airIRRP100UnitConfig => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.6',
  airIRRP100UnitConfigStartupDelay => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.6.1',
  airIRRP100UnitConfigCoolCapacity => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.6.2',
  airIRRP100UnitConfigCoolCapacityDefinition => 'PowerNet-MIB::airIRRP100UnitConfigCoolCapacity',
  airIRRP100UnitConfigIdleOnLeakDetect => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.6.3',
  airIRRP100UnitConfigIdleOnLeakDetectDefinition => 'PowerNet-MIB::airIRRP100UnitConfigIdleOnLeakDetect',
  airIRRP100UnitConfigInputNormalState => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.6.4',
  airIRRP100UnitConfigInputNormalStateDefinition => 'PowerNet-MIB::airIRRP100UnitConfigInputNormalState',
  airIRRP100UnitConfigOutputNormalState => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.6.5',
  airIRRP100UnitConfigOutputNormalStateDefinition => 'PowerNet-MIB::airIRRP100UnitConfigOutputNormalState',
  airIRRP100UnitConfigOutputSource => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.6.6',
  airIRRP100UnitConfigOutputSourceDefinition => 'PowerNet-MIB::airIRRP100UnitConfigOutputSource',
  airIRRP100UnitConfigHumidifyEnable => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.6.7',
  airIRRP100UnitConfigHumidifyEnableDefinition => 'PowerNet-MIB::airIRRP100UnitConfigHumidifyEnable',
  airIRRP100UnitConfigHumidifierControl => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.6.8',
  airIRRP100UnitConfigHumidifierControlDefinition => 'PowerNet-MIB::airIRRP100UnitConfigHumidifierControl',
  airIRRP100UnitConfigDehumidifyEnable => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.6.9',
  airIRRP100UnitConfigDehumidifyEnableDefinition => 'PowerNet-MIB::airIRRP100UnitConfigDehumidifyEnable',
  airIRRP100UnitConfigReheatEnable => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.6.10',
  airIRRP100UnitConfigReheatEnableDefinition => 'PowerNet-MIB::airIRRP100UnitConfigReheatEnable',
  airIRRP100UnitConfigHeatAssistEnable => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.6.11',
  airIRRP100UnitConfigHeatAssistEnableDefinition => 'PowerNet-MIB::airIRRP100UnitConfigHeatAssistEnable',
  airIRRP100UnitConfigPowerSourceConfig => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.6.12',
  airIRRP100UnitConfigPowerSourceConfigDefinition => 'PowerNet-MIB::airIRRP100UnitConfigPowerSourceConfig',
  airIRRP100UnitConfigUnitRoleOverride => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.6.13',
  airIRRP100UnitConfigUnitRoleOverrideDefinition => 'PowerNet-MIB::airIRRP100UnitConfigUnitRoleOverride',
  airIRRP100UnitConfigSecondaryPowerFeedCapability => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.6.14',
  airIRRP100UnitConfigSecondaryPowerFeedCapabilityDefinition => 'PowerNet-MIB::airIRRP100UnitConfigSecondaryPowerFeedCapability',
  airIRRP100UnitConfigIdleOnCoolFail => '1.3.6.1.4.1.318.1.1.13.3.3.1.2.6.15',
  airIRRP100UnitConfigIdleOnCoolFailDefinition => 'PowerNet-MIB::airIRRP100UnitConfigIdleOnCoolFail',
  airIRRP500 => '1.3.6.1.4.1.318.1.1.13.3.3.2',
  airIRRP500Group => '1.3.6.1.4.1.318.1.1.13.3.3.2.1',
  airIRRP500GroupStatus => '1.3.6.1.4.1.318.1.1.13.3.3.2.1.1',
  airIRRP500GroupStatusAirFlowUS => '1.3.6.1.4.1.318.1.1.13.3.3.2.1.1.1',
  airIRRP500GroupStatusAirFlowMetric => '1.3.6.1.4.1.318.1.1.13.3.3.2.1.1.2',
  airIRRP500GroupStatusMaxRackInletTempUS => '1.3.6.1.4.1.318.1.1.13.3.3.2.1.1.3',
  airIRRP500GroupStatusMaxRackInletTempMetric => '1.3.6.1.4.1.318.1.1.13.3.3.2.1.1.4',
  airIRRP500GroupStatusMinRackInletTempUS => '1.3.6.1.4.1.318.1.1.13.3.3.2.1.1.5',
  airIRRP500GroupStatusMinRackInletTempMetric => '1.3.6.1.4.1.318.1.1.13.3.3.2.1.1.6',
  airIRRP500GroupStatusCoolDemand => '1.3.6.1.4.1.318.1.1.13.3.3.2.1.1.7',
  airIRRP500GroupStatusCoolOutput => '1.3.6.1.4.1.318.1.1.13.3.3.2.1.1.8',
  airIRRP500GroupStatusHumidifyDemand => '1.3.6.1.4.1.318.1.1.13.3.3.2.1.1.9',
  airIRRP500GroupStatusHumidifyOutput => '1.3.6.1.4.1.318.1.1.13.3.3.2.1.1.10',
  airIRRP500GroupStatusDehumidifyDemand => '1.3.6.1.4.1.318.1.1.13.3.3.2.1.1.11',
  airIRRP500GroupStatusDehumidifyOutput => '1.3.6.1.4.1.318.1.1.13.3.3.2.1.1.12',
  airIRRP500GroupStatusReheatDemand => '1.3.6.1.4.1.318.1.1.13.3.3.2.1.1.13',
  airIRRP500GroupStatusReheatOutput => '1.3.6.1.4.1.318.1.1.13.3.3.2.1.1.14',
  airIRRP500GroupStatusActiveFlowControlStatus => '1.3.6.1.4.1.318.1.1.13.3.3.2.1.1.15',
  airIRRP500GroupStatusActiveFlowControlStatusDefinition => 'PowerNet-MIB::airIRRP500GroupStatusActiveFlowControlStatus',
  airIRRP500GroupStatusDewPointTempUS => '1.3.6.1.4.1.318.1.1.13.3.3.2.1.1.16',
  airIRRP500GroupStatusDewPointTempMetric => '1.3.6.1.4.1.318.1.1.13.3.3.2.1.1.17',
  airIRRP500GroupSetpoints => '1.3.6.1.4.1.318.1.1.13.3.3.2.1.2',
  airIRRP500GroupSetpointsCoolUS => '1.3.6.1.4.1.318.1.1.13.3.3.2.1.2.1',
  airIRRP500GroupSetpointsCoolMetric => '1.3.6.1.4.1.318.1.1.13.3.3.2.1.2.2',
  airIRRP500GroupSetpointsSupplyAirUS => '1.3.6.1.4.1.318.1.1.13.3.3.2.1.2.3',
  airIRRP500GroupSetpointsSupplyAirMetric => '1.3.6.1.4.1.318.1.1.13.3.3.2.1.2.4',
  airIRRP500GroupSetpointsHumidify => '1.3.6.1.4.1.318.1.1.13.3.3.2.1.2.5',
  airIRRP500GroupSetpointsDehumidify => '1.3.6.1.4.1.318.1.1.13.3.3.2.1.2.6',
  airIRRP500GroupSetpointsDehumidifyDeadband => '1.3.6.1.4.1.318.1.1.13.3.3.2.1.2.7',
  airIRRP500GroupSetpointsReheatUS => '1.3.6.1.4.1.318.1.1.13.3.3.2.1.2.8',
  airIRRP500GroupSetpointsReheatMetric => '1.3.6.1.4.1.318.1.1.13.3.3.2.1.2.9',
  airIRRP500GroupSetpointsFanSpeedPreference => '1.3.6.1.4.1.318.1.1.13.3.3.2.1.2.10',
  airIRRP500GroupSetpointsFanSpeedPreferenceDefinition => 'PowerNet-MIB::airIRRP500GroupSetpointsFanSpeedPreference',
  airIRRP500GroupSetpointsFanSpeedControl => '1.3.6.1.4.1.318.1.1.13.3.3.2.1.2.11',
  airIRRP500GroupSetpointsFanSpeedControlDefinition => 'PowerNet-MIB::airIRRP500GroupSetpointsFanSpeedControl',
  airIRRP500GroupSetpointsActiveFlowControlBias => '1.3.6.1.4.1.318.1.1.13.3.3.2.1.2.12',
  airIRRP500GroupSetpointsActiveFlowControlBiasDefinition => 'PowerNet-MIB::airIRRP500GroupSetpointsActiveFlowControlBias',
  airIRRP500GroupConfig => '1.3.6.1.4.1.318.1.1.13.3.3.2.1.3',
  airIRRP500GroupConfigNumberofCoolingUnits => '1.3.6.1.4.1.318.1.1.13.3.3.2.1.3.1',
  airIRRP500GroupConfigConfigurationType => '1.3.6.1.4.1.318.1.1.13.3.3.2.1.3.2',
  airIRRP500GroupConfigConfigurationTypeDefinition => 'PowerNet-MIB::airIRRP500GroupConfigConfigurationType',
  airIRRP500GroupConfigPercentGlycol => '1.3.6.1.4.1.318.1.1.13.3.3.2.1.3.3',
  airIRRP500GroupConfigCoolGainP => '1.3.6.1.4.1.318.1.1.13.3.3.2.1.3.4',
  airIRRP500GroupConfigCoolResetRateI => '1.3.6.1.4.1.318.1.1.13.3.3.2.1.3.5',
  airIRRP500GroupConfigCoolDerivativeD => '1.3.6.1.4.1.318.1.1.13.3.3.2.1.3.6',
  airIRRP500GroupConfigHumidifySensitivityBand => '1.3.6.1.4.1.318.1.1.13.3.3.2.1.3.7',
  airIRRP500GroupConfigReheatGainP => '1.3.6.1.4.1.318.1.1.13.3.3.2.1.3.8',
  airIRRP500GroupConfigReheatResetRateI => '1.3.6.1.4.1.318.1.1.13.3.3.2.1.3.9',
  airIRRP500GroupConfigReheatDerivativeD => '1.3.6.1.4.1.318.1.1.13.3.3.2.1.3.10',
  airIRRP500GroupConfigMaxFanSpeed => '1.3.6.1.4.1.318.1.1.13.3.3.2.1.3.11',
  airIRRP500GroupConfigNumberofBackupUnits => '1.3.6.1.4.1.318.1.1.13.3.3.2.1.3.12',
  airIRRP500GroupConfigRuntimeBalancingEnable => '1.3.6.1.4.1.318.1.1.13.3.3.2.1.3.13',
  airIRRP500GroupConfigRuntimeBalancingEnableDefinition => 'PowerNet-MIB::airIRRP500GroupConfigRuntimeBalancingEnable',
  airIRRP500GroupConfigLoadAssistEnable => '1.3.6.1.4.1.318.1.1.13.3.3.2.1.3.14',
  airIRRP500GroupConfigLoadAssistEnableDefinition => 'PowerNet-MIB::airIRRP500GroupConfigLoadAssistEnable',
  airIRRP500GroupConfigFullRPBackups => '1.3.6.1.4.1.318.1.1.13.3.3.2.1.3.15',
  airIRRP500GroupConfigNumberOfActiveFlowControllers => '1.3.6.1.4.1.318.1.1.13.3.3.2.1.3.16',
  airIRRP500GroupConfigActiveFlowControllerLampTest => '1.3.6.1.4.1.318.1.1.13.3.3.2.1.3.17',
  airIRRP500GroupConfigActiveFlowControllerLampTestDefinition => 'PowerNet-MIB::airIRRP500GroupConfigActiveFlowControllerLampTest',
  airIRRP500GroupConfigAltitudeUS => '1.3.6.1.4.1.318.1.1.13.3.3.2.1.3.18',
  airIRRP500GroupConfigAltitudeMetric => '1.3.6.1.4.1.318.1.1.13.3.3.2.1.3.19',
  airIRRP500Unit => '1.3.6.1.4.1.318.1.1.13.3.3.2.2',
  airIRRP500UnitIdent => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.1',
  airIRRP500UnitIdentID => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.1.1',
  airIRRP500UnitIdentName => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.1.2',
  airIRRP500UnitIdentLocation => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.1.3',
  airIRRP500UnitIdentModelNumber => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.1.4',
  airIRRP500UnitIdentSerialNumber => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.1.5',
  airIRRP500UnitIdentFirmwareRevision => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.1.6',
  airIRRP500UnitIdentHardwareRevision => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.1.7',
  airIRRP500UnitIdentManufactureDate => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.1.8',
  airIRRP500UnitStatus => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.2',
  airIRRP500UnitStatusOperateMode => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.2.1',
  airIRRP500UnitStatusOperateModeDefinition => 'PowerNet-MIB::airIRRP500UnitStatusOperateMode',
  airIRRP500UnitStatusMaximumRackInletTempUS => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.2.2',
  airIRRP500UnitStatusMaximumRackInletTempMetric => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.2.3',
  airIRRP500UnitStatusSupplyAirTempUS => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.2.4',
  airIRRP500UnitStatusSupplyAirTempMetric => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.2.5',
  airIRRP500UnitStatusReturnAirTempUS => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.2.6',
  airIRRP500UnitStatusReturnAirTempMetric => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.2.7',
  airIRRP500UnitStatusSupplyHumidity => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.2.8',
  airIRRP500UnitStatusReturnHumidity => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.2.9',
  airIRRP500UnitStatusAirFlowUS => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.2.10',
  airIRRP500UnitStatusAirFlowMetric => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.2.11',
  airIRRP500UnitStatusFanSpeed => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.2.12',
  airIRRP500UnitStatusCoolDemand => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.2.13',
  airIRRP500UnitStatusCoolOutput => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.2.14',
  airIRRP500UnitStatusHumidifyDemand => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.2.15',
  airIRRP500UnitStatusHumidifyOutput => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.2.16',
  airIRRP500UnitStatusDehumidifyDemand => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.2.17',
  airIRRP500UnitStatusDehumidifyOutput => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.2.18',
  airIRRP500UnitStatusReheatDemand => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.2.19',
  airIRRP500UnitStatusReheatOutput => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.2.20',
  airIRRP500UnitStatusInputState => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.2.21',
  airIRRP500UnitStatusInputStateDefinition => 'PowerNet-MIB::airIRRP500UnitStatusInputState',
  airIRRP500UnitStatusOutputState => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.2.22',
  airIRRP500UnitStatusOutputStateDefinition => 'PowerNet-MIB::airIRRP500UnitStatusOutputState',
  airIRRP500UnitStatusRackInletTemperature1US => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.2.23',
  airIRRP500UnitStatusRackInletTemperature1Metric => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.2.24',
  airIRRP500UnitStatusRackInletTemperature2US => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.2.25',
  airIRRP500UnitStatusRackInletTemperature2Metric => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.2.26',
  airIRRP500UnitStatusRackInletTemperature3US => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.2.27',
  airIRRP500UnitStatusRackInletTemperature3Metric => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.2.28',
  airIRRP500UnitStatusContainmtDPUS => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.2.29',
  airIRRP500UnitStatusContainmtDPMetric => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.2.30',
  airIRRP500UnitStatusFilterDPUS => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.2.31',
  airIRRP500UnitStatusFilterDPMetric => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.2.32',
  airIRRP500UnitStatusHumidifierCurrent => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.2.33',
  airIRRP500UnitStatusHumidifierWaterConductivity => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.2.34',
  airIRRP500UnitStatusActivePowerSource => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.2.35',
  airIRRP500UnitStatusActivePowerSourceDefinition => 'PowerNet-MIB::airIRRP500UnitStatusActivePowerSource',
  airIRRP500UnitStatusFluidValvePosition => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.2.36',
  airIRRP500UnitStatusFluidFlowUS => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.2.37',
  airIRRP500UnitStatusFluidFlowMetric => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.2.38',
  airIRRP500UnitStatusEnteringFluidTemperatureUS => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.2.39',
  airIRRP500UnitStatusEnteringFluidTemperatureMetric => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.2.40',
  airIRRP500UnitStatusLeavingFluidTemperatureUS => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.2.41',
  airIRRP500UnitStatusLeavingFluidTemperatureMetric => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.2.42',
  airIRRP500UnitStatusLeakSensor => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.2.43',
  airIRRP500UnitStatusLeakSensorDefinition => 'PowerNet-MIB::airIRRP500UnitStatusLeakSensor',
  airIRRP500UnitRunHours => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.3',
  airIRRP500UnitRunHoursAirFilter => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.3.1',
  airIRRP500UnitRunHoursCondensatePump => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.3.2',
  airIRRP500UnitRunHoursHumidifier => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.3.3',
  airIRRP500UnitRunHoursFan1 => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.3.4',
  airIRRP500UnitRunHoursHeater1 => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.3.5',
  airIRRP500UnitRunHoursFan2 => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.3.6',
  airIRRP500UnitRunHoursHeater2 => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.3.7',
  airIRRP500UnitRunHoursFan3 => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.3.8',
  airIRRP500UnitRunHoursHeater3 => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.3.9',
  airIRRP500UnitRunHoursSystem => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.3.10',
  airIRRP500UnitServiceIntervals => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.4',
  airIRRP500UnitServiceIntervalAirFilter => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.4.1',
  airIRRP500UnitServiceIntervalAirFilterAlarm => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.4.2',
  airIRRP500UnitServiceIntervalAirFilterAlarmDefinition => 'PowerNet-MIB::airIRRP500UnitServiceIntervalAirFilterAlarm',
  airIRRP500UnitServiceIntervalHumidifier => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.4.3',
  airIRRP500UnitServiceIntervalHumidifierAlarm => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.4.4',
  airIRRP500UnitServiceIntervalHumidifierAlarmDefinition => 'PowerNet-MIB::airIRRP500UnitServiceIntervalHumidifierAlarm',
  airIRRP500UnitServiceIntervalHeater => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.4.5',
  airIRRP500UnitServiceIntervalHeaterAlarm => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.4.6',
  airIRRP500UnitServiceIntervalHeaterAlarmDefinition => 'PowerNet-MIB::airIRRP500UnitServiceIntervalHeaterAlarm',
  airIRRP500UnitServiceIntervalCondensatePump => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.4.7',
  airIRRP500UnitServiceIntervalCondensatePumpAlarm => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.4.8',
  airIRRP500UnitServiceIntervalCondensatePumpAlarmDefinition => 'PowerNet-MIB::airIRRP500UnitServiceIntervalCondensatePumpAlarm',
  airIRRP500UnitServiceIntervalFans => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.4.9',
  airIRRP500UnitServiceIntervalFansAlarm => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.4.10',
  airIRRP500UnitServiceIntervalFansAlarmDefinition => 'PowerNet-MIB::airIRRP500UnitServiceIntervalFansAlarm',
  airIRRP500UnitThresholds => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.5',
  airIRRP500UnitThresholdsRackInletHighTempUS => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.5.1',
  airIRRP500UnitThresholdsRackInletHighTempMetric => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.5.2',
  airIRRP500UnitThresholdsSupplyAirHighTempUS => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.5.3',
  airIRRP500UnitThresholdsSupplyAirHighTempMetric => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.5.4',
  airIRRP500UnitThresholdsReturnAirHighTempUS => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.5.5',
  airIRRP500UnitThresholdsReturnAirHighTempMetric => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.5.6',
  airIRRP500UnitThresholdsSupplyHumidityHigh => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.5.7',
  airIRRP500UnitThresholdsSupplyHumidityLow => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.5.8',
  airIRRP500UnitThresholdsEnteringFluidHighTempUS => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.5.9',
  airIRRP500UnitThresholdsEnteringFluidHighTempMetric => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.5.10',
  airIRRP500UnitConfig => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.6',
  airIRRP500UnitConfigStartupDelay => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.6.1',
  airIRRP500UnitConfigCoolCapacity => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.6.2',
  airIRRP500UnitConfigCoolCapacityDefinition => 'PowerNet-MIB::airIRRP500UnitConfigCoolCapacity',
  airIRRP500UnitConfigIdleOnLeakDetect => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.6.3',
  airIRRP500UnitConfigIdleOnLeakDetectDefinition => 'PowerNet-MIB::airIRRP500UnitConfigIdleOnLeakDetect',
  airIRRP500UnitConfigInputNormalState => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.6.4',
  airIRRP500UnitConfigInputNormalStateDefinition => 'PowerNet-MIB::airIRRP500UnitConfigInputNormalState',
  airIRRP500UnitConfigOutputNormalState => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.6.5',
  airIRRP500UnitConfigOutputNormalStateDefinition => 'PowerNet-MIB::airIRRP500UnitConfigOutputNormalState',
  airIRRP500UnitConfigOutputSource => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.6.6',
  airIRRP500UnitConfigOutputSourceDefinition => 'PowerNet-MIB::airIRRP500UnitConfigOutputSource',
  airIRRP500UnitConfigHumidifyEnable => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.6.7',
  airIRRP500UnitConfigHumidifyEnableDefinition => 'PowerNet-MIB::airIRRP500UnitConfigHumidifyEnable',
  airIRRP500UnitConfigHumidifierControl => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.6.8',
  airIRRP500UnitConfigHumidifierControlDefinition => 'PowerNet-MIB::airIRRP500UnitConfigHumidifierControl',
  airIRRP500UnitConfigDehumidifyEnable => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.6.9',
  airIRRP500UnitConfigDehumidifyEnableDefinition => 'PowerNet-MIB::airIRRP500UnitConfigDehumidifyEnable',
  airIRRP500UnitConfigReheatEnable => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.6.10',
  airIRRP500UnitConfigReheatEnableDefinition => 'PowerNet-MIB::airIRRP500UnitConfigReheatEnable',
  airIRRP500UnitConfigHeatAssistEnable => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.6.11',
  airIRRP500UnitConfigHeatAssistEnableDefinition => 'PowerNet-MIB::airIRRP500UnitConfigHeatAssistEnable',
  airIRRP500UnitConfigPowerSourceConfig => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.6.12',
  airIRRP500UnitConfigPowerSourceConfigDefinition => 'PowerNet-MIB::airIRRP500UnitConfigPowerSourceConfig',
  airIRRP500UnitConfigUnitRoleOverride => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.6.13',
  airIRRP500UnitConfigUnitRoleOverrideDefinition => 'PowerNet-MIB::airIRRP500UnitConfigUnitRoleOverride',
  airIRRP500UnitConfigSecondaryPowerFeedCapability => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.6.14',
  airIRRP500UnitConfigSecondaryPowerFeedCapabilityDefinition => 'PowerNet-MIB::airIRRP500UnitConfigSecondaryPowerFeedCapability',
  airIRRP500UnitConfigIdleOnCoolFail => '1.3.6.1.4.1.318.1.1.13.3.3.2.2.6.15',
  airIRRP500UnitConfigIdleOnCoolFailDefinition => 'PowerNet-MIB::airIRRP500UnitConfigIdleOnCoolFail',
  airIRSC => '1.3.6.1.4.1.318.1.1.13.3.4',
  airIRSCUnit => '1.3.6.1.4.1.318.1.1.13.3.4.1',
  airIRSCUnitIdent => '1.3.6.1.4.1.318.1.1.13.3.4.1.1',
  airIRSCUnitIdentName => '1.3.6.1.4.1.318.1.1.13.3.4.1.1.1',
  airIRSCUnitIdentLocation => '1.3.6.1.4.1.318.1.1.13.3.4.1.1.2',
  airIRSCUnitIdentModelNumber => '1.3.6.1.4.1.318.1.1.13.3.4.1.1.3',
  airIRSCUnitIdentSerialNumber => '1.3.6.1.4.1.318.1.1.13.3.4.1.1.4',
  airIRSCUnitIdentFirmwareRevision => '1.3.6.1.4.1.318.1.1.13.3.4.1.1.5',
  airIRSCUnitIdentHardwareRevision => '1.3.6.1.4.1.318.1.1.13.3.4.1.1.6',
  airIRSCUnitIdentManufactureDate => '1.3.6.1.4.1.318.1.1.13.3.4.1.1.7',
  airIRSCUnitStatus => '1.3.6.1.4.1.318.1.1.13.3.4.1.2',
  airIRSCUnitStatusOperateMode => '1.3.6.1.4.1.318.1.1.13.3.4.1.2.1',
  airIRSCUnitStatusOperateModeDefinition => 'PowerNet-MIB::airIRSCUnitStatusOperateMode',
  airIRSCUnitStatusCoolOutput => '1.3.6.1.4.1.318.1.1.13.3.4.1.2.2',
  airIRSCUnitStatusCoolDemand => '1.3.6.1.4.1.318.1.1.13.3.4.1.2.3',
  airIRSCUnitStatusAirFlowUS => '1.3.6.1.4.1.318.1.1.13.3.4.1.2.4',
  airIRSCUnitStatusAirFlowMetric => '1.3.6.1.4.1.318.1.1.13.3.4.1.2.5',
  airIRSCUnitStatusRackInletTempUS => '1.3.6.1.4.1.318.1.1.13.3.4.1.2.6',
  airIRSCUnitStatusRackInletTempMetric => '1.3.6.1.4.1.318.1.1.13.3.4.1.2.7',
  airIRSCUnitStatusSupplyAirTempUS => '1.3.6.1.4.1.318.1.1.13.3.4.1.2.8',
  airIRSCUnitStatusSupplyAirTempMetric => '1.3.6.1.4.1.318.1.1.13.3.4.1.2.9',
  airIRSCUnitStatusReturnAirTempUS => '1.3.6.1.4.1.318.1.1.13.3.4.1.2.10',
  airIRSCUnitStatusReturnAirTempMetric => '1.3.6.1.4.1.318.1.1.13.3.4.1.2.11',
  airIRSCUnitStatusSuctionTempUS => '1.3.6.1.4.1.318.1.1.13.3.4.1.2.12',
  airIRSCUnitStatusSuctionTempMetric => '1.3.6.1.4.1.318.1.1.13.3.4.1.2.13',
  airIRSCUnitStatusSuperheatTempUS => '1.3.6.1.4.1.318.1.1.13.3.4.1.2.14',
  airIRSCUnitStatusSuperheatTempMetric => '1.3.6.1.4.1.318.1.1.13.3.4.1.2.15',
  airIRSCUnitStatusContainmtDPUS => '1.3.6.1.4.1.318.1.1.13.3.4.1.2.16',
  airIRSCUnitStatusContainmtDPMetric => '1.3.6.1.4.1.318.1.1.13.3.4.1.2.17',
  airIRSCUnitStatusFilterDPUS => '1.3.6.1.4.1.318.1.1.13.3.4.1.2.18',
  airIRSCUnitStatusFilterDPMetric => '1.3.6.1.4.1.318.1.1.13.3.4.1.2.19',
  airIRSCUnitStatusSuctionPressureUS => '1.3.6.1.4.1.318.1.1.13.3.4.1.2.20',
  airIRSCUnitStatusSuctionPressureMetric => '1.3.6.1.4.1.318.1.1.13.3.4.1.2.21',
  airIRSCUnitStatusDischargePressureUS => '1.3.6.1.4.1.318.1.1.13.3.4.1.2.22',
  airIRSCUnitStatusDischargePressureMetric => '1.3.6.1.4.1.318.1.1.13.3.4.1.2.23',
  airIRSCUnitStatusEvaporatorFanSpeed => '1.3.6.1.4.1.318.1.1.13.3.4.1.2.24',
  airIRSCUnitStatusCondenserFanSpeed => '1.3.6.1.4.1.318.1.1.13.3.4.1.2.25',
  airIRSCUnitStatusInputState => '1.3.6.1.4.1.318.1.1.13.3.4.1.2.26',
  airIRSCUnitStatusInputStateDefinition => 'PowerNet-MIB::airIRSCUnitStatusInputState',
  airIRSCUnitStatusOutputState => '1.3.6.1.4.1.318.1.1.13.3.4.1.2.27',
  airIRSCUnitStatusOutputStateDefinition => 'PowerNet-MIB::airIRSCUnitStatusOutputState',
  airIRSCUnitStatusCondOutletTempUS => '1.3.6.1.4.1.318.1.1.13.3.4.1.2.28',
  airIRSCUnitStatusCondOutletTempMetric => '1.3.6.1.4.1.318.1.1.13.3.4.1.2.29',
  airIRSCUnitStatusCondInletTempUS => '1.3.6.1.4.1.318.1.1.13.3.4.1.2.30',
  airIRSCUnitStatusCondInletTempMetric => '1.3.6.1.4.1.318.1.1.13.3.4.1.2.31',
  airIRSCUnitStatusCompressor => '1.3.6.1.4.1.318.1.1.13.3.4.1.2.32',
  airIRSCUnitStatusCompressorDefinition => 'PowerNet-MIB::airIRSCUnitStatusCompressor',
  airIRSCUnitStatusLeakSensor => '1.3.6.1.4.1.318.1.1.13.3.4.1.2.33',
  airIRSCUnitStatusLeakSensorDefinition => 'PowerNet-MIB::airIRSCUnitStatusLeakSensor',
  airIRSCUnitRunHours => '1.3.6.1.4.1.318.1.1.13.3.4.1.3',
  airIRSCUnitRunHoursAirFilter => '1.3.6.1.4.1.318.1.1.13.3.4.1.3.1',
  airIRSCUnitRunHoursEvaporatorFan1 => '1.3.6.1.4.1.318.1.1.13.3.4.1.3.2',
  airIRSCUnitRunHoursEvaporatorFan2 => '1.3.6.1.4.1.318.1.1.13.3.4.1.3.3',
  airIRSCUnitRunHoursEvaporatorFan3 => '1.3.6.1.4.1.318.1.1.13.3.4.1.3.4',
  airIRSCUnitRunHoursCondenserFan1 => '1.3.6.1.4.1.318.1.1.13.3.4.1.3.5',
  airIRSCUnitRunHoursCondenserFan2 => '1.3.6.1.4.1.318.1.1.13.3.4.1.3.6',
  airIRSCUnitRunHoursCondenserFan3 => '1.3.6.1.4.1.318.1.1.13.3.4.1.3.7',
  airIRSCUnitRunHoursFanPowerSupplyLeft => '1.3.6.1.4.1.318.1.1.13.3.4.1.3.8',
  airIRSCUnitRunHoursFanPowerSupplyRight => '1.3.6.1.4.1.318.1.1.13.3.4.1.3.9',
  airIRSCUnitRunHoursCondensatePump => '1.3.6.1.4.1.318.1.1.13.3.4.1.3.10',
  airIRSCUnitRunHoursCompressor => '1.3.6.1.4.1.318.1.1.13.3.4.1.3.11',
  airIRSCUnitServiceIntervals => '1.3.6.1.4.1.318.1.1.13.3.4.1.4',
  airIRSCUnitServiceIntervalsAirFilter => '1.3.6.1.4.1.318.1.1.13.3.4.1.4.1',
  airIRSCUnitServiceIntervalsAirFilterAlarm => '1.3.6.1.4.1.318.1.1.13.3.4.1.4.2',
  airIRSCUnitServiceIntervalsAirFilterAlarmDefinition => 'PowerNet-MIB::airIRSCUnitServiceIntervalsAirFilterAlarm',
  airIRSCUnitThresholds => '1.3.6.1.4.1.318.1.1.13.3.4.1.5',
  airIRSCUnitThresholdsRackInletHighTempUS => '1.3.6.1.4.1.318.1.1.13.3.4.1.5.1',
  airIRSCUnitThresholdsRackInletHighTempMetric => '1.3.6.1.4.1.318.1.1.13.3.4.1.5.2',
  airIRSCUnitThresholdsSupplyAirHighTempUS => '1.3.6.1.4.1.318.1.1.13.3.4.1.5.3',
  airIRSCUnitThresholdsSupplyAirHighTempMetric => '1.3.6.1.4.1.318.1.1.13.3.4.1.5.4',
  airIRSCUnitThresholdsReturnAirHighTempUS => '1.3.6.1.4.1.318.1.1.13.3.4.1.5.5',
  airIRSCUnitThresholdsReturnAirHighTempMetric => '1.3.6.1.4.1.318.1.1.13.3.4.1.5.6',
  airIRSCUnitSetpoints => '1.3.6.1.4.1.318.1.1.13.3.4.1.6',
  airIRSCUnitSetptsCoolSetpointUS => '1.3.6.1.4.1.318.1.1.13.3.4.1.6.1',
  airIRSCUnitSetptsCoolSetpointMetric => '1.3.6.1.4.1.318.1.1.13.3.4.1.6.2',
  airIRSCUnitSetptsCoolDeadbandUS => '1.3.6.1.4.1.318.1.1.13.3.4.1.6.3',
  airIRSCUnitSetptsCoolDeadbandMetric => '1.3.6.1.4.1.318.1.1.13.3.4.1.6.4',
  airIRSCUnitSetptsFanSpeedPreference => '1.3.6.1.4.1.318.1.1.13.3.4.1.6.5',
  airIRSCUnitSetptsFanSpeedPreferenceDefinition => 'PowerNet-MIB::AirIRSCFanSpeedPreference',
  airIRSCUnitSetptsSupplyAirSetpointUS => '1.3.6.1.4.1.318.1.1.13.3.4.1.6.6',
  airIRSCUnitSetptsSupplyAirSetpointMetric => '1.3.6.1.4.1.318.1.1.13.3.4.1.6.7',
  airIRSCUnitConfig => '1.3.6.1.4.1.318.1.1.13.3.4.1.7',
  airIRSCUnitConfigConfigurationType => '1.3.6.1.4.1.318.1.1.13.3.4.1.7.1',
  airIRSCUnitConfigConfigurationTypeDefinition => 'PowerNet-MIB::AirIRSCConfigType',
  airIRSCUnitConfigCapacityControlType => '1.3.6.1.4.1.318.1.1.13.3.4.1.7.2',
  airIRSCUnitConfigCapacityControlTypeDefinition => 'PowerNet-MIB::AirIRSCCapacityControlType',
  airIRSCUnitConfigStartupDelay => '1.3.6.1.4.1.318.1.1.13.3.4.1.7.3',
  airIRSCUnitConfigIdleOnLeakDetect => '1.3.6.1.4.1.318.1.1.13.3.4.1.7.4',
  airIRSCUnitConfigIdleOnLeakDetectDefinition => 'PowerNet-MIB::airIRSCUnitConfigIdleOnLeakDetect',
  airIRSCUnitConfigInputNormalState => '1.3.6.1.4.1.318.1.1.13.3.4.1.7.5',
  airIRSCUnitConfigInputNormalStateDefinition => 'PowerNet-MIB::airIRSCUnitConfigInputNormalState',
  airIRSCUnitConfigOutputNormalState => '1.3.6.1.4.1.318.1.1.13.3.4.1.7.6',
  airIRSCUnitConfigOutputNormalStateDefinition => 'PowerNet-MIB::airIRSCUnitConfigOutputNormalState',
  airIRSCUnitConfigOutputSource => '1.3.6.1.4.1.318.1.1.13.3.4.1.7.7',
  airIRSCUnitConfigOutputSourceDefinition => 'PowerNet-MIB::airIRSCUnitConfigOutputSource',
  airIRSCUnitConfigAltitudeUS => '1.3.6.1.4.1.318.1.1.13.3.4.1.7.8',
  airIRSCUnitConfigAltitudeMetric => '1.3.6.1.4.1.318.1.1.13.3.4.1.7.9',
  airIRSCUnitConfigOpControl => '1.3.6.1.4.1.318.1.1.13.3.4.1.7.10',
  airIRSCUnitConfigOpControlDefinition => 'PowerNet-MIB::airIRSCUnitConfigOpControl',
  airIRSCGroup => '1.3.6.1.4.1.318.1.1.13.3.4.2',
  airIRSCGroupStatus => '1.3.6.1.4.1.318.1.1.13.3.4.2.1',
  airIRSCGroupStatusCoolOutput => '1.3.6.1.4.1.318.1.1.13.3.4.2.1.1',
  airIRSCGroupStatusCoolDemand => '1.3.6.1.4.1.318.1.1.13.3.4.2.1.2',
  airIRSCGroupStatusAirFlowUS => '1.3.6.1.4.1.318.1.1.13.3.4.2.1.3',
  airIRSCGroupStatusAirFlowMetric => '1.3.6.1.4.1.318.1.1.13.3.4.2.1.4',
  airIRSCGroupStatusMaxRackInletTempUS => '1.3.6.1.4.1.318.1.1.13.3.4.2.1.5',
  airIRSCGroupStatusMaxRackInletTempMetric => '1.3.6.1.4.1.318.1.1.13.3.4.2.1.6',
  airIRSCGroupStatusMinRackInletTempUS => '1.3.6.1.4.1.318.1.1.13.3.4.2.1.7',
  airIRSCGroupStatusMinRackInletTempMetric => '1.3.6.1.4.1.318.1.1.13.3.4.2.1.8',
  airIRSCGroupStatusMaxReturnAirTempUS => '1.3.6.1.4.1.318.1.1.13.3.4.2.1.9',
  airIRSCGroupStatusMaxReturnAirTempMetric => '1.3.6.1.4.1.318.1.1.13.3.4.2.1.10',
  airIRSCGroupStatusMinReturnAirTempUS => '1.3.6.1.4.1.318.1.1.13.3.4.2.1.11',
  airIRSCGroupStatusMinReturnAirTempMetric => '1.3.6.1.4.1.318.1.1.13.3.4.2.1.12',
  airIRSCGroupStatusActiveFlowControlStatus => '1.3.6.1.4.1.318.1.1.13.3.4.2.1.13',
  airIRSCGroupStatusActiveFlowControlStatusDefinition => 'PowerNet-MIB::airIRSCGroupStatusActiveFlowControlStatus',
  airIRSCGroupSetpoints => '1.3.6.1.4.1.318.1.1.13.3.4.2.2',
  airIRSCGroupSetptsCoolSetpointUS => '1.3.6.1.4.1.318.1.1.13.3.4.2.2.1',
  airIRSCGroupSetptsCoolSetpointMetric => '1.3.6.1.4.1.318.1.1.13.3.4.2.2.2',
  airIRSCGroupSetptsCoolDeadbandUS => '1.3.6.1.4.1.318.1.1.13.3.4.2.2.3',
  airIRSCGroupSetptsCoolDeadbandMetric => '1.3.6.1.4.1.318.1.1.13.3.4.2.2.4',
  airIRSCGroupSetptsFanSpeedPreference => '1.3.6.1.4.1.318.1.1.13.3.4.2.2.5',
  airIRSCGroupSetptsFanSpeedPreferenceDefinition => 'PowerNet-MIB::AirIRSCFanSpeedPreference',
  airIRSCGroupSetptsSupplyAirSetpointUS => '1.3.6.1.4.1.318.1.1.13.3.4.2.2.6',
  airIRSCGroupSetptsSupplyAirSetpointMetric => '1.3.6.1.4.1.318.1.1.13.3.4.2.2.7',
  airIRSCGroupSetpointsActiveFlowControlBias => '1.3.6.1.4.1.318.1.1.13.3.4.2.2.8',
  airIRSCGroupSetpointsActiveFlowControlBiasDefinition => 'PowerNet-MIB::airIRSCGroupSetpointsActiveFlowControlBias',
  airIRSCGroupConfig => '1.3.6.1.4.1.318.1.1.13.3.4.2.3',
  airIRSCGroupConfigNumberofCoolingUnits => '1.3.6.1.4.1.318.1.1.13.3.4.2.3.1',
  airIRSCGroupConfigConfigurationType => '1.3.6.1.4.1.318.1.1.13.3.4.2.3.2',
  airIRSCGroupConfigConfigurationTypeDefinition => 'PowerNet-MIB::AirIRSCConfigType',
  airIRSCGroupConfigCapacityControlType => '1.3.6.1.4.1.318.1.1.13.3.4.2.3.3',
  airIRSCGroupConfigCapacityControlTypeDefinition => 'PowerNet-MIB::AirIRSCCapacityControlType',
  airIRSCGroupConfigAltitudeUS => '1.3.6.1.4.1.318.1.1.13.3.4.2.3.4',
  airIRSCGroupConfigAltitudeMetric => '1.3.6.1.4.1.318.1.1.13.3.4.2.3.5',
  airIRSCGroupConfigFanSpeedControl => '1.3.6.1.4.1.318.1.1.13.3.4.2.3.6',
  airIRSCGroupConfigFanSpeedControlDefinition => 'PowerNet-MIB::AirIRSCFanSpeedControl',
  airIRSCGroupConfigNumberOfActiveFlowControllers => '1.3.6.1.4.1.318.1.1.13.3.4.2.3.7',
  airIRSCGroupConfigActiveFlowControllerLampTest => '1.3.6.1.4.1.318.1.1.13.3.4.2.3.8',
  airIRSCGroupConfigActiveFlowControllerLampTestDefinition => 'PowerNet-MIB::airIRSCGroupConfigActiveFlowControllerLampTest',
  airIRGen2 => '1.3.6.1.4.1.318.1.1.13.4',
  airIRG2Ident => '1.3.6.1.4.1.318.1.1.13.4.1',
  airIRG2IdentName => '1.3.6.1.4.1.318.1.1.13.4.1.1',
  airIRG2IdentLocation => '1.3.6.1.4.1.318.1.1.13.4.1.2',
  airIRG2IdentModelNumber => '1.3.6.1.4.1.318.1.1.13.4.1.3',
  airIRG2IdentSerialNumber => '1.3.6.1.4.1.318.1.1.13.4.1.4',
  airIRG2IdentFirmwareRevision => '1.3.6.1.4.1.318.1.1.13.4.1.5',
  airIRG2IdentHardwareRevision => '1.3.6.1.4.1.318.1.1.13.4.1.6',
  airIRG2IdentManufactureDate => '1.3.6.1.4.1.318.1.1.13.4.1.7',
  airIRG2IdentUnitSysOID => '1.3.6.1.4.1.318.1.1.13.4.1.8',
  airIRG2IdentGroupSysOID => '1.3.6.1.4.1.318.1.1.13.4.1.9',
  airIRG2Group => '1.3.6.1.4.1.318.1.1.13.4.2',
  airIRG2GroupStatus => '1.3.6.1.4.1.318.1.1.13.4.2.1',
  airIRG2GroupStatusCoolOutput => '1.3.6.1.4.1.318.1.1.13.4.2.1.1',
  airIRG2GroupStatusCoolDemand => '1.3.6.1.4.1.318.1.1.13.4.2.1.2',
  airIRG2GroupStatusAirFlowUS => '1.3.6.1.4.1.318.1.1.13.4.2.1.3',
  airIRG2GroupStatusAirFlowMetric => '1.3.6.1.4.1.318.1.1.13.4.2.1.4',
  airIRG2GroupStatusMaxRackInletTempUS => '1.3.6.1.4.1.318.1.1.13.4.2.1.5',
  airIRG2GroupStatusMaxRackInletTempMetric => '1.3.6.1.4.1.318.1.1.13.4.2.1.6',
  airIRG2GroupStatusMinRackInletTempUS => '1.3.6.1.4.1.318.1.1.13.4.2.1.7',
  airIRG2GroupStatusMinRackInletTempMetric => '1.3.6.1.4.1.318.1.1.13.4.2.1.8',
  airIRG2GroupStatusMaxReturnAirTempUS => '1.3.6.1.4.1.318.1.1.13.4.2.1.9',
  airIRG2GroupStatusMaxReturnAirTempMetric => '1.3.6.1.4.1.318.1.1.13.4.2.1.10',
  airIRG2GroupStatusMinReturnAirTempUS => '1.3.6.1.4.1.318.1.1.13.4.2.1.11',
  airIRG2GroupStatusMinReturnAirTempMetric => '1.3.6.1.4.1.318.1.1.13.4.2.1.12',
  airIRG2GroupStatusActiveFlowControlStatus => '1.3.6.1.4.1.318.1.1.13.4.2.1.13',
  airIRG2GroupStatusActiveFlowControlStatusDefinition => 'PowerNet-MIB::airIRG2GroupStatusActiveFlowControlStatus',
  airIRG2GroupSetpoints => '1.3.6.1.4.1.318.1.1.13.4.2.2',
  airIRG2GroupSetptsCoolSetpointUS => '1.3.6.1.4.1.318.1.1.13.4.2.2.1',
  airIRG2GroupSetptsCoolSetpointMetric => '1.3.6.1.4.1.318.1.1.13.4.2.2.2',
  airIRG2GroupSetptsCoolDeadbandUS => '1.3.6.1.4.1.318.1.1.13.4.2.2.3',
  airIRG2GroupSetptsCoolDeadbandMetric => '1.3.6.1.4.1.318.1.1.13.4.2.2.4',
  airIRG2GroupSetptsFanSpeedPreference => '1.3.6.1.4.1.318.1.1.13.4.2.2.5',
  airIRG2GroupSetptsFanSpeedPreferenceDefinition => 'PowerNet-MIB::airIRG2GroupSetptsFanSpeedPreference',
  airIRG2GroupSetptsSupplyAirSetpointUS => '1.3.6.1.4.1.318.1.1.13.4.2.2.6',
  airIRG2GroupSetptsSupplyAirSetpointMetric => '1.3.6.1.4.1.318.1.1.13.4.2.2.7',
  airIRG2GroupSetpointsActiveFlowControlBias => '1.3.6.1.4.1.318.1.1.13.4.2.2.8',
  airIRG2GroupSetpointsActiveFlowControlBiasDefinition => 'PowerNet-MIB::airIRG2GroupSetpointsActiveFlowControlBias',
  airIRG2GroupConfig => '1.3.6.1.4.1.318.1.1.13.4.2.3',
  airIRG2GroupConfigNumberofCoolingUnits => '1.3.6.1.4.1.318.1.1.13.4.2.3.1',
  airIRG2GroupConfigConfigurationType => '1.3.6.1.4.1.318.1.1.13.4.2.3.2',
  airIRG2GroupConfigConfigurationTypeDefinition => 'PowerNet-MIB::airIRG2GroupConfigConfigurationType',
  airIRG2GroupConfigCapacityControlType => '1.3.6.1.4.1.318.1.1.13.4.2.3.3',
  airIRG2GroupConfigCapacityControlTypeDefinition => 'PowerNet-MIB::airIRG2GroupConfigCapacityControlType',
  airIRG2GroupConfigFanSpeedControl => '1.3.6.1.4.1.318.1.1.13.4.2.3.4',
  airIRG2GroupConfigFanSpeedControlDefinition => 'PowerNet-MIB::airIRG2GroupConfigFanSpeedControl',
  airIRG2GroupConfigCoolGainP => '1.3.6.1.4.1.318.1.1.13.4.2.3.5',
  airIRG2GroupConfigCoolResetRateI => '1.3.6.1.4.1.318.1.1.13.4.2.3.6',
  airIRG2GroupConfigCoolDerivativeD => '1.3.6.1.4.1.318.1.1.13.4.2.3.7',
  airIRG2GroupConfigCoolPIDReset => '1.3.6.1.4.1.318.1.1.13.4.2.3.8',
  airIRG2GroupConfigCoolPIDResetDefinition => 'PowerNet-MIB::airIRG2GroupConfigCoolPIDReset',
  airIRG2GroupConfigNumberofBackupUnits => '1.3.6.1.4.1.318.1.1.13.4.2.3.9',
  airIRG2GroupConfigRuntimeBalancingEnable => '1.3.6.1.4.1.318.1.1.13.4.2.3.10',
  airIRG2GroupConfigRuntimeBalancingEnableDefinition => 'PowerNet-MIB::airIRG2GroupConfigRuntimeBalancingEnable',
  airIRG2GroupConfigLoadAssistEnable => '1.3.6.1.4.1.318.1.1.13.4.2.3.11',
  airIRG2GroupConfigLoadAssistEnableDefinition => 'PowerNet-MIB::airIRG2GroupConfigLoadAssistEnable',
  airIRG2GroupConfigNumberOfActiveFlowControllers => '1.3.6.1.4.1.318.1.1.13.4.2.3.12',
  airIRG2GroupConfigActiveFlowControllerLampTest => '1.3.6.1.4.1.318.1.1.13.4.2.3.13',
  airIRG2GroupConfigActiveFlowControllerLampTestDefinition => 'PowerNet-MIB::airIRG2GroupConfigActiveFlowControllerLampTest',
  airIRG2GroupConfigAltitudeUS => '1.3.6.1.4.1.318.1.1.13.4.2.3.14',
  airIRG2GroupConfigAltitudeMetric => '1.3.6.1.4.1.318.1.1.13.4.2.3.15',
  airIRG2Alarms => '1.3.6.1.4.1.318.1.1.13.4.3',
  airIRG2AlarmsTableSize => '1.3.6.1.4.1.318.1.1.13.4.3.1',
  airIRG2AlarmsTable => '1.3.6.1.4.1.318.1.1.13.4.3.2',
  airIRG2AlarmsEntry => '1.3.6.1.4.1.318.1.1.13.4.3.2.1',
  airIRG2AlarmsIndex => '1.3.6.1.4.1.318.1.1.13.4.3.2.1.1',
  airIRG2AlarmsEventCode => '1.3.6.1.4.1.318.1.1.13.4.3.2.1.2',
  airIRG2AlarmsDescription => '1.3.6.1.4.1.318.1.1.13.4.3.2.1.3',
  airIRG2RC => '1.3.6.1.4.1.318.1.1.13.4.4',
  airIRG2RD => '1.3.6.1.4.1.318.1.1.13.4.5',
  airIRG2RDType1 => '1.3.6.1.4.1.318.1.1.13.4.5.1',
  airIRG2RDType2 => '1.3.6.1.4.1.318.1.1.13.4.5.2',
  airIRG2RDT2Status => '1.3.6.1.4.1.318.1.1.13.4.5.2.1',
  airIRG2RDT2StatusOperateMode => '1.3.6.1.4.1.318.1.1.13.4.5.2.1.1',
  airIRG2RDT2StatusOperateModeDefinition => 'PowerNet-MIB::airIRG2RDT2StatusOperateMode',
  airIRG2RDT2StatusCoolOutput => '1.3.6.1.4.1.318.1.1.13.4.5.2.1.2',
  airIRG2RDT2StatusCoolDemand => '1.3.6.1.4.1.318.1.1.13.4.5.2.1.3',
  airIRG2RDT2StatusAirFlowUS => '1.3.6.1.4.1.318.1.1.13.4.5.2.1.4',
  airIRG2RDT2StatusAirFlowMetric => '1.3.6.1.4.1.318.1.1.13.4.5.2.1.5',
  airIRG2RDT2StatusRackInletTempUS => '1.3.6.1.4.1.318.1.1.13.4.5.2.1.6',
  airIRG2RDT2StatusRackInletTempMetric => '1.3.6.1.4.1.318.1.1.13.4.5.2.1.7',
  airIRG2RDT2StatusSupplyAirTempUS => '1.3.6.1.4.1.318.1.1.13.4.5.2.1.8',
  airIRG2RDT2StatusSupplyAirTempMetric => '1.3.6.1.4.1.318.1.1.13.4.5.2.1.9',
  airIRG2RDT2StatusReturnAirTempUS => '1.3.6.1.4.1.318.1.1.13.4.5.2.1.10',
  airIRG2RDT2StatusReturnAirTempMetric => '1.3.6.1.4.1.318.1.1.13.4.5.2.1.11',
  airIRG2RDT2StatusSuctionTempUS => '1.3.6.1.4.1.318.1.1.13.4.5.2.1.12',
  airIRG2RDT2StatusSuctionTempMetric => '1.3.6.1.4.1.318.1.1.13.4.5.2.1.13',
  airIRG2RDT2StatusSuperheatTempUS => '1.3.6.1.4.1.318.1.1.13.4.5.2.1.14',
  airIRG2RDT2StatusSuperheatTempMetric => '1.3.6.1.4.1.318.1.1.13.4.5.2.1.15',
  airIRG2RDT2StatusFilterDPUS => '1.3.6.1.4.1.318.1.1.13.4.5.2.1.16',
  airIRG2RDT2StatusFilterDPMetric => '1.3.6.1.4.1.318.1.1.13.4.5.2.1.17',
  airIRG2RDT2StatusSuctionPressureUS => '1.3.6.1.4.1.318.1.1.13.4.5.2.1.18',
  airIRG2RDT2StatusSuctionPressureMetric => '1.3.6.1.4.1.318.1.1.13.4.5.2.1.19',
  airIRG2RDT2StatusDischargePressureUS => '1.3.6.1.4.1.318.1.1.13.4.5.2.1.20',
  airIRG2RDT2StatusDischargePressureMetric => '1.3.6.1.4.1.318.1.1.13.4.5.2.1.21',
  airIRG2RDT2StatusEvaporatorFanSpeed => '1.3.6.1.4.1.318.1.1.13.4.5.2.1.22',
  airIRG2RDT2StatusInputState => '1.3.6.1.4.1.318.1.1.13.4.5.2.1.23',
  airIRG2RDT2StatusInputStateDefinition => 'PowerNet-MIB::AirIRG2RDType2IOState',
  airIRG2RDT2StatusOutputState => '1.3.6.1.4.1.318.1.1.13.4.5.2.1.24',
  airIRG2RDT2StatusOutputStateDefinition => 'PowerNet-MIB::AirIRG2RDType2IOState',
  airIRG2RDT2StatusOHEInputState => '1.3.6.1.4.1.318.1.1.13.4.5.2.1.25',
  airIRG2RDT2StatusOHEInputStateDefinition => 'PowerNet-MIB::AirIRG2RDType2IOState',
  airIRG2RDT2StatusOHEOutputState => '1.3.6.1.4.1.318.1.1.13.4.5.2.1.26',
  airIRG2RDT2StatusOHEOutputStateDefinition => 'PowerNet-MIB::AirIRG2RDType2IOState',
  airIRG2RDT2StatusCompressor => '1.3.6.1.4.1.318.1.1.13.4.5.2.1.27',
  airIRG2RDT2StatusCompressorDefinition => 'PowerNet-MIB::airIRG2RDT2StatusCompressor',
  airIRG2RDT2StatusFluidValvePos => '1.3.6.1.4.1.318.1.1.13.4.5.2.1.28',
  airIRG2RDT2StatusHotGasBypassValvePos => '1.3.6.1.4.1.318.1.1.13.4.5.2.1.29',
  airIRG2RDT2StatusLeakSensor => '1.3.6.1.4.1.318.1.1.13.4.5.2.1.30',
  airIRG2RDT2StatusLeakSensorDefinition => 'PowerNet-MIB::airIRG2RDT2StatusLeakSensor',
  airIRG2RDT2RunHours => '1.3.6.1.4.1.318.1.1.13.4.5.2.2',
  airIRG2RDT2RunHoursAirFilter => '1.3.6.1.4.1.318.1.1.13.4.5.2.2.1',
  airIRG2RDT2RunHoursCondensatePump => '1.3.6.1.4.1.318.1.1.13.4.5.2.2.2',
  airIRG2RDT2RunHoursCompressor => '1.3.6.1.4.1.318.1.1.13.4.5.2.2.3',
  airIRG2RDT2RunHoursFanPSTableSize => '1.3.6.1.4.1.318.1.1.13.4.5.2.2.4',
  airIRG2RDT2RunHoursFanPSTable => '1.3.6.1.4.1.318.1.1.13.4.5.2.2.5',
  airIRG2RDT2RunHoursFanPSEntry => '1.3.6.1.4.1.318.1.1.13.4.5.2.2.5.1',
  airIRG2RDT2RunHoursFanPSIndex => '1.3.6.1.4.1.318.1.1.13.4.5.2.2.5.1.1',
  airIRG2RDT2RunHoursFanPSHours => '1.3.6.1.4.1.318.1.1.13.4.5.2.2.5.1.2',
  airIRG2RDT2RunHoursFanPSPosition => '1.3.6.1.4.1.318.1.1.13.4.5.2.2.5.1.3',
  airIRG2RDT2RunHoursFanPSPositionDefinition => 'PowerNet-MIB::airIRG2RDT2RunHoursFanPSPosition',
  airIRG2RDT2RunHoursEvapFanTableSize => '1.3.6.1.4.1.318.1.1.13.4.5.2.2.6',
  airIRG2RDT2RunHoursEvapFanTable => '1.3.6.1.4.1.318.1.1.13.4.5.2.2.7',
  airIRG2RDT2RunHoursEvapFanEntry => '1.3.6.1.4.1.318.1.1.13.4.5.2.2.7.1',
  airIRG2RDT2RunHoursEvapFanIndex => '1.3.6.1.4.1.318.1.1.13.4.5.2.2.7.1.1',
  airIRG2RDT2RunHoursEvapFanHours => '1.3.6.1.4.1.318.1.1.13.4.5.2.2.7.1.2',
  airIRG2RDT2RunHoursUnit => '1.3.6.1.4.1.318.1.1.13.4.5.2.2.8',
  airIRG2RDT2ServiceIntervals => '1.3.6.1.4.1.318.1.1.13.4.5.2.3',
  airIRG2RDT2ServiceIntervalsAirFilter => '1.3.6.1.4.1.318.1.1.13.4.5.2.3.1',
  airIRG2RDT2ServiceIntervalsAirFilterAlarm => '1.3.6.1.4.1.318.1.1.13.4.5.2.3.2',
  airIRG2RDT2ServiceIntervalsAirFilterAlarmDefinition => 'PowerNet-MIB::airIRG2RDT2ServiceIntervalsAirFilterAlarm',
  airIRG2RDT2Thresholds => '1.3.6.1.4.1.318.1.1.13.4.5.2.4',
  airIRG2RDT2ThresholdsRackInletHighTempUS => '1.3.6.1.4.1.318.1.1.13.4.5.2.4.1',
  airIRG2RDT2ThresholdsRackInletHighTempMetric => '1.3.6.1.4.1.318.1.1.13.4.5.2.4.2',
  airIRG2RDT2ThresholdsSupplyAirHighTempUS => '1.3.6.1.4.1.318.1.1.13.4.5.2.4.3',
  airIRG2RDT2ThresholdsSupplyAirHighTempMetric => '1.3.6.1.4.1.318.1.1.13.4.5.2.4.4',
  airIRG2RDT2ThresholdsReturnAirHighTempUS => '1.3.6.1.4.1.318.1.1.13.4.5.2.4.5',
  airIRG2RDT2ThresholdsReturnAirHighTempMetric => '1.3.6.1.4.1.318.1.1.13.4.5.2.4.6',
  airIRG2RDT2Setpoints => '1.3.6.1.4.1.318.1.1.13.4.5.2.5',
  airIRG2RDT2Config => '1.3.6.1.4.1.318.1.1.13.4.5.2.6',
  airIRG2RDT2ConfigUnitType => '1.3.6.1.4.1.318.1.1.13.4.5.2.6.1',
  airIRG2RDT2ConfigUnitTypeDefinition => 'PowerNet-MIB::airIRG2RDT2ConfigUnitType',
  airIRG2RDT2ConfigStartupDelay => '1.3.6.1.4.1.318.1.1.13.4.5.2.6.2',
  airIRG2RDT2ConfigIdleOnLeakDetect => '1.3.6.1.4.1.318.1.1.13.4.5.2.6.3',
  airIRG2RDT2ConfigIdleOnLeakDetectDefinition => 'PowerNet-MIB::airIRG2RDT2ConfigIdleOnLeakDetect',
  airIRG2RDT2ConfigInputNormalState => '1.3.6.1.4.1.318.1.1.13.4.5.2.6.4',
  airIRG2RDT2ConfigInputNormalStateDefinition => 'PowerNet-MIB::AirIRG2RDType2IOState',
  airIRG2RDT2ConfigOutputNormalState => '1.3.6.1.4.1.318.1.1.13.4.5.2.6.5',
  airIRG2RDT2ConfigOutputNormalStateDefinition => 'PowerNet-MIB::AirIRG2RDType2IOState',
  airIRG2RDT2ConfigOutputSource => '1.3.6.1.4.1.318.1.1.13.4.5.2.6.6',
  airIRG2RDT2ConfigOutputSourceDefinition => 'PowerNet-MIB::airIRG2RDT2ConfigOutputSource',
  airIRG2RDT2ConfigOHEInputNormalState => '1.3.6.1.4.1.318.1.1.13.4.5.2.6.7',
  airIRG2RDT2ConfigOHEInputNormalStateDefinition => 'PowerNet-MIB::AirIRG2RDType2IOState',
  airIRG2RDT2ConfigUnitRoleOverride => '1.3.6.1.4.1.318.1.1.13.4.5.2.6.8',
  airIRG2RDT2ConfigUnitRoleOverrideDefinition => 'PowerNet-MIB::airIRG2RDT2ConfigUnitRoleOverride',
  airIRG2RDT2ConfigUnitIdleOnCoolFail => '1.3.6.1.4.1.318.1.1.13.4.5.2.6.9',
  airIRG2RDT2ConfigUnitIdleOnCoolFailDefinition => 'PowerNet-MIB::airIRG2RDT2ConfigUnitIdleOnCoolFail',
  airIRG2SC => '1.3.6.1.4.1.318.1.1.13.4.6',
  airIRG2RA => '1.3.6.1.4.1.318.1.1.13.4.7',
  airInRoom => '1.3.6.1.4.1.318.1.1.13.5',
  airIRmIdent => '1.3.6.1.4.1.318.1.1.13.5.1',
  airIRmIdentName => '1.3.6.1.4.1.318.1.1.13.5.1.1',
  airIRmIdentLocation => '1.3.6.1.4.1.318.1.1.13.5.1.2',
  airIRmIdentModelNumber => '1.3.6.1.4.1.318.1.1.13.5.1.3',
  airIRmIdentSerialNumber => '1.3.6.1.4.1.318.1.1.13.5.1.4',
  airIRmIdentFirmwareRevision => '1.3.6.1.4.1.318.1.1.13.5.1.5',
  airIRmIdentHardwareRevision => '1.3.6.1.4.1.318.1.1.13.5.1.6',
  airIRmIdentManufactureDate => '1.3.6.1.4.1.318.1.1.13.5.1.7',
  airIRmIdentSysOID => '1.3.6.1.4.1.318.1.1.13.5.1.8',
  airIRmAlarms => '1.3.6.1.4.1.318.1.1.13.5.2',
  airIRmAlarmsTableSize => '1.3.6.1.4.1.318.1.1.13.5.2.1',
  airIRmAlarmsTable => '1.3.6.1.4.1.318.1.1.13.5.2.2',
  airIRmAlarmsEntry => '1.3.6.1.4.1.318.1.1.13.5.2.2.1',
  airIRmAlarmsIndex => '1.3.6.1.4.1.318.1.1.13.5.2.2.1.1',
  airIRmAlarmsEventCode => '1.3.6.1.4.1.318.1.1.13.5.2.2.1.2',
  airIRmAlarmsDescription => '1.3.6.1.4.1.318.1.1.13.5.2.2.1.3',
  airIRmPerimeter => '1.3.6.1.4.1.318.1.1.13.5.3',
  airIRmPmCommon1 => '1.3.6.1.4.1.318.1.1.13.5.3.2',
  airIRmPmUnitType => '1.3.6.1.4.1.318.1.1.13.5.3.2.1',
  airIRmPmUnitTypeDefinition => 'PowerNet-MIB::airIRmPmUnitType',
  airIRmPmSwVersion => '1.3.6.1.4.1.318.1.1.13.5.3.2.3',
  airIRmPmBusAddress => '1.3.6.1.4.1.318.1.1.13.5.3.2.5',
  airIRmPmControllerType => '1.3.6.1.4.1.318.1.1.13.5.3.2.7',
  airIRmPmControllerTypeDefinition => 'PowerNet-MIB::airIRmPmControllerType',
  airIRmPmGeneralError => '1.3.6.1.4.1.318.1.1.13.5.3.2.8',
  airIRmPmGeneralErrorDefinition => 'PowerNet-MIB::AirIRmAlarmState',
  airIRmPmErrorOnBus => '1.3.6.1.4.1.318.1.1.13.5.3.2.9',
  airIRmPmErrorOnBusDefinition => 'PowerNet-MIB::AirIRmAlarmState',
  airIRmPmCommon2 => '1.3.6.1.4.1.318.1.1.13.5.3.3',
  airIRmPmPCStop => '1.3.6.1.4.1.318.1.1.13.5.3.3.1',
  airIRmPmPCStopDefinition => 'PowerNet-MIB::AirIRmStopState',
  airIRmPmRemoteStop => '1.3.6.1.4.1.318.1.1.13.5.3.3.2',
  airIRmPmRemoteStopDefinition => 'PowerNet-MIB::AirIRmStopState',
  airIRmPmLocalStop => '1.3.6.1.4.1.318.1.1.13.5.3.3.3',
  airIRmPmLocalStopDefinition => 'PowerNet-MIB::AirIRmStopState',
  airIRmPmTimerStop => '1.3.6.1.4.1.318.1.1.13.5.3.3.4',
  airIRmPmTimerStopDefinition => 'PowerNet-MIB::AirIRmStopState',
  airIRmPmSeqStop => '1.3.6.1.4.1.318.1.1.13.5.3.3.5',
  airIRmPmSeqStopDefinition => 'PowerNet-MIB::AirIRmStopState',
  airIRmPmRemoteUPS => '1.3.6.1.4.1.318.1.1.13.5.3.3.7',
  airIRmPmRemoteUPSDefinition => 'PowerNet-MIB::airIRmPmRemoteUPS',
  airIRmPmLocalUPS => '1.3.6.1.4.1.318.1.1.13.5.3.3.8',
  airIRmPmLocalUPSDefinition => 'PowerNet-MIB::AirIRmActivityState',
  airIRmPmCommonAlarm => '1.3.6.1.4.1.318.1.1.13.5.3.3.11',
  airIRmPmCommonAlarmDefinition => 'PowerNet-MIB::AirIRmAlarmState',
  airIRmPmResetAllAlarms => '1.3.6.1.4.1.318.1.1.13.5.3.3.12',
  airIRmPmResetAllAlarmsDefinition => 'PowerNet-MIB::airIRmPmResetAllAlarms',
  airIRmPmUnitOnOff => '1.3.6.1.4.1.318.1.1.13.5.3.3.14',
  airIRmPmUnitOnOffDefinition => 'PowerNet-MIB::AirIRmControlState',
  airIRmPmMaintenance => '1.3.6.1.4.1.318.1.1.13.5.3.3.15',
  airIRmPmMaintenanceDefinition => 'PowerNet-MIB::airIRmPmMaintenance',
  airIRmPmUnitTemperatureScale => '1.3.6.1.4.1.318.1.1.13.5.3.3.23',
  airIRmPmUnitTemperatureScaleDefinition => 'PowerNet-MIB::airIRmPmUnitTemperatureScale',
  airIRmPmUnitWinterMode => '1.3.6.1.4.1.318.1.1.13.5.3.3.24',
  airIRmPmUnitWinterModeDefinition => 'PowerNet-MIB::airIRmPmUnitWinterMode',
  airIRmPmDayNightMode => '1.3.6.1.4.1.318.1.1.13.5.3.3.25',
  airIRmPmDayNightModeDefinition => 'PowerNet-MIB::airIRmPmDayNightMode',
  airIRmPmCommon3 => '1.3.6.1.4.1.318.1.1.13.5.3.4',
  airIRmPmLastMaintenanceYear => '1.3.6.1.4.1.318.1.1.13.5.3.4.1',
  airIRmPmLastMaintenanceMonth => '1.3.6.1.4.1.318.1.1.13.5.3.4.2',
  airIRmPmLastMaintenanceDay => '1.3.6.1.4.1.318.1.1.13.5.3.4.3',
  airIRmPmUnitMaintenanceInterval => '1.3.6.1.4.1.318.1.1.13.5.3.4.4',
  airIRmPmRuntimeUnit => '1.3.6.1.4.1.318.1.1.13.5.3.4.5',
  airIRmPmStoptimeUnit => '1.3.6.1.4.1.318.1.1.13.5.3.4.6',
  airIRmPmRuntimeCooling => '1.3.6.1.4.1.318.1.1.13.5.3.4.7',
  airIRmPmRuntimeHeating => '1.3.6.1.4.1.318.1.1.13.5.3.4.8',
  airIRmPmRuntimeHumidification => '1.3.6.1.4.1.318.1.1.13.5.3.4.9',
  airIRmPmRuntimeDehumidification => '1.3.6.1.4.1.318.1.1.13.5.3.4.10',
  airIRmPmUnitTemperature => '1.3.6.1.4.1.318.1.1.13.5.3.4.11',
  airIRmPmUnitTemperatureC => '1.3.6.1.4.1.318.1.1.13.5.3.4.11.1',
  airIRmPmUnitTemperatureF => '1.3.6.1.4.1.318.1.1.13.5.3.4.11.2',
  airIRmPmUnitHumidity => '1.3.6.1.4.1.318.1.1.13.5.3.4.12',
  airIRmPmSetpointTemperatureDay => '1.3.6.1.4.1.318.1.1.13.5.3.4.14',
  airIRmPmSetpointTemperatureDayC => '1.3.6.1.4.1.318.1.1.13.5.3.4.14.1',
  airIRmPmSetpointTemperatureDayF => '1.3.6.1.4.1.318.1.1.13.5.3.4.14.2',
  airIRmPmSetpointTemperatureNight => '1.3.6.1.4.1.318.1.1.13.5.3.4.15',
  airIRmPmSetpointTemperatureNightC => '1.3.6.1.4.1.318.1.1.13.5.3.4.15.1',
  airIRmPmSetpointTemperatureNightF => '1.3.6.1.4.1.318.1.1.13.5.3.4.15.2',
  airIRmPmSetpointHumidity => '1.3.6.1.4.1.318.1.1.13.5.3.4.17',
  airIRmPmUnitControlType => '1.3.6.1.4.1.318.1.1.13.5.3.4.24',
  airIRmPmUnitControlTypeDefinition => 'PowerNet-MIB::airIRmPmUnitControlType',
  airIRmPmWinterModeStartTemp => '1.3.6.1.4.1.318.1.1.13.5.3.4.29',
  airIRmPmWinterModeStartTempC => '1.3.6.1.4.1.318.1.1.13.5.3.4.29.1',
  airIRmPmWinterModeStartTempF => '1.3.6.1.4.1.318.1.1.13.5.3.4.29.2',
  airIRmPmWinterModeHysteresis => '1.3.6.1.4.1.318.1.1.13.5.3.4.30',
  airIRmPmWinterModeHysteresisK => '1.3.6.1.4.1.318.1.1.13.5.3.4.30.1',
  airIRmPmWinterModeHysteresisF => '1.3.6.1.4.1.318.1.1.13.5.3.4.30.2',
  airIRmPmWaterTemperature => '1.3.6.1.4.1.318.1.1.13.5.3.4.32',
  airIRmPmWaterTemperatureC => '1.3.6.1.4.1.318.1.1.13.5.3.4.32.1',
  airIRmPmWaterTemperatureF => '1.3.6.1.4.1.318.1.1.13.5.3.4.32.2',
  airIRmPmReturnAirTemperature => '1.3.6.1.4.1.318.1.1.13.5.3.4.33',
  airIRmPmReturnAirTemperatureC => '1.3.6.1.4.1.318.1.1.13.5.3.4.33.1',
  airIRmPmReturnAirTemperatureF => '1.3.6.1.4.1.318.1.1.13.5.3.4.33.2',
  airIRmPmSupplyAirTemperature => '1.3.6.1.4.1.318.1.1.13.5.3.4.34',
  airIRmPmSupplyAirTemperatureC => '1.3.6.1.4.1.318.1.1.13.5.3.4.34.1',
  airIRmPmSupplyAirTemperatureF => '1.3.6.1.4.1.318.1.1.13.5.3.4.34.2',
  airIRmPmReturnAirHumidity => '1.3.6.1.4.1.318.1.1.13.5.3.4.35',
  airIRmPmSupplyAirHumidity => '1.3.6.1.4.1.318.1.1.13.5.3.4.36',
  airIRmPmOutsideAirTemperature => '1.3.6.1.4.1.318.1.1.13.5.3.4.37',
  airIRmPmOutsideAirTemperatureC => '1.3.6.1.4.1.318.1.1.13.5.3.4.37.1',
  airIRmPmOutsideAirTemperatureF => '1.3.6.1.4.1.318.1.1.13.5.3.4.37.2',
  airIRmPmOutsideAirHumidity => '1.3.6.1.4.1.318.1.1.13.5.3.4.38',
  airIRmPmCoolingPriority => '1.3.6.1.4.1.318.1.1.13.5.3.4.39',
  airIRmPmCoolingPriorityDefinition => 'PowerNet-MIB::airIRmPmCoolingPriority',
  airIRmPmWaterTemperature2 => '1.3.6.1.4.1.318.1.1.13.5.3.4.43',
  airIRmPmWaterTemperature2C => '1.3.6.1.4.1.318.1.1.13.5.3.4.43.1',
  airIRmPmWaterTemperature2F => '1.3.6.1.4.1.318.1.1.13.5.3.4.43.2',
  airIRmPmRuntimeFreeCooling => '1.3.6.1.4.1.318.1.1.13.5.3.4.44',
  airIRmPmRuntimeMixedModeFreeCooling => '1.3.6.1.4.1.318.1.1.13.5.3.4.45',
  airIRmPmCommon4 => '1.3.6.1.4.1.318.1.1.13.5.3.5',
  airIRmPmNumberOfCompressors => '1.3.6.1.4.1.318.1.1.13.5.3.5.4',
  airIRmPmNumberOfSuctionValves => '1.3.6.1.4.1.318.1.1.13.5.3.5.5',
  airIRmPmNumberOfDryCoolers => '1.3.6.1.4.1.318.1.1.13.5.3.5.6',
  airIRmPmNumberOfPumps => '1.3.6.1.4.1.318.1.1.13.5.3.5.7',
  airIRmPmNumberOfElectricHeaters => '1.3.6.1.4.1.318.1.1.13.5.3.5.8',
  airIRmPmNumberOfHumidifiers => '1.3.6.1.4.1.318.1.1.13.5.3.5.9',
  airIRmPmNumberOfFans => '1.3.6.1.4.1.318.1.1.13.5.3.5.10',
  airIRmPmNumberOfLouvers => '1.3.6.1.4.1.318.1.1.13.5.3.5.11',
  airIRmPmNumberOfSensors => '1.3.6.1.4.1.318.1.1.13.5.3.5.12',
  airIRmPmNumberOfExternalAlarmInputs => '1.3.6.1.4.1.318.1.1.13.5.3.5.13',
  airIRmPmNumberOfGECWValves => '1.3.6.1.4.1.318.1.1.13.5.3.5.14',
  airIRmPmNumberOfHotGasReheat => '1.3.6.1.4.1.318.1.1.13.5.3.5.15',
  airIRmPmNumberOfPWWReheat => '1.3.6.1.4.1.318.1.1.13.5.3.5.16',
  airIRmPmNumberOfDehumidifiers => '1.3.6.1.4.1.318.1.1.13.5.3.5.17',
  airIRmPmCommon5 => '1.3.6.1.4.1.318.1.1.13.5.3.6',
  airIRmPmUnitEvaporationTemperature1 => '1.3.6.1.4.1.318.1.1.13.5.3.6.1',
  airIRmPmUnitEvaporationTemperature1C => '1.3.6.1.4.1.318.1.1.13.5.3.6.1.1',
  airIRmPmUnitEvaporationTemperature1F => '1.3.6.1.4.1.318.1.1.13.5.3.6.1.2',
  airIRmPmUnitEvaporationPressure1 => '1.3.6.1.4.1.318.1.1.13.5.3.6.2',
  airIRmPmUnitCondensationTemperature1 => '1.3.6.1.4.1.318.1.1.13.5.3.6.3',
  airIRmPmUnitCondensationTemperature1C => '1.3.6.1.4.1.318.1.1.13.5.3.6.3.1',
  airIRmPmUnitCondensationTemperature1F => '1.3.6.1.4.1.318.1.1.13.5.3.6.3.2',
  airIRmPmUnitCondensationPressure1 => '1.3.6.1.4.1.318.1.1.13.5.3.6.4',
  airIRmPmMaxLimitReturnAirTemperature => '1.3.6.1.4.1.318.1.1.13.5.3.6.8',
  airIRmPmMaxLimitReturnAirTemperatureC => '1.3.6.1.4.1.318.1.1.13.5.3.6.8.1',
  airIRmPmMaxLimitReturnAirTemperatureF => '1.3.6.1.4.1.318.1.1.13.5.3.6.8.2',
  airIRmPmMinLimitReturnAirTemperature => '1.3.6.1.4.1.318.1.1.13.5.3.6.9',
  airIRmPmMinLimitReturnAirTemperatureC => '1.3.6.1.4.1.318.1.1.13.5.3.6.9.1',
  airIRmPmMinLimitReturnAirTemperatureF => '1.3.6.1.4.1.318.1.1.13.5.3.6.9.2',
  airIRmPmMaxLimitSupplyAirTemperature => '1.3.6.1.4.1.318.1.1.13.5.3.6.10',
  airIRmPmMaxLimitSupplyAirTemperatureC => '1.3.6.1.4.1.318.1.1.13.5.3.6.10.1',
  airIRmPmMaxLimitSupplyAirTemperatureF => '1.3.6.1.4.1.318.1.1.13.5.3.6.10.2',
  airIRmPmMinLimitSupplyAirTemperature => '1.3.6.1.4.1.318.1.1.13.5.3.6.11',
  airIRmPmMinLimitSupplyAirTemperatureC => '1.3.6.1.4.1.318.1.1.13.5.3.6.11.1',
  airIRmPmMinLimitSupplyAirTemperatureF => '1.3.6.1.4.1.318.1.1.13.5.3.6.11.2',
  airIRmPmMaxLimitWaterTemperature => '1.3.6.1.4.1.318.1.1.13.5.3.6.12',
  airIRmPmMaxLimitWaterTemperatureC => '1.3.6.1.4.1.318.1.1.13.5.3.6.12.1',
  airIRmPmMaxLimitWaterTemperatureF => '1.3.6.1.4.1.318.1.1.13.5.3.6.12.2',
  airIRmPmMinLimitWaterTemperature => '1.3.6.1.4.1.318.1.1.13.5.3.6.13',
  airIRmPmMinLimitWaterTemperatureC => '1.3.6.1.4.1.318.1.1.13.5.3.6.13.1',
  airIRmPmMinLimitWaterTemperatureF => '1.3.6.1.4.1.318.1.1.13.5.3.6.13.2',
  airIRmPmMaxLimitReturnAirHumidity => '1.3.6.1.4.1.318.1.1.13.5.3.6.14',
  airIRmPmMinLimitReturnAirHumidity => '1.3.6.1.4.1.318.1.1.13.5.3.6.15',
  airIRmPmMaxLimitSupplyAirHumidity => '1.3.6.1.4.1.318.1.1.13.5.3.6.16',
  airIRmPmMinLimitSupplyAirHumidity => '1.3.6.1.4.1.318.1.1.13.5.3.6.17',
  airIRmPmLowPressureWinterDelay => '1.3.6.1.4.1.318.1.1.13.5.3.6.18',
  airIRmPmUnitCondensationPressure2 => '1.3.6.1.4.1.318.1.1.13.5.3.6.19',
  airIRmPmUnitOverloadSwitch => '1.3.6.1.4.1.318.1.1.13.5.3.6.20',
  airIRmPmUnitCondensationTemperature2 => '1.3.6.1.4.1.318.1.1.13.5.3.6.41',
  airIRmPmUnitCondensationTemperature2C => '1.3.6.1.4.1.318.1.1.13.5.3.6.41.1',
  airIRmPmUnitCondensationTemperature2F => '1.3.6.1.4.1.318.1.1.13.5.3.6.41.2',
  airIRmPmUnitEvaporationPressure2 => '1.3.6.1.4.1.318.1.1.13.5.3.6.42',
  airIRmPmUnitEvaporationTemperature2 => '1.3.6.1.4.1.318.1.1.13.5.3.6.43',
  airIRmPmUnitEvaporationTemperature2C => '1.3.6.1.4.1.318.1.1.13.5.3.6.43.1',
  airIRmPmUnitEvaporationTemperature2F => '1.3.6.1.4.1.318.1.1.13.5.3.6.43.2',
  airIRmPmCompressor1 => '1.3.6.1.4.1.318.1.1.13.5.3.7',
  airIRmPmCmp1ManOperationActive => '1.3.6.1.4.1.318.1.1.13.5.3.7.2',
  airIRmPmCmp1ManOperationActiveDefinition => 'PowerNet-MIB::airIRmPmCmp1ManOperationActive',
  airIRmPmCmp1ManOperationState => '1.3.6.1.4.1.318.1.1.13.5.3.7.3',
  airIRmPmCmp1ManOperationStateDefinition => 'PowerNet-MIB::AirIRmControlState',
  airIRmPmCmp1Running => '1.3.6.1.4.1.318.1.1.13.5.3.7.4',
  airIRmPmCmp1RunningDefinition => 'PowerNet-MIB::AirIRmActivityState',
  airIRmPmCmp1StartTempSummer => '1.3.6.1.4.1.318.1.1.13.5.3.7.17',
  airIRmPmCmp1StartTempSummerK => '1.3.6.1.4.1.318.1.1.13.5.3.7.17.1',
  airIRmPmCmp1StartTempSummerF => '1.3.6.1.4.1.318.1.1.13.5.3.7.17.2',
  airIRmPmCmp1HysteresisSummer => '1.3.6.1.4.1.318.1.1.13.5.3.7.18',
  airIRmPmCmp1HysteresisSummerK => '1.3.6.1.4.1.318.1.1.13.5.3.7.18.1',
  airIRmPmCmp1HysteresisSummerF => '1.3.6.1.4.1.318.1.1.13.5.3.7.18.2',
  airIRmPmCmp1StartTempWinter => '1.3.6.1.4.1.318.1.1.13.5.3.7.19',
  airIRmPmCmp1StartTempWinterK => '1.3.6.1.4.1.318.1.1.13.5.3.7.19.1',
  airIRmPmCmp1StartTempWinterF => '1.3.6.1.4.1.318.1.1.13.5.3.7.19.2',
  airIRmPmCmp1HysteresisWinter => '1.3.6.1.4.1.318.1.1.13.5.3.7.20',
  airIRmPmCmp1HysteresisWinterK => '1.3.6.1.4.1.318.1.1.13.5.3.7.20.1',
  airIRmPmCmp1HysteresisWinterF => '1.3.6.1.4.1.318.1.1.13.5.3.7.20.2',
  airIRmPmCmp1Runtime => '1.3.6.1.4.1.318.1.1.13.5.3.7.29',
  airIRmPmCompressor2 => '1.3.6.1.4.1.318.1.1.13.5.3.8',
  airIRmPmCmp2ManOperationActive => '1.3.6.1.4.1.318.1.1.13.5.3.8.2',
  airIRmPmCmp2ManOperationActiveDefinition => 'PowerNet-MIB::airIRmPmCmp2ManOperationActive',
  airIRmPmCmp2ManOperationState => '1.3.6.1.4.1.318.1.1.13.5.3.8.3',
  airIRmPmCmp2ManOperationStateDefinition => 'PowerNet-MIB::AirIRmControlState',
  airIRmPmCmp2Running => '1.3.6.1.4.1.318.1.1.13.5.3.8.4',
  airIRmPmCmp2RunningDefinition => 'PowerNet-MIB::AirIRmActivityState',
  airIRmPmCmp2StartTempSummer => '1.3.6.1.4.1.318.1.1.13.5.3.8.17',
  airIRmPmCmp2StartTempSummerK => '1.3.6.1.4.1.318.1.1.13.5.3.8.17.1',
  airIRmPmCmp2StartTempSummerF => '1.3.6.1.4.1.318.1.1.13.5.3.8.17.2',
  airIRmPmCmp2HysteresisSummer => '1.3.6.1.4.1.318.1.1.13.5.3.8.18',
  airIRmPmCmp2HysteresisSummerK => '1.3.6.1.4.1.318.1.1.13.5.3.8.18.1',
  airIRmPmCmp2HysteresisSummerF => '1.3.6.1.4.1.318.1.1.13.5.3.8.18.2',
  airIRmPmCmp2StartTempWinter => '1.3.6.1.4.1.318.1.1.13.5.3.8.19',
  airIRmPmCmp2StartTempWinterK => '1.3.6.1.4.1.318.1.1.13.5.3.8.19.1',
  airIRmPmCmp2StartTempWinterF => '1.3.6.1.4.1.318.1.1.13.5.3.8.19.2',
  airIRmPmCmp2HysteresisWinter => '1.3.6.1.4.1.318.1.1.13.5.3.8.20',
  airIRmPmCmp2HysteresisWinterK => '1.3.6.1.4.1.318.1.1.13.5.3.8.20.1',
  airIRmPmCmp2HysteresisWinterF => '1.3.6.1.4.1.318.1.1.13.5.3.8.20.2',
  airIRmPmCmp2Runtime => '1.3.6.1.4.1.318.1.1.13.5.3.8.29',
  airIRmPmSuctionValve1 => '1.3.6.1.4.1.318.1.1.13.5.3.9',
  airIRmPmSuctionValve2 => '1.3.6.1.4.1.318.1.1.13.5.3.10',
  airIRmPmEheating1 => '1.3.6.1.4.1.318.1.1.13.5.3.11',
  airIRmPmEheating1ManOpEnable => '1.3.6.1.4.1.318.1.1.13.5.3.11.2',
  airIRmPmEheating1ManOpEnableDefinition => 'PowerNet-MIB::AirIRmActivityState',
  airIRmPmEheating1Running => '1.3.6.1.4.1.318.1.1.13.5.3.11.4',
  airIRmPmEheating1RunningDefinition => 'PowerNet-MIB::AirIRmControlState',
  airIRmPmEheating1ManOpRunning => '1.3.6.1.4.1.318.1.1.13.5.3.11.5',
  airIRmPmEheating1ManOpRunningDefinition => 'PowerNet-MIB::AirIRmActivityState',
  airIRmPmEheating1Type => '1.3.6.1.4.1.318.1.1.13.5.3.11.9',
  airIRmPmEheating1TypeDefinition => 'PowerNet-MIB::airIRmPmEheating1Type',
  airIRmPmEheating1StartTemperature => '1.3.6.1.4.1.318.1.1.13.5.3.11.10',
  airIRmPmEheating1StartTemperatureK => '1.3.6.1.4.1.318.1.1.13.5.3.11.10.1',
  airIRmPmEheating1StartTemperatureF => '1.3.6.1.4.1.318.1.1.13.5.3.11.10.2',
  airIRmPmEheating1Hysteresis => '1.3.6.1.4.1.318.1.1.13.5.3.11.11',
  airIRmPmEheating1HysteresisK => '1.3.6.1.4.1.318.1.1.13.5.3.11.11.1',
  airIRmPmEheating1HysteresisF => '1.3.6.1.4.1.318.1.1.13.5.3.11.11.2',
  airIRmPmEheating1Runtime => '1.3.6.1.4.1.318.1.1.13.5.3.11.17',
  airIRmPmEheating2 => '1.3.6.1.4.1.318.1.1.13.5.3.12',
  airIRmPmEheating2ManOpEnable => '1.3.6.1.4.1.318.1.1.13.5.3.12.2',
  airIRmPmEheating2ManOpEnableDefinition => 'PowerNet-MIB::AirIRmActivityState',
  airIRmPmEheating2Running => '1.3.6.1.4.1.318.1.1.13.5.3.12.4',
  airIRmPmEheating2RunningDefinition => 'PowerNet-MIB::AirIRmControlState',
  airIRmPmEheating2ManOpRunning => '1.3.6.1.4.1.318.1.1.13.5.3.12.5',
  airIRmPmEheating2ManOpRunningDefinition => 'PowerNet-MIB::AirIRmActivityState',
  airIRmPmEheating2Type => '1.3.6.1.4.1.318.1.1.13.5.3.12.9',
  airIRmPmEheating2TypeDefinition => 'PowerNet-MIB::airIRmPmEheating2Type',
  airIRmPmEheating2StartTemperature => '1.3.6.1.4.1.318.1.1.13.5.3.12.10',
  airIRmPmEheating2StartTemperatureK => '1.3.6.1.4.1.318.1.1.13.5.3.12.10.1',
  airIRmPmEheating2StartTemperatureF => '1.3.6.1.4.1.318.1.1.13.5.3.12.10.2',
  airIRmPmEheating2Hysteresis => '1.3.6.1.4.1.318.1.1.13.5.3.12.11',
  airIRmPmEheating2HysteresisK => '1.3.6.1.4.1.318.1.1.13.5.3.12.11.1',
  airIRmPmEheating2HysteresisF => '1.3.6.1.4.1.318.1.1.13.5.3.12.11.2',
  airIRmPmEheating2Runtime => '1.3.6.1.4.1.318.1.1.13.5.3.12.17',
  airIRmPmEheating3 => '1.3.6.1.4.1.318.1.1.13.5.3.13',
  airIRmPmEheating3ManOpEnable => '1.3.6.1.4.1.318.1.1.13.5.3.13.2',
  airIRmPmEheating3ManOpEnableDefinition => 'PowerNet-MIB::AirIRmActivityState',
  airIRmPmEheating3Running => '1.3.6.1.4.1.318.1.1.13.5.3.13.4',
  airIRmPmEheating3RunningDefinition => 'PowerNet-MIB::AirIRmControlState',
  airIRmPmEheating3ManOpRunning => '1.3.6.1.4.1.318.1.1.13.5.3.13.5',
  airIRmPmEheating3ManOpRunningDefinition => 'PowerNet-MIB::AirIRmActivityState',
  airIRmPmEheating3Type => '1.3.6.1.4.1.318.1.1.13.5.3.13.9',
  airIRmPmEheating3TypeDefinition => 'PowerNet-MIB::airIRmPmEheating3Type',
  airIRmPmEheating3StartTemperature => '1.3.6.1.4.1.318.1.1.13.5.3.13.10',
  airIRmPmEheating3StartTemperatureK => '1.3.6.1.4.1.318.1.1.13.5.3.13.10.1',
  airIRmPmEheating3StartTemperatureF => '1.3.6.1.4.1.318.1.1.13.5.3.13.10.2',
  airIRmPmEheating3Hysteresis => '1.3.6.1.4.1.318.1.1.13.5.3.13.11',
  airIRmPmEheating3HysteresisK => '1.3.6.1.4.1.318.1.1.13.5.3.13.11.1',
  airIRmPmEheating3HysteresisF => '1.3.6.1.4.1.318.1.1.13.5.3.13.11.2',
  airIRmPmEheating3Runtime => '1.3.6.1.4.1.318.1.1.13.5.3.13.17',
  airIRmPmEheating4 => '1.3.6.1.4.1.318.1.1.13.5.3.14',
  airIRmPmEheating4ManOpEnable => '1.3.6.1.4.1.318.1.1.13.5.3.14.2',
  airIRmPmEheating4ManOpEnableDefinition => 'PowerNet-MIB::AirIRmActivityState',
  airIRmPmEheating4Running => '1.3.6.1.4.1.318.1.1.13.5.3.14.4',
  airIRmPmEheating4RunningDefinition => 'PowerNet-MIB::AirIRmControlState',
  airIRmPmEheating4ManOpRunning => '1.3.6.1.4.1.318.1.1.13.5.3.14.5',
  airIRmPmEheating4ManOpRunningDefinition => 'PowerNet-MIB::AirIRmActivityState',
  airIRmPmEheating4Type => '1.3.6.1.4.1.318.1.1.13.5.3.14.9',
  airIRmPmEheating4TypeDefinition => 'PowerNet-MIB::airIRmPmEheating4Type',
  airIRmPmEheating4StartTemperature => '1.3.6.1.4.1.318.1.1.13.5.3.14.10',
  airIRmPmEheating4StartTemperatureK => '1.3.6.1.4.1.318.1.1.13.5.3.14.10.1',
  airIRmPmEheating4StartTemperatureF => '1.3.6.1.4.1.318.1.1.13.5.3.14.10.2',
  airIRmPmEheating4Hysteresis => '1.3.6.1.4.1.318.1.1.13.5.3.14.11',
  airIRmPmEheating4HysteresisK => '1.3.6.1.4.1.318.1.1.13.5.3.14.11.1',
  airIRmPmEheating4HysteresisF => '1.3.6.1.4.1.318.1.1.13.5.3.14.11.2',
  airIRmPmEheating4Runtime => '1.3.6.1.4.1.318.1.1.13.5.3.14.17',
  airIRmPmGECWvalve => '1.3.6.1.4.1.318.1.1.13.5.3.15',
  airIRmPmGECWvalveManOpEnable => '1.3.6.1.4.1.318.1.1.13.5.3.15.2',
  airIRmPmGECWvalveStartTemperature => '1.3.6.1.4.1.318.1.1.13.5.3.15.9',
  airIRmPmGECWvalveStartTemperatureK => '1.3.6.1.4.1.318.1.1.13.5.3.15.9.1',
  airIRmPmGECWvalveStartTemperatureF => '1.3.6.1.4.1.318.1.1.13.5.3.15.9.2',
  airIRmPmGECWvalveLinearRange => '1.3.6.1.4.1.318.1.1.13.5.3.15.10',
  airIRmPmGECWvalveLinearRangeK => '1.3.6.1.4.1.318.1.1.13.5.3.15.10.1',
  airIRmPmGECWvalveLinearRangeF => '1.3.6.1.4.1.318.1.1.13.5.3.15.10.2',
  airIRmPmGECWvalveGEOffTemp => '1.3.6.1.4.1.318.1.1.13.5.3.15.12',
  airIRmPmGECWvalveGEOffTempC => '1.3.6.1.4.1.318.1.1.13.5.3.15.12.1',
  airIRmPmGECWvalveGEOffTempF => '1.3.6.1.4.1.318.1.1.13.5.3.15.12.2',
  airIRmPmGECWvalveOpeningGrade => '1.3.6.1.4.1.318.1.1.13.5.3.15.15',
  airIRmPmGECWvalveManOpOpeningGrade => '1.3.6.1.4.1.318.1.1.13.5.3.15.16',
  airIRmPmGvalve => '1.3.6.1.4.1.318.1.1.13.5.3.16',
  airIRmPmGvalveManOperationEnable => '1.3.6.1.4.1.318.1.1.13.5.3.16.2',
  airIRmPmGvalveManOperationEnableDefinition => 'PowerNet-MIB::AirIRmActivityState',
  airIRmPmGvalvePreOpeningTime => '1.3.6.1.4.1.318.1.1.13.5.3.16.11',
  airIRmPmGvalvePreOpeningGrade => '1.3.6.1.4.1.318.1.1.13.5.3.16.12',
  airIRmPmGvalveOpeningGrade => '1.3.6.1.4.1.318.1.1.13.5.3.16.13',
  airIRmPmGvalveManOpOpeningGrade => '1.3.6.1.4.1.318.1.1.13.5.3.16.14',
  airIRmPmDrycooler1 => '1.3.6.1.4.1.318.1.1.13.5.3.17',
  airIRmPmDrycooler1ManOpEnable => '1.3.6.1.4.1.318.1.1.13.5.3.17.2',
  airIRmPmDrycooler1ManOpEnableDefinition => 'PowerNet-MIB::AirIRmActivityState',
  airIRmPmDrycooler1Running => '1.3.6.1.4.1.318.1.1.13.5.3.17.3',
  airIRmPmDrycooler1RunningDefinition => 'PowerNet-MIB::AirIRmActivityState',
  airIRmPmDrycooler1ManOpRunning => '1.3.6.1.4.1.318.1.1.13.5.3.17.5',
  airIRmPmDrycooler1ManOpRunningDefinition => 'PowerNet-MIB::AirIRmActivityState',
  airIRmPmDrycooler1WinterStartTemp => '1.3.6.1.4.1.318.1.1.13.5.3.17.9',
  airIRmPmDrycooler1WinterStartTempC => '1.3.6.1.4.1.318.1.1.13.5.3.17.9.1',
  airIRmPmDrycooler1WinterStartTempF => '1.3.6.1.4.1.318.1.1.13.5.3.17.9.2',
  airIRmPmDrycooler1SummerStartTemp => '1.3.6.1.4.1.318.1.1.13.5.3.17.10',
  airIRmPmDrycooler1SummerStartTempC => '1.3.6.1.4.1.318.1.1.13.5.3.17.10.1',
  airIRmPmDrycooler1SummerStartTempF => '1.3.6.1.4.1.318.1.1.13.5.3.17.10.2',
  airIRmPmDrycooler1Hysteresis => '1.3.6.1.4.1.318.1.1.13.5.3.17.11',
  airIRmPmDrycooler1HysteresisK => '1.3.6.1.4.1.318.1.1.13.5.3.17.11.1',
  airIRmPmDrycooler1HysteresisF => '1.3.6.1.4.1.318.1.1.13.5.3.17.11.2',
  airIRmPmDrycooler1Runtime => '1.3.6.1.4.1.318.1.1.13.5.3.17.16',
  airIRmPmDrycooler2 => '1.3.6.1.4.1.318.1.1.13.5.3.18',
  airIRmPmDrycooler2ManOpEnable => '1.3.6.1.4.1.318.1.1.13.5.3.18.2',
  airIRmPmDrycooler2ManOpEnableDefinition => 'PowerNet-MIB::AirIRmActivityState',
  airIRmPmDrycooler2Running => '1.3.6.1.4.1.318.1.1.13.5.3.18.3',
  airIRmPmDrycooler2RunningDefinition => 'PowerNet-MIB::AirIRmActivityState',
  airIRmPmDrycooler2ManOpRunning => '1.3.6.1.4.1.318.1.1.13.5.3.18.5',
  airIRmPmDrycooler2ManOpRunningDefinition => 'PowerNet-MIB::AirIRmActivityState',
  airIRmPmDrycooler2WinterStartTemp => '1.3.6.1.4.1.318.1.1.13.5.3.18.9',
  airIRmPmDrycooler2WinterStartTempC => '1.3.6.1.4.1.318.1.1.13.5.3.18.9.1',
  airIRmPmDrycooler2WinterStartTempF => '1.3.6.1.4.1.318.1.1.13.5.3.18.9.2',
  airIRmPmDrycooler2SummerStartTemp => '1.3.6.1.4.1.318.1.1.13.5.3.18.10',
  airIRmPmDrycooler2SummerStartTempC => '1.3.6.1.4.1.318.1.1.13.5.3.18.10.1',
  airIRmPmDrycooler2SummerStartTempF => '1.3.6.1.4.1.318.1.1.13.5.3.18.10.2',
  airIRmPmDrycooler2Hysteresis => '1.3.6.1.4.1.318.1.1.13.5.3.18.11',
  airIRmPmDrycooler2HysteresisK => '1.3.6.1.4.1.318.1.1.13.5.3.18.11.1',
  airIRmPmDrycooler2HysteresisF => '1.3.6.1.4.1.318.1.1.13.5.3.18.11.2',
  airIRmPmDrycooler2Runtime => '1.3.6.1.4.1.318.1.1.13.5.3.18.16',
  airIRmPmDrycooler3 => '1.3.6.1.4.1.318.1.1.13.5.3.19',
  airIRmPmDrycooler3ManOpEnable => '1.3.6.1.4.1.318.1.1.13.5.3.19.2',
  airIRmPmDrycooler3ManOpEnableDefinition => 'PowerNet-MIB::AirIRmActivityState',
  airIRmPmDrycooler3Running => '1.3.6.1.4.1.318.1.1.13.5.3.19.3',
  airIRmPmDrycooler3RunningDefinition => 'PowerNet-MIB::AirIRmActivityState',
  airIRmPmDrycooler3ManOpRunning => '1.3.6.1.4.1.318.1.1.13.5.3.19.5',
  airIRmPmDrycooler3ManOpRunningDefinition => 'PowerNet-MIB::AirIRmActivityState',
  airIRmPmDrycooler3WinterStartTemp => '1.3.6.1.4.1.318.1.1.13.5.3.19.9',
  airIRmPmDrycooler3WinterStartTempC => '1.3.6.1.4.1.318.1.1.13.5.3.19.9.1',
  airIRmPmDrycooler3WinterStartTempF => '1.3.6.1.4.1.318.1.1.13.5.3.19.9.2',
  airIRmPmDrycooler3SummerStartTemp => '1.3.6.1.4.1.318.1.1.13.5.3.19.10',
  airIRmPmDrycooler3SummerStartTempC => '1.3.6.1.4.1.318.1.1.13.5.3.19.10.1',
  airIRmPmDrycooler3SummerStartTempF => '1.3.6.1.4.1.318.1.1.13.5.3.19.10.2',
  airIRmPmDrycooler3Hysteresis => '1.3.6.1.4.1.318.1.1.13.5.3.19.11',
  airIRmPmDrycooler3HysteresisK => '1.3.6.1.4.1.318.1.1.13.5.3.19.11.1',
  airIRmPmDrycooler3HysteresisF => '1.3.6.1.4.1.318.1.1.13.5.3.19.11.2',
  airIRmPmDrycooler3Runtime => '1.3.6.1.4.1.318.1.1.13.5.3.19.16',
  airIRmPmDrycooler4 => '1.3.6.1.4.1.318.1.1.13.5.3.20',
  airIRmPmDrycooler4ManOpEnable => '1.3.6.1.4.1.318.1.1.13.5.3.20.2',
  airIRmPmDrycooler4ManOpEnableDefinition => 'PowerNet-MIB::AirIRmActivityState',
  airIRmPmDrycooler4Running => '1.3.6.1.4.1.318.1.1.13.5.3.20.3',
  airIRmPmDrycooler4RunningDefinition => 'PowerNet-MIB::AirIRmActivityState',
  airIRmPmDrycooler4ManOpRunning => '1.3.6.1.4.1.318.1.1.13.5.3.20.5',
  airIRmPmDrycooler4ManOpRunningDefinition => 'PowerNet-MIB::AirIRmActivityState',
  airIRmPmDrycooler4WinterStartTemp => '1.3.6.1.4.1.318.1.1.13.5.3.20.9',
  airIRmPmDrycooler4WinterStartTempC => '1.3.6.1.4.1.318.1.1.13.5.3.20.9.1',
  airIRmPmDrycooler4WinterStartTempF => '1.3.6.1.4.1.318.1.1.13.5.3.20.9.2',
  airIRmPmDrycooler4SummerStartTemp => '1.3.6.1.4.1.318.1.1.13.5.3.20.10',
  airIRmPmDrycooler4SummerStartTempC => '1.3.6.1.4.1.318.1.1.13.5.3.20.10.1',
  airIRmPmDrycooler4SummerStartTempF => '1.3.6.1.4.1.318.1.1.13.5.3.20.10.2',
  airIRmPmDrycooler4Hysteresis => '1.3.6.1.4.1.318.1.1.13.5.3.20.11',
  airIRmPmDrycooler4HysteresisK => '1.3.6.1.4.1.318.1.1.13.5.3.20.11.1',
  airIRmPmDrycooler4HysteresisF => '1.3.6.1.4.1.318.1.1.13.5.3.20.11.2',
  airIRmPmDrycooler4Runtime => '1.3.6.1.4.1.318.1.1.13.5.3.20.16',
  airIRmPmPump1 => '1.3.6.1.4.1.318.1.1.13.5.3.21',
  airIRmPmPump1ManOpEnable => '1.3.6.1.4.1.318.1.1.13.5.3.21.2',
  airIRmPmPump1ManOpEnableDefinition => 'PowerNet-MIB::AirIRmActivityState',
  airIRmPmPump1Running => '1.3.6.1.4.1.318.1.1.13.5.3.21.3',
  airIRmPmPump1RunningDefinition => 'PowerNet-MIB::AirIRmActivityState',
  airIRmPmPump1ManOpRunning => '1.3.6.1.4.1.318.1.1.13.5.3.21.6',
  airIRmPmPump1ManOpRunningDefinition => 'PowerNet-MIB::AirIRmActivityState',
  airIRmPmPump1StartTemperature => '1.3.6.1.4.1.318.1.1.13.5.3.21.10',
  airIRmPmPump1StartTemperatureK => '1.3.6.1.4.1.318.1.1.13.5.3.21.10.1',
  airIRmPmPump1StartTemperatureF => '1.3.6.1.4.1.318.1.1.13.5.3.21.10.2',
  airIRmPmPump1Hysteresis => '1.3.6.1.4.1.318.1.1.13.5.3.21.11',
  airIRmPmPump1HysteresisK => '1.3.6.1.4.1.318.1.1.13.5.3.21.11.1',
  airIRmPmPump1HysteresisF => '1.3.6.1.4.1.318.1.1.13.5.3.21.11.2',
  airIRmPmPump1LinearRange => '1.3.6.1.4.1.318.1.1.13.5.3.21.12',
  airIRmPmPump1LinearRangeK => '1.3.6.1.4.1.318.1.1.13.5.3.21.12.1',
  airIRmPmPump1LinearRangeF => '1.3.6.1.4.1.318.1.1.13.5.3.21.12.2',
  airIRmPmPump1PressureSetpoint => '1.3.6.1.4.1.318.1.1.13.5.3.21.13',
  airIRmPmPump1Runtime => '1.3.6.1.4.1.318.1.1.13.5.3.21.21',
  airIRmPmPump1Speed => '1.3.6.1.4.1.318.1.1.13.5.3.21.22',
  airIRmPmPump1ControlCycle => '1.3.6.1.4.1.318.1.1.13.5.3.21.28',
  airIRmPmPump1MaxAdjust => '1.3.6.1.4.1.318.1.1.13.5.3.21.29',
  airIRmPmPump1ControlFactor => '1.3.6.1.4.1.318.1.1.13.5.3.21.30',
  airIRmPmPump2 => '1.3.6.1.4.1.318.1.1.13.5.3.22',
  airIRmPmPump2ManOpEnable => '1.3.6.1.4.1.318.1.1.13.5.3.22.2',
  airIRmPmPump2ManOpEnableDefinition => 'PowerNet-MIB::AirIRmActivityState',
  airIRmPmPump2Running => '1.3.6.1.4.1.318.1.1.13.5.3.22.3',
  airIRmPmPump2RunningDefinition => 'PowerNet-MIB::AirIRmActivityState',
  airIRmPmPump2ManOpRunning => '1.3.6.1.4.1.318.1.1.13.5.3.22.6',
  airIRmPmPump2ManOpRunningDefinition => 'PowerNet-MIB::AirIRmActivityState',
  airIRmPmPump2StartTemperature => '1.3.6.1.4.1.318.1.1.13.5.3.22.10',
  airIRmPmPump2StartTemperatureK => '1.3.6.1.4.1.318.1.1.13.5.3.22.10.1',
  airIRmPmPump2StartTemperatureF => '1.3.6.1.4.1.318.1.1.13.5.3.22.10.2',
  airIRmPmPump2Hysteresis => '1.3.6.1.4.1.318.1.1.13.5.3.22.11',
  airIRmPmPump2HysteresisK => '1.3.6.1.4.1.318.1.1.13.5.3.22.11.1',
  airIRmPmPump2HysteresisF => '1.3.6.1.4.1.318.1.1.13.5.3.22.11.2',
  airIRmPmPump2LinearRange => '1.3.6.1.4.1.318.1.1.13.5.3.22.12',
  airIRmPmPump2LinearRangeK => '1.3.6.1.4.1.318.1.1.13.5.3.22.12.1',
  airIRmPmPump2LinearRangeF => '1.3.6.1.4.1.318.1.1.13.5.3.22.12.2',
  airIRmPmPump2PressureSetpoint => '1.3.6.1.4.1.318.1.1.13.5.3.22.13',
  airIRmPmPump2Runtime => '1.3.6.1.4.1.318.1.1.13.5.3.22.21',
  airIRmPmPump2Speed => '1.3.6.1.4.1.318.1.1.13.5.3.22.22',
  airIRmPmPump2ControlCycle => '1.3.6.1.4.1.318.1.1.13.5.3.22.28',
  airIRmPmPump2MaxAdjust => '1.3.6.1.4.1.318.1.1.13.5.3.22.29',
  airIRmPmPump2ControlFactor => '1.3.6.1.4.1.318.1.1.13.5.3.22.30',
  airIRmPmPump3 => '1.3.6.1.4.1.318.1.1.13.5.3.23',
  airIRmPmPump3ManOpEnable => '1.3.6.1.4.1.318.1.1.13.5.3.23.2',
  airIRmPmPump3ManOpEnableDefinition => 'PowerNet-MIB::AirIRmActivityState',
  airIRmPmPump3Running => '1.3.6.1.4.1.318.1.1.13.5.3.23.3',
  airIRmPmPump3RunningDefinition => 'PowerNet-MIB::AirIRmActivityState',
  airIRmPmPump3ManOpRunning => '1.3.6.1.4.1.318.1.1.13.5.3.23.6',
  airIRmPmPump3ManOpRunningDefinition => 'PowerNet-MIB::AirIRmActivityState',
  airIRmPmPump3StartTemperature => '1.3.6.1.4.1.318.1.1.13.5.3.23.10',
  airIRmPmPump3StartTemperatureK => '1.3.6.1.4.1.318.1.1.13.5.3.23.10.1',
  airIRmPmPump3StartTemperatureF => '1.3.6.1.4.1.318.1.1.13.5.3.23.10.2',
  airIRmPmPump3Hysteresis => '1.3.6.1.4.1.318.1.1.13.5.3.23.11',
  airIRmPmPump3HysteresisK => '1.3.6.1.4.1.318.1.1.13.5.3.23.11.1',
  airIRmPmPump3HysteresisF => '1.3.6.1.4.1.318.1.1.13.5.3.23.11.2',
  airIRmPmPump3LinearRange => '1.3.6.1.4.1.318.1.1.13.5.3.23.12',
  airIRmPmPump3LinearRangeK => '1.3.6.1.4.1.318.1.1.13.5.3.23.12.1',
  airIRmPmPump3LinearRangeF => '1.3.6.1.4.1.318.1.1.13.5.3.23.12.2',
  airIRmPmPump3PressureSetpoint => '1.3.6.1.4.1.318.1.1.13.5.3.23.13',
  airIRmPmPump3Runtime => '1.3.6.1.4.1.318.1.1.13.5.3.23.21',
  airIRmPmPump3Speed => '1.3.6.1.4.1.318.1.1.13.5.3.23.22',
  airIRmPmPump3ControlCycle => '1.3.6.1.4.1.318.1.1.13.5.3.23.28',
  airIRmPmPump3MaxAdjust => '1.3.6.1.4.1.318.1.1.13.5.3.23.29',
  airIRmPmPump3ControlFactor => '1.3.6.1.4.1.318.1.1.13.5.3.23.30',
  airIRmPmPump4 => '1.3.6.1.4.1.318.1.1.13.5.3.24',
  airIRmPmPump4ManOpEnable => '1.3.6.1.4.1.318.1.1.13.5.3.24.2',
  airIRmPmPump4ManOpEnableDefinition => 'PowerNet-MIB::AirIRmActivityState',
  airIRmPmPump4Running => '1.3.6.1.4.1.318.1.1.13.5.3.24.3',
  airIRmPmPump4RunningDefinition => 'PowerNet-MIB::AirIRmActivityState',
  airIRmPmPump4ManOpRunning => '1.3.6.1.4.1.318.1.1.13.5.3.24.6',
  airIRmPmPump4ManOpRunningDefinition => 'PowerNet-MIB::AirIRmActivityState',
  airIRmPmPump4StartTemperature => '1.3.6.1.4.1.318.1.1.13.5.3.24.10',
  airIRmPmPump4StartTemperatureK => '1.3.6.1.4.1.318.1.1.13.5.3.24.10.1',
  airIRmPmPump4StartTemperatureF => '1.3.6.1.4.1.318.1.1.13.5.3.24.10.2',
  airIRmPmPump4Hysteresis => '1.3.6.1.4.1.318.1.1.13.5.3.24.11',
  airIRmPmPump4HysteresisK => '1.3.6.1.4.1.318.1.1.13.5.3.24.11.1',
  airIRmPmPump4HysteresisF => '1.3.6.1.4.1.318.1.1.13.5.3.24.11.2',
  airIRmPmPump4LinearRange => '1.3.6.1.4.1.318.1.1.13.5.3.24.12',
  airIRmPmPump4LinearRangeK => '1.3.6.1.4.1.318.1.1.13.5.3.24.12.1',
  airIRmPmPump4LinearRangeF => '1.3.6.1.4.1.318.1.1.13.5.3.24.12.2',
  airIRmPmPump4PressureSetpoint => '1.3.6.1.4.1.318.1.1.13.5.3.24.13',
  airIRmPmPump4Runtime => '1.3.6.1.4.1.318.1.1.13.5.3.24.21',
  airIRmPmPump4Speed => '1.3.6.1.4.1.318.1.1.13.5.3.24.22',
  airIRmPmPump4ControlCycle => '1.3.6.1.4.1.318.1.1.13.5.3.24.28',
  airIRmPmPump4MaxAdjust => '1.3.6.1.4.1.318.1.1.13.5.3.24.29',
  airIRmPmPump4ControlFactor => '1.3.6.1.4.1.318.1.1.13.5.3.24.30',
  airIRmPmHotgasHeating => '1.3.6.1.4.1.318.1.1.13.5.3.25',
  airIRmPmHotgasHeatRunning => '1.3.6.1.4.1.318.1.1.13.5.3.25.3',
  airIRmPmHotgasHeatRunningDefinition => 'PowerNet-MIB::AirIRmControlState',
  airIRmPmPWWHeating => '1.3.6.1.4.1.318.1.1.13.5.3.26',
  airIRmPmPWWHeatingManOpEnable => '1.3.6.1.4.1.318.1.1.13.5.3.26.2',
  airIRmPmPWWHeatingManOpEnableDefinition => 'PowerNet-MIB::AirIRmActivityState',
  airIRmPmPWWHeatingRunning => '1.3.6.1.4.1.318.1.1.13.5.3.26.3',
  airIRmPmPWWHeatingRunningDefinition => 'PowerNet-MIB::AirIRmActivityState',
  airIRmPmPWWHeatingManOpRunning => '1.3.6.1.4.1.318.1.1.13.5.3.26.4',
  airIRmPmPWWHeatingManOpRunningDefinition => 'PowerNet-MIB::AirIRmActivityState',
  airIRmPmPWWHeatingType => '1.3.6.1.4.1.318.1.1.13.5.3.26.9',
  airIRmPmPWWHeatingTypeDefinition => 'PowerNet-MIB::airIRmPmPWWHeatingType',
  airIRmPmPWWHeatingStartTemp => '1.3.6.1.4.1.318.1.1.13.5.3.26.10',
  airIRmPmPWWHeatingStartTempK => '1.3.6.1.4.1.318.1.1.13.5.3.26.10.1',
  airIRmPmPWWHeatingStartTempF => '1.3.6.1.4.1.318.1.1.13.5.3.26.10.2',
  airIRmPmPWWHeatingHysteresis => '1.3.6.1.4.1.318.1.1.13.5.3.26.12',
  airIRmPmPWWHeatingHysteresisK => '1.3.6.1.4.1.318.1.1.13.5.3.26.12.1',
  airIRmPmPWWHeatingHysteresisF => '1.3.6.1.4.1.318.1.1.13.5.3.26.12.2',
  airIRmPmPWWHeatingLinearRange => '1.3.6.1.4.1.318.1.1.13.5.3.26.13',
  airIRmPmPWWHeatingLinearRangeK => '1.3.6.1.4.1.318.1.1.13.5.3.26.13.1',
  airIRmPmPWWHeatingLinearRangeF => '1.3.6.1.4.1.318.1.1.13.5.3.26.13.2',
  airIRmPmPWWHeatingCurrentValue => '1.3.6.1.4.1.318.1.1.13.5.3.26.16',
  airIRmPmPWWHeatingManOpValue => '1.3.6.1.4.1.318.1.1.13.5.3.26.17',
  airIRmPmHumidifier1 => '1.3.6.1.4.1.318.1.1.13.5.3.27',
  airIRmPmHumidifier1ManOpEnable => '1.3.6.1.4.1.318.1.1.13.5.3.27.2',
  airIRmPmHumidifier1ManOpEnableDefinition => 'PowerNet-MIB::AirIRmActivityState',
  airIRmPmHumidifier1Running => '1.3.6.1.4.1.318.1.1.13.5.3.27.3',
  airIRmPmHumidifier1RunningDefinition => 'PowerNet-MIB::AirIRmControlState',
  airIRmPmHumidifier1ManOpRunning => '1.3.6.1.4.1.318.1.1.13.5.3.27.5',
  airIRmPmHumidifier1ManOpRunningDefinition => 'PowerNet-MIB::AirIRmActivityState',
  airIRmPmHumidifier1Type => '1.3.6.1.4.1.318.1.1.13.5.3.27.17',
  airIRmPmHumidifier1TypeDefinition => 'PowerNet-MIB::airIRmPmHumidifier1Type',
  airIRmPmHumidifier1StartHumidity => '1.3.6.1.4.1.318.1.1.13.5.3.27.18',
  airIRmPmHumidifier1Hysteresis => '1.3.6.1.4.1.318.1.1.13.5.3.27.20',
  airIRmPmHumidifier1LinearRange => '1.3.6.1.4.1.318.1.1.13.5.3.27.21',
  airIRmPmHumidifier1Runtime => '1.3.6.1.4.1.318.1.1.13.5.3.27.27',
  airIRmPmHumidifier1CurrentValue => '1.3.6.1.4.1.318.1.1.13.5.3.27.28',
  airIRmPmHumidifier1ManOpValue => '1.3.6.1.4.1.318.1.1.13.5.3.27.29',
  airIRmPmHumidifier2 => '1.3.6.1.4.1.318.1.1.13.5.3.28',
  airIRmPmHumidifier2ManOpEnable => '1.3.6.1.4.1.318.1.1.13.5.3.28.2',
  airIRmPmHumidifier2ManOpEnableDefinition => 'PowerNet-MIB::AirIRmActivityState',
  airIRmPmHumidifier2Running => '1.3.6.1.4.1.318.1.1.13.5.3.28.3',
  airIRmPmHumidifier2RunningDefinition => 'PowerNet-MIB::AirIRmControlState',
  airIRmPmHumidifier2ManOpRunning => '1.3.6.1.4.1.318.1.1.13.5.3.28.5',
  airIRmPmHumidifier2ManOpRunningDefinition => 'PowerNet-MIB::AirIRmActivityState',
  airIRmPmHumidifier2Type => '1.3.6.1.4.1.318.1.1.13.5.3.28.17',
  airIRmPmHumidifier2TypeDefinition => 'PowerNet-MIB::airIRmPmHumidifier2Type',
  airIRmPmHumidifier2StartHumidity => '1.3.6.1.4.1.318.1.1.13.5.3.28.18',
  airIRmPmHumidifier2Hysteresis => '1.3.6.1.4.1.318.1.1.13.5.3.28.20',
  airIRmPmHumidifier2LinearRange => '1.3.6.1.4.1.318.1.1.13.5.3.28.21',
  airIRmPmHumidifier2Runtime => '1.3.6.1.4.1.318.1.1.13.5.3.28.27',
  airIRmPmHumidifier2CurrentValue => '1.3.6.1.4.1.318.1.1.13.5.3.28.28',
  airIRmPmHumidifier2ManOpValue => '1.3.6.1.4.1.318.1.1.13.5.3.28.29',
  airIRmPmDehumidification => '1.3.6.1.4.1.318.1.1.13.5.3.31',
  airIRmPmDehumidificManOpEnable => '1.3.6.1.4.1.318.1.1.13.5.3.31.2',
  airIRmPmDehumidificManOpEnableDefinition => 'PowerNet-MIB::AirIRmActivityState',
  airIRmPmDehumidificRunning => '1.3.6.1.4.1.318.1.1.13.5.3.31.3',
  airIRmPmDehumidificRunningDefinition => 'PowerNet-MIB::AirIRmControlState',
  airIRmPmDehumidificManOpRunning => '1.3.6.1.4.1.318.1.1.13.5.3.31.5',
  airIRmPmDehumidificManOpRunningDefinition => 'PowerNet-MIB::AirIRmActivityState',
  airIRmPmDehumidificStartHumidity => '1.3.6.1.4.1.318.1.1.13.5.3.31.10',
  airIRmPmDehumidificHysteresis => '1.3.6.1.4.1.318.1.1.13.5.3.31.12',
  airIRmPmDehumidificMinWaterTemp => '1.3.6.1.4.1.318.1.1.13.5.3.31.18',
  airIRmPmDehumidificMinWaterTempC => '1.3.6.1.4.1.318.1.1.13.5.3.31.18.1',
  airIRmPmDehumidificMinWaterTempF => '1.3.6.1.4.1.318.1.1.13.5.3.31.18.2',
  airIRmPmDehumidificMaxWaterTemp => '1.3.6.1.4.1.318.1.1.13.5.3.31.19',
  airIRmPmDehumidificMaxWaterTempC => '1.3.6.1.4.1.318.1.1.13.5.3.31.19.1',
  airIRmPmDehumidificMaxWaterTempF => '1.3.6.1.4.1.318.1.1.13.5.3.31.19.2',
  airIRmPmDehumidificRuntime => '1.3.6.1.4.1.318.1.1.13.5.3.31.21',
  airIRmPmFan1 => '1.3.6.1.4.1.318.1.1.13.5.3.32',
  airIRmPmFan1ManOpEnable => '1.3.6.1.4.1.318.1.1.13.5.3.32.2',
  airIRmPmFan1ManOpEnableDefinition => 'PowerNet-MIB::AirIRmActivityState',
  airIRmPmFan1Running => '1.3.6.1.4.1.318.1.1.13.5.3.32.3',
  airIRmPmFan1RunningDefinition => 'PowerNet-MIB::AirIRmActivityState',
  airIRmPmFan1ManOpRunning => '1.3.6.1.4.1.318.1.1.13.5.3.32.6',
  airIRmPmFan1ManOpRunningDefinition => 'PowerNet-MIB::AirIRmActivityState',
  airIRmPmFan1Type => '1.3.6.1.4.1.318.1.1.13.5.3.32.9',
  airIRmPmFan1TypeDefinition => 'PowerNet-MIB::airIRmPmFan1Type',
  airIRmPmFan1Runtime => '1.3.6.1.4.1.318.1.1.13.5.3.32.32',
  airIRmPmFan1Speed => '1.3.6.1.4.1.318.1.1.13.5.3.32.33',
  airIRmPmFan1ManOpSpeed => '1.3.6.1.4.1.318.1.1.13.5.3.32.34',
  airIRmPmFan2 => '1.3.6.1.4.1.318.1.1.13.5.3.33',
  airIRmPmFan2ManOpEnable => '1.3.6.1.4.1.318.1.1.13.5.3.33.2',
  airIRmPmFan2ManOpEnableDefinition => 'PowerNet-MIB::AirIRmActivityState',
  airIRmPmFan2Running => '1.3.6.1.4.1.318.1.1.13.5.3.33.3',
  airIRmPmFan2RunningDefinition => 'PowerNet-MIB::AirIRmActivityState',
  airIRmPmFan2ManOpRunning => '1.3.6.1.4.1.318.1.1.13.5.3.33.6',
  airIRmPmFan2ManOpRunningDefinition => 'PowerNet-MIB::AirIRmActivityState',
  airIRmPmFan2Type => '1.3.6.1.4.1.318.1.1.13.5.3.33.9',
  airIRmPmFan2TypeDefinition => 'PowerNet-MIB::airIRmPmFan2Type',
  airIRmPmFan2Runtime => '1.3.6.1.4.1.318.1.1.13.5.3.33.32',
  airIRmPmFan2Speed => '1.3.6.1.4.1.318.1.1.13.5.3.33.33',
  airIRmPmFan2ManOpSpeed => '1.3.6.1.4.1.318.1.1.13.5.3.33.34',
  airIRmPmFan3 => '1.3.6.1.4.1.318.1.1.13.5.3.34',
  airIRmPmFan3ManOpEnable => '1.3.6.1.4.1.318.1.1.13.5.3.34.2',
  airIRmPmFan3ManOpEnableDefinition => 'PowerNet-MIB::AirIRmActivityState',
  airIRmPmFan3Running => '1.3.6.1.4.1.318.1.1.13.5.3.34.3',
  airIRmPmFan3RunningDefinition => 'PowerNet-MIB::AirIRmActivityState',
  airIRmPmFan3ManOpRunning => '1.3.6.1.4.1.318.1.1.13.5.3.34.6',
  airIRmPmFan3ManOpRunningDefinition => 'PowerNet-MIB::AirIRmActivityState',
  airIRmPmFan3Type => '1.3.6.1.4.1.318.1.1.13.5.3.34.9',
  airIRmPmFan3TypeDefinition => 'PowerNet-MIB::airIRmPmFan3Type',
  airIRmPmFan3Runtime => '1.3.6.1.4.1.318.1.1.13.5.3.34.32',
  airIRmPmFan3Speed => '1.3.6.1.4.1.318.1.1.13.5.3.34.33',
  airIRmPmFan3ManOpSpeed => '1.3.6.1.4.1.318.1.1.13.5.3.34.34',
  airIRmPmLouver1 => '1.3.6.1.4.1.318.1.1.13.5.3.35',
  airIRmPmLouver1ManOpEnable => '1.3.6.1.4.1.318.1.1.13.5.3.35.2',
  airIRmPmLouver1ManOpEnableDefinition => 'PowerNet-MIB::AirIRmActivityState',
  airIRmPmLouver1Position => '1.3.6.1.4.1.318.1.1.13.5.3.35.3',
  airIRmPmLouver1PositionDefinition => 'PowerNet-MIB::airIRmPmLouver1Position',
  airIRmPmLouver1ManOpPosition => '1.3.6.1.4.1.318.1.1.13.5.3.35.4',
  airIRmPmLouver1ManOpPositionDefinition => 'PowerNet-MIB::airIRmPmLouver1ManOpPosition',
  airIRmPmLouver2 => '1.3.6.1.4.1.318.1.1.13.5.3.36',
  airIRmPmLouver2ManOpEnable => '1.3.6.1.4.1.318.1.1.13.5.3.36.2',
  airIRmPmLouver2ManOpEnableDefinition => 'PowerNet-MIB::AirIRmActivityState',
  airIRmPmLouver2Position => '1.3.6.1.4.1.318.1.1.13.5.3.36.3',
  airIRmPmLouver2PositionDefinition => 'PowerNet-MIB::airIRmPmLouver2Position',
  airIRmPmLouver2ManOpPosition => '1.3.6.1.4.1.318.1.1.13.5.3.36.4',
  airIRmPmLouver2ManOpPositionDefinition => 'PowerNet-MIB::airIRmPmLouver2ManOpPosition',
  airIRmPmLouver3 => '1.3.6.1.4.1.318.1.1.13.5.3.37',
  airIRmPmLouver3ManOpEnable => '1.3.6.1.4.1.318.1.1.13.5.3.37.2',
  airIRmPmLouver3ManOpEnableDefinition => 'PowerNet-MIB::AirIRmActivityState',
  airIRmPmLouver3Position => '1.3.6.1.4.1.318.1.1.13.5.3.37.3',
  airIRmPmLouver3PositionDefinition => 'PowerNet-MIB::airIRmPmLouver3Position',
  airIRmPmLouver3ManOpPosition => '1.3.6.1.4.1.318.1.1.13.5.3.37.4',
  airIRmPmLouver3ManOpPositionDefinition => 'PowerNet-MIB::airIRmPmLouver3ManOpPosition',
  airIRmPmAuxAlarm1 => '1.3.6.1.4.1.318.1.1.13.5.3.38',
  airIRmPmAuxAlarm2 => '1.3.6.1.4.1.318.1.1.13.5.3.39',
  airIRmPmAuxAlarm3 => '1.3.6.1.4.1.318.1.1.13.5.3.40',
  airIRmPmAuxAlarm4 => '1.3.6.1.4.1.318.1.1.13.5.3.41',
  airIRmPmAuxAlarm5 => '1.3.6.1.4.1.318.1.1.13.5.3.42',
  airIRmPmAlarmBits => '1.3.6.1.4.1.318.1.1.13.5.3.43',
  airIRmPmFan1Failure => '1.3.6.1.4.1.318.1.1.13.5.3.43.1',
  airIRmPmFan1FailureDefinition => 'PowerNet-MIB::AirIRmAlarmState',
  airIRmPmFan2Failure => '1.3.6.1.4.1.318.1.1.13.5.3.43.2',
  airIRmPmFan2FailureDefinition => 'PowerNet-MIB::AirIRmAlarmState',
  airIRmPmFan3Failure => '1.3.6.1.4.1.318.1.1.13.5.3.43.3',
  airIRmPmFan3FailureDefinition => 'PowerNet-MIB::AirIRmAlarmState',
  airIRmPmCompressor1Failure => '1.3.6.1.4.1.318.1.1.13.5.3.43.4',
  airIRmPmCompressor1FailureDefinition => 'PowerNet-MIB::AirIRmAlarmState',
  airIRmPmCompressor2Failure => '1.3.6.1.4.1.318.1.1.13.5.3.43.5',
  airIRmPmCompressor2FailureDefinition => 'PowerNet-MIB::AirIRmAlarmState',
  airIRmPmWaterDetector => '1.3.6.1.4.1.318.1.1.13.5.3.43.6',
  airIRmPmWaterDetectorDefinition => 'PowerNet-MIB::AirIRmAlarmState',
  airIRmPmPhaseFailure => '1.3.6.1.4.1.318.1.1.13.5.3.43.7',
  airIRmPmPhaseFailureDefinition => 'PowerNet-MIB::AirIRmAlarmState',
  airIRmPmFireSmokeDetector => '1.3.6.1.4.1.318.1.1.13.5.3.43.8',
  airIRmPmFireSmokeDetectorDefinition => 'PowerNet-MIB::AirIRmAlarmState',
  airIRmPmReturnAirTemperatureTooHigh => '1.3.6.1.4.1.318.1.1.13.5.3.43.9',
  airIRmPmReturnAirTemperatureTooHighDefinition => 'PowerNet-MIB::AirIRmAlarmState',
  airIRmPmReturnAirHumidityTooHigh => '1.3.6.1.4.1.318.1.1.13.5.3.43.10',
  airIRmPmReturnAirHumidityTooHighDefinition => 'PowerNet-MIB::AirIRmAlarmState',
  airIRmPmSupplyAirTemperatureTooHigh => '1.3.6.1.4.1.318.1.1.13.5.3.43.11',
  airIRmPmSupplyAirTemperatureTooHighDefinition => 'PowerNet-MIB::AirIRmAlarmState',
  airIRmPmSupplyAirHumidityTooHigh => '1.3.6.1.4.1.318.1.1.13.5.3.43.12',
  airIRmPmSupplyAirHumidityTooHighDefinition => 'PowerNet-MIB::AirIRmAlarmState',
  airIRmPmWaterTemperatureTooHigh => '1.3.6.1.4.1.318.1.1.13.5.3.43.13',
  airIRmPmWaterTemperatureTooHighDefinition => 'PowerNet-MIB::AirIRmAlarmState',
  airIRmPmReturnAirTemperatureTooLow => '1.3.6.1.4.1.318.1.1.13.5.3.43.14',
  airIRmPmReturnAirTemperatureTooLowDefinition => 'PowerNet-MIB::AirIRmAlarmState',
  airIRmPmReturnAirHumidityTooLow => '1.3.6.1.4.1.318.1.1.13.5.3.43.15',
  airIRmPmReturnAirHumidityTooLowDefinition => 'PowerNet-MIB::AirIRmAlarmState',
  airIRmPmSupplyAirTemperatureTooLow => '1.3.6.1.4.1.318.1.1.13.5.3.43.16',
  airIRmPmSupplyAirTemperatureTooLowDefinition => 'PowerNet-MIB::AirIRmAlarmState',
  airIRmPmSupplyAirHumidityTooLow => '1.3.6.1.4.1.318.1.1.13.5.3.43.17',
  airIRmPmSupplyAirHumidityTooLowDefinition => 'PowerNet-MIB::AirIRmAlarmState',
  airIRmPmWaterTemperatureTooLow => '1.3.6.1.4.1.318.1.1.13.5.3.43.18',
  airIRmPmWaterTemperatureTooLowDefinition => 'PowerNet-MIB::AirIRmAlarmState',
  airIRmPmSensor1Failure => '1.3.6.1.4.1.318.1.1.13.5.3.43.19',
  airIRmPmSensor1FailureDefinition => 'PowerNet-MIB::AirIRmAlarmState',
  airIRmPmSensor2Failure => '1.3.6.1.4.1.318.1.1.13.5.3.43.20',
  airIRmPmSensor2FailureDefinition => 'PowerNet-MIB::AirIRmAlarmState',
  airIRmPmSensor3Failure => '1.3.6.1.4.1.318.1.1.13.5.3.43.21',
  airIRmPmSensor3FailureDefinition => 'PowerNet-MIB::AirIRmAlarmState',
  airIRmPmSensor4Failure => '1.3.6.1.4.1.318.1.1.13.5.3.43.22',
  airIRmPmSensor4FailureDefinition => 'PowerNet-MIB::AirIRmAlarmState',
  airIRmPmSensor5Failure => '1.3.6.1.4.1.318.1.1.13.5.3.43.23',
  airIRmPmSensor5FailureDefinition => 'PowerNet-MIB::AirIRmAlarmState',
  airIRmPmSensor6Failure => '1.3.6.1.4.1.318.1.1.13.5.3.43.24',
  airIRmPmSensor6FailureDefinition => 'PowerNet-MIB::AirIRmAlarmState',
  airIRmPmSensor7Failure => '1.3.6.1.4.1.318.1.1.13.5.3.43.25',
  airIRmPmSensor7FailureDefinition => 'PowerNet-MIB::AirIRmAlarmState',
  airIRmPmSensor8Failure => '1.3.6.1.4.1.318.1.1.13.5.3.43.26',
  airIRmPmSensor8FailureDefinition => 'PowerNet-MIB::AirIRmAlarmState',
  airIRmPmSensor9Failure => '1.3.6.1.4.1.318.1.1.13.5.3.43.27',
  airIRmPmSensor9FailureDefinition => 'PowerNet-MIB::AirIRmAlarmState',
  airIRmPmSensor10Failure => '1.3.6.1.4.1.318.1.1.13.5.3.43.28',
  airIRmPmSensor10FailureDefinition => 'PowerNet-MIB::AirIRmAlarmState',
  airIRmPmSensor11Failure => '1.3.6.1.4.1.318.1.1.13.5.3.43.29',
  airIRmPmSensor11FailureDefinition => 'PowerNet-MIB::AirIRmAlarmState',
  airIRmPmSensor12Failure => '1.3.6.1.4.1.318.1.1.13.5.3.43.30',
  airIRmPmSensor12FailureDefinition => 'PowerNet-MIB::AirIRmAlarmState',
  airIRmPmSensor13Failure => '1.3.6.1.4.1.318.1.1.13.5.3.43.31',
  airIRmPmSensor13FailureDefinition => 'PowerNet-MIB::AirIRmAlarmState',
  airIRmPmSensor14Failure => '1.3.6.1.4.1.318.1.1.13.5.3.43.32',
  airIRmPmSensor14FailureDefinition => 'PowerNet-MIB::AirIRmAlarmState',
  airIRmPmSensor15Failure => '1.3.6.1.4.1.318.1.1.13.5.3.43.33',
  airIRmPmSensor15FailureDefinition => 'PowerNet-MIB::AirIRmAlarmState',
  airIRmPmSensor16Failure => '1.3.6.1.4.1.318.1.1.13.5.3.43.34',
  airIRmPmSensor16FailureDefinition => 'PowerNet-MIB::AirIRmAlarmState',
  airIRmPmSensor17Failure => '1.3.6.1.4.1.318.1.1.13.5.3.43.35',
  airIRmPmSensor17FailureDefinition => 'PowerNet-MIB::AirIRmAlarmState',
  airIRmPmSensor18Failure => '1.3.6.1.4.1.318.1.1.13.5.3.43.36',
  airIRmPmSensor18FailureDefinition => 'PowerNet-MIB::AirIRmAlarmState',
  airIRmPmSensor19Failure => '1.3.6.1.4.1.318.1.1.13.5.3.43.37',
  airIRmPmSensor19FailureDefinition => 'PowerNet-MIB::AirIRmAlarmState',
  airIRmPmSensor20Failure => '1.3.6.1.4.1.318.1.1.13.5.3.43.38',
  airIRmPmSensor20FailureDefinition => 'PowerNet-MIB::AirIRmAlarmState',
  airIRmPmSensor21Failure => '1.3.6.1.4.1.318.1.1.13.5.3.43.39',
  airIRmPmSensor21FailureDefinition => 'PowerNet-MIB::AirIRmAlarmState',
  airIRmPmSensor1Defect => '1.3.6.1.4.1.318.1.1.13.5.3.43.40',
  airIRmPmSensor1DefectDefinition => 'PowerNet-MIB::AirIRmAlarmState',
  airIRmPmSensor2Defect => '1.3.6.1.4.1.318.1.1.13.5.3.43.41',
  airIRmPmSensor2DefectDefinition => 'PowerNet-MIB::AirIRmAlarmState',
  airIRmPmSensor3Defect => '1.3.6.1.4.1.318.1.1.13.5.3.43.42',
  airIRmPmSensor3DefectDefinition => 'PowerNet-MIB::AirIRmAlarmState',
  airIRmPmSensor4Defect => '1.3.6.1.4.1.318.1.1.13.5.3.43.43',
  airIRmPmSensor4DefectDefinition => 'PowerNet-MIB::AirIRmAlarmState',
  airIRmPmSensor5Defect => '1.3.6.1.4.1.318.1.1.13.5.3.43.44',
  airIRmPmSensor5DefectDefinition => 'PowerNet-MIB::AirIRmAlarmState',
  airIRmPmSensor6Defect => '1.3.6.1.4.1.318.1.1.13.5.3.43.45',
  airIRmPmSensor6DefectDefinition => 'PowerNet-MIB::AirIRmAlarmState',
  airIRmPmSensor7Defect => '1.3.6.1.4.1.318.1.1.13.5.3.43.46',
  airIRmPmSensor7DefectDefinition => 'PowerNet-MIB::AirIRmAlarmState',
  airIRmPmSensor8Defect => '1.3.6.1.4.1.318.1.1.13.5.3.43.47',
  airIRmPmSensor8DefectDefinition => 'PowerNet-MIB::AirIRmAlarmState',
  airIRmPmSensor9Defect => '1.3.6.1.4.1.318.1.1.13.5.3.43.48',
  airIRmPmSensor9DefectDefinition => 'PowerNet-MIB::AirIRmAlarmState',
  airIRmPmSensor10Defect => '1.3.6.1.4.1.318.1.1.13.5.3.43.49',
  airIRmPmSensor10DefectDefinition => 'PowerNet-MIB::AirIRmAlarmState',
  airIRmPmSensor11Defect => '1.3.6.1.4.1.318.1.1.13.5.3.43.50',
  airIRmPmSensor11DefectDefinition => 'PowerNet-MIB::AirIRmAlarmState',
  airIRmPmSensor12Defect => '1.3.6.1.4.1.318.1.1.13.5.3.43.51',
  airIRmPmSensor12DefectDefinition => 'PowerNet-MIB::AirIRmAlarmState',
  airIRmPmSensor13Defect => '1.3.6.1.4.1.318.1.1.13.5.3.43.52',
  airIRmPmSensor13DefectDefinition => 'PowerNet-MIB::AirIRmAlarmState',
  airIRmPmSensor14Defect => '1.3.6.1.4.1.318.1.1.13.5.3.43.53',
  airIRmPmSensor14DefectDefinition => 'PowerNet-MIB::AirIRmAlarmState',
  airIRmPmSensor15Defect => '1.3.6.1.4.1.318.1.1.13.5.3.43.54',
  airIRmPmSensor15DefectDefinition => 'PowerNet-MIB::AirIRmAlarmState',
  airIRmPmSensor16Defect => '1.3.6.1.4.1.318.1.1.13.5.3.43.55',
  airIRmPmSensor16DefectDefinition => 'PowerNet-MIB::AirIRmAlarmState',
  airIRmPmSensor17Defect => '1.3.6.1.4.1.318.1.1.13.5.3.43.56',
  airIRmPmSensor17DefectDefinition => 'PowerNet-MIB::AirIRmAlarmState',
  airIRmPmSensor18Defect => '1.3.6.1.4.1.318.1.1.13.5.3.43.57',
  airIRmPmSensor18DefectDefinition => 'PowerNet-MIB::AirIRmAlarmState',
  airIRmPmSensor19Defect => '1.3.6.1.4.1.318.1.1.13.5.3.43.58',
  airIRmPmSensor19DefectDefinition => 'PowerNet-MIB::AirIRmAlarmState',
  airIRmPmSensor20Defect => '1.3.6.1.4.1.318.1.1.13.5.3.43.59',
  airIRmPmSensor20DefectDefinition => 'PowerNet-MIB::AirIRmAlarmState',
  airIRmPmSensor21Defect => '1.3.6.1.4.1.318.1.1.13.5.3.43.60',
  airIRmPmSensor21DefectDefinition => 'PowerNet-MIB::AirIRmAlarmState',
  airIRmPmCompressor1Alarm => '1.3.6.1.4.1.318.1.1.13.5.3.43.61',
  airIRmPmCompressor1AlarmDefinition => 'PowerNet-MIB::AirIRmAlarmState',
  airIRmPmCompressor2Alarm => '1.3.6.1.4.1.318.1.1.13.5.3.43.62',
  airIRmPmCompressor2AlarmDefinition => 'PowerNet-MIB::AirIRmAlarmState',
  airIRmPmCompressor1LowPressure => '1.3.6.1.4.1.318.1.1.13.5.3.43.63',
  airIRmPmCompressor1LowPressureDefinition => 'PowerNet-MIB::AirIRmAlarmState',
  airIRmPmCompressor2LowPressure => '1.3.6.1.4.1.318.1.1.13.5.3.43.64',
  airIRmPmCompressor2LowPressureDefinition => 'PowerNet-MIB::AirIRmAlarmState',
  airIRmPmReheat1Failure => '1.3.6.1.4.1.318.1.1.13.5.3.43.65',
  airIRmPmReheat1FailureDefinition => 'PowerNet-MIB::AirIRmAlarmState',
  airIRmPmReheat2Failure => '1.3.6.1.4.1.318.1.1.13.5.3.43.66',
  airIRmPmReheat2FailureDefinition => 'PowerNet-MIB::AirIRmAlarmState',
  airIRmPmReheat3Failure => '1.3.6.1.4.1.318.1.1.13.5.3.43.67',
  airIRmPmReheat3FailureDefinition => 'PowerNet-MIB::AirIRmAlarmState',
  airIRmPmReheat4Failure => '1.3.6.1.4.1.318.1.1.13.5.3.43.68',
  airIRmPmReheat4FailureDefinition => 'PowerNet-MIB::AirIRmAlarmState',
  airIRmPmDrycooler1Failure => '1.3.6.1.4.1.318.1.1.13.5.3.43.69',
  airIRmPmDrycooler1FailureDefinition => 'PowerNet-MIB::AirIRmAlarmState',
  airIRmPmDrycooler2Failure => '1.3.6.1.4.1.318.1.1.13.5.3.43.70',
  airIRmPmDrycooler2FailureDefinition => 'PowerNet-MIB::AirIRmAlarmState',
  airIRmPmDrycooler3Failure => '1.3.6.1.4.1.318.1.1.13.5.3.43.71',
  airIRmPmDrycooler3FailureDefinition => 'PowerNet-MIB::AirIRmAlarmState',
  airIRmPmDrycooler4Failure => '1.3.6.1.4.1.318.1.1.13.5.3.43.72',
  airIRmPmDrycooler4FailureDefinition => 'PowerNet-MIB::AirIRmAlarmState',
  airIRmPmPump1Failure => '1.3.6.1.4.1.318.1.1.13.5.3.43.73',
  airIRmPmPump1FailureDefinition => 'PowerNet-MIB::AirIRmAlarmState',
  airIRmPmPump2Failure => '1.3.6.1.4.1.318.1.1.13.5.3.43.74',
  airIRmPmPump2FailureDefinition => 'PowerNet-MIB::AirIRmAlarmState',
  airIRmPmPump3Failure => '1.3.6.1.4.1.318.1.1.13.5.3.43.75',
  airIRmPmPump3FailureDefinition => 'PowerNet-MIB::AirIRmAlarmState',
  airIRmPmPump4Failure => '1.3.6.1.4.1.318.1.1.13.5.3.43.76',
  airIRmPmPump4FailureDefinition => 'PowerNet-MIB::AirIRmAlarmState',
  airIRmPmHumidifier1Failure => '1.3.6.1.4.1.318.1.1.13.5.3.43.77',
  airIRmPmHumidifier1FailureDefinition => 'PowerNet-MIB::AirIRmAlarmState',
  airIRmPmHumidifier2Failure => '1.3.6.1.4.1.318.1.1.13.5.3.43.78',
  airIRmPmHumidifier2FailureDefinition => 'PowerNet-MIB::AirIRmAlarmState',
  airIRmPmHumidifier3Failure => '1.3.6.1.4.1.318.1.1.13.5.3.43.79',
  airIRmPmHumidifier3FailureDefinition => 'PowerNet-MIB::AirIRmAlarmState',
  airIRmPmHumidifier1Alarm5us => '1.3.6.1.4.1.318.1.1.13.5.3.43.80',
  airIRmPmHumidifier1Alarm5usDefinition => 'PowerNet-MIB::AirIRmAlarmState',
  airIRmPmHumidifier2Alarm5us => '1.3.6.1.4.1.318.1.1.13.5.3.43.81',
  airIRmPmHumidifier2Alarm5usDefinition => 'PowerNet-MIB::AirIRmAlarmState',
  airIRmPmHumidifier3Alarm5us => '1.3.6.1.4.1.318.1.1.13.5.3.43.82',
  airIRmPmHumidifier3Alarm5usDefinition => 'PowerNet-MIB::AirIRmAlarmState',
  airIRmPmHumidifier1Alarm20us => '1.3.6.1.4.1.318.1.1.13.5.3.43.83',
  airIRmPmHumidifier1Alarm20usDefinition => 'PowerNet-MIB::AirIRmAlarmState',
  airIRmPmHumidifier2Alarm20us => '1.3.6.1.4.1.318.1.1.13.5.3.43.84',
  airIRmPmHumidifier2Alarm20usDefinition => 'PowerNet-MIB::AirIRmAlarmState',
  airIRmPmHumidifier3Alarm20us => '1.3.6.1.4.1.318.1.1.13.5.3.43.85',
  airIRmPmHumidifier3Alarm20usDefinition => 'PowerNet-MIB::AirIRmAlarmState',
  airIRmPmFan1Alarm => '1.3.6.1.4.1.318.1.1.13.5.3.43.86',
  airIRmPmFan1AlarmDefinition => 'PowerNet-MIB::AirIRmAlarmState',
  airIRmPmFan2Alarm => '1.3.6.1.4.1.318.1.1.13.5.3.43.87',
  airIRmPmFan2AlarmDefinition => 'PowerNet-MIB::AirIRmAlarmState',
  airIRmPmFan3Alarm => '1.3.6.1.4.1.318.1.1.13.5.3.43.88',
  airIRmPmFan3AlarmDefinition => 'PowerNet-MIB::AirIRmAlarmState',
  airIRmPmFilter1Clogged => '1.3.6.1.4.1.318.1.1.13.5.3.43.89',
  airIRmPmFilter1CloggedDefinition => 'PowerNet-MIB::AirIRmAlarmState',
  airIRmPmFilter2Clogged => '1.3.6.1.4.1.318.1.1.13.5.3.43.90',
  airIRmPmFilter2CloggedDefinition => 'PowerNet-MIB::AirIRmAlarmState',
  airIRmPmFilter3Clogged => '1.3.6.1.4.1.318.1.1.13.5.3.43.91',
  airIRmPmFilter3CloggedDefinition => 'PowerNet-MIB::AirIRmAlarmState',
  airIRmPmAuxiliaryAlarm1 => '1.3.6.1.4.1.318.1.1.13.5.3.43.92',
  airIRmPmAuxiliaryAlarm1Definition => 'PowerNet-MIB::AirIRmAlarmState',
  airIRmPmAuxiliaryAlarm2 => '1.3.6.1.4.1.318.1.1.13.5.3.43.93',
  airIRmPmAuxiliaryAlarm2Definition => 'PowerNet-MIB::AirIRmAlarmState',
  airIRmPmAuxiliaryAlarm3 => '1.3.6.1.4.1.318.1.1.13.5.3.43.94',
  airIRmPmAuxiliaryAlarm3Definition => 'PowerNet-MIB::AirIRmAlarmState',
  airIRmPmAuxiliaryAlarm4 => '1.3.6.1.4.1.318.1.1.13.5.3.43.95',
  airIRmPmAuxiliaryAlarm4Definition => 'PowerNet-MIB::AirIRmAlarmState',
  airIRmPmAuxiliaryAlarm5 => '1.3.6.1.4.1.318.1.1.13.5.3.43.96',
  airIRmPmAuxiliaryAlarm5Definition => 'PowerNet-MIB::AirIRmAlarmState',
  airIRmPmAuxiliaryAlarm6 => '1.3.6.1.4.1.318.1.1.13.5.3.43.97',
  airIRmPmAuxiliaryAlarm6Definition => 'PowerNet-MIB::AirIRmAlarmState',
  airIRmPmAuxiliaryAlarm7 => '1.3.6.1.4.1.318.1.1.13.5.3.43.98',
  airIRmPmAuxiliaryAlarm7Definition => 'PowerNet-MIB::AirIRmAlarmState',
  airIRmPmAuxiliaryAlarm8 => '1.3.6.1.4.1.318.1.1.13.5.3.43.99',
  airIRmPmAuxiliaryAlarm8Definition => 'PowerNet-MIB::AirIRmAlarmState',
  airIRmPmAuxiliaryAlarm9 => '1.3.6.1.4.1.318.1.1.13.5.3.43.100',
  airIRmPmAuxiliaryAlarm9Definition => 'PowerNet-MIB::AirIRmAlarmState',
  airIRmPmAuxiliaryAlarm10 => '1.3.6.1.4.1.318.1.1.13.5.3.43.101',
  airIRmPmAuxiliaryAlarm10Definition => 'PowerNet-MIB::AirIRmAlarmState',
  airIRmPmHotGasHeatingAlarm => '1.3.6.1.4.1.318.1.1.13.5.3.43.102',
  airIRmPmHotGasHeatingAlarmDefinition => 'PowerNet-MIB::AirIRmAlarmState',
  airIRmPmEEV1PressureSensorError => '1.3.6.1.4.1.318.1.1.13.5.3.43.103',
  airIRmPmEEV1PressureSensorErrorDefinition => 'PowerNet-MIB::AirIRmAlarmState',
  airIRmPmEEV1TemperatureSensorError => '1.3.6.1.4.1.318.1.1.13.5.3.43.104',
  airIRmPmEEV1TemperatureSensorErrorDefinition => 'PowerNet-MIB::AirIRmAlarmState',
  airIRmPmEEV1StepperMotorError => '1.3.6.1.4.1.318.1.1.13.5.3.43.105',
  airIRmPmEEV1StepperMotorErrorDefinition => 'PowerNet-MIB::AirIRmAlarmState',
  airIRmPmEEV2PressureSensorError => '1.3.6.1.4.1.318.1.1.13.5.3.43.106',
  airIRmPmEEV2PressureSensorErrorDefinition => 'PowerNet-MIB::AirIRmAlarmState',
  airIRmPmEEV2TemperatureSensorError => '1.3.6.1.4.1.318.1.1.13.5.3.43.107',
  airIRmPmEEV2TemperatureSensorErrorDefinition => 'PowerNet-MIB::AirIRmAlarmState',
  airIRmPmEEV2StepperMotorError => '1.3.6.1.4.1.318.1.1.13.5.3.43.108',
  airIRmPmEEV2StepperMotorErrorDefinition => 'PowerNet-MIB::AirIRmAlarmState',
  airIRmPmMyZone => '1.3.6.1.4.1.318.1.1.13.5.3.44',
  airIRmPmMyZoneNumber => '1.3.6.1.4.1.318.1.1.13.5.3.44.1',
  airIRmPmMyZoneRoomTemperature => '1.3.6.1.4.1.318.1.1.13.5.3.44.2',
  airIRmPmMyZoneRoomTemperatureC => '1.3.6.1.4.1.318.1.1.13.5.3.44.2.1',
  airIRmPmMyZoneRoomTemperatureF => '1.3.6.1.4.1.318.1.1.13.5.3.44.2.2',
  airIRmPmMyZoneRoomHumidity => '1.3.6.1.4.1.318.1.1.13.5.3.44.3',
  airIRmPmMyZoneSupplyTemperature => '1.3.6.1.4.1.318.1.1.13.5.3.44.4',
  airIRmPmMyZoneSupplyTemperatureC => '1.3.6.1.4.1.318.1.1.13.5.3.44.4.1',
  airIRmPmMyZoneSupplyTemperatureF => '1.3.6.1.4.1.318.1.1.13.5.3.44.4.2',
  airIRmPmMyZoneSupplyHumidity => '1.3.6.1.4.1.318.1.1.13.5.3.44.5',
  airIRmPmMyZoneSequencingTime => '1.3.6.1.4.1.318.1.1.13.5.3.44.6',
  airIRmPmMyZoneNumberOfErrorUnits => '1.3.6.1.4.1.318.1.1.13.5.3.44.7',
  airIRmPmMyZoneEmergencyTemperature => '1.3.6.1.4.1.318.1.1.13.5.3.44.8',
  airIRmPmMyZoneEmergencyTemperatureC => '1.3.6.1.4.1.318.1.1.13.5.3.44.8.1',
  airIRmPmMyZoneEmergencyTemperatureF => '1.3.6.1.4.1.318.1.1.13.5.3.44.8.2',
  airIRmPmMyZoneCWEnergySaveMode => '1.3.6.1.4.1.318.1.1.13.5.3.44.9',
  airIRmPmMyZoneCWEnergySaveModeDefinition => 'PowerNet-MIB::AirIRmActivityState',
  airIRmPmGlobalZoneData => '1.3.6.1.4.1.318.1.1.13.5.3.45',
  airIRmPmGlobalZoneDataEmergencyOpMode => '1.3.6.1.4.1.318.1.1.13.5.3.45.1',
  airIRmPmGlobalZoneDataEmergencyOpModeDefinition => 'PowerNet-MIB::AirIRmActivityState',
  airIRGen3 => '1.3.6.1.4.1.318.1.1.13.6',
  airIRG3Ident => '1.3.6.1.4.1.318.1.1.13.6.1',
  airIRG3IdentTableSize => '1.3.6.1.4.1.318.1.1.13.6.1.1',
  airIRG3IdentTable => '1.3.6.1.4.1.318.1.1.13.6.1.2',
  airIRG3IdentEntry => '1.3.6.1.4.1.318.1.1.13.6.1.2.1',
  airIRG3IdentIndex => '1.3.6.1.4.1.318.1.1.13.6.1.2.1.1',
  airIRG3IdentName => '1.3.6.1.4.1.318.1.1.13.6.1.2.1.2',
  airIRG3IdentLocation => '1.3.6.1.4.1.318.1.1.13.6.1.2.1.3',
  airIRG3IdentModelNumber => '1.3.6.1.4.1.318.1.1.13.6.1.2.1.4',
  airIRG3IdentSerialNumber => '1.3.6.1.4.1.318.1.1.13.6.1.2.1.5',
  airIRG3IdentFirmwareRevision => '1.3.6.1.4.1.318.1.1.13.6.1.2.1.6',
  airIRG3IdentHardwareRevision => '1.3.6.1.4.1.318.1.1.13.6.1.2.1.7',
  airIRG3IdentManufactureDate => '1.3.6.1.4.1.318.1.1.13.6.1.2.1.8',
  airIRG3IdentRDUSysOID => '1.3.6.1.4.1.318.1.1.13.6.1.2.1.9',
  airIRG3IdentCMSysOID => '1.3.6.1.4.1.318.1.1.13.6.1.2.1.10',
  airIRG3IdentGroupSysOID => '1.3.6.1.4.1.318.1.1.13.6.1.2.1.11',
  airIRG3Group => '1.3.6.1.4.1.318.1.1.13.6.2',
  airIRG3GroupTableSize => '1.3.6.1.4.1.318.1.1.13.6.2.1',
  airIRG3GroupStatusTable => '1.3.6.1.4.1.318.1.1.13.6.2.2',
  airIRG3GroupStatusEntry => '1.3.6.1.4.1.318.1.1.13.6.2.2.1',
  airIRG3GroupStatusIndex => '1.3.6.1.4.1.318.1.1.13.6.2.2.1.1',
  airIRG3GroupStatusCoolOutput => '1.3.6.1.4.1.318.1.1.13.6.2.2.1.2',
  airIRG3GroupStatusCoolDemand => '1.3.6.1.4.1.318.1.1.13.6.2.2.1.3',
  airIRG3GroupStatusAirFlowUS => '1.3.6.1.4.1.318.1.1.13.6.2.2.1.4',
  airIRG3GroupStatusAirFlowMetric => '1.3.6.1.4.1.318.1.1.13.6.2.2.1.5',
  airIRG3GroupStatusMaxRackInletTempUS => '1.3.6.1.4.1.318.1.1.13.6.2.2.1.6',
  airIRG3GroupStatusMaxRackInletTempMetric => '1.3.6.1.4.1.318.1.1.13.6.2.2.1.7',
  airIRG3GroupStatusMinRackInletTempUS => '1.3.6.1.4.1.318.1.1.13.6.2.2.1.8',
  airIRG3GroupStatusMinRackInletTempMetric => '1.3.6.1.4.1.318.1.1.13.6.2.2.1.9',
  airIRG3GroupStatusMaxReturnAirTempUS => '1.3.6.1.4.1.318.1.1.13.6.2.2.1.10',
  airIRG3GroupStatusMaxReturnAirTempMetric => '1.3.6.1.4.1.318.1.1.13.6.2.2.1.11',
  airIRG3GroupStatusMinReturnAirTempUS => '1.3.6.1.4.1.318.1.1.13.6.2.2.1.12',
  airIRG3GroupStatusMinReturnAirTempMetric => '1.3.6.1.4.1.318.1.1.13.6.2.2.1.13',
  airIRG3GroupStatusAvgSupplyTempUS => '1.3.6.1.4.1.318.1.1.13.6.2.2.1.14',
  airIRG3GroupStatusAvgSupplyTempMetric => '1.3.6.1.4.1.318.1.1.13.6.2.2.1.15',
  airIRG3GroupStatusAvgReturnTempUS => '1.3.6.1.4.1.318.1.1.13.6.2.2.1.16',
  airIRG3GroupStatusAvgReturnTempMetric => '1.3.6.1.4.1.318.1.1.13.6.2.2.1.17',
  airIRG3GroupStatusAvgFanSpeed => '1.3.6.1.4.1.318.1.1.13.6.2.2.1.18',
  airIRG3GroupStatusAvgAirFlowUS => '1.3.6.1.4.1.318.1.1.13.6.2.2.1.19',
  airIRG3GroupStatusAvgAirFlowMetric => '1.3.6.1.4.1.318.1.1.13.6.2.2.1.20',
  airIRG3GroupStatusTotalAirFlowUS => '1.3.6.1.4.1.318.1.1.13.6.2.2.1.21',
  airIRG3GroupStatusTotalAirFlowMetric => '1.3.6.1.4.1.318.1.1.13.6.2.2.1.22',
  airIRG3GroupSetpointsTable => '1.3.6.1.4.1.318.1.1.13.6.2.3',
  airIRG3GroupSetpointsEntry => '1.3.6.1.4.1.318.1.1.13.6.2.3.1',
  airIRG3GroupSetpointsIndex => '1.3.6.1.4.1.318.1.1.13.6.2.3.1.1',
  airIRG3GroupSetpointsCoolSetpointUS => '1.3.6.1.4.1.318.1.1.13.6.2.3.1.2',
  airIRG3GroupSetpointsCoolSetpointMetric => '1.3.6.1.4.1.318.1.1.13.6.2.3.1.3',
  airIRG3GroupSetpointsCoolDeadbandUS => '1.3.6.1.4.1.318.1.1.13.6.2.3.1.4',
  airIRG3GroupSetpointsCoolDeadbandMetric => '1.3.6.1.4.1.318.1.1.13.6.2.3.1.5',
  airIRG3GroupSetpointsFanSpeedPreference => '1.3.6.1.4.1.318.1.1.13.6.2.3.1.6',
  airIRG3GroupSetpointsFanSpeedPreferenceDefinition => 'PowerNet-MIB::airIRG3GroupSetpointsFanSpeedPreference',
  airIRG3GroupSetpointsSupplyAirSetpointUS => '1.3.6.1.4.1.318.1.1.13.6.2.3.1.7',
  airIRG3GroupSetpointsSupplyAirSetpointMetric => '1.3.6.1.4.1.318.1.1.13.6.2.3.1.8',
  airIRG3GroupSetpointsAirFlowControl => '1.3.6.1.4.1.318.1.1.13.6.2.3.1.9',
  airIRG3GroupSetpointsAirFlowControlDefinition => 'PowerNet-MIB::airIRG3GroupSetpointsAirFlowControl',
  airIRG3GroupSetpointsLightingOnTime => '1.3.6.1.4.1.318.1.1.13.6.2.3.1.10',
  airIRG3GroupConfigTable => '1.3.6.1.4.1.318.1.1.13.6.2.4',
  airIRG3GroupConfigEntry => '1.3.6.1.4.1.318.1.1.13.6.2.4.1',
  airIRG3GroupConfigIndex => '1.3.6.1.4.1.318.1.1.13.6.2.4.1.1',
  airIRG3GroupConfigNumberofCoolingUnits => '1.3.6.1.4.1.318.1.1.13.6.2.4.1.2',
  airIRG3GroupConfigConfigurationType => '1.3.6.1.4.1.318.1.1.13.6.2.4.1.3',
  airIRG3GroupConfigConfigurationTypeDefinition => 'PowerNet-MIB::airIRG3GroupConfigConfigurationType',
  airIRG3GroupConfigCapacityControlType => '1.3.6.1.4.1.318.1.1.13.6.2.4.1.4',
  airIRG3GroupConfigCapacityControlTypeDefinition => 'PowerNet-MIB::airIRG3GroupConfigCapacityControlType',
  airIRG3GroupConfigFanSpeedControl => '1.3.6.1.4.1.318.1.1.13.6.2.4.1.5',
  airIRG3GroupConfigFanSpeedControlDefinition => 'PowerNet-MIB::airIRG3GroupConfigFanSpeedControl',
  airIRG3GroupConfigCoolGainP => '1.3.6.1.4.1.318.1.1.13.6.2.4.1.6',
  airIRG3GroupConfigCoolResetRateI => '1.3.6.1.4.1.318.1.1.13.6.2.4.1.7',
  airIRG3GroupConfigCoolDerivativeD => '1.3.6.1.4.1.318.1.1.13.6.2.4.1.8',
  airIRG3GroupConfigCoolPIDReset => '1.3.6.1.4.1.318.1.1.13.6.2.4.1.9',
  airIRG3GroupConfigCoolPIDResetDefinition => 'PowerNet-MIB::airIRG3GroupConfigCoolPIDReset',
  airIRG3GroupConfigNumberofBackupUnits => '1.3.6.1.4.1.318.1.1.13.6.2.4.1.10',
  airIRG3GroupConfigRuntimeBalancingEnable => '1.3.6.1.4.1.318.1.1.13.6.2.4.1.11',
  airIRG3GroupConfigRuntimeBalancingEnableDefinition => 'PowerNet-MIB::airIRG3GroupConfigRuntimeBalancingEnable',
  airIRG3GroupConfigLoadAssistEnable => '1.3.6.1.4.1.318.1.1.13.6.2.4.1.12',
  airIRG3GroupConfigLoadAssistEnableDefinition => 'PowerNet-MIB::airIRG3GroupConfigLoadAssistEnable',
  airIRG3Alarms => '1.3.6.1.4.1.318.1.1.13.6.3',
  airIRG3AlarmsTableSize => '1.3.6.1.4.1.318.1.1.13.6.3.1',
  airIRG3AlarmsTable => '1.3.6.1.4.1.318.1.1.13.6.3.2',
  airIRG3AlarmsEntry => '1.3.6.1.4.1.318.1.1.13.6.3.2.1',
  airIRG3AlarmsIndex => '1.3.6.1.4.1.318.1.1.13.6.3.2.1.1',
  airIRG3AlarmsEventCode => '1.3.6.1.4.1.318.1.1.13.6.3.2.1.2',
  airIRG3AlarmsDescription => '1.3.6.1.4.1.318.1.1.13.6.3.2.1.3',
  airIRG3RDU => '1.3.6.1.4.1.318.1.1.13.6.4',
  airIRG3RDUTableSize => '1.3.6.1.4.1.318.1.1.13.6.4.1',
  airIRG3RDUStatusTable => '1.3.6.1.4.1.318.1.1.13.6.4.2',
  airIRG3RDUStatusEntry => '1.3.6.1.4.1.318.1.1.13.6.4.2.1',
  airIRG3RDUStatusDeviceIndex => '1.3.6.1.4.1.318.1.1.13.6.4.2.1.1',
  airIRG3RDUID => '1.3.6.1.4.1.318.1.1.13.6.4.2.1.2',
  airIRG3RDUStatusOnReadyStandby => '1.3.6.1.4.1.318.1.1.13.6.4.2.1.3',
  airIRG3RDUStatusOnReadyStandbyDefinition => 'PowerNet-MIB::airIRG3RDUStatusOnReadyStandby',
  airIRG3RDUStatusOperatingMode => '1.3.6.1.4.1.318.1.1.13.6.4.2.1.4',
  airIRG3RDUStatusOperatingModeDefinition => 'PowerNet-MIB::airIRG3RDUStatusOperatingMode',
  airIRG3RDUStatusLeadPump => '1.3.6.1.4.1.318.1.1.13.6.4.2.1.5',
  airIRG3RDUStatusLeadPumpDefinition => 'PowerNet-MIB::airIRG3RDUStatusLeadPump',
  airIRG3RDUStatusStartupDelay => '1.3.6.1.4.1.318.1.1.13.6.4.2.1.6',
  airIRG3RDUStatusPumpChangeOverInterval => '1.3.6.1.4.1.318.1.1.13.6.4.2.1.7',
  airIRG3RDUStatusStopOnLeakDetect => '1.3.6.1.4.1.318.1.1.13.6.4.2.1.8',
  airIRG3RDUStatusStopOnLeakDetectDefinition => 'PowerNet-MIB::airIRG3RDUStatusStopOnLeakDetect',
  airIRG3RDUStatusPowerSource => '1.3.6.1.4.1.318.1.1.13.6.4.2.1.9',
  airIRG3RDUStatusPowerSourceDefinition => 'PowerNet-MIB::airIRG3RDUStatusPowerSource',
  airIRG3RDUStatusTotalRDUOutputPower => '1.3.6.1.4.1.318.1.1.13.6.4.2.1.10',
  airIRG3RDUStatusInletWaterTempUS => '1.3.6.1.4.1.318.1.1.13.6.4.2.1.11',
  airIRG3RDUStatusInletWaterTempMetric => '1.3.6.1.4.1.318.1.1.13.6.4.2.1.12',
  airIRG3RDUStatusOutletWaterTempUS => '1.3.6.1.4.1.318.1.1.13.6.4.2.1.13',
  airIRG3RDUStatusOutletWaterTempMetric => '1.3.6.1.4.1.318.1.1.13.6.4.2.1.14',
  airIRG3RDUStatusCondenserSaturationTempUS => '1.3.6.1.4.1.318.1.1.13.6.4.2.1.15',
  airIRG3RDUStatusCondenserSaturationTempMetric => '1.3.6.1.4.1.318.1.1.13.6.4.2.1.16',
  airIRG3RDUStatusDewPointTempUS => '1.3.6.1.4.1.318.1.1.13.6.4.2.1.17',
  airIRG3RDUStatusDewPointTempMetric => '1.3.6.1.4.1.318.1.1.13.6.4.2.1.18',
  airIRG3RDUStatusPumpOutletTempUS => '1.3.6.1.4.1.318.1.1.13.6.4.2.1.19',
  airIRG3RDUStatusPumpOutletTempMetric => '1.3.6.1.4.1.318.1.1.13.6.4.2.1.20',
  airIRG3RDUStatusSubcoolerOutletTempUS => '1.3.6.1.4.1.318.1.1.13.6.4.2.1.21',
  airIRG3RDUStatusSubcoolerOutletTempMetric => '1.3.6.1.4.1.318.1.1.13.6.4.2.1.22',
  airIRG3RDUStatusCondenserOutletTempUS => '1.3.6.1.4.1.318.1.1.13.6.4.2.1.23',
  airIRG3RDUStatusCondenserOutletTempMetric => '1.3.6.1.4.1.318.1.1.13.6.4.2.1.24',
  airIRG3RDUStatusCondenserInletTempUS => '1.3.6.1.4.1.318.1.1.13.6.4.2.1.25',
  airIRG3RDUStatusCondenserInletTempMetric => '1.3.6.1.4.1.318.1.1.13.6.4.2.1.26',
  airIRG3RDUStatusCondenserOutletPressureUS => '1.3.6.1.4.1.318.1.1.13.6.4.2.1.27',
  airIRG3RDUStatusCondenserOutletPressureMetric => '1.3.6.1.4.1.318.1.1.13.6.4.2.1.28',
  airIRG3RDUStatusPump1HeadPressureUS => '1.3.6.1.4.1.318.1.1.13.6.4.2.1.29',
  airIRG3RDUStatusPump1HeadPressureMetric => '1.3.6.1.4.1.318.1.1.13.6.4.2.1.30',
  airIRG3RDUStatusPump2HeadPressureUS => '1.3.6.1.4.1.318.1.1.13.6.4.2.1.31',
  airIRG3RDUStatusPump2HeadPressureMetric => '1.3.6.1.4.1.318.1.1.13.6.4.2.1.32',
  airIRG3RDUStatusPump1Speed => '1.3.6.1.4.1.318.1.1.13.6.4.2.1.33',
  airIRG3RDUStatusPump2Speed => '1.3.6.1.4.1.318.1.1.13.6.4.2.1.34',
  airIRG3RDUStatusCWValvePosition => '1.3.6.1.4.1.318.1.1.13.6.4.2.1.35',
  airIRG3RDUStatusReceiverLiquidLevel => '1.3.6.1.4.1.318.1.1.13.6.4.2.1.36',
  airIRG3RDUStatusDCPowerSupply1Current => '1.3.6.1.4.1.318.1.1.13.6.4.2.1.37',
  airIRG3RDUStatusDCPowerSupply2Current => '1.3.6.1.4.1.318.1.1.13.6.4.2.1.38',
  airIRG3RDUStatusTotalDCPowerSupplyCurrent => '1.3.6.1.4.1.318.1.1.13.6.4.2.1.39',
  airIRG3RDUStatusInputState => '1.3.6.1.4.1.318.1.1.13.6.4.2.1.40',
  airIRG3RDUStatusInputStateDefinition => 'PowerNet-MIB::airIRG3RDUStatusInputState',
  airIRG3RDUStatusOutputState => '1.3.6.1.4.1.318.1.1.13.6.4.2.1.41',
  airIRG3RDUStatusOutputStateDefinition => 'PowerNet-MIB::airIRG3RDUStatusOutputState',
  airIRG3RDUStatusByPassValvePosition => '1.3.6.1.4.1.318.1.1.13.6.4.2.1.42',
  airIRG3RDUStatusRefrigerantLeakDetector => '1.3.6.1.4.1.318.1.1.13.6.4.2.1.43',
  airIRG3RDUStatusRefrigerantLeakDetectorDefinition => 'PowerNet-MIB::airIRG3RDUStatusRefrigerantLeakDetector',
  airIRG3RDURunHoursTable => '1.3.6.1.4.1.318.1.1.13.6.4.3',
  airIRG3RDURunHoursEntry => '1.3.6.1.4.1.318.1.1.13.6.4.3.1',
  airIRG3RDURunHoursDeviceIndex => '1.3.6.1.4.1.318.1.1.13.6.4.3.1.1',
  airIRG3RDURunHoursRDUID => '1.3.6.1.4.1.318.1.1.13.6.4.3.1.2',
  airIRG3RDURunHoursPump1 => '1.3.6.1.4.1.318.1.1.13.6.4.3.1.3',
  airIRG3RDURunHoursPump2 => '1.3.6.1.4.1.318.1.1.13.6.4.3.1.4',
  airIRG3RDURunHoursPowerSupply1 => '1.3.6.1.4.1.318.1.1.13.6.4.3.1.5',
  airIRG3RDURunHoursPowerSupply2 => '1.3.6.1.4.1.318.1.1.13.6.4.3.1.6',
  airIRG3RDUServiceIntervalsTable => '1.3.6.1.4.1.318.1.1.13.6.4.4',
  airIRG3RDUServiceIntervalsEntry => '1.3.6.1.4.1.318.1.1.13.6.4.4.1',
  airIRG3RDUServiceIntervalsDeviceIndex => '1.3.6.1.4.1.318.1.1.13.6.4.4.1.1',
  airIRG3RDUServiceIntervalsRDUID => '1.3.6.1.4.1.318.1.1.13.6.4.4.1.2',
  airIRG3RDUServiceIntervalsAirFilterInterval => '1.3.6.1.4.1.318.1.1.13.6.4.4.1.3',
  airIRG3RDUServiceIntervalsAirFilterAlarm => '1.3.6.1.4.1.318.1.1.13.6.4.4.1.4',
  airIRG3RDUServiceIntervalsAirFilterAlarmDefinition => 'PowerNet-MIB::airIRG3RDUServiceIntervalsAirFilterAlarm',
  airIRG3RDUThresholdsTable => '1.3.6.1.4.1.318.1.1.13.6.4.5',
  airIRG3RDUThresholdsEntry => '1.3.6.1.4.1.318.1.1.13.6.4.5.1',
  airIRG3RDUThresholdsDeviceIndex => '1.3.6.1.4.1.318.1.1.13.6.4.5.1.1',
  airIRG3RDUThresholdsRDUID => '1.3.6.1.4.1.318.1.1.13.6.4.5.1.2',
  airIRG3RDUThresholdsEnteringFluidTempHighUS => '1.3.6.1.4.1.318.1.1.13.6.4.5.1.3',
  airIRG3RDUThresholdsEnteringFluidTempHighMetric => '1.3.6.1.4.1.318.1.1.13.6.4.5.1.4',
  airIRG3RDUSetpointsTable => '1.3.6.1.4.1.318.1.1.13.6.4.6',
  airIRG3RDUSetpointsEntry => '1.3.6.1.4.1.318.1.1.13.6.4.6.1',
  airIRG3RDUSetpointsDeviceIndex => '1.3.6.1.4.1.318.1.1.13.6.4.6.1.1',
  airIRG3RDUConfigTable => '1.3.6.1.4.1.318.1.1.13.6.4.7',
  airIRG3RDUConfigEntry => '1.3.6.1.4.1.318.1.1.13.6.4.7.1',
  airIRG3RDUConfigDeviceIndex => '1.3.6.1.4.1.318.1.1.13.6.4.7.1.1',
  airIRG3RDUConfigRDUID => '1.3.6.1.4.1.318.1.1.13.6.4.7.1.2',
  airIRG3RDUConfigStopOnLeakDetect => '1.3.6.1.4.1.318.1.1.13.6.4.7.1.3',
  airIRG3RDUConfigStopOnLeakDetectDefinition => 'PowerNet-MIB::airIRG3RDUConfigStopOnLeakDetect',
  airIRG3RDUConfigStartupDelay => '1.3.6.1.4.1.318.1.1.13.6.4.7.1.4',
  airIRG3RDUConfigPumpChangeOverInterval => '1.3.6.1.4.1.318.1.1.13.6.4.7.1.5',
  airIRG3RDUConfigPowerSource => '1.3.6.1.4.1.318.1.1.13.6.4.7.1.6',
  airIRG3RDUConfigPowerSourceDefinition => 'PowerNet-MIB::airIRG3RDUConfigPowerSource',
  airIRG3RDUConfigOutputSource => '1.3.6.1.4.1.318.1.1.13.6.4.7.1.7',
  airIRG3RDUConfigOutputSourceDefinition => 'PowerNet-MIB::airIRG3RDUConfigOutputSource',
  airIRG3RDUConfigInputNormalState => '1.3.6.1.4.1.318.1.1.13.6.4.7.1.8',
  airIRG3RDUConfigInputNormalStateDefinition => 'PowerNet-MIB::airIRG3RDUConfigInputNormalState',
  airIRG3RDUConfigOutputNormalState => '1.3.6.1.4.1.318.1.1.13.6.4.7.1.9',
  airIRG3RDUConfigOutputNormalStateDefinition => 'PowerNet-MIB::airIRG3RDUConfigOutputNormalState',
  airIRG3RDUConfigByPassValveEnabled => '1.3.6.1.4.1.318.1.1.13.6.4.7.1.10',
  airIRG3RDUConfigByPassValveEnabledDefinition => 'PowerNet-MIB::airIRG3RDUConfigByPassValveEnabled',
  airIRG3RDUConfigRefrigerantLeakDetectorEnabled => '1.3.6.1.4.1.318.1.1.13.6.4.7.1.11',
  airIRG3RDUConfigRefrigerantLeakDetectorEnabledDefinition => 'PowerNet-MIB::airIRG3RDUConfigRefrigerantLeakDetectorEnabled',
  airIRG3RDUConfigCalibrateRefrigerantLeakDetector => '1.3.6.1.4.1.318.1.1.13.6.4.7.1.12',
  airIRG3RDUConfigCalibrateRefrigerantLeakDetectorDefinition => 'PowerNet-MIB::airIRG3RDUConfigCalibrateRefrigerantLeakDetector',
  airIRG3RDUConfigOnReadyStandby => '1.3.6.1.4.1.318.1.1.13.6.4.7.1.13',
  airIRG3RDUConfigOnReadyStandbyDefinition => 'PowerNet-MIB::airIRG3RDUConfigOnReadyStandby',
  airIRG3CM => '1.3.6.1.4.1.318.1.1.13.6.5',
  airIRG3CMTableSize => '1.3.6.1.4.1.318.1.1.13.6.5.1',
  airIRG3CMStatusTable => '1.3.6.1.4.1.318.1.1.13.6.5.2',
  airIRG3CMStatusEntry => '1.3.6.1.4.1.318.1.1.13.6.5.2.1',
  airIRG3CMStatusDeviceIndex => '1.3.6.1.4.1.318.1.1.13.6.5.2.1.1',
  airIRG3CMStatusCMID => '1.3.6.1.4.1.318.1.1.13.6.5.2.1.2',
  airIRG3CMStatusOperatingMode => '1.3.6.1.4.1.318.1.1.13.6.5.2.1.3',
  airIRG3CMStatusOperatingModeDefinition => 'PowerNet-MIB::airIRG3CMStatusOperatingMode',
  airIRG3CMStatusUnitType => '1.3.6.1.4.1.318.1.1.13.6.5.2.1.4',
  airIRG3CMStatusUnitTypeDefinition => 'PowerNet-MIB::airIRG3CMStatusUnitType',
  airIRG3CMStatusRackInletTempUS => '1.3.6.1.4.1.318.1.1.13.6.5.2.1.5',
  airIRG3CMStatusRackInletTempMetric => '1.3.6.1.4.1.318.1.1.13.6.5.2.1.6',
  airIRG3CMStatusReturnAirTempUS => '1.3.6.1.4.1.318.1.1.13.6.5.2.1.7',
  airIRG3CMStatusReturnAirTempMetric => '1.3.6.1.4.1.318.1.1.13.6.5.2.1.8',
  airIRG3CMStatusLiquidTempUS => '1.3.6.1.4.1.318.1.1.13.6.5.2.1.9',
  airIRG3CMStatusLiquidTempMetric => '1.3.6.1.4.1.318.1.1.13.6.5.2.1.10',
  airIRG3CMStatusVaporTempUS => '1.3.6.1.4.1.318.1.1.13.6.5.2.1.11',
  airIRG3CMStatusVaporTempMetric => '1.3.6.1.4.1.318.1.1.13.6.5.2.1.12',
  airIRG3CMStatusEvaporatorTempUS => '1.3.6.1.4.1.318.1.1.13.6.5.2.1.13',
  airIRG3CMStatusEvaporatorTempMetric => '1.3.6.1.4.1.318.1.1.13.6.5.2.1.14',
  airIRG3CMStatusLiquidInletPressureUS => '1.3.6.1.4.1.318.1.1.13.6.5.2.1.15',
  airIRG3CMStatusLiquidInletPressureMetric => '1.3.6.1.4.1.318.1.1.13.6.5.2.1.16',
  airIRG3CMStatusVaporOutletPressureUS => '1.3.6.1.4.1.318.1.1.13.6.5.2.1.17',
  airIRG3CMStatusVaporOutletPressureMetric => '1.3.6.1.4.1.318.1.1.13.6.5.2.1.18',
  airIRG3CMStatusExpansionValvePosition => '1.3.6.1.4.1.318.1.1.13.6.5.2.1.19',
  airIRG3CMStatusEPRValvePosition => '1.3.6.1.4.1.318.1.1.13.6.5.2.1.20',
  airIRG3CMStatusLocalDisplayOnOffEnabled => '1.3.6.1.4.1.318.1.1.13.6.5.2.1.21',
  airIRG3CMStatusLocalDisplayOnOffEnabledDefinition => 'PowerNet-MIB::airIRG3CMStatusLocalDisplayOnOffEnabled',
  airIRG3CMStatusAverageFanSpeed => '1.3.6.1.4.1.318.1.1.13.6.5.2.1.22',
  airIRG3CMRunHoursTable => '1.3.6.1.4.1.318.1.1.13.6.5.3',
  airIRG3CMRunHoursEntry => '1.3.6.1.4.1.318.1.1.13.6.5.3.1',
  airIRG3CMRunHoursDeviceIndex => '1.3.6.1.4.1.318.1.1.13.6.5.3.1.1',
  airIRG3CMRunHoursCMID => '1.3.6.1.4.1.318.1.1.13.6.5.3.1.2',
  airIRG3CMRunHoursFan1 => '1.3.6.1.4.1.318.1.1.13.6.5.3.1.3',
  airIRG3CMRunHoursFan2 => '1.3.6.1.4.1.318.1.1.13.6.5.3.1.4',
  airIRG3CMRunHoursFan3 => '1.3.6.1.4.1.318.1.1.13.6.5.3.1.5',
  airIRG3CMRunHoursFan4 => '1.3.6.1.4.1.318.1.1.13.6.5.3.1.6',
  airIRG3CMRunHoursFan5 => '1.3.6.1.4.1.318.1.1.13.6.5.3.1.7',
  airIRG3CMRunHoursAirFilter => '1.3.6.1.4.1.318.1.1.13.6.5.3.1.8',
  airIRG3CMServiceIntervalsTable => '1.3.6.1.4.1.318.1.1.13.6.5.4',
  airIRG3CMServiceIntervalsEntry => '1.3.6.1.4.1.318.1.1.13.6.5.4.1',
  airIRG3CMServiceIntervalsDeviceIndex => '1.3.6.1.4.1.318.1.1.13.6.5.4.1.1',
  airIRG3CMServiceIntervalsCMID => '1.3.6.1.4.1.318.1.1.13.6.5.4.1.2',
  airIRG3CMServiceIntervalsAirFilterInterval => '1.3.6.1.4.1.318.1.1.13.6.5.4.1.3',
  airIRG3CMServiceIntervalsAirFilterAlarm => '1.3.6.1.4.1.318.1.1.13.6.5.4.1.4',
  airIRG3CMServiceIntervalsAirFilterAlarmDefinition => 'PowerNet-MIB::airIRG3CMServiceIntervalsAirFilterAlarm',
  airIRG3CMThresholdsTable => '1.3.6.1.4.1.318.1.1.13.6.5.5',
  airIRG3CMThresholdsEntry => '1.3.6.1.4.1.318.1.1.13.6.5.5.1',
  airIRG3CMThresholdsDeviceIndex => '1.3.6.1.4.1.318.1.1.13.6.5.5.1.1',
  airIRG3CMThresholdsCMID => '1.3.6.1.4.1.318.1.1.13.6.5.5.1.2',
  airIRG3CMThresholdsRackInletTempHighUS => '1.3.6.1.4.1.318.1.1.13.6.5.5.1.3',
  airIRG3CMThresholdsRackInletTempHighMetric => '1.3.6.1.4.1.318.1.1.13.6.5.5.1.4',
  airIRG3CMThresholdsSupplyAirTempHighUS => '1.3.6.1.4.1.318.1.1.13.6.5.5.1.5',
  airIRG3CMThresholdsSupplyAirTempHighMetric => '1.3.6.1.4.1.318.1.1.13.6.5.5.1.6',
  airIRG3CMThresholdsReturnAirTempHighUS => '1.3.6.1.4.1.318.1.1.13.6.5.5.1.7',
  airIRG3CMThresholdsReturnAirTempHighMetric => '1.3.6.1.4.1.318.1.1.13.6.5.5.1.8',
  airIRG3CMSetpointsTable => '1.3.6.1.4.1.318.1.1.13.6.5.6',
  airIRG3CMSetpointsEntry => '1.3.6.1.4.1.318.1.1.13.6.5.6.1',
  airIRG3CMSetpointsDeviceIndex => '1.3.6.1.4.1.318.1.1.13.6.5.6.1.1',
  airIRG3CMConfigTable => '1.3.6.1.4.1.318.1.1.13.6.5.7',
  airIRG3CMConfigEntry => '1.3.6.1.4.1.318.1.1.13.6.5.7.1',
  airIRG3CMConfigDeviceIndex => '1.3.6.1.4.1.318.1.1.13.6.5.7.1.1',
  airIRG3CMConfigCMID => '1.3.6.1.4.1.318.1.1.13.6.5.7.1.2',
  airIRG3CMConfigStopOnCoolFail => '1.3.6.1.4.1.318.1.1.13.6.5.7.1.3',
  airIRG3CMConfigStopOnCoolFailDefinition => 'PowerNet-MIB::airIRG3CMConfigStopOnCoolFail',
  airIRG3CMConfigStartupDelay => '1.3.6.1.4.1.318.1.1.13.6.5.7.1.4',
  airIRG3CMConfigRemoteOnStandby => '1.3.6.1.4.1.318.1.1.13.6.5.7.1.5',
  airIRG3CMConfigRemoteOnStandbyDefinition => 'PowerNet-MIB::airIRG3CMConfigRemoteOnStandby',
  airIRG3CMConfigPowerSource => '1.3.6.1.4.1.318.1.1.13.6.5.7.1.6',
  airIRG3CMConfigPowerSourceDefinition => 'PowerNet-MIB::airIRG3CMConfigPowerSource',
  rARU => '1.3.6.1.4.1.318.1.1.14',
  rARUIdent => '1.3.6.1.4.1.318.1.1.14.1',
  rARUIdentTable => '1.3.6.1.4.1.318.1.1.14.1.1',
  rARUIdentEntry => '1.3.6.1.4.1.318.1.1.14.1.1.1',
  rARUIdentAruIndex => '1.3.6.1.4.1.318.1.1.14.1.1.1.1',
  rARUIdentName => '1.3.6.1.4.1.318.1.1.14.1.1.1.2',
  rARUConfig => '1.3.6.1.4.1.318.1.1.14.2',
  rARUConfigTable => '1.3.6.1.4.1.318.1.1.14.2.1',
  rARUConfigEntry => '1.3.6.1.4.1.318.1.1.14.2.1.1',
  rARUConfigAruIndex => '1.3.6.1.4.1.318.1.1.14.2.1.1.1',
  rARUConfigAruName => '1.3.6.1.4.1.318.1.1.14.2.1.1.2',
  rARUConfigAruRemoteSetpoint => '1.3.6.1.4.1.318.1.1.14.2.1.1.3',
  rARUConfigAruRemoteSetpointDefinition => 'PowerNet-MIB::rARUConfigAruRemoteSetpoint',
  rARUConfigAruTempOvrdEnableDisable => '1.3.6.1.4.1.318.1.1.14.2.1.1.4',
  rARUConfigAruTempOvrdEnableDisableDefinition => 'PowerNet-MIB::rARUConfigAruTempOvrdEnableDisable',
  rARUConfigAruTempOvrdSetpoint => '1.3.6.1.4.1.318.1.1.14.2.1.1.5',
  rARUConfigAruMasterControl => '1.3.6.1.4.1.318.1.1.14.2.1.1.6',
  rARUConfigAruMasterControlDefinition => 'PowerNet-MIB::rARUConfigAruMasterControl',
  rARUStatus => '1.3.6.1.4.1.318.1.1.14.3',
  rARUStatusAruDeviceCount => '1.3.6.1.4.1.318.1.1.14.3.1',
  rARUStatusSysTempUnits => '1.3.6.1.4.1.318.1.1.14.3.2',
  rARUStatusSysTempUnitsDefinition => 'PowerNet-MIB::rARUStatusSysTempUnits',
  rARUStatusTable => '1.3.6.1.4.1.318.1.1.14.3.3',
  rARUStatusEntry => '1.3.6.1.4.1.318.1.1.14.3.3.1',
  rARUStatusAruIndex => '1.3.6.1.4.1.318.1.1.14.3.3.1.1',
  rARUStatusAruName => '1.3.6.1.4.1.318.1.1.14.3.3.1.2',
  rARUStatusAruRemoteSetpoint => '1.3.6.1.4.1.318.1.1.14.3.3.1.3',
  rARUStatusAruRemoteSetpointDefinition => 'PowerNet-MIB::rARUStatusAruRemoteSetpoint',
  rARUStatusAruManualSetpoint => '1.3.6.1.4.1.318.1.1.14.3.3.1.4',
  rARUStatusAruManualSetpointDefinition => 'PowerNet-MIB::rARUStatusAruManualSetpoint',
  rARUStatusAruTemp1 => '1.3.6.1.4.1.318.1.1.14.3.3.1.5',
  rARUStatusAruTemp2 => '1.3.6.1.4.1.318.1.1.14.3.3.1.6',
  rARUStatusAruTemp3 => '1.3.6.1.4.1.318.1.1.14.3.3.1.7',
  rARUStatusAruTempOvrdEnableDisable => '1.3.6.1.4.1.318.1.1.14.3.3.1.8',
  rARUStatusAruTempOvrdEnableDisableDefinition => 'PowerNet-MIB::rARUStatusAruTempOvrdEnableDisable',
  rARUStatusAruTempOvrdSetpoint => '1.3.6.1.4.1.318.1.1.14.3.3.1.9',
  rARUStatusAruAlarmState => '1.3.6.1.4.1.318.1.1.14.3.3.1.10',
  rARUStatusAruCommStatus => '1.3.6.1.4.1.318.1.1.14.3.3.1.11',
  rARUStatusAruCommStatusDefinition => 'PowerNet-MIB::rARUStatusAruCommStatus',
  rARUStatusAruTempOvrdStatus => '1.3.6.1.4.1.318.1.1.14.3.3.1.12',
  rARUStatusAruTempOvrdStatusDefinition => 'PowerNet-MIB::rARUStatusAruTempOvrdStatus',
  rARUStatusAruMasterControl => '1.3.6.1.4.1.318.1.1.14.3.3.1.13',
  rARUStatusAruMasterControlDefinition => 'PowerNet-MIB::rARUStatusAruMasterControl',
  rARUStatusAruTotalAirflow => '1.3.6.1.4.1.318.1.1.14.3.3.1.14',
  rARUFanStatus => '1.3.6.1.4.1.318.1.1.14.4',
  rARUFanStatusTable => '1.3.6.1.4.1.318.1.1.14.4.1',
  rARUFanStatusEntry => '1.3.6.1.4.1.318.1.1.14.4.1.1',
  rARUFanStatusAruIndex => '1.3.6.1.4.1.318.1.1.14.4.1.1.1',
  rARUFanStatusNominalFanSpeed => '1.3.6.1.4.1.318.1.1.14.4.1.1.2',
  rARUFanStatusSelectedFanLevel => '1.3.6.1.4.1.318.1.1.14.4.1.1.3',
  rARUFanStatusReplacementThreshold => '1.3.6.1.4.1.318.1.1.14.4.1.1.4',
  rARUFanStatusReplacementThresholdDefinition => 'PowerNet-MIB::rARUFanStatusReplacementThreshold',
  rARUFanStatusFanIndex => '1.3.6.1.4.1.318.1.1.14.4.1.1.5',
  rARUFanStatusFanOperatingStatus => '1.3.6.1.4.1.318.1.1.14.4.1.1.6',
  rARUFanStatusFanOperatingStatusDefinition => 'PowerNet-MIB::rARUFanStatusFanOperatingStatus',
  rARUFanStatusFanRpmSpeed => '1.3.6.1.4.1.318.1.1.14.4.1.1.7',
  rARUFanStatusFanFlowRate => '1.3.6.1.4.1.318.1.1.14.4.1.1.8',
  rARUFanStatusFanInServiceDate => '1.3.6.1.4.1.318.1.1.14.4.1.1.9',
  rARUFanStatusFanRunhourCounter => '1.3.6.1.4.1.318.1.1.14.4.1.1.10',
  rARUFanStatusFanRunhourReset => '1.3.6.1.4.1.318.1.1.14.4.1.1.11',
  rARUFanStatusFanRunhourResetDefinition => 'PowerNet-MIB::rARUFanStatusFanRunhourReset',
  rARUPower => '1.3.6.1.4.1.318.1.1.14.5',
  rARUPowerStatusTable => '1.3.6.1.4.1.318.1.1.14.5.1',
  rARUPowerStatusEntry => '1.3.6.1.4.1.318.1.1.14.5.1.1',
  rARUPowerStatusAruIndex => '1.3.6.1.4.1.318.1.1.14.5.1.1.1',
  rARUPowerStatusPrimaryAcPresent => '1.3.6.1.4.1.318.1.1.14.5.1.1.2',
  rARUPowerStatusPrimaryAcPresentDefinition => 'PowerNet-MIB::rARUPowerStatusPrimaryAcPresent',
  rARUPowerStatusAuxiliaryAcPresent => '1.3.6.1.4.1.318.1.1.14.5.1.1.3',
  rARUPowerStatusAuxiliaryAcPresentDefinition => 'PowerNet-MIB::rARUPowerStatusAuxiliaryAcPresent',
  rARUPowerStatusRedundantAcConfig => '1.3.6.1.4.1.318.1.1.14.5.1.1.4',
  rARUPowerStatusRedundantAcConfigDefinition => 'PowerNet-MIB::rARUPowerStatusRedundantAcConfig',
  rARUSensors => '1.3.6.1.4.1.318.1.1.14.6',
  rARUSensorsStatusTableSize => '1.3.6.1.4.1.318.1.1.14.6.1',
  rARUSensorsStatusTable => '1.3.6.1.4.1.318.1.1.14.6.2',
  rARUSensorsStatusEntry => '1.3.6.1.4.1.318.1.1.14.6.2.1',
  rARUSensorsStatusAruIndex => '1.3.6.1.4.1.318.1.1.14.6.2.1.1',
  rARUSensorsStatusSensorNumber => '1.3.6.1.4.1.318.1.1.14.6.2.1.2',
  rARUSensorsTemperature => '1.3.6.1.4.1.318.1.1.14.6.2.1.3',
  rARUSensorsConfigTableSize => '1.3.6.1.4.1.318.1.1.14.6.3',
  rARUSensorsConfigTable => '1.3.6.1.4.1.318.1.1.14.6.4',
  rARUSensorsConfigEntry => '1.3.6.1.4.1.318.1.1.14.6.4.1',
  rARUSensorsConfigAruIndex => '1.3.6.1.4.1.318.1.1.14.6.4.1.1',
  rARUSensorsConfigSensorNumber => '1.3.6.1.4.1.318.1.1.14.6.4.1.2',
  rARUSensorsName => '1.3.6.1.4.1.318.1.1.14.6.4.1.3',
  rARUSensorsLocation => '1.3.6.1.4.1.318.1.1.14.6.4.1.4',
  rARUSensorsTempMaxThresh => '1.3.6.1.4.1.318.1.1.14.6.4.1.5',
  rARUSensorsTempHighThresh => '1.3.6.1.4.1.318.1.1.14.6.4.1.6',
  rARUSensorsTempLowThresh => '1.3.6.1.4.1.318.1.1.14.6.4.1.7',
  rARUSensorsTempMinThresh => '1.3.6.1.4.1.318.1.1.14.6.4.1.8',
  rARUSensorsTempThreshHysteresis => '1.3.6.1.4.1.318.1.1.14.6.4.1.9',
  rARUSensorsTempShortDecRateThreshValue => '1.3.6.1.4.1.318.1.1.14.6.4.1.10',
  rARUSensorsTempShortDecRateThreshTime => '1.3.6.1.4.1.318.1.1.14.6.4.1.11',
  rARUSensorsTempShortIncRateThreshValue => '1.3.6.1.4.1.318.1.1.14.6.4.1.12',
  rARUSensorsTempShortIncRateThreshTime => '1.3.6.1.4.1.318.1.1.14.6.4.1.13',
  rARUSensorsTempLongDecRateThreshValue => '1.3.6.1.4.1.318.1.1.14.6.4.1.14',
  rARUSensorsTempLongDecRateThreshTime => '1.3.6.1.4.1.318.1.1.14.6.4.1.15',
  rARUSensorsTempLongIncRateThreshValue => '1.3.6.1.4.1.318.1.1.14.6.4.1.16',
  rARUSensorsTempLongIncRateThreshTime => '1.3.6.1.4.1.318.1.1.14.6.4.1.17',
  xPDU => '1.3.6.1.4.1.318.1.1.15',
  xPDUIdent => '1.3.6.1.4.1.318.1.1.15.1',
  xPDUIdentProductName => '1.3.6.1.4.1.318.1.1.15.1.1',
  xPDUIdentHardwareRev => '1.3.6.1.4.1.318.1.1.15.1.2',
  xPDUIdentFirmwareAppRev => '1.3.6.1.4.1.318.1.1.15.1.3',
  xPDUIdentFirmwareAppOSRev => '1.3.6.1.4.1.318.1.1.15.1.4',
  xPDUIdentFirmwareControllerRev => '1.3.6.1.4.1.318.1.1.15.1.5',
  xPDUIdentDateOfManufacture => '1.3.6.1.4.1.318.1.1.15.1.6',
  xPDUIdentModelNumber => '1.3.6.1.4.1.318.1.1.15.1.7',
  xPDUIdentSerialNumber => '1.3.6.1.4.1.318.1.1.15.1.8',
  xPDUDevice => '1.3.6.1.4.1.318.1.1.15.2',
  xPDUDeviceNominalMainInputVoltage => '1.3.6.1.4.1.318.1.1.15.2.1',
  xPDUDeviceServiceType => '1.3.6.1.4.1.318.1.1.15.2.2',
  xPDUDeviceServiceTypeDefinition => 'PowerNet-MIB::xPDUDeviceServiceType',
  xPDUDeviceNominalOutputVoltage => '1.3.6.1.4.1.318.1.1.15.2.3',
  xPDUDeviceMainInputBreakerRating => '1.3.6.1.4.1.318.1.1.15.2.4',
  xPDUDevicePanelBreakerRating => '1.3.6.1.4.1.318.1.1.15.2.5',
  xPDUDeviceTransformerPresent => '1.3.6.1.4.1.318.1.1.15.2.6',
  xPDUDeviceTransformerPresentDefinition => 'PowerNet-MIB::xPDUDeviceTransformerPresent',
  xPDUDeviceLoadTieBreakerPresent => '1.3.6.1.4.1.318.1.1.15.2.7',
  xPDUDeviceLoadTieBreakerPresentDefinition => 'PowerNet-MIB::xPDUDeviceLoadTieBreakerPresent',
  xPDUDeviceLoadTestPortPresent => '1.3.6.1.4.1.318.1.1.15.2.8',
  xPDUDeviceLoadTestPortPresentDefinition => 'PowerNet-MIB::xPDUDeviceLoadTestPortPresent',
  xPDUDeviceFusesPresent => '1.3.6.1.4.1.318.1.1.15.2.9',
  xPDUDeviceFusesPresentDefinition => 'PowerNet-MIB::xPDUDeviceFusesPresent',
  xPDUDeviceFansPresent => '1.3.6.1.4.1.318.1.1.15.2.10',
  xPDUDeviceFansPresentDefinition => 'PowerNet-MIB::xPDUDeviceFansPresent',
  xPDUDeviceBypassInputPresent => '1.3.6.1.4.1.318.1.1.15.2.11',
  xPDUDeviceBypassInputPresentDefinition => 'PowerNet-MIB::xPDUDeviceBypassInputPresent',
  xPDUDeviceCrossTieOutputPresent => '1.3.6.1.4.1.318.1.1.15.2.12',
  xPDUDeviceCrossTieOutputPresentDefinition => 'PowerNet-MIB::xPDUDeviceCrossTieOutputPresent',
  xPDUDeviceEarthGroundMonitorPresent => '1.3.6.1.4.1.318.1.1.15.2.13',
  xPDUDeviceEarthGroundMonitorPresentDefinition => 'PowerNet-MIB::xPDUDeviceEarthGroundMonitorPresent',
  xPDUDeviceInfraStruXureType => '1.3.6.1.4.1.318.1.1.15.2.14',
  xPDUDeviceInfraStruXureTypeDefinition => 'PowerNet-MIB::xPDUDeviceInfraStruXureType',
  xPDUACMonitoringPoint => '1.3.6.1.4.1.318.1.1.15.3',
  xPDUMainInput => '1.3.6.1.4.1.318.1.1.15.3.1',
  xPDUMainInputOverVoltThreshold => '1.3.6.1.4.1.318.1.1.15.3.1.1',
  xPDUMainInputUnderVoltThreshold => '1.3.6.1.4.1.318.1.1.15.3.1.2',
  xPDUMainInputVoltageTableSize => '1.3.6.1.4.1.318.1.1.15.3.1.3',
  xPDUMainInputVoltagePhaseTable => '1.3.6.1.4.1.318.1.1.15.3.1.4',
  xPDUMainInputVoltagePhaseEntry => '1.3.6.1.4.1.318.1.1.15.3.1.4.1',
  xPDUMainInputVoltagePhaseIndex => '1.3.6.1.4.1.318.1.1.15.3.1.4.1.1',
  xPDUMainInputVoltagePhaseIndexDefinition => 'PowerNet-MIB::xPDUMainInputVoltagePhaseIndex',
  xPDUMainInputVoltageLtoL => '1.3.6.1.4.1.318.1.1.15.3.1.4.1.2',
  xPDUMainInputVoltageLtoN => '1.3.6.1.4.1.318.1.1.15.3.1.4.1.3',
  xPDUBypassInput => '1.3.6.1.4.1.318.1.1.15.3.2',
  xPDUBypassInputOverVoltThreshold => '1.3.6.1.4.1.318.1.1.15.3.2.1',
  xPDUBypassInputUnderVoltThreshold => '1.3.6.1.4.1.318.1.1.15.3.2.2',
  xPDUBypassInputVoltagePhaseTableSize => '1.3.6.1.4.1.318.1.1.15.3.2.3',
  xPDUBypassInputVoltagePhaseTable => '1.3.6.1.4.1.318.1.1.15.3.2.4',
  xPDUBypassInputVoltagePhaseEntry => '1.3.6.1.4.1.318.1.1.15.3.2.4.1',
  xPDUBypassInputVoltagePhaseIndex => '1.3.6.1.4.1.318.1.1.15.3.2.4.1.1',
  xPDUBypassInputVoltagePhaseIndexDefinition => 'PowerNet-MIB::xPDUBypassInputVoltagePhaseIndex',
  xPDUBypassInputVoltageLtoL => '1.3.6.1.4.1.318.1.1.15.3.2.4.1.2',
  xPDUBypassInputVoltageLtoN => '1.3.6.1.4.1.318.1.1.15.3.2.4.1.3',
  xPDUUPSInput => '1.3.6.1.4.1.318.1.1.15.3.3',
  xPDUUPSInputVoltagePhaseTableSize => '1.3.6.1.4.1.318.1.1.15.3.3.1',
  xPDUUPSInputVoltagePhaseTable => '1.3.6.1.4.1.318.1.1.15.3.3.2',
  xPDUUPSInputVoltagePhaseEntry => '1.3.6.1.4.1.318.1.1.15.3.3.2.1',
  xPDUUPSInputVoltagePhaseIndex => '1.3.6.1.4.1.318.1.1.15.3.3.2.1.1',
  xPDUUPSInputVoltagePhaseIndexDefinition => 'PowerNet-MIB::xPDUUPSInputVoltagePhaseIndex',
  xPDUUPSInputVoltageLtoNPresent => '1.3.6.1.4.1.318.1.1.15.3.3.2.1.2',
  xPDUUPSInputVoltageLtoNPresentDefinition => 'PowerNet-MIB::xPDUUPSInputVoltageLtoNPresent',
  xPDUSystemOutput => '1.3.6.1.4.1.318.1.1.15.3.4',
  xPDUSystemOutputFrequency => '1.3.6.1.4.1.318.1.1.15.3.4.1',
  xPDUSystemOutputNeutralCurrent => '1.3.6.1.4.1.318.1.1.15.3.4.2',
  xPDUSystemOutputTotalPower => '1.3.6.1.4.1.318.1.1.15.3.4.3',
  xPDUSystemOutputTotalApparentPower => '1.3.6.1.4.1.318.1.1.15.3.4.4',
  xPDUSystemOutputTotalPowerFactor => '1.3.6.1.4.1.318.1.1.15.3.4.5',
  xPDUSystemOutputFrequencyTolerance => '1.3.6.1.4.1.318.1.1.15.3.4.6',
  xPDUSystemOutputFrequencyToleranceDefinition => 'PowerNet-MIB::xPDUSystemOutputFrequencyTolerance',
  xPDUSystemOutputMaxKWPower => '1.3.6.1.4.1.318.1.1.15.3.4.7',
  xPDUSystemOutputOverVoltThreshold => '1.3.6.1.4.1.318.1.1.15.3.4.8',
  xPDUSystemOutputUnderVoltThreshold => '1.3.6.1.4.1.318.1.1.15.3.4.9',
  xPDUSystemOutputOverCurrentThreshold => '1.3.6.1.4.1.318.1.1.15.3.4.10',
  xPDUSystemOutputOverCurrentNeutralThreshold => '1.3.6.1.4.1.318.1.1.15.3.4.11',
  xPDUSystemOutputUnderCurrentThreshold => '1.3.6.1.4.1.318.1.1.15.3.4.12',
  xPDUSystemOutputTableSize => '1.3.6.1.4.1.318.1.1.15.3.4.13',
  xPDUSystemOutputPhaseTable => '1.3.6.1.4.1.318.1.1.15.3.4.14',
  xPDUSystemOutputPhaseEntry => '1.3.6.1.4.1.318.1.1.15.3.4.14.1',
  xPDUSystemOutputPhaseIndex => '1.3.6.1.4.1.318.1.1.15.3.4.14.1.1',
  xPDUSystemOutputPhaseIndexDefinition => 'PowerNet-MIB::xPDUSystemOutputPhaseIndex',
  xPDUSystemOutputVoltageLtoL => '1.3.6.1.4.1.318.1.1.15.3.4.14.1.2',
  xPDUSystemOutputVoltageLtoN => '1.3.6.1.4.1.318.1.1.15.3.4.14.1.3',
  xPDUSystemOutputPhaseCurrent => '1.3.6.1.4.1.318.1.1.15.3.4.14.1.4',
  xPDUSystemOutputPower => '1.3.6.1.4.1.318.1.1.15.3.4.14.1.5',
  xPDUSystemOutputApparentPower => '1.3.6.1.4.1.318.1.1.15.3.4.14.1.6',
  xPDUSystemOutputPowerFactor => '1.3.6.1.4.1.318.1.1.15.3.4.14.1.7',
  xPDUGroundMonitorPoint => '1.3.6.1.4.1.318.1.1.15.3.5',
  xPDUGroundCurrent => '1.3.6.1.4.1.318.1.1.15.3.5.1',
  xPDUGroundCurrentThreshold => '1.3.6.1.4.1.318.1.1.15.3.5.2',
  xPDUCircuitBreakers => '1.3.6.1.4.1.318.1.1.15.4',
  xPDUSystemBreakers => '1.3.6.1.4.1.318.1.1.15.4.1',
  xPDUSystemBreakerTableSize => '1.3.6.1.4.1.318.1.1.15.4.1.1',
  xPDUSystemBreakerTable => '1.3.6.1.4.1.318.1.1.15.4.1.2',
  xPDUSystemBreakerEntry => '1.3.6.1.4.1.318.1.1.15.4.1.2.1',
  xPDUSystemBreakerTableIndex => '1.3.6.1.4.1.318.1.1.15.4.1.2.1.1',
  xPDUSystemBreakerDescription => '1.3.6.1.4.1.318.1.1.15.4.1.2.1.2',
  xPDUSystemBreakerPosition => '1.3.6.1.4.1.318.1.1.15.4.1.2.1.3',
  xPDUSystemBreakerPositionDefinition => 'PowerNet-MIB::xPDUSystemBreakerPosition',
  xPDUBranchBreakers => '1.3.6.1.4.1.318.1.1.15.4.2',
  xPDUNumOfBranchBreakers => '1.3.6.1.4.1.318.1.1.15.4.2.1',
  xPDUBranchBreakerTableSize => '1.3.6.1.4.1.318.1.1.15.4.2.2',
  xPDUBranchBreakerTable => '1.3.6.1.4.1.318.1.1.15.4.2.3',
  xPDUBranchBreakerEntry => '1.3.6.1.4.1.318.1.1.15.4.2.3.1',
  xPDUBranchBreakerTableIndex => '1.3.6.1.4.1.318.1.1.15.4.2.3.1.1',
  xPDUBranchBreakerRating => '1.3.6.1.4.1.318.1.1.15.4.2.3.1.2',
  xPDUBranchBreakerRDPFeed => '1.3.6.1.4.1.318.1.1.15.4.2.3.1.3',
  xPDUBranchBreakerRDPFeedDefinition => 'PowerNet-MIB::xPDUBranchBreakerRDPFeed',
  xPDUBranchBreakerTieIndicator => '1.3.6.1.4.1.318.1.1.15.4.2.3.1.4',
  xPDUBranchBreakerTieIndicatorDefinition => 'PowerNet-MIB::xPDUBranchBreakerTieIndicator',
  xPDUBranchBreakerCurrent => '1.3.6.1.4.1.318.1.1.15.4.2.3.1.5',
  xPDUBranchBreakerOverCurrentThreshold => '1.3.6.1.4.1.318.1.1.15.4.2.3.1.6',
  xPDUBranchBreakerUnderCurrentThreshold => '1.3.6.1.4.1.318.1.1.15.4.2.3.1.7',
  xPDUBranchBreakerMaxCurrentThreshold => '1.3.6.1.4.1.318.1.1.15.4.2.3.1.8',
  xPDUBranchBreakerMinCurrentThreshold => '1.3.6.1.4.1.318.1.1.15.4.2.3.1.9',
  xPDUBranchBreakerName => '1.3.6.1.4.1.318.1.1.15.4.2.3.1.10',
  xPDUBranchBreakerLocation => '1.3.6.1.4.1.318.1.1.15.4.2.3.1.11',
  xPDUInputContacts => '1.3.6.1.4.1.318.1.1.15.5',
  xPDUInputContactNumContacts => '1.3.6.1.4.1.318.1.1.15.5.1',
  xPDUInputContactTableSize => '1.3.6.1.4.1.318.1.1.15.5.2',
  xPDUInputContactTable => '1.3.6.1.4.1.318.1.1.15.5.3',
  xPDUInputContactEntry => '1.3.6.1.4.1.318.1.1.15.5.3.1',
  xPDUInputContactNumber => '1.3.6.1.4.1.318.1.1.15.5.3.1.1',
  xPDUInputContactName => '1.3.6.1.4.1.318.1.1.15.5.3.1.2',
  xPDUInputContactNormalState => '1.3.6.1.4.1.318.1.1.15.5.3.1.3',
  xPDUInputContactNormalStateDefinition => 'PowerNet-MIB::xPDUInputContactNormalState',
  xPDUInputContactCurrentState => '1.3.6.1.4.1.318.1.1.15.5.3.1.4',
  xPDUInputContactCurrentStateDefinition => 'PowerNet-MIB::xPDUInputContactCurrentState',
  xPDUOutputRelays => '1.3.6.1.4.1.318.1.1.15.6',
  xPDUOutputRelaysNumRelays => '1.3.6.1.4.1.318.1.1.15.6.1',
  xPDUOutputRelaysTableSize => '1.3.6.1.4.1.318.1.1.15.6.2',
  xPDUOutputRelayTable => '1.3.6.1.4.1.318.1.1.15.6.3',
  xPDUOutputRelayEntry => '1.3.6.1.4.1.318.1.1.15.6.3.1',
  xPDUOutputRelayNumber => '1.3.6.1.4.1.318.1.1.15.6.3.1.1',
  xPDUOutputRelayName => '1.3.6.1.4.1.318.1.1.15.6.3.1.2',
  xPDUOutputRelayNormalState => '1.3.6.1.4.1.318.1.1.15.6.3.1.3',
  xPDUOutputRelayNormalStateDefinition => 'PowerNet-MIB::xPDUOutputRelayNormalState',
  xPDUOutputRelayCurrentState => '1.3.6.1.4.1.318.1.1.15.6.3.1.4',
  xPDUOutputRelayCurrentStateDefinition => 'PowerNet-MIB::xPDUOutputRelayCurrentState',
  xPDUMiscGroup => '1.3.6.1.4.1.318.1.1.15.7',
  xPDUEPOMode => '1.3.6.1.4.1.318.1.1.15.7.1',
  xPDUEPOModeDefinition => 'PowerNet-MIB::xPDUEPOMode',
  xPDUTransformTempStatus => '1.3.6.1.4.1.318.1.1.15.7.2',
  xPDUTransformTempStatusDefinition => 'PowerNet-MIB::xPDUTransformTempStatus',
  xPDUCoolingFanStatus => '1.3.6.1.4.1.318.1.1.15.7.3',
  xPDUCoolingFanStatusDefinition => 'PowerNet-MIB::xPDUCoolingFanStatus',
  battMan => '1.3.6.1.4.1.318.1.1.16',
  battManIdent => '1.3.6.1.4.1.318.1.1.16.1',
  battManIdentProductName => '1.3.6.1.4.1.318.1.1.16.1.1',
  battManIdentHardwareRev => '1.3.6.1.4.1.318.1.1.16.1.2',
  battManIdentFirmwareRev => '1.3.6.1.4.1.318.1.1.16.1.3',
  battManIdentDateOfManufacture => '1.3.6.1.4.1.318.1.1.16.1.4',
  battManIdentModelNumber => '1.3.6.1.4.1.318.1.1.16.1.5',
  battManIdentSerialNumber => '1.3.6.1.4.1.318.1.1.16.1.6',
  battManSystemCalib => '1.3.6.1.4.1.318.1.1.16.2',
  battManOhmicValueCorrectionFactor => '1.3.6.1.4.1.318.1.1.16.2.1',
  battManUnitCalib => '1.3.6.1.4.1.318.1.1.16.3',
  battManUnitCalibTableSize => '1.3.6.1.4.1.318.1.1.16.3.1',
  battManUnitCalibTable => '1.3.6.1.4.1.318.1.1.16.3.2',
  battManUnitCalibEntry => '1.3.6.1.4.1.318.1.1.16.3.2.1',
  battManUnitCalibIndex => '1.3.6.1.4.1.318.1.1.16.3.2.1.1',
  battManUnitSerialNumber => '1.3.6.1.4.1.318.1.1.16.3.2.1.2',
  battManBatteryVoltageZeroCalib => '1.3.6.1.4.1.318.1.1.16.3.2.1.3',
  battManBatteryVoltageSpanCalib => '1.3.6.1.4.1.318.1.1.16.3.2.1.4',
  battManStringCalib => '1.3.6.1.4.1.318.1.1.16.4',
  battManStringCalibTableSize => '1.3.6.1.4.1.318.1.1.16.4.1',
  battManStringCalibTable => '1.3.6.1.4.1.318.1.1.16.4.2',
  battManStringCalibEntry => '1.3.6.1.4.1.318.1.1.16.4.2.1',
  battManStringCalibIndex => '1.3.6.1.4.1.318.1.1.16.4.2.1.1',
  battManDCCurrentZeroCalib => '1.3.6.1.4.1.318.1.1.16.4.2.1.2',
  battManACCurrentZeroCalib => '1.3.6.1.4.1.318.1.1.16.4.2.1.3',
  battManProbeRange => '1.3.6.1.4.1.318.1.1.16.4.2.1.4',
  battManProbeRangeDefinition => 'PowerNet-MIB::battManProbeRange',
  battManBatteryCalib => '1.3.6.1.4.1.318.1.1.16.5',
  battManString1BatteryCalibTableSize => '1.3.6.1.4.1.318.1.1.16.5.1',
  battManString1BatteryCalibTable => '1.3.6.1.4.1.318.1.1.16.5.2',
  battManString1BatteryCalibEntry => '1.3.6.1.4.1.318.1.1.16.5.2.1',
  battManString1BatteryCalibIndex => '1.3.6.1.4.1.318.1.1.16.5.2.1.1',
  battManString1BatteryInterTierOhmicValue => '1.3.6.1.4.1.318.1.1.16.5.2.1.2',
  battManString2BatteryCalibTableSize => '1.3.6.1.4.1.318.1.1.16.5.3',
  battManString2BatteryCalibTable => '1.3.6.1.4.1.318.1.1.16.5.4',
  battManString2BatteryCalibEntry => '1.3.6.1.4.1.318.1.1.16.5.4.1',
  battManString2BatteryCalibIndex => '1.3.6.1.4.1.318.1.1.16.5.4.1.1',
  battManString2BatteryInterTierOhmicValue => '1.3.6.1.4.1.318.1.1.16.5.4.1.2',
  battManConfig => '1.3.6.1.4.1.318.1.1.16.6',
  battManConfigApplication => '1.3.6.1.4.1.318.1.1.16.6.1',
  battManConfigApplicationDefinition => 'PowerNet-MIB::battManConfigApplication',
  battManConfigBatteryChemistry => '1.3.6.1.4.1.318.1.1.16.6.2',
  battManConfigBatteryChemistryDefinition => 'PowerNet-MIB::battManConfigBatteryChemistry',
  battManConfigBatteryAHCapacity => '1.3.6.1.4.1.318.1.1.16.6.3',
  battManConfigNumberofStrings => '1.3.6.1.4.1.318.1.1.16.6.4',
  battManConfigBatteriesperString => '1.3.6.1.4.1.318.1.1.16.6.5',
  battManConfigCellsperBattery => '1.3.6.1.4.1.318.1.1.16.6.6',
  battManConfigCellsperBatteryDefinition => 'PowerNet-MIB::battManConfigCellsperBattery',
  battManConfigMinCellVoltage => '1.3.6.1.4.1.318.1.1.16.6.7',
  battManConfigMaxCellVoltage => '1.3.6.1.4.1.318.1.1.16.6.8',
  battManConfigMaxPilotTempF => '1.3.6.1.4.1.318.1.1.16.6.9',
  battManConfigMaxPilotTempC => '1.3.6.1.4.1.318.1.1.16.6.10',
  battManConfigMaxAmbientTempF => '1.3.6.1.4.1.318.1.1.16.6.11',
  battManConfigMaxAmbientTempC => '1.3.6.1.4.1.318.1.1.16.6.12',
  battManConfigMinAmbientTempF => '1.3.6.1.4.1.318.1.1.16.6.13',
  battManConfigMinAmbientTempC => '1.3.6.1.4.1.318.1.1.16.6.14',
  battManConfigMaxRippleCurrent => '1.3.6.1.4.1.318.1.1.16.6.15',
  battManConfigMaxCurrentAcceptanceDeviation => '1.3.6.1.4.1.318.1.1.16.6.16',
  battManConfigMonitorWireLength => '1.3.6.1.4.1.318.1.1.16.6.17',
  battManConfigMonitorWireLengthDefinition => 'PowerNet-MIB::battManConfigMonitorWireLength',
  battManConfigDischargeVoltageAlarmLevel => '1.3.6.1.4.1.318.1.1.16.6.18',
  battManConfigAutoAnnunciatorReset => '1.3.6.1.4.1.318.1.1.16.6.19',
  battManConfigAutoAnnunciatorResetDefinition => 'PowerNet-MIB::battManConfigAutoAnnunciatorReset',
  battManConfigSuspendCellVoltage => '1.3.6.1.4.1.318.1.1.16.6.20',
  battManConfigOhmicTestWaitTime => '1.3.6.1.4.1.318.1.1.16.6.21',
  battManConfigNumberOfBoosts => '1.3.6.1.4.1.318.1.1.16.6.22',
  battManAlarm => '1.3.6.1.4.1.318.1.1.16.7',
  battManAlarmManagementController => '1.3.6.1.4.1.318.1.1.16.7.1',
  battManAlarmManagementControllerDefinition => 'PowerNet-MIB::battManAlarmManagementController',
  battManAlarmBatteries => '1.3.6.1.4.1.318.1.1.16.7.2',
  battManAlarmBatteriesDefinition => 'PowerNet-MIB::battManAlarmBatteries',
  battManAlarmCharger => '1.3.6.1.4.1.318.1.1.16.7.3',
  battManAlarmChargerDefinition => 'PowerNet-MIB::battManAlarmCharger',
  battManAlarmEnvironment => '1.3.6.1.4.1.318.1.1.16.7.4',
  battManAlarmEnvironmentDefinition => 'PowerNet-MIB::battManAlarmEnvironment',
  battManSystemStatus => '1.3.6.1.4.1.318.1.1.16.8',
  battManSystemAmbientTempC => '1.3.6.1.4.1.318.1.1.16.8.1',
  battManSystemAmbientTempF => '1.3.6.1.4.1.318.1.1.16.8.2',
  battManSystemPilotTempC => '1.3.6.1.4.1.318.1.1.16.8.3',
  battManSystemPilotTempF => '1.3.6.1.4.1.318.1.1.16.8.4',
  battManSystemAmbientHighTempAlarm => '1.3.6.1.4.1.318.1.1.16.8.5',
  battManSystemAmbientHighTempAlarmDefinition => 'PowerNet-MIB::battManSystemAmbientHighTempAlarm',
  battManSystemAmbientLowTempAlarm => '1.3.6.1.4.1.318.1.1.16.8.6',
  battManSystemAmbientLowTempAlarmDefinition => 'PowerNet-MIB::battManSystemAmbientLowTempAlarm',
  battManSystemPilotBatteryHighTempAlarm => '1.3.6.1.4.1.318.1.1.16.8.7',
  battManSystemPilotBatteryHighTempAlarmDefinition => 'PowerNet-MIB::battManSystemPilotBatteryHighTempAlarm',
  battManSystemPilotProbeDisconnected => '1.3.6.1.4.1.318.1.1.16.8.8',
  battManSystemPilotProbeDisconnectedDefinition => 'PowerNet-MIB::battManSystemPilotProbeDisconnected',
  battManSystemAmbientProbeDisconnected => '1.3.6.1.4.1.318.1.1.16.8.9',
  battManSystemAmbientProbeDisconnectedDefinition => 'PowerNet-MIB::battManSystemAmbientProbeDisconnected',
  battManSystemConfigurationInvalid => '1.3.6.1.4.1.318.1.1.16.8.10',
  battManSystemConfigurationInvalidDefinition => 'PowerNet-MIB::battManSystemConfigurationInvalid',
  battManSystemSuspendVoltage => '1.3.6.1.4.1.318.1.1.16.8.11',
  battManSystemSuspendVoltageDefinition => 'PowerNet-MIB::battManSystemSuspendVoltage',
  battManStringStatus => '1.3.6.1.4.1.318.1.1.16.9',
  battManStringTableSize => '1.3.6.1.4.1.318.1.1.16.9.1',
  battManStringTable => '1.3.6.1.4.1.318.1.1.16.9.2',
  battManStringEntry => '1.3.6.1.4.1.318.1.1.16.9.2.1',
  battManStringIndex => '1.3.6.1.4.1.318.1.1.16.9.2.1.1',
  battManStringCurrent => '1.3.6.1.4.1.318.1.1.16.9.2.1.2',
  battManStringRippleCurrent => '1.3.6.1.4.1.318.1.1.16.9.2.1.3',
  battManStringChargerHighVoltageAlarm => '1.3.6.1.4.1.318.1.1.16.9.2.1.4',
  battManStringChargerHighVoltageAlarmDefinition => 'PowerNet-MIB::battManStringChargerHighVoltageAlarm',
  battManStringChargerLowVoltageAlarm => '1.3.6.1.4.1.318.1.1.16.9.2.1.5',
  battManStringChargerLowVoltageAlarmDefinition => 'PowerNet-MIB::battManStringChargerLowVoltageAlarm',
  battManStringCurrentProbeDisconnected => '1.3.6.1.4.1.318.1.1.16.9.2.1.6',
  battManStringCurrentProbeDisconnectedDefinition => 'PowerNet-MIB::battManStringCurrentProbeDisconnected',
  battManStringOnBattery => '1.3.6.1.4.1.318.1.1.16.9.2.1.7',
  battManStringOnBatteryDefinition => 'PowerNet-MIB::battManStringOnBattery',
  battManStringHighRippleCurrent => '1.3.6.1.4.1.318.1.1.16.9.2.1.8',
  battManStringHighRippleCurrentDefinition => 'PowerNet-MIB::battManStringHighRippleCurrent',
  battManStringVoltage => '1.3.6.1.4.1.318.1.1.16.9.2.1.9',
  battManStringDischargeLess5Seconds => '1.3.6.1.4.1.318.1.1.16.9.2.1.10',
  battManStringDischarge5to10Seconds => '1.3.6.1.4.1.318.1.1.16.9.2.1.11',
  battManStringDischarge10to60Seconds => '1.3.6.1.4.1.318.1.1.16.9.2.1.12',
  battManStringDischargeMore60Seconds => '1.3.6.1.4.1.318.1.1.16.9.2.1.13',
  battManBatteryStatus => '1.3.6.1.4.1.318.1.1.16.10',
  battManString1BatteryTableSize => '1.3.6.1.4.1.318.1.1.16.10.1',
  battManString1BatteryTable => '1.3.6.1.4.1.318.1.1.16.10.2',
  battManString1BatteryEntry => '1.3.6.1.4.1.318.1.1.16.10.2.1',
  battManString1BatteryIndex => '1.3.6.1.4.1.318.1.1.16.10.2.1.1',
  battManString1BatteryVoltage => '1.3.6.1.4.1.318.1.1.16.10.2.1.2',
  battManString1BatteryLowestVoltage => '1.3.6.1.4.1.318.1.1.16.10.2.1.3',
  battManString1BatteryCellShorted => '1.3.6.1.4.1.318.1.1.16.10.2.1.4',
  battManString1BatteryCellShortedDefinition => 'PowerNet-MIB::battManString1BatteryCellShorted',
  battManString1BatteryOpenFuseOrConnection => '1.3.6.1.4.1.318.1.1.16.10.2.1.5',
  battManString1BatteryOpenFuseOrConnectionDefinition => 'PowerNet-MIB::battManString1BatteryOpenFuseOrConnection',
  battManString1BatteryLowCapacity => '1.3.6.1.4.1.318.1.1.16.10.2.1.6',
  battManString1BatteryLowCapacityDefinition => 'PowerNet-MIB::battManString1BatteryLowCapacity',
  battManString1BatteryHighOhmicValue => '1.3.6.1.4.1.318.1.1.16.10.2.1.7',
  battManString1BatteryHighOhmicValueDefinition => 'PowerNet-MIB::battManString1BatteryHighOhmicValue',
  battManString1BatteryThermalRunaway => '1.3.6.1.4.1.318.1.1.16.10.2.1.8',
  battManString1BatteryThermalRunawayDefinition => 'PowerNet-MIB::battManString1BatteryThermalRunaway',
  battManString1BatteryDryout => '1.3.6.1.4.1.318.1.1.16.10.2.1.9',
  battManString1BatteryDryoutDefinition => 'PowerNet-MIB::battManString1BatteryDryout',
  battManString1BatteryUserHighVoltageAlarm => '1.3.6.1.4.1.318.1.1.16.10.2.1.10',
  battManString1BatteryUserHighVoltageAlarmDefinition => 'PowerNet-MIB::battManString1BatteryUserHighVoltageAlarm',
  battManString1BatteryUserLowVoltageAlarm => '1.3.6.1.4.1.318.1.1.16.10.2.1.11',
  battManString1BatteryUserLowVoltageAlarmDefinition => 'PowerNet-MIB::battManString1BatteryUserLowVoltageAlarm',
  battManString1BatteryChemHighVoltageAlarm => '1.3.6.1.4.1.318.1.1.16.10.2.1.12',
  battManString1BatteryChemHighVoltageAlarmDefinition => 'PowerNet-MIB::battManString1BatteryChemHighVoltageAlarm',
  battManString1BatteryChemLowVoltageAlarm => '1.3.6.1.4.1.318.1.1.16.10.2.1.13',
  battManString1BatteryChemLowVoltageAlarmDefinition => 'PowerNet-MIB::battManString1BatteryChemLowVoltageAlarm',
  battManString1BatteryOpenCell => '1.3.6.1.4.1.318.1.1.16.10.2.1.14',
  battManString1BatteryOpenCellDefinition => 'PowerNet-MIB::battManString1BatteryOpenCell',
  battManString2BatteryTableSize => '1.3.6.1.4.1.318.1.1.16.10.3',
  battManString2BatteryTable => '1.3.6.1.4.1.318.1.1.16.10.4',
  battManString2BatteryEntry => '1.3.6.1.4.1.318.1.1.16.10.4.1',
  battManString2BatteryIndex => '1.3.6.1.4.1.318.1.1.16.10.4.1.1',
  battManString2BatteryVoltage => '1.3.6.1.4.1.318.1.1.16.10.4.1.2',
  battManString2BatteryLowestVoltage => '1.3.6.1.4.1.318.1.1.16.10.4.1.3',
  battManString2BatteryCellShorted => '1.3.6.1.4.1.318.1.1.16.10.4.1.4',
  battManString2BatteryCellShortedDefinition => 'PowerNet-MIB::battManString2BatteryCellShorted',
  battManString2BatteryOpenFuseOrConnection => '1.3.6.1.4.1.318.1.1.16.10.4.1.5',
  battManString2BatteryOpenFuseOrConnectionDefinition => 'PowerNet-MIB::battManString2BatteryOpenFuseOrConnection',
  battManString2BatteryLowCapacity => '1.3.6.1.4.1.318.1.1.16.10.4.1.6',
  battManString2BatteryLowCapacityDefinition => 'PowerNet-MIB::battManString2BatteryLowCapacity',
  battManString2BatteryHighOhmicValue => '1.3.6.1.4.1.318.1.1.16.10.4.1.7',
  battManString2BatteryHighOhmicValueDefinition => 'PowerNet-MIB::battManString2BatteryHighOhmicValue',
  battManString2BatteryThermalRunaway => '1.3.6.1.4.1.318.1.1.16.10.4.1.8',
  battManString2BatteryThermalRunawayDefinition => 'PowerNet-MIB::battManString2BatteryThermalRunaway',
  battManString2BatteryDryout => '1.3.6.1.4.1.318.1.1.16.10.4.1.9',
  battManString2BatteryDryoutDefinition => 'PowerNet-MIB::battManString2BatteryDryout',
  battManString2BatteryUserHighVoltageAlarm => '1.3.6.1.4.1.318.1.1.16.10.4.1.10',
  battManString2BatteryUserHighVoltageAlarmDefinition => 'PowerNet-MIB::battManString2BatteryUserHighVoltageAlarm',
  battManString2BatteryUserLowVoltageAlarm => '1.3.6.1.4.1.318.1.1.16.10.4.1.11',
  battManString2BatteryUserLowVoltageAlarmDefinition => 'PowerNet-MIB::battManString2BatteryUserLowVoltageAlarm',
  battManString2BatteryChemHighVoltageAlarm => '1.3.6.1.4.1.318.1.1.16.10.4.1.12',
  battManString2BatteryChemHighVoltageAlarmDefinition => 'PowerNet-MIB::battManString2BatteryChemHighVoltageAlarm',
  battManString2BatteryChemLowVoltageAlarm => '1.3.6.1.4.1.318.1.1.16.10.4.1.13',
  battManString2BatteryChemLowVoltageAlarmDefinition => 'PowerNet-MIB::battManString2BatteryChemLowVoltageAlarm',
  battManString2BatteryOpenCell => '1.3.6.1.4.1.318.1.1.16.10.4.1.14',
  battManString2BatteryOpenCellDefinition => 'PowerNet-MIB::battManString2BatteryOpenCell',
  battManInputContactStatus => '1.3.6.1.4.1.318.1.1.16.11',
  battManInputContactTableSize => '1.3.6.1.4.1.318.1.1.16.11.1',
  battManInputContactTable => '1.3.6.1.4.1.318.1.1.16.11.2',
  battManInputContactEntry => '1.3.6.1.4.1.318.1.1.16.11.2.1',
  battManInputContactIndex => '1.3.6.1.4.1.318.1.1.16.11.2.1.1',
  battManInputContactName => '1.3.6.1.4.1.318.1.1.16.11.2.1.2',
  battManInputContactAlarmState => '1.3.6.1.4.1.318.1.1.16.11.2.1.3',
  battManInputContactAlarmStateDefinition => 'PowerNet-MIB::battManInputContactAlarmState',
  battManInputContactState => '1.3.6.1.4.1.318.1.1.16.11.2.1.4',
  battManInputContactStateDefinition => 'PowerNet-MIB::battManInputContactState',
  battManInputContactNormalState => '1.3.6.1.4.1.318.1.1.16.11.2.1.5',
  battManInputContactNormalStateDefinition => 'PowerNet-MIB::battManInputContactNormalState',
  battManInputContactAlarmDelay => '1.3.6.1.4.1.318.1.1.16.11.2.1.6',
  battManControl => '1.3.6.1.4.1.318.1.1.16.12',
  battManRemoteAnnunciatorReset => '1.3.6.1.4.1.318.1.1.16.12.1',
  battManRemoteAnnunciatorResetDefinition => 'PowerNet-MIB::battManRemoteAnnunciatorReset',
  battManResetChargeCurrentDeviationBenchmark => '1.3.6.1.4.1.318.1.1.16.12.2',
  battManResetChargeCurrentDeviationBenchmarkDefinition => 'PowerNet-MIB::battManResetChargeCurrentDeviationBenchmark',
  battManResetLowestDischargeVoltages => '1.3.6.1.4.1.318.1.1.16.12.3',
  battManResetLowestDischargeVoltagesDefinition => 'PowerNet-MIB::battManResetLowestDischargeVoltages',
  battManResetDischargeCounters => '1.3.6.1.4.1.318.1.1.16.12.4',
  battManResetDischargeCountersDefinition => 'PowerNet-MIB::battManResetDischargeCounters',
  battManTestResults => '1.3.6.1.4.1.318.1.1.16.13',
  battManString1OhmicValueLastDischargeInfo => '1.3.6.1.4.1.318.1.1.16.13.1',
  battManString1OhmicValueTableSize => '1.3.6.1.4.1.318.1.1.16.13.2',
  battManString1OhmicValueTable => '1.3.6.1.4.1.318.1.1.16.13.3',
  battManString1OhmicValueEntry => '1.3.6.1.4.1.318.1.1.16.13.3.1',
  battManString1OhmicValueIndex => '1.3.6.1.4.1.318.1.1.16.13.3.1.1',
  battManString1OhmicValueData => '1.3.6.1.4.1.318.1.1.16.13.3.1.2',
  battManString1ResponseTestChangeTableSize => '1.3.6.1.4.1.318.1.1.16.13.4',
  battManString1ResponseTestChangeTable => '1.3.6.1.4.1.318.1.1.16.13.5',
  battManString1ResponseTestChangeEntry => '1.3.6.1.4.1.318.1.1.16.13.5.1',
  battManString1ResponseTestChangeIndex => '1.3.6.1.4.1.318.1.1.16.13.5.1.1',
  battManString1ResponseTestChangeData => '1.3.6.1.4.1.318.1.1.16.13.5.1.2',
  battManString2OhmicValueLastDischargeInfo => '1.3.6.1.4.1.318.1.1.16.13.6',
  battManString2OhmicValueTableSize => '1.3.6.1.4.1.318.1.1.16.13.7',
  battManString2OhmicValueTable => '1.3.6.1.4.1.318.1.1.16.13.8',
  battManString2OhmicValueEntry => '1.3.6.1.4.1.318.1.1.16.13.8.1',
  battManString2OhmicValueIndex => '1.3.6.1.4.1.318.1.1.16.13.8.1.1',
  battManString2OhmicValueData => '1.3.6.1.4.1.318.1.1.16.13.8.1.2',
  battManString2ResponseTestChangeTableSize => '1.3.6.1.4.1.318.1.1.16.13.9',
  battManString2ResponseTestChangeTable => '1.3.6.1.4.1.318.1.1.16.13.10',
  battManString2ResponseTestChangeEntry => '1.3.6.1.4.1.318.1.1.16.13.10.1',
  battManString2ResponseTestChangeIndex => '1.3.6.1.4.1.318.1.1.16.13.10.1.1',
  battManString2ResponseTestChangeData => '1.3.6.1.4.1.318.1.1.16.13.10.1.2',
  battManString1ResponseTestCurrentTableSize => '1.3.6.1.4.1.318.1.1.16.13.11',
  battManString1ResponseTestCurrentTable => '1.3.6.1.4.1.318.1.1.16.13.12',
  battManString1ResponseTestCurrentEntry => '1.3.6.1.4.1.318.1.1.16.13.12.1',
  battManString1ResponseTestCurrentIndex => '1.3.6.1.4.1.318.1.1.16.13.12.1.1',
  battManString1ResponseTestCurrentData => '1.3.6.1.4.1.318.1.1.16.13.12.1.2',
  battManString2ResponseTestCurrentTableSize => '1.3.6.1.4.1.318.1.1.16.13.13',
  battManString2ResponseTestCurrentTable => '1.3.6.1.4.1.318.1.1.16.13.14',
  battManString2ResponseTestCurrentEntry => '1.3.6.1.4.1.318.1.1.16.13.14.1',
  battManString2ResponseTestCurrentIndex => '1.3.6.1.4.1.318.1.1.16.13.14.1.1',
  battManString2ResponseTestCurrentData => '1.3.6.1.4.1.318.1.1.16.13.14.1.2',
  battManString1ResponseTestCurrentBenchmarkTableSize => '1.3.6.1.4.1.318.1.1.16.13.15',
  battManString1ResponseTestCurrentBenchmarkTable => '1.3.6.1.4.1.318.1.1.16.13.16',
  battManString1ResponseTestCurrentBenchmarkEntry => '1.3.6.1.4.1.318.1.1.16.13.16.1',
  battManString1ResponseTestCurrentBenchmarkIndex => '1.3.6.1.4.1.318.1.1.16.13.16.1.1',
  battManString1ResponseTestCurrentBenchmarkData => '1.3.6.1.4.1.318.1.1.16.13.16.1.2',
  battManString2ResponseTestCurrentBenchmarkTableSize => '1.3.6.1.4.1.318.1.1.16.13.17',
  battManString2ResponseTestCurrentBenchmarkTable => '1.3.6.1.4.1.318.1.1.16.13.18',
  battManString2ResponseTestCurrentBenchmarkEntry => '1.3.6.1.4.1.318.1.1.16.13.18.1',
  battManString2ResponseTestCurrentBenchmarkIndex => '1.3.6.1.4.1.318.1.1.16.13.18.1.1',
  battManString2ResponseTestCurrentBenchmarkData => '1.3.6.1.4.1.318.1.1.16.13.18.1.2',
  battManUnitStatus => '1.3.6.1.4.1.318.1.1.16.14',
  battManUnitStatusTableSize => '1.3.6.1.4.1.318.1.1.16.14.1',
  battManUnitStatusTable => '1.3.6.1.4.1.318.1.1.16.14.2',
  battManUnitStatusEntry => '1.3.6.1.4.1.318.1.1.16.14.2.1',
  battManUnitStatusIndex => '1.3.6.1.4.1.318.1.1.16.14.2.1.1',
  battManUnitStatusSerialNumber => '1.3.6.1.4.1.318.1.1.16.14.2.1.2',
  battManUnitHardwareRev => '1.3.6.1.4.1.318.1.1.16.14.2.1.3',
  battManUnitFirmwareRev => '1.3.6.1.4.1.318.1.1.16.14.2.1.4',
  battManUnitCommLoss => '1.3.6.1.4.1.318.1.1.16.14.2.1.5',
  battManUnitCommLossDefinition => 'PowerNet-MIB::battManUnitCommLoss',
  battManUnitRelayStuck => '1.3.6.1.4.1.318.1.1.16.14.2.1.6',
  battManUnitRelayStuckDefinition => 'PowerNet-MIB::battManUnitRelayStuck',
  xATS => '1.3.6.1.4.1.318.1.1.17',
  xATSIdent => '1.3.6.1.4.1.318.1.1.17.1',
  xATSIdentProductName => '1.3.6.1.4.1.318.1.1.17.1.1',
  xATSIdentHardwareRev => '1.3.6.1.4.1.318.1.1.17.1.2',
  xATSIdentFirmwareAppRev => '1.3.6.1.4.1.318.1.1.17.1.3',
  xATSIdentFirmwareAppOSRev => '1.3.6.1.4.1.318.1.1.17.1.4',
  xATSIdentFirmwareControllerRev => '1.3.6.1.4.1.318.1.1.17.1.5',
  xATSIdentDateOfManufacture => '1.3.6.1.4.1.318.1.1.17.1.6',
  xATSIdentModelNumber => '1.3.6.1.4.1.318.1.1.17.1.7',
  xATSIdentSerialNumber => '1.3.6.1.4.1.318.1.1.17.1.8',
  xATSDevice => '1.3.6.1.4.1.318.1.1.17.2',
  xATSDeviceServiceType => '1.3.6.1.4.1.318.1.1.17.2.1',
  xATSDeviceServiceTypeDefinition => 'PowerNet-MIB::xATSDeviceServiceType',
  xATSDeviceNominalVoltage => '1.3.6.1.4.1.318.1.1.17.2.2',
  xATSDeviceNominalFrequency => '1.3.6.1.4.1.318.1.1.17.2.3',
  xATSDeviceTransferSwitchRating => '1.3.6.1.4.1.318.1.1.17.2.4',
  xATSDeviceDCBackUpPresent => '1.3.6.1.4.1.318.1.1.17.2.5',
  xATSDeviceDCBackUpPresentDefinition => 'PowerNet-MIB::xATSDeviceDCBackUpPresent',
  xATSSwitch => '1.3.6.1.4.1.318.1.1.17.3',
  xATSSwitchStatus => '1.3.6.1.4.1.318.1.1.17.3.1',
  xATSSwitchStatusSelectedSource => '1.3.6.1.4.1.318.1.1.17.3.1.1',
  xATSSwitchStatusSelectedSourceDefinition => 'PowerNet-MIB::xATSSwitchStatusSelectedSource',
  xATSSwitchStatusOperationalMode => '1.3.6.1.4.1.318.1.1.17.3.1.2',
  xATSSwitchStatusOperationalModeDefinition => 'PowerNet-MIB::xATSSwitchStatusOperationalMode',
  xATSSwitchStatusAutomaticOperationSwitch => '1.3.6.1.4.1.318.1.1.17.3.1.3',
  xATSSwitchStatusAutomaticOperationSwitchDefinition => 'PowerNet-MIB::xATSSwitchStatusAutomaticOperationSwitch',
  xATSSwitchStatusEngineStartSignal => '1.3.6.1.4.1.318.1.1.17.3.1.4',
  xATSSwitchStatusEngineStartSignalDefinition => 'PowerNet-MIB::xATSSwitchStatusEngineStartSignal',
  xATSSwitchSettings => '1.3.6.1.4.1.318.1.1.17.3.2',
  xATSSwitchSettingsLowVoltageTransferPoint => '1.3.6.1.4.1.318.1.1.17.3.2.1',
  xATSSwitchSettingsHighVoltageTransferPoint => '1.3.6.1.4.1.318.1.1.17.3.2.2',
  xATSSwitchSettingsMaxFrequencyDeviation => '1.3.6.1.4.1.318.1.1.17.3.2.3',
  xATSSwitchSettingsMinPhaseBalance => '1.3.6.1.4.1.318.1.1.17.3.2.4',
  xATSSwitchSettingsNominalRotation => '1.3.6.1.4.1.318.1.1.17.3.2.5',
  xATSSwitchSettingsNominalRotationDefinition => 'PowerNet-MIB::xATSSwitchSettingsNominalRotation',
  xATSSwitchSettingsAllowClosedTransfer => '1.3.6.1.4.1.318.1.1.17.3.2.6',
  xATSSwitchSettingsAllowClosedTransferDefinition => 'PowerNet-MIB::xATSSwitchSettingsAllowClosedTransfer',
  xATSSwitchSettingsMaxSyncTime => '1.3.6.1.4.1.318.1.1.17.3.2.7',
  xATSSwitchSettingsNeutralTransferTime => '1.3.6.1.4.1.318.1.1.17.3.2.8',
  xATSSwitchSettingsClearLatchedAlarms => '1.3.6.1.4.1.318.1.1.17.3.2.9',
  xATSSwitchSettingsClearLatchedAlarmsDefinition => 'PowerNet-MIB::xATSSwitchSettingsClearLatchedAlarms',
  xATSSwitchSettingsSetToFactoryDefaults => '1.3.6.1.4.1.318.1.1.17.3.2.10',
  xATSSwitchSettingsSetToFactoryDefaultsDefinition => 'PowerNet-MIB::xATSSwitchSettingsSetToFactoryDefaults',
  xATSSwitchTimers => '1.3.6.1.4.1.318.1.1.17.3.3',
  xATSSwitchTimersTableSize => '1.3.6.1.4.1.318.1.1.17.3.3.1',
  xATSSwitchTimersTable => '1.3.6.1.4.1.318.1.1.17.3.3.2',
  xATSSwitchTimersEntry => '1.3.6.1.4.1.318.1.1.17.3.3.2.1',
  xATSSwitchTimersIndex => '1.3.6.1.4.1.318.1.1.17.3.3.2.1.1',
  xATSSwitchTimersName => '1.3.6.1.4.1.318.1.1.17.3.3.2.1.2',
  xATSSwitchTimersAbort => '1.3.6.1.4.1.318.1.1.17.3.3.2.1.3',
  xATSSwitchTimersAbortDefinition => 'PowerNet-MIB::xATSSwitchTimersAbort',
  xATSSwitchTimersStatus => '1.3.6.1.4.1.318.1.1.17.3.3.2.1.4',
  xATSSwitchTimersStatusDefinition => 'PowerNet-MIB::xATSSwitchTimersStatus',
  xATSSwitchTimersRemainingTime => '1.3.6.1.4.1.318.1.1.17.3.3.2.1.5',
  xATSSwitchTimersDelaySetting => '1.3.6.1.4.1.318.1.1.17.3.3.2.1.6',
  xATSSwitchBlockMap => '1.3.6.1.4.1.318.1.1.17.3.4',
  xATSSwitchBlockMapTableSize => '1.3.6.1.4.1.318.1.1.17.3.4.1',
  xATSSwitchBlockMapTable => '1.3.6.1.4.1.318.1.1.17.3.4.2',
  xATSSwitchBlockMapEntry => '1.3.6.1.4.1.318.1.1.17.3.4.2.1',
  xATSSwitchBlockMapIndex => '1.3.6.1.4.1.318.1.1.17.3.4.2.1.1',
  xATSSwitchBlockMapName => '1.3.6.1.4.1.318.1.1.17.3.4.2.1.2',
  xATSSwitchBlockMapStatus => '1.3.6.1.4.1.318.1.1.17.3.4.2.1.3',
  xATSSwitchBlockMapSetting => '1.3.6.1.4.1.318.1.1.17.3.4.2.1.4',
  xATSSwitchStatistics => '1.3.6.1.4.1.318.1.1.17.3.5',
  xATSSwitchStatisticsTableSize => '1.3.6.1.4.1.318.1.1.17.3.5.1',
  xATSSwitchStatisticsTable => '1.3.6.1.4.1.318.1.1.17.3.5.2',
  xATSSwitchStatisticsEntry => '1.3.6.1.4.1.318.1.1.17.3.5.2.1',
  xATSSwitchStatisticsIndex => '1.3.6.1.4.1.318.1.1.17.3.5.2.1.1',
  xATSSwitchStatisticsName => '1.3.6.1.4.1.318.1.1.17.3.5.2.1.2',
  xATSSwitchStatisticsValue => '1.3.6.1.4.1.318.1.1.17.3.5.2.1.3',
  xATSSwitchStatisticsReset => '1.3.6.1.4.1.318.1.1.17.3.5.2.1.4',
  xATSSwitchStatisticsResetDefinition => 'PowerNet-MIB::xATSSwitchStatisticsReset',
  xATSACMonitoringPoint => '1.3.6.1.4.1.318.1.1.17.4',
  xATSSource1 => '1.3.6.1.4.1.318.1.1.17.4.1',
  xATSSource1Name => '1.3.6.1.4.1.318.1.1.17.4.1.1',
  xATSSource1Position => '1.3.6.1.4.1.318.1.1.17.4.1.2',
  xATSSource1PositionDefinition => 'PowerNet-MIB::xATSSource1Position',
  xATSSource1Frequency => '1.3.6.1.4.1.318.1.1.17.4.1.3',
  xATSSource1Quality => '1.3.6.1.4.1.318.1.1.17.4.1.4',
  xATSSource1QualityDefinition => 'PowerNet-MIB::xATSSource1Quality',
  xATSSource1Rotation => '1.3.6.1.4.1.318.1.1.17.4.1.5',
  xATSSource1RotationDefinition => 'PowerNet-MIB::xATSSource1Rotation',
  xATSSource1TableSize => '1.3.6.1.4.1.318.1.1.17.4.1.6',
  xATSSource1PhaseTable => '1.3.6.1.4.1.318.1.1.17.4.1.7',
  xATSSource1PhaseEntry => '1.3.6.1.4.1.318.1.1.17.4.1.7.1',
  xATSSource1Index => '1.3.6.1.4.1.318.1.1.17.4.1.7.1.1',
  xATSSource1IndexDefinition => 'PowerNet-MIB::xATSSource1Index',
  xATSSource1VoltageLtoL => '1.3.6.1.4.1.318.1.1.17.4.1.7.1.2',
  xATSSource1VoltageLtoN => '1.3.6.1.4.1.318.1.1.17.4.1.7.1.3',
  xATSSource2 => '1.3.6.1.4.1.318.1.1.17.4.2',
  xATSSource2Name => '1.3.6.1.4.1.318.1.1.17.4.2.1',
  xATSSource2Position => '1.3.6.1.4.1.318.1.1.17.4.2.2',
  xATSSource2PositionDefinition => 'PowerNet-MIB::xATSSource2Position',
  xATSSource2Frequency => '1.3.6.1.4.1.318.1.1.17.4.2.3',
  xATSSource2Quality => '1.3.6.1.4.1.318.1.1.17.4.2.4',
  xATSSource2QualityDefinition => 'PowerNet-MIB::xATSSource2Quality',
  xATSSource2Rotation => '1.3.6.1.4.1.318.1.1.17.4.2.5',
  xATSSource2RotationDefinition => 'PowerNet-MIB::xATSSource2Rotation',
  xATSSource2TableSize => '1.3.6.1.4.1.318.1.1.17.4.2.6',
  xATSSource2PhaseTable => '1.3.6.1.4.1.318.1.1.17.4.2.7',
  xATSSource2PhaseEntry => '1.3.6.1.4.1.318.1.1.17.4.2.7.1',
  xATSSource2Index => '1.3.6.1.4.1.318.1.1.17.4.2.7.1.1',
  xATSSource2IndexDefinition => 'PowerNet-MIB::xATSSource2Index',
  xATSSource2VoltageLtoL => '1.3.6.1.4.1.318.1.1.17.4.2.7.1.2',
  xATSSource2VoltageLtoN => '1.3.6.1.4.1.318.1.1.17.4.2.7.1.3',
  xATSSystemOutput => '1.3.6.1.4.1.318.1.1.17.4.3',
  xATSSystemOutputFrequency => '1.3.6.1.4.1.318.1.1.17.4.3.1',
  xATSSystemOutputTotalPower => '1.3.6.1.4.1.318.1.1.17.4.3.2',
  xATSSystemOutputTotalApparentPower => '1.3.6.1.4.1.318.1.1.17.4.3.3',
  xATSSystemOutputTotalPowerFactor => '1.3.6.1.4.1.318.1.1.17.4.3.4',
  xATSSystemOutputFrequencyTolerance => '1.3.6.1.4.1.318.1.1.17.4.3.5',
  xATSSystemOutputFrequencyToleranceDefinition => 'PowerNet-MIB::xATSSystemOutputFrequencyTolerance',
  xATSSystemOutputOverVoltThreshold => '1.3.6.1.4.1.318.1.1.17.4.3.6',
  xATSSystemOutputUnderVoltThreshold => '1.3.6.1.4.1.318.1.1.17.4.3.7',
  xATSSystemOutputOverCurrentThreshold => '1.3.6.1.4.1.318.1.1.17.4.3.8',
  xATSSystemOutputUnderCurrentThreshold => '1.3.6.1.4.1.318.1.1.17.4.3.9',
  xATSSystemOutputAlarmDelayThreshold => '1.3.6.1.4.1.318.1.1.17.4.3.10',
  xATSSystemOutputTableSize => '1.3.6.1.4.1.318.1.1.17.4.3.11',
  xATSSystemOutputPhaseTable => '1.3.6.1.4.1.318.1.1.17.4.3.12',
  xATSSystemOutputPhaseEntry => '1.3.6.1.4.1.318.1.1.17.4.3.12.1',
  xATSSystemOutputPhaseIndex => '1.3.6.1.4.1.318.1.1.17.4.3.12.1.1',
  xATSSystemOutputPhaseIndexDefinition => 'PowerNet-MIB::xATSSystemOutputPhaseIndex',
  xATSSystemOutputVoltageLtoL => '1.3.6.1.4.1.318.1.1.17.4.3.12.1.2',
  xATSSystemOutputVoltageLtoN => '1.3.6.1.4.1.318.1.1.17.4.3.12.1.3',
  xATSSystemOutputPhaseCurrent => '1.3.6.1.4.1.318.1.1.17.4.3.12.1.4',
  xATSSystemOutputPower => '1.3.6.1.4.1.318.1.1.17.4.3.12.1.5',
  xATSSystemOutputApparentPower => '1.3.6.1.4.1.318.1.1.17.4.3.12.1.6',
  xATSSystemOutputPowerFactor => '1.3.6.1.4.1.318.1.1.17.4.3.12.1.7',
  xATSTesting => '1.3.6.1.4.1.318.1.1.17.5',
  xATSTestingStatus => '1.3.6.1.4.1.318.1.1.17.5.1',
  xATSTestingStatusSelectTestProcess => '1.3.6.1.4.1.318.1.1.17.5.1.1',
  xATSTestingStatusSelectTestProcessDefinition => 'PowerNet-MIB::xATSTestingStatusSelectTestProcess',
  xATSTestingStatusTestStatus => '1.3.6.1.4.1.318.1.1.17.5.1.2',
  xATSTestingStatusTestStatusDefinition => 'PowerNet-MIB::xATSTestingStatusTestStatus',
  xATSTestingStatusProfileWarmupTime => '1.3.6.1.4.1.318.1.1.17.5.1.3',
  xATSTestingStatusProfileLoadedTime => '1.3.6.1.4.1.318.1.1.17.5.1.4',
  xATSTestingStatusProfileUnloadedTime => '1.3.6.1.4.1.318.1.1.17.5.1.5',
  xATSTestingResults => '1.3.6.1.4.1.318.1.1.17.5.2',
  xATSTestingResultsLastDateOfTest => '1.3.6.1.4.1.318.1.1.17.5.2.1',
  xATSTestingResultsLastResult => '1.3.6.1.4.1.318.1.1.17.5.2.2',
  xATSTestingResultsLastResultDefinition => 'PowerNet-MIB::xATSTestingResultsLastResult',
  xATSTestingResultsTestLastTestTime => '1.3.6.1.4.1.318.1.1.17.5.2.3',
  xATSTestingResultsLastCrankDuration => '1.3.6.1.4.1.318.1.1.17.5.2.4',
  xATSTestingResultsLastWarmupDuration => '1.3.6.1.4.1.318.1.1.17.5.2.5',
  xATSTestingResultsLastLoadedDuration => '1.3.6.1.4.1.318.1.1.17.5.2.6',
  xATSTestingResultsLastUnloadedDuration => '1.3.6.1.4.1.318.1.1.17.5.2.7',
  xATSTestingSchedule => '1.3.6.1.4.1.318.1.1.17.5.3',
  xATSTestingScheduleFrequency => '1.3.6.1.4.1.318.1.1.17.5.3.1',
  xATSTestingScheduleFrequencyDefinition => 'PowerNet-MIB::xATSTestingScheduleFrequency',
  xATSTestingScheduleTestDay => '1.3.6.1.4.1.318.1.1.17.5.3.2',
  xATSTestingScheduleTestTime => '1.3.6.1.4.1.318.1.1.17.5.3.3',
  xATSTestingScheduleTestWithLoadInterval => '1.3.6.1.4.1.318.1.1.17.5.3.4',
  xATSTestingScheduleTestWithLoadIntervalDefinition => 'PowerNet-MIB::xATSTestingScheduleTestWithLoadInterval',
  xATSTestingScheduleTestWithLoadSelectMonth => '1.3.6.1.4.1.318.1.1.17.5.3.5',
  xATSTestingScheduleNextTestDate => '1.3.6.1.4.1.318.1.1.17.5.3.6',
  xATSTestingSimulatePowerFail => '1.3.6.1.4.1.318.1.1.17.5.4',
  xATSTestingSimulatePowerFailTest => '1.3.6.1.4.1.318.1.1.17.5.4.1',
  xATSTestingSimulatePowerFailTestDefinition => 'PowerNet-MIB::xATSTestingSimulatePowerFailTest',
  xATSTestingSimulatePowerFailTimeRemaining => '1.3.6.1.4.1.318.1.1.17.5.4.2',
  xATSInputContacts => '1.3.6.1.4.1.318.1.1.17.6',
  xATSInputContactNumContacts => '1.3.6.1.4.1.318.1.1.17.6.1',
  xATSInputContactTableSize => '1.3.6.1.4.1.318.1.1.17.6.2',
  xATSInputContactTable => '1.3.6.1.4.1.318.1.1.17.6.3',
  xATSInputContactEntry => '1.3.6.1.4.1.318.1.1.17.6.3.1',
  xATSInputContactNumber => '1.3.6.1.4.1.318.1.1.17.6.3.1.1',
  xATSInputContactName => '1.3.6.1.4.1.318.1.1.17.6.3.1.2',
  xATSInputContactNormalState => '1.3.6.1.4.1.318.1.1.17.6.3.1.3',
  xATSInputContactNormalStateDefinition => 'PowerNet-MIB::xATSInputContactNormalState',
  xATSInputContactCurrentState => '1.3.6.1.4.1.318.1.1.17.6.3.1.4',
  xATSInputContactCurrentStateDefinition => 'PowerNet-MIB::xATSInputContactCurrentState',
  xATSOutputRelays => '1.3.6.1.4.1.318.1.1.17.7',
  xATSOutputRelayNumRelays => '1.3.6.1.4.1.318.1.1.17.7.1',
  xATSOutputRelayTableSize => '1.3.6.1.4.1.318.1.1.17.7.2',
  xATSOutputRelayTable => '1.3.6.1.4.1.318.1.1.17.7.3',
  xATSOutputRelayEntry => '1.3.6.1.4.1.318.1.1.17.7.3.1',
  xATSOutputRelayNumber => '1.3.6.1.4.1.318.1.1.17.7.3.1.1',
  xATSOutputRelayName => '1.3.6.1.4.1.318.1.1.17.7.3.1.2',
  xATSOutputRelayNormalState => '1.3.6.1.4.1.318.1.1.17.7.3.1.3',
  xATSOutputRelayNormalStateDefinition => 'PowerNet-MIB::xATSOutputRelayNormalState',
  xATSOutputRelayCurrentState => '1.3.6.1.4.1.318.1.1.17.7.3.1.4',
  xATSOutputRelayCurrentStateDefinition => 'PowerNet-MIB::xATSOutputRelayCurrentState',
  xATSMisc => '1.3.6.1.4.1.318.1.1.17.8',
  generator => '1.3.6.1.4.1.318.1.1.18',
  xATSGenerator => '1.3.6.1.4.1.318.1.1.18.1',
  xATSGeneratorIdent => '1.3.6.1.4.1.318.1.1.18.1.1',
  xATSGeneratorIdentModelNumber => '1.3.6.1.4.1.318.1.1.18.1.1.1',
  xATSGeneratorIdentSerialNumber => '1.3.6.1.4.1.318.1.1.18.1.1.2',
  xATSGeneratorIdentDateofManufacture => '1.3.6.1.4.1.318.1.1.18.1.1.3',
  xATSGeneratorIdentVoltageConfiguration => '1.3.6.1.4.1.318.1.1.18.1.1.4',
  xATSGeneratorIdentMaxPowerRating => '1.3.6.1.4.1.318.1.1.18.1.1.5',
  xATSGeneratorIdentAlternatorFrequency => '1.3.6.1.4.1.318.1.1.18.1.1.6',
  xATSGeneratorStatus => '1.3.6.1.4.1.318.1.1.18.1.2',
  xATSGeneratorStatusGeneratorName => '1.3.6.1.4.1.318.1.1.18.1.2.1',
  xATSGeneratorStatusOperational => '1.3.6.1.4.1.318.1.1.18.1.2.2',
  xATSGeneratorStatusOperationalDefinition => 'PowerNet-MIB::xATSGeneratorStatusOperational',
  xATSGeneratorStatusModeSwitchPosition => '1.3.6.1.4.1.318.1.1.18.1.2.3',
  xATSGeneratorStatusModeSwitchPositionDefinition => 'PowerNet-MIB::xATSGeneratorStatusModeSwitchPosition',
  xATSGeneratorStatusRemoteStart => '1.3.6.1.4.1.318.1.1.18.1.2.4',
  xATSGeneratorStatusRemoteStartDefinition => 'PowerNet-MIB::xATSGeneratorStatusRemoteStart',
  xATSGeneratorAdvStatus => '1.3.6.1.4.1.318.1.1.18.1.3',
  xATSGeneratorAdvStatusBatteryVoltage => '1.3.6.1.4.1.318.1.1.18.1.3.1',
  xATSGeneratorAdvStatusOilPressure => '1.3.6.1.4.1.318.1.1.18.1.3.2',
  xATSGeneratorAdvStatusCoolantTemperature => '1.3.6.1.4.1.318.1.1.18.1.3.3',
  xATSGeneratorAdvStatusEngineRPM => '1.3.6.1.4.1.318.1.1.18.1.3.4',
  xATSGeneratorAdvStatusOilLevel => '1.3.6.1.4.1.318.1.1.18.1.3.5',
  xATSGeneratorAdvStatusOilLevelDefinition => 'PowerNet-MIB::xATSGeneratorAdvStatusOilLevel',
  xATSGeneratorAdvStatusCoolantLevel => '1.3.6.1.4.1.318.1.1.18.1.3.6',
  xATSGeneratorAdvStatusCoolantLevelDefinition => 'PowerNet-MIB::xATSGeneratorAdvStatusCoolantLevel',
  xATSGeneratorOutput => '1.3.6.1.4.1.318.1.1.18.1.4',
  xATSGeneratorOutputFrequency => '1.3.6.1.4.1.318.1.1.18.1.4.1',
  xATSGeneratorOutputTotalPower => '1.3.6.1.4.1.318.1.1.18.1.4.2',
  xATSGeneratorOutputTotalApparentPower => '1.3.6.1.4.1.318.1.1.18.1.4.3',
  xATSGeneratorOutputTotalPowerFactor => '1.3.6.1.4.1.318.1.1.18.1.4.4',
  xATSGeneratorOutputTableSize => '1.3.6.1.4.1.318.1.1.18.1.4.5',
  xATSGeneratorOutputPhaseTable => '1.3.6.1.4.1.318.1.1.18.1.4.6',
  xATSGeneratorOutputPhaseEntry => '1.3.6.1.4.1.318.1.1.18.1.4.6.1',
  xATSGeneratorOutputPhaseIndex => '1.3.6.1.4.1.318.1.1.18.1.4.6.1.1',
  xATSGeneratorOutputPhaseIndexDefinition => 'PowerNet-MIB::xATSGeneratorOutputPhaseIndex',
  xATSGeneratorOutputVoltageLtoL => '1.3.6.1.4.1.318.1.1.18.1.4.6.1.2',
  xATSGeneratorOutputVoltageLtoN => '1.3.6.1.4.1.318.1.1.18.1.4.6.1.3',
  xATSGeneratorOutputPhaseCurrent => '1.3.6.1.4.1.318.1.1.18.1.4.6.1.4',
  xATSGeneratorOutputPower => '1.3.6.1.4.1.318.1.1.18.1.4.6.1.5',
  xATSGeneratorOutputApparentPower => '1.3.6.1.4.1.318.1.1.18.1.4.6.1.6',
  xATSGeneratorOutputPowerFactor => '1.3.6.1.4.1.318.1.1.18.1.4.6.1.7',
  xATSGeneratorSettings => '1.3.6.1.4.1.318.1.1.18.1.5',
  xATSGeneratorSettingsVoltageAdjust => '1.3.6.1.4.1.318.1.1.18.1.5.1',
  xATSGeneratorSettingsFrequencyAdjust => '1.3.6.1.4.1.318.1.1.18.1.5.2',
  xATSGeneratorSettingsStartDelay => '1.3.6.1.4.1.318.1.1.18.1.5.3',
  xATSGeneratorSettingsStopDelay => '1.3.6.1.4.1.318.1.1.18.1.5.4',
  xATSGeneratorSettingsCrankCycleEnable => '1.3.6.1.4.1.318.1.1.18.1.5.5',
  xATSGeneratorSettingsCrankCycleEnableDefinition => 'PowerNet-MIB::xATSGeneratorSettingsCrankCycleEnable',
  xATSGeneratorSettingsCrankTime => '1.3.6.1.4.1.318.1.1.18.1.5.6',
  xATSGeneratorSettingsCrankRestTime => '1.3.6.1.4.1.318.1.1.18.1.5.7',
  xATSGeneratorSettingsNumberCrank => '1.3.6.1.4.1.318.1.1.18.1.5.8',
  xATSGeneratorSettingsMetricUnit => '1.3.6.1.4.1.318.1.1.18.1.5.9',
  xATSGeneratorSettingsMetricUnitDefinition => 'PowerNet-MIB::xATSGeneratorSettingsMetricUnit',
  xATSGeneratorService => '1.3.6.1.4.1.318.1.1.18.1.6',
  xATSGeneratorServiceTotalRunHoursLifetime => '1.3.6.1.4.1.318.1.1.18.1.6.1',
  xATSGeneratorServiceEngineStartsLifetime => '1.3.6.1.4.1.318.1.1.18.1.6.2',
  xATSGeneratorServiceTotalkWhLifetime => '1.3.6.1.4.1.318.1.1.18.1.6.3',
  xATSGeneratorServiceTotalRunHoursSinceMaintenance => '1.3.6.1.4.1.318.1.1.18.1.6.4',
  xATSGeneratorServiceEngineStartsSinceMaintenance => '1.3.6.1.4.1.318.1.1.18.1.6.5',
  xATSGeneratorServiceTotalkWhMaintenance => '1.3.6.1.4.1.318.1.1.18.1.6.6',
  xATSGeneratorServiceResetRecord => '1.3.6.1.4.1.318.1.1.18.1.6.7',
  xATSGeneratorServiceResetRecordDefinition => 'PowerNet-MIB::xATSGeneratorServiceResetRecord',
  xATSGeneratorServiceRecordResetDate => '1.3.6.1.4.1.318.1.1.18.1.6.8',
  xATSGeneratorServiceNextServiceDate => '1.3.6.1.4.1.318.1.1.18.1.6.9',
  xATSGeneratorServiceRunHoursUntilServiceDate => '1.3.6.1.4.1.318.1.1.18.1.6.10',
  xATSGeneratorServiceRunHoursThreshold => '1.3.6.1.4.1.318.1.1.18.1.6.11',
  xATSGeneratorServiceRunHoursThresholdDefinition => 'PowerNet-MIB::xATSGeneratorServiceRunHoursThreshold',
  xATSGeneratorServiceCalendarIntervalThreshold => '1.3.6.1.4.1.318.1.1.18.1.6.12',
  xATSGeneratorServiceCalendarIntervalThresholdDefinition => 'PowerNet-MIB::xATSGeneratorServiceCalendarIntervalThreshold',
  xATSGeneratorFuelSystem => '1.3.6.1.4.1.318.1.1.18.1.7',
  xATSGeneratorFuelSystemType => '1.3.6.1.4.1.318.1.1.18.1.7.1',
  xATSGeneratorFuelSystemTypeDefinition => 'PowerNet-MIB::xATSGeneratorFuelSystemType',
  xATSGeneratorFuelSystemTankSize => '1.3.6.1.4.1.318.1.1.18.1.7.2',
  xATSGeneratorFuelSystemFuelLevel => '1.3.6.1.4.1.318.1.1.18.1.7.3',
  xATSGeneratorFuelSystemRuntimePower => '1.3.6.1.4.1.318.1.1.18.1.7.4',
  xATSGeneratorFuelSystemEstimatedRunTime => '1.3.6.1.4.1.318.1.1.18.1.7.5',
  xATSGeneratorFuelSystemLowRunTimeThreshold => '1.3.6.1.4.1.318.1.1.18.1.7.6',
  xATSGeneratorFuelSystemLowRunTimeThresholdDefinition => 'PowerNet-MIB::xATSGeneratorFuelSystemLowRunTimeThreshold',
  xATSGeneratorFuelSystemVeryLowRunTimeThreshold => '1.3.6.1.4.1.318.1.1.18.1.7.7',
  xATSGeneratorFuelSystemVeryLowRunTimeThresholdDefinition => 'PowerNet-MIB::xATSGeneratorFuelSystemVeryLowRunTimeThreshold',
  xATSGeneratorFuelSystemLowFuelLevelThreshold => '1.3.6.1.4.1.318.1.1.18.1.7.8',
  xATSGeneratorFuelSystemVeryLowFuelLevelThreshold => '1.3.6.1.4.1.318.1.1.18.1.7.9',
  consolePortServer => '1.3.6.1.4.1.318.1.1.19',
  cpsAP930x => '1.3.6.1.4.1.318.1.1.19.1',
  cpsAP930xSys => '1.3.6.1.4.1.318.1.1.19.1.1',
  apCPSpname => '1.3.6.1.4.1.318.1.1.19.1.1.1',
  apCPSversion => '1.3.6.1.4.1.318.1.1.19.1.1.2',
  apCPSPower => '1.3.6.1.4.1.318.1.1.19.1.1.3',
  apCPSPwNum => '1.3.6.1.4.1.318.1.1.19.1.1.3.1',
  apCPSPw1 => '1.3.6.1.4.1.318.1.1.19.1.1.3.2',
  apCPSPw2 => '1.3.6.1.4.1.318.1.1.19.1.1.3.3',
  apCPSPcmcia => '1.3.6.1.4.1.318.1.1.19.1.1.4',
  apCPSNPcmcia => '1.3.6.1.4.1.318.1.1.19.1.1.4.1',
  cpsCardIdentTable => '1.3.6.1.4.1.318.1.1.19.1.1.4.2',
  cpsCardIdentEntry => '1.3.6.1.4.1.318.1.1.19.1.1.4.2.1',
  cpsCardIdentIndex => '1.3.6.1.4.1.318.1.1.19.1.1.4.2.1.1',
  cpsCardIdentProd => '1.3.6.1.4.1.318.1.1.19.1.1.4.2.1.2',
  cpsCardIdentMan => '1.3.6.1.4.1.318.1.1.19.1.1.4.2.1.3',
  cpsCardIdentFunc => '1.3.6.1.4.1.318.1.1.19.1.1.4.2.1.4',
  cpsCardIdentPCI => '1.3.6.1.4.1.318.1.1.19.1.1.4.2.1.5',
  cpsCardConfTable => '1.3.6.1.4.1.318.1.1.19.1.1.4.3',
  cpsCardConfEntry => '1.3.6.1.4.1.318.1.1.19.1.1.4.3.1',
  cpsCardConfIndex => '1.3.6.1.4.1.318.1.1.19.1.1.4.3.1.1',
  cpsCardConfPower => '1.3.6.1.4.1.318.1.1.19.1.1.4.3.1.2',
  cpsCardConfType => '1.3.6.1.4.1.318.1.1.19.1.1.4.3.1.3',
  cpsCardConfInter => '1.3.6.1.4.1.318.1.1.19.1.1.4.3.1.4',
  cpsCardConfFunc => '1.3.6.1.4.1.318.1.1.19.1.1.4.3.1.5',
  cpsCardConfCardv => '1.3.6.1.4.1.318.1.1.19.1.1.4.3.1.6',
  cpsCardConfPort1 => '1.3.6.1.4.1.318.1.1.19.1.1.4.3.1.7',
  cpsCardConfPort2 => '1.3.6.1.4.1.318.1.1.19.1.1.4.3.1.8',
  cpsCardStatusTable => '1.3.6.1.4.1.318.1.1.19.1.1.4.4',
  cpsCardStatusEntry => '1.3.6.1.4.1.318.1.1.19.1.1.4.4.1',
  cpsCardStatusIndex => '1.3.6.1.4.1.318.1.1.19.1.1.4.4.1.1',
  cpsCardStatusCard => '1.3.6.1.4.1.318.1.1.19.1.1.4.4.1.2',
  cpsCardStatusFunc => '1.3.6.1.4.1.318.1.1.19.1.1.4.4.1.3',
  apCPSFlashSize => '1.3.6.1.4.1.318.1.1.19.1.1.5',
  apCPSRAMSize => '1.3.6.1.4.1.318.1.1.19.1.1.6',
  apCPSCPUfreq => '1.3.6.1.4.1.318.1.1.19.1.1.7',
  apCPSDevId => '1.3.6.1.4.1.318.1.1.19.1.1.8',
  cpsAP930xConf => '1.3.6.1.4.1.318.1.1.19.1.2',
  cpsHostName => '1.3.6.1.4.1.318.1.1.19.1.2.1',
  cpsConsoleBanner => '1.3.6.1.4.1.318.1.1.19.1.2.2',
  cpsMotd => '1.3.6.1.4.1.318.1.1.19.1.2.3',
  cpsEthItf => '1.3.6.1.4.1.318.1.1.19.1.2.4',
  cpsEthDhcpc => '1.3.6.1.4.1.318.1.1.19.1.2.4.1',
  cpsEthIPaddr => '1.3.6.1.4.1.318.1.1.19.1.2.4.2',
  cpsEthIPmask => '1.3.6.1.4.1.318.1.1.19.1.2.4.3',
  cpsEthMTU => '1.3.6.1.4.1.318.1.1.19.1.2.4.4',
  cpsEthIPaddr2 => '1.3.6.1.4.1.318.1.1.19.1.2.4.5',
  cpsEthIPmask2 => '1.3.6.1.4.1.318.1.1.19.1.2.4.6',
  cpsNameService => '1.3.6.1.4.1.318.1.1.19.1.2.5',
  cpsResolverOrder => '1.3.6.1.4.1.318.1.1.19.1.2.5.1',
  cpsMultipleIP => '1.3.6.1.4.1.318.1.1.19.1.2.5.2',
  cpsDNSserv => '1.3.6.1.4.1.318.1.1.19.1.2.5.3',
  cpsDNSpriserv => '1.3.6.1.4.1.318.1.1.19.1.2.5.3.1',
  cpsDNSsecserv => '1.3.6.1.4.1.318.1.1.19.1.2.5.3.2',
  cpsDNSdomain => '1.3.6.1.4.1.318.1.1.19.1.2.5.3.3',
  cpsSerialPortConf => '1.3.6.1.4.1.318.1.1.19.1.2.6',
  cpsSerialGlobal => '1.3.6.1.4.1.318.1.1.19.1.2.6.1',
  cpsSerialInclude => '1.3.6.1.4.1.318.1.1.19.1.2.6.1.1',
  cpsSerialNFS => '1.3.6.1.4.1.318.1.1.19.1.2.6.1.2',
  cpsSerialLockDir => '1.3.6.1.4.1.318.1.1.19.1.2.6.1.3',
  cpsSerialRlogin => '1.3.6.1.4.1.318.1.1.19.1.2.6.1.4',
  cpsSerialPppd => '1.3.6.1.4.1.318.1.1.19.1.2.6.1.5',
  cpsSerialTelnet => '1.3.6.1.4.1.318.1.1.19.1.2.6.1.6',
  cpsSerialSsh => '1.3.6.1.4.1.318.1.1.19.1.2.6.1.7',
  cpsSerialLocalLogins => '1.3.6.1.4.1.318.1.1.19.1.2.6.1.8',
  cpsSerialFacility => '1.3.6.1.4.1.318.1.1.19.1.2.6.1.9',
  cpsSerialDBFacility => '1.3.6.1.4.1.318.1.1.19.1.2.6.1.10',
  cpsSerialGroupTable => '1.3.6.1.4.1.318.1.1.19.1.2.6.1.11',
  cpsSerialGroupEntry => '1.3.6.1.4.1.318.1.1.19.1.2.6.1.11.1',
  cpsSerialGroupIndex => '1.3.6.1.4.1.318.1.1.19.1.2.6.1.11.1.1',
  cpsSerialGroupName => '1.3.6.1.4.1.318.1.1.19.1.2.6.1.11.1.2',
  cpsSerialGroupUsers => '1.3.6.1.4.1.318.1.1.19.1.2.6.1.11.1.3',
  cpsSerialSpec => '1.3.6.1.4.1.318.1.1.19.1.2.6.2',
  cpsSerialPortTable => '1.3.6.1.4.1.318.1.1.19.1.2.6.2.1',
  cpsSerialPortEntry => '1.3.6.1.4.1.318.1.1.19.1.2.6.2.1.1',
  cpsSerialPortNumber => '1.3.6.1.4.1.318.1.1.19.1.2.6.2.1.1.1',
  cpsSerialPortTty => '1.3.6.1.4.1.318.1.1.19.1.2.6.2.1.1.2',
  cpsSerialPortName => '1.3.6.1.4.1.318.1.1.19.1.2.6.2.1.1.3',
  cpsSerialPortSpeed => '1.3.6.1.4.1.318.1.1.19.1.2.6.2.1.1.4',
  cpsSerialPortDataSize => '1.3.6.1.4.1.318.1.1.19.1.2.6.2.1.1.5',
  cpsSerialPortStopBits => '1.3.6.1.4.1.318.1.1.19.1.2.6.2.1.1.6',
  cpsSerialPortParity => '1.3.6.1.4.1.318.1.1.19.1.2.6.2.1.1.7',
  cpsSerialPortFlowCtrl => '1.3.6.1.4.1.318.1.1.19.1.2.6.2.1.1.8',
  cpsSerialPortDTRdelay => '1.3.6.1.4.1.318.1.1.19.1.2.6.2.1.1.9',
  cpsSerialPortDCDCtrl => '1.3.6.1.4.1.318.1.1.19.1.2.6.2.1.1.10',
  cpsSerialPortLogUtmp => '1.3.6.1.4.1.318.1.1.19.1.2.6.2.1.1.11',
  cpsSerialPortLogWtmp => '1.3.6.1.4.1.318.1.1.19.1.2.6.2.1.1.12',
  cpsSerialPortLogform => '1.3.6.1.4.1.318.1.1.19.1.2.6.2.1.1.13',
  cpsSerialPortAuthtype => '1.3.6.1.4.1.318.1.1.19.1.2.6.2.1.1.14',
  cpsSerialPortAuthSrv1 => '1.3.6.1.4.1.318.1.1.19.1.2.6.2.1.1.15',
  cpsSerialPortAccSrv1 => '1.3.6.1.4.1.318.1.1.19.1.2.6.2.1.1.16',
  cpsSerialPortAuthTmo => '1.3.6.1.4.1.318.1.1.19.1.2.6.2.1.1.17',
  cpsSerialPortAuthRetr => '1.3.6.1.4.1.318.1.1.19.1.2.6.2.1.1.18',
  cpsSerialPortAuthSrv2 => '1.3.6.1.4.1.318.1.1.19.1.2.6.2.1.1.19',
  cpsSerialPortAccSrv2 => '1.3.6.1.4.1.318.1.1.19.1.2.6.2.1.1.20',
  cpsSerialPortAuthSecret => '1.3.6.1.4.1.318.1.1.19.1.2.6.2.1.1.21',
  cpsSerialPortAuthRadP => '1.3.6.1.4.1.318.1.1.19.1.2.6.2.1.1.22',
  cpsSerialPortAuthAcc => '1.3.6.1.4.1.318.1.1.19.1.2.6.2.1.1.23',
  cpsSerialPortProtocol => '1.3.6.1.4.1.318.1.1.19.1.2.6.2.1.1.24',
  cpsSerialPortRemoteIP => '1.3.6.1.4.1.318.1.1.19.1.2.6.2.1.1.25',
  cpsSerialPortSocketPort => '1.3.6.1.4.1.318.1.1.19.1.2.6.2.1.1.26',
  cpsSerialPortRemHost => '1.3.6.1.4.1.318.1.1.19.1.2.6.2.1.1.27',
  cpsSerialPortBanner => '1.3.6.1.4.1.318.1.1.19.1.2.6.2.1.1.28',
  cpsSerialPortPrompt => '1.3.6.1.4.1.318.1.1.19.1.2.6.2.1.1.29',
  cpsSerialPortTermType => '1.3.6.1.4.1.318.1.1.19.1.2.6.2.1.1.30',
  cpsSerialPortAutomUsr => '1.3.6.1.4.1.318.1.1.19.1.2.6.2.1.1.31',
  cpsSerialPortNetMask => '1.3.6.1.4.1.318.1.1.19.1.2.6.2.1.1.32',
  cpsSerialPortPppMtu => '1.3.6.1.4.1.318.1.1.19.1.2.6.2.1.1.33',
  cpsSerialPortPppMru => '1.3.6.1.4.1.318.1.1.19.1.2.6.2.1.1.34',
  cpsSerialPortPppOptions => '1.3.6.1.4.1.318.1.1.19.1.2.6.2.1.1.35',
  cpsSerialPortPppFoption => '1.3.6.1.4.1.318.1.1.19.1.2.6.2.1.1.36',
  cpsSerialPortModemChat => '1.3.6.1.4.1.318.1.1.19.1.2.6.2.1.1.37',
  cpsSerialPortSttyCmd => '1.3.6.1.4.1.318.1.1.19.1.2.6.2.1.1.38',
  cpsSerialPortSockTx => '1.3.6.1.4.1.318.1.1.19.1.2.6.2.1.1.39',
  cpsSerialPortSockPoll => '1.3.6.1.4.1.318.1.1.19.1.2.6.2.1.1.40',
  cpsSerialPortSockIdle => '1.3.6.1.4.1.318.1.1.19.1.2.6.2.1.1.41',
  cpsSerialPortDBsize => '1.3.6.1.4.1.318.1.1.19.1.2.6.2.1.1.42',
  cpsSerialPortDBtime => '1.3.6.1.4.1.318.1.1.19.1.2.6.2.1.1.43',
  cpsSerialPortDBmode => '1.3.6.1.4.1.318.1.1.19.1.2.6.2.1.1.44',
  cpsSerialPortDBsyslog => '1.3.6.1.4.1.318.1.1.19.1.2.6.2.1.1.45',
  cpsSerialPortDBmenu => '1.3.6.1.4.1.318.1.1.19.1.2.6.2.1.1.46',
  cpsSerialPortDBalarm => '1.3.6.1.4.1.318.1.1.19.1.2.6.2.1.1.47',
  cpsSerialPortSSHbreak => '1.3.6.1.4.1.318.1.1.19.1.2.6.2.1.1.48',
  cpsSerialPortSniffSess => '1.3.6.1.4.1.318.1.1.19.1.2.6.2.1.1.49',
  cpsSerialPortSniffAdm => '1.3.6.1.4.1.318.1.1.19.1.2.6.2.1.1.50',
  cpsSerialPortSniffEsc => '1.3.6.1.4.1.318.1.1.19.1.2.6.2.1.1.51',
  cpsSerialPortSniffMsess => '1.3.6.1.4.1.318.1.1.19.1.2.6.2.1.1.52',
  cpsSerialPortTelnetMode => '1.3.6.1.4.1.318.1.1.19.1.2.6.2.1.1.53',
  cpsSerialPortSysBufSess => '1.3.6.1.4.1.318.1.1.19.1.2.6.2.1.1.54',
  cpsSerialPortLFSuppress => '1.3.6.1.4.1.318.1.1.19.1.2.6.2.1.1.55',
  cpsSerialPortAutoInput => '1.3.6.1.4.1.318.1.1.19.1.2.6.2.1.1.56',
  cpsSerialPortAutoOutput => '1.3.6.1.4.1.318.1.1.19.1.2.6.2.1.1.57',
  cpsSerialPortBreakInterval => '1.3.6.1.4.1.318.1.1.19.1.2.6.2.1.1.58',
  cpsAP930xInfo => '1.3.6.1.4.1.318.1.1.19.1.3',
  cpsInfoSerialPortTable => '1.3.6.1.4.1.318.1.1.19.1.3.1',
  cpsInfoSerialPortEntry => '1.3.6.1.4.1.318.1.1.19.1.3.1.1',
  cpsInfoSerialPortNumber => '1.3.6.1.4.1.318.1.1.19.1.3.1.1.1',
  cpsInfoSerialPortTty => '1.3.6.1.4.1.318.1.1.19.1.3.1.1.2',
  cpsInfoSerialPortName => '1.3.6.1.4.1.318.1.1.19.1.3.1.1.3',
  cpsInfoSerialPortSpeed => '1.3.6.1.4.1.318.1.1.19.1.3.1.1.4',
  cpsInfoSerialPortTxBytes => '1.3.6.1.4.1.318.1.1.19.1.3.1.1.5',
  cpsInfoSerialPortRXBytes => '1.3.6.1.4.1.318.1.1.19.1.3.1.1.6',
  cpsInfoSerialPortErrFrame => '1.3.6.1.4.1.318.1.1.19.1.3.1.1.7',
  cpsInfoSerialPortErrParity => '1.3.6.1.4.1.318.1.1.19.1.3.1.1.8',
  cpsInfoSerialPortErrBreaks => '1.3.6.1.4.1.318.1.1.19.1.3.1.1.9',
  cpsInfoSerialPortErrOverrun => '1.3.6.1.4.1.318.1.1.19.1.3.1.1.10',
  cpsInfoSerialPortSigDTR => '1.3.6.1.4.1.318.1.1.19.1.3.1.1.11',
  cpsInfoSerialPortSigCD => '1.3.6.1.4.1.318.1.1.19.1.3.1.1.12',
  cpsInfoSerialPortSigDSR => '1.3.6.1.4.1.318.1.1.19.1.3.1.1.13',
  cpsInfoSerialPortSigRTS => '1.3.6.1.4.1.318.1.1.19.1.3.1.1.14',
  cpsInfoSerialPortSigCTS => '1.3.6.1.4.1.318.1.1.19.1.3.1.1.15',
  cpsInfoSerialPortSigRI => '1.3.6.1.4.1.318.1.1.19.1.3.1.1.16',
  cpsAP930xAdm => '1.3.6.1.4.1.318.1.1.19.1.4',
  apCPSSave => '1.3.6.1.4.1.318.1.1.19.1.4.1',
  apCPSSerialHUP => '1.3.6.1.4.1.318.1.1.19.1.4.2',
  accessControl => '1.3.6.1.4.1.318.1.1.20',
  accessPX => '1.3.6.1.4.1.318.1.1.20.1',
  accessPXIdent => '1.3.6.1.4.1.318.1.1.20.1.1',
  accessPXIdentAlarmStatus => '1.3.6.1.4.1.318.1.1.20.1.1.1',
  accessPXIdentProductNumber => '1.3.6.1.4.1.318.1.1.20.1.1.2',
  accessPXIdentHardwareRev => '1.3.6.1.4.1.318.1.1.20.1.1.3',
  accessPXIdentDateOfManufacture => '1.3.6.1.4.1.318.1.1.20.1.1.4',
  accessPXIdentSerialNumber => '1.3.6.1.4.1.318.1.1.20.1.1.5',
  accessPXConfig => '1.3.6.1.4.1.318.1.1.20.1.2',
  accessPXConfigCardReaderEnableDisableAction => '1.3.6.1.4.1.318.1.1.20.1.2.1',
  accessPXConfigCardReaderEnableDisableActionDefinition => 'PowerNet-MIB::accessPXConfigCardReaderEnableDisableAction',
  accessPXConfigAutoRelockTime => '1.3.6.1.4.1.318.1.1.20.1.2.2',
  accessPXConfigCardFormat => '1.3.6.1.4.1.318.1.1.20.1.2.3',
  accessPXConfigCardFormatDefinition => 'PowerNet-MIB::accessPXConfigCardFormat',
  accessPXConfigFront => '1.3.6.1.4.1.318.1.1.20.1.3',
  accessPXConfigFrontDoorLockControl => '1.3.6.1.4.1.318.1.1.20.1.3.1',
  accessPXConfigFrontDoorLockControlDefinition => 'PowerNet-MIB::accessPXConfigFrontDoorLockControl',
  accessPXConfigFrontDoorMaxOpenTime => '1.3.6.1.4.1.318.1.1.20.1.3.2',
  accessPXStatusFront => '1.3.6.1.4.1.318.1.1.20.1.4',
  accessPXStatusFrontDoorLock => '1.3.6.1.4.1.318.1.1.20.1.4.1',
  accessPXStatusFrontDoorLockDefinition => 'PowerNet-MIB::accessPXStatusFrontDoorLock',
  accessPXStatusFrontDoor => '1.3.6.1.4.1.318.1.1.20.1.4.2',
  accessPXStatusFrontDoorDefinition => 'PowerNet-MIB::accessPXStatusFrontDoor',
  accessPXStatusFrontDoorHandle => '1.3.6.1.4.1.318.1.1.20.1.4.3',
  accessPXStatusFrontDoorHandleDefinition => 'PowerNet-MIB::accessPXStatusFrontDoorHandle',
  accessPXStatusFrontDoorMaxOpenTime => '1.3.6.1.4.1.318.1.1.20.1.4.4',
  accessPXStatusFrontDoorAlarmStatus => '1.3.6.1.4.1.318.1.1.20.1.4.5',
  accessPXConfigRear => '1.3.6.1.4.1.318.1.1.20.1.5',
  accessPXConfigRearDoorLockControl => '1.3.6.1.4.1.318.1.1.20.1.5.1',
  accessPXConfigRearDoorLockControlDefinition => 'PowerNet-MIB::accessPXConfigRearDoorLockControl',
  accessPXConfigRearDoorMaxOpenTime => '1.3.6.1.4.1.318.1.1.20.1.5.2',
  accessPXStatusRear => '1.3.6.1.4.1.318.1.1.20.1.6',
  accessPXStatusRearDoorLock => '1.3.6.1.4.1.318.1.1.20.1.6.1',
  accessPXStatusRearDoorLockDefinition => 'PowerNet-MIB::accessPXStatusRearDoorLock',
  accessPXStatusRearDoor => '1.3.6.1.4.1.318.1.1.20.1.6.2',
  accessPXStatusRearDoorDefinition => 'PowerNet-MIB::accessPXStatusRearDoor',
  accessPXStatusRearDoorHandle => '1.3.6.1.4.1.318.1.1.20.1.6.3',
  accessPXStatusRearDoorHandleDefinition => 'PowerNet-MIB::accessPXStatusRearDoorHandle',
  accessPXStatusRearDoorMaxOpenTime => '1.3.6.1.4.1.318.1.1.20.1.6.4',
  accessPXStatusRearDoorAlarmStatus => '1.3.6.1.4.1.318.1.1.20.1.6.5',
  accessPXConfigBeacon => '1.3.6.1.4.1.318.1.1.20.1.7',
  accessPXConfigBeaconName => '1.3.6.1.4.1.318.1.1.20.1.7.1',
  accessPXConfigBeaconLocation => '1.3.6.1.4.1.318.1.1.20.1.7.2',
  accessPXConfigBeaconAction => '1.3.6.1.4.1.318.1.1.20.1.7.3',
  accessPXConfigBeaconActionDefinition => 'PowerNet-MIB::accessPXConfigBeaconAction',
  accessPXStatusBeacon => '1.3.6.1.4.1.318.1.1.20.1.8',
  accessPXStatusBeaconName => '1.3.6.1.4.1.318.1.1.20.1.8.1',
  accessPXStatusBeaconLocation => '1.3.6.1.4.1.318.1.1.20.1.8.2',
  accessPXStatusBeaconCurrentState => '1.3.6.1.4.1.318.1.1.20.1.8.3',
  accessPXStatusBeaconCurrentStateDefinition => 'PowerNet-MIB::accessPXStatusBeaconCurrentState',
  apcLocalDisplay => '1.3.6.1.4.1.318.1.1.21',
  apcLocalDisplayIdent => '1.3.6.1.4.1.318.1.1.21.1',
  apcLocalDisplayIdentDisplayType => '1.3.6.1.4.1.318.1.1.21.1.1',
  apcLocalDisplayIdentDisplayTypeDefinition => 'PowerNet-MIB::apcLocalDisplayIdentDisplayType',
  apcLocalDisplayIdentModelNumber => '1.3.6.1.4.1.318.1.1.21.1.2',
  apcLocalDisplayIdentFirmwareRev => '1.3.6.1.4.1.318.1.1.21.1.3',
  apcLocalDisplayIdentOptions => '1.3.6.1.4.1.318.1.1.21.1.4',
  apcLocalDisplayIdentDateOfManufacture => '1.3.6.1.4.1.318.1.1.21.1.5',
  apcLocalDisplayIdentSerialNumber => '1.3.6.1.4.1.318.1.1.21.1.6',
  apcLocalDisplayConfig => '1.3.6.1.4.1.318.1.1.21.2',
  apcLocalDisplayConfigAlarmBeeper => '1.3.6.1.4.1.318.1.1.21.2.1',
  apcLocalDisplayConfigAlarmBeeperDefinition => 'PowerNet-MIB::apcLocalDisplayConfigAlarmBeeper',
  apcLocalDisplayConfigBeeperVolume => '1.3.6.1.4.1.318.1.1.21.2.2',
  apcLocalDisplayConfigBeeperVolumeDefinition => 'PowerNet-MIB::apcLocalDisplayConfigBeeperVolume',
  apcLocalDisplayConfigCheckLogIndicator => '1.3.6.1.4.1.318.1.1.21.2.3',
  apcLocalDisplayConfigCheckLogIndicatorDefinition => 'PowerNet-MIB::apcLocalDisplayConfigCheckLogIndicator',
  apcLocalDisplayConfigKeyClick => '1.3.6.1.4.1.318.1.1.21.2.4',
  apcLocalDisplayConfigKeyClickDefinition => 'PowerNet-MIB::apcLocalDisplayConfigKeyClick',
  apcLocalDisplayConfigContrast => '1.3.6.1.4.1.318.1.1.21.2.5',
  apcLocalDisplayConfigContrastDefinition => 'PowerNet-MIB::apcLocalDisplayConfigContrast',
  isxModularDistribution => '1.3.6.1.4.1.318.1.1.22',
  isxModularDistInfo => '1.3.6.1.4.1.318.1.1.22.1',
  isxModularDistInfoTableSize => '1.3.6.1.4.1.318.1.1.22.1.1',
  isxModularDistInfoTable => '1.3.6.1.4.1.318.1.1.22.1.2',
  isxModularDistInfoEntry => '1.3.6.1.4.1.318.1.1.22.1.2.1',
  isxModularDistInfoSegmentIndex => '1.3.6.1.4.1.318.1.1.22.1.2.1.1',
  isxModularDistInfoMeterModelNumber => '1.3.6.1.4.1.318.1.1.22.1.2.1.2',
  isxModularDistInfoMeterSerialNumber => '1.3.6.1.4.1.318.1.1.22.1.2.1.3',
  isxModularDistInfoMeterDateOfManufacture => '1.3.6.1.4.1.318.1.1.22.1.2.1.4',
  isxModularDistInfoMeterFirmwareRev => '1.3.6.1.4.1.318.1.1.22.1.2.1.5',
  isxModularDistInfoMeterHardwareRev => '1.3.6.1.4.1.318.1.1.22.1.2.1.6',
  isxModularDistModules => '1.3.6.1.4.1.318.1.1.22.2',
  isxModularDistModuleInfoTableSize => '1.3.6.1.4.1.318.1.1.22.2.1',
  isxModularDistModuleInfoTable => '1.3.6.1.4.1.318.1.1.22.2.2',
  isxModularDistModuleInfoEntry => '1.3.6.1.4.1.318.1.1.22.2.2.1',
  isxModularDistModuleInfoModIndex => '1.3.6.1.4.1.318.1.1.22.2.2.1.1',
  isxModularDistModuleInfoAlarmStatus => '1.3.6.1.4.1.318.1.1.22.2.2.1.2',
  isxModularDistModuleInfoAlarmStatusDefinition => 'PowerNet-MIB::isxModularDistModuleInfoAlarmStatus',
  isxModularDistModuleInfoModelNumber => '1.3.6.1.4.1.318.1.1.22.2.2.1.3',
  isxModularDistModuleInfoSerialNumber => '1.3.6.1.4.1.318.1.1.22.2.2.1.4',
  isxModularDistModuleInfoDateOfManufacture => '1.3.6.1.4.1.318.1.1.22.2.2.1.5',
  isxModularDistModuleInfoNumCables => '1.3.6.1.4.1.318.1.1.22.2.2.1.6',
  isxModularDistModuleBreakerTableSize => '1.3.6.1.4.1.318.1.1.22.2.3',
  isxModularDistModuleBreakerTable => '1.3.6.1.4.1.318.1.1.22.2.4',
  isxModularDistModuleBreakerEntry => '1.3.6.1.4.1.318.1.1.22.2.4.1',
  isxModularDistModuleBreakerModIndex => '1.3.6.1.4.1.318.1.1.22.2.4.1.1',
  isxModularDistModuleBreakerPhaseIndex => '1.3.6.1.4.1.318.1.1.22.2.4.1.2',
  isxModularDistModuleBreakerPhaseIndexDefinition => 'PowerNet-MIB::isxModularDistModuleBreakerPhaseIndex',
  isxModularDistModuleBreakerAlarmStatus => '1.3.6.1.4.1.318.1.1.22.2.4.1.3',
  isxModularDistModuleBreakerRating => '1.3.6.1.4.1.318.1.1.22.2.4.1.4',
  isxModularDistModuleBreakerPhysicalGroup => '1.3.6.1.4.1.318.1.1.22.2.4.1.5',
  isxModularDistModuleBreakerCableNum => '1.3.6.1.4.1.318.1.1.22.2.4.1.6',
  isxModularDistModuleBreakerPosition => '1.3.6.1.4.1.318.1.1.22.2.4.1.7',
  isxModularDistModuleBreakerPositionDefinition => 'PowerNet-MIB::isxModularDistModuleBreakerPosition',
  isxModularDistModuleBreakerPositionAlarms => '1.3.6.1.4.1.318.1.1.22.2.4.1.8',
  isxModularDistModuleBreakerPositionAlarmsDefinition => 'PowerNet-MIB::isxModularDistModuleBreakerPositionAlarms',
  isxModularDistModuleBreakerCurrent => '1.3.6.1.4.1.318.1.1.22.2.4.1.9',
  isxModularDistModuleBreakerPercent => '1.3.6.1.4.1.318.1.1.22.2.4.1.10',
  isxModularDistModuleBreakerPower => '1.3.6.1.4.1.318.1.1.22.2.4.1.11',
  isxModularDistModuleOutputsTableSize => '1.3.6.1.4.1.318.1.1.22.2.5',
  isxModularDistModuleOutputTable => '1.3.6.1.4.1.318.1.1.22.2.6',
  isxModularDistModuleOutputEntry => '1.3.6.1.4.1.318.1.1.22.2.6.1',
  isxModularDistModuleOutputModIndex => '1.3.6.1.4.1.318.1.1.22.2.6.1.1',
  isxModularDistModuleOutputNumCables => '1.3.6.1.4.1.318.1.1.22.2.6.1.2',
  isxModularDistModuleOutputCordIndex => '1.3.6.1.4.1.318.1.1.22.2.6.1.3',
  isxModularDistModuleOutputName => '1.3.6.1.4.1.318.1.1.22.2.6.1.4',
  isxModularDistModuleOutputLocation => '1.3.6.1.4.1.318.1.1.22.2.6.1.5',
  isxModularDistModuleOutputStatus => '1.3.6.1.4.1.318.1.1.22.2.6.1.6',
  isxModularDistModuleOutputStatusDefinition => 'PowerNet-MIB::isxModularDistModuleOutputStatus',
  isxModularDistModuleOutputAlarmGeneration => '1.3.6.1.4.1.318.1.1.22.2.6.1.7',
  isxModularDistModuleOutputAlarmGenerationDefinition => 'PowerNet-MIB::isxModularDistModuleOutputAlarmGeneration',
  isxModularDistModuleOutputBreakerMap => '1.3.6.1.4.1.318.1.1.22.2.6.1.8',
  isxModularDistModuleOutputThresholdMin => '1.3.6.1.4.1.318.1.1.22.2.6.1.9',
  isxModularDistModuleOutputThresholdLow => '1.3.6.1.4.1.318.1.1.22.2.6.1.10',
  isxModularDistModuleOutputThresholdHigh => '1.3.6.1.4.1.318.1.1.22.2.6.1.11',
  isxModularDistModuleOutputThresholdMax => '1.3.6.1.4.1.318.1.1.22.2.6.1.12',
  isxModularDistModuleOutputAlarmMinEnable => '1.3.6.1.4.1.318.1.1.22.2.6.1.13',
  isxModularDistModuleOutputAlarmMinEnableDefinition => 'PowerNet-MIB::isxModularDistModuleOutputAlarmMinEnable',
  isxModularDistModuleOutputAlarmLowEnable => '1.3.6.1.4.1.318.1.1.22.2.6.1.14',
  isxModularDistModuleOutputAlarmLowEnableDefinition => 'PowerNet-MIB::isxModularDistModuleOutputAlarmLowEnable',
  isxModularDistModuleOutputAlarmHighEnable => '1.3.6.1.4.1.318.1.1.22.2.6.1.15',
  isxModularDistModuleOutputAlarmHighEnableDefinition => 'PowerNet-MIB::isxModularDistModuleOutputAlarmHighEnable',
  isxModularDistModuleOutputAlarmMaxEnable => '1.3.6.1.4.1.318.1.1.22.2.6.1.16',
  isxModularDistModuleOutputAlarmMaxEnableDefinition => 'PowerNet-MIB::isxModularDistModuleOutputAlarmMaxEnable',
  isxModularDistModuleOutputCableLength => '1.3.6.1.4.1.318.1.1.22.2.6.1.17',
  isxModularDistModuleOutputConnectorType => '1.3.6.1.4.1.318.1.1.22.2.6.1.18',
  isxModularDistModuleOutputAvailableVoltages => '1.3.6.1.4.1.318.1.1.22.2.6.1.19',
  isxModularDistModuleOutputTotalPower => '1.3.6.1.4.1.318.1.1.22.2.6.1.20',
  isxModularDistModuleOutputKwhUsage => '1.3.6.1.4.1.318.1.1.22.2.6.1.21',
  isxModularDistModuleOutputKwhReset => '1.3.6.1.4.1.318.1.1.22.2.6.1.22',
  isxModularDistModuleOutputKwhResetDefinition => 'PowerNet-MIB::isxModularDistModuleOutputKwhReset',
  isxModularDistModuleOutputKwhResetDate => '1.3.6.1.4.1.318.1.1.22.2.6.1.23',
  isxModularDistSubFeeds => '1.3.6.1.4.1.318.1.1.22.3',
  isxModularDistSubFeedInfoTableSize => '1.3.6.1.4.1.318.1.1.22.3.1',
  isxModularDistSubFeedInfoTable => '1.3.6.1.4.1.318.1.1.22.3.2',
  isxModularDistSubFeedInfoEntry => '1.3.6.1.4.1.318.1.1.22.3.2.1',
  isxModularDistSubFeedInfoSubIndex => '1.3.6.1.4.1.318.1.1.22.3.2.1.1',
  isxModularDistSubFeedInfoName => '1.3.6.1.4.1.318.1.1.22.3.2.1.2',
  isxModularDistSubFeedInfoLocation => '1.3.6.1.4.1.318.1.1.22.3.2.1.3',
  isxModularDistSubFeedInfoBreakerRating => '1.3.6.1.4.1.318.1.1.22.3.2.1.4',
  isxModularDistSubFeedInfoBreakerPosition => '1.3.6.1.4.1.318.1.1.22.3.2.1.5',
  isxModularDistSubFeedInfoBreakerPositionDefinition => 'PowerNet-MIB::isxModularDistSubFeedInfoBreakerPosition',
  isxModularDistSubFeedInfoAlarmStatus => '1.3.6.1.4.1.318.1.1.22.3.2.1.6',
  isxModularDistSubFeedInfoAlarmStatusDefinition => 'PowerNet-MIB::isxModularDistSubFeedInfoAlarmStatus',
  isxModularDistSubFeedInfoAlarmGeneration => '1.3.6.1.4.1.318.1.1.22.3.2.1.7',
  isxModularDistSubFeedInfoAlarmGenerationDefinition => 'PowerNet-MIB::isxModularDistSubFeedInfoAlarmGeneration',
  isxModularDistSubFeedInfoThresholdMin => '1.3.6.1.4.1.318.1.1.22.3.2.1.8',
  isxModularDistSubFeedInfoThresholdLow => '1.3.6.1.4.1.318.1.1.22.3.2.1.9',
  isxModularDistSubFeedInfoThresholdHigh => '1.3.6.1.4.1.318.1.1.22.3.2.1.10',
  isxModularDistSubFeedInfoThresholdMax => '1.3.6.1.4.1.318.1.1.22.3.2.1.11',
  isxModularDistSubFeedInfoAlarmMinEnable => '1.3.6.1.4.1.318.1.1.22.3.2.1.12',
  isxModularDistSubFeedInfoAlarmMinEnableDefinition => 'PowerNet-MIB::isxModularDistSubFeedInfoAlarmMinEnable',
  isxModularDistSubFeedInfoAlarmLowEnable => '1.3.6.1.4.1.318.1.1.22.3.2.1.13',
  isxModularDistSubFeedInfoAlarmLowEnableDefinition => 'PowerNet-MIB::isxModularDistSubFeedInfoAlarmLowEnable',
  isxModularDistSubFeedInfoAlarmHighEnable => '1.3.6.1.4.1.318.1.1.22.3.2.1.14',
  isxModularDistSubFeedInfoAlarmHighEnableDefinition => 'PowerNet-MIB::isxModularDistSubFeedInfoAlarmHighEnable',
  isxModularDistSubFeedInfoAlarmMaxEnable => '1.3.6.1.4.1.318.1.1.22.3.2.1.15',
  isxModularDistSubFeedInfoAlarmMaxEnableDefinition => 'PowerNet-MIB::isxModularDistSubFeedInfoAlarmMaxEnable',
  isxModularDistSubFeedInfoBreakerAlarmEnable => '1.3.6.1.4.1.318.1.1.22.3.2.1.16',
  isxModularDistSubFeedInfoBreakerAlarmEnableDefinition => 'PowerNet-MIB::isxModularDistSubFeedInfoBreakerAlarmEnable',
  isxModularDistSubFeedInfoTotalPower => '1.3.6.1.4.1.318.1.1.22.3.2.1.17',
  isxModularDistSubFeedInfoKwhUsage => '1.3.6.1.4.1.318.1.1.22.3.2.1.18',
  isxModularDistSubFeedInfoKwhReset => '1.3.6.1.4.1.318.1.1.22.3.2.1.19',
  isxModularDistSubFeedInfoKwhResetDefinition => 'PowerNet-MIB::isxModularDistSubFeedInfoKwhReset',
  isxModularDistSubFeedInfoKwhResetDate => '1.3.6.1.4.1.318.1.1.22.3.2.1.20',
  isxModularDistSubFeedLoadingTableSize => '1.3.6.1.4.1.318.1.1.22.3.3',
  isxModularDistSubFeedLoadingTable => '1.3.6.1.4.1.318.1.1.22.3.4',
  isxModularDistSubFeedLoadingEntry => '1.3.6.1.4.1.318.1.1.22.3.4.1',
  isxModularDistSubFeedLoadingSubIndex => '1.3.6.1.4.1.318.1.1.22.3.4.1.1',
  isxModularDistSubFeedLoadingPhaseIndex => '1.3.6.1.4.1.318.1.1.22.3.4.1.2',
  isxModularDistSubFeedLoadingPhaseIndexDefinition => 'PowerNet-MIB::isxModularDistSubFeedLoadingPhaseIndex',
  isxModularDistSubFeedLoadingAlarmStatus => '1.3.6.1.4.1.318.1.1.22.3.4.1.3',
  isxModularDistSubFeedLoadingCurrent => '1.3.6.1.4.1.318.1.1.22.3.4.1.4',
  isxModularDistSubFeedLoadingPercent => '1.3.6.1.4.1.318.1.1.22.3.4.1.5',
  isxModularDistSubFeedLoadingPower => '1.3.6.1.4.1.318.1.1.22.3.4.1.6',
  isxModularDistTotals => '1.3.6.1.4.1.318.1.1.22.4',
  isxModularDistSysVoltage => '1.3.6.1.4.1.318.1.1.22.4.1',
  isxModularDistSysOutputVoltageNominalLineToNeutral => '1.3.6.1.4.1.318.1.1.22.4.1.1',
  isxModularDistSysOutputVoltageNominalLineToLine => '1.3.6.1.4.1.318.1.1.22.4.1.2',
  isxModularDistSysOutputNominalFrequency => '1.3.6.1.4.1.318.1.1.22.4.1.3',
  isxModularDistSysOutputFrequency => '1.3.6.1.4.1.318.1.1.22.4.1.4',
  isxModularDistSysOutputVoltageMonitoring => '1.3.6.1.4.1.318.1.1.22.4.1.5',
  isxModularDistSysOutputVoltageMonitoringDefinition => 'PowerNet-MIB::isxModularDistSysOutputVoltageMonitoring',
  isxModularDistSysOutputVoltageThresholdMin => '1.3.6.1.4.1.318.1.1.22.4.1.6',
  isxModularDistSysOutputVoltageThresholdLow => '1.3.6.1.4.1.318.1.1.22.4.1.7',
  isxModularDistSysOutputVoltageThresholdHigh => '1.3.6.1.4.1.318.1.1.22.4.1.8',
  isxModularDistSysOutputVoltageThresholdMax => '1.3.6.1.4.1.318.1.1.22.4.1.9',
  isxModularDistSysOutputVoltageAlarmMinEnable => '1.3.6.1.4.1.318.1.1.22.4.1.10',
  isxModularDistSysOutputVoltageAlarmMinEnableDefinition => 'PowerNet-MIB::isxModularDistSysOutputVoltageAlarmMinEnable',
  isxModularDistSysOutputVoltageAlarmLowEnable => '1.3.6.1.4.1.318.1.1.22.4.1.11',
  isxModularDistSysOutputVoltageAlarmLowEnableDefinition => 'PowerNet-MIB::isxModularDistSysOutputVoltageAlarmLowEnable',
  isxModularDistSysOutputVoltageAlarmHighEnable => '1.3.6.1.4.1.318.1.1.22.4.1.12',
  isxModularDistSysOutputVoltageAlarmHighEnableDefinition => 'PowerNet-MIB::isxModularDistSysOutputVoltageAlarmHighEnable',
  isxModularDistSysOutputVoltageAlarmMaxEnable => '1.3.6.1.4.1.318.1.1.22.4.1.13',
  isxModularDistSysOutputVoltageAlarmMaxEnableDefinition => 'PowerNet-MIB::isxModularDistSysOutputVoltageAlarmMaxEnable',
  isxModularDistSysOutputVoltageFrequencyTolerance => '1.3.6.1.4.1.318.1.1.22.4.1.14',
  isxModularDistSysOutputVoltageFrequencyToleranceDefinition => 'PowerNet-MIB::isxModularDistSysOutputVoltageFrequencyTolerance',
  isxModularDistSysVoltageTable => '1.3.6.1.4.1.318.1.1.22.4.1.15',
  isxModularDistSysVoltageEntry => '1.3.6.1.4.1.318.1.1.22.4.1.15.1',
  isxModularDistSysVoltagePhaseIndex => '1.3.6.1.4.1.318.1.1.22.4.1.15.1.1',
  isxModularDistSysVoltagePhaseIndexDefinition => 'PowerNet-MIB::isxModularDistSysVoltagePhaseIndex',
  isxModularDistSysVoltageAlarmStatus => '1.3.6.1.4.1.318.1.1.22.4.1.15.1.2',
  isxModularDistSysVoltageLtoN => '1.3.6.1.4.1.318.1.1.22.4.1.15.1.3',
  isxModularDistSysVoltageLtoL => '1.3.6.1.4.1.318.1.1.22.4.1.15.1.4',
  isxModularDistSysCurrent => '1.3.6.1.4.1.318.1.1.22.4.2',
  isxModularDistSysCurrentRating => '1.3.6.1.4.1.318.1.1.22.4.2.1',
  isxModularDistSysCurrentMonitoring => '1.3.6.1.4.1.318.1.1.22.4.2.2',
  isxModularDistSysCurrentMonitoringDefinition => 'PowerNet-MIB::isxModularDistSysCurrentMonitoring',
  isxModularDistSysCurrentThresholdMin => '1.3.6.1.4.1.318.1.1.22.4.2.3',
  isxModularDistSysCurrentThresholdLow => '1.3.6.1.4.1.318.1.1.22.4.2.4',
  isxModularDistSysCurrentThresholdHigh => '1.3.6.1.4.1.318.1.1.22.4.2.5',
  isxModularDistSysCurrentThresholdMax => '1.3.6.1.4.1.318.1.1.22.4.2.6',
  isxModularDistSysCurrentAlarmMinEnable => '1.3.6.1.4.1.318.1.1.22.4.2.7',
  isxModularDistSysCurrentAlarmMinEnableDefinition => 'PowerNet-MIB::isxModularDistSysCurrentAlarmMinEnable',
  isxModularDistSysCurrentAlarmLowEnable => '1.3.6.1.4.1.318.1.1.22.4.2.8',
  isxModularDistSysCurrentAlarmLowEnableDefinition => 'PowerNet-MIB::isxModularDistSysCurrentAlarmLowEnable',
  isxModularDistSysCurrentAlarmHighEnable => '1.3.6.1.4.1.318.1.1.22.4.2.9',
  isxModularDistSysCurrentAlarmHighEnableDefinition => 'PowerNet-MIB::isxModularDistSysCurrentAlarmHighEnable',
  isxModularDistSysCurrentAlarmMaxEnable => '1.3.6.1.4.1.318.1.1.22.4.2.10',
  isxModularDistSysCurrentAlarmMaxEnableDefinition => 'PowerNet-MIB::isxModularDistSysCurrentAlarmMaxEnable',
  isxModularDistSysCurrentTable => '1.3.6.1.4.1.318.1.1.22.4.2.11',
  isxModularDistSysCurrentEntry => '1.3.6.1.4.1.318.1.1.22.4.2.11.1',
  isxModularDistSysCurrentPhaseIndex => '1.3.6.1.4.1.318.1.1.22.4.2.11.1.1',
  isxModularDistSysCurrentPhaseIndexDefinition => 'PowerNet-MIB::isxModularDistSysCurrentPhaseIndex',
  isxModularDistSysCurrentAlarmStatus => '1.3.6.1.4.1.318.1.1.22.4.2.11.1.2',
  isxModularDistSysCurrentAmps => '1.3.6.1.4.1.318.1.1.22.4.2.11.1.3',
  isxModularDistSysCurrentPercent => '1.3.6.1.4.1.318.1.1.22.4.2.11.1.4',
  isxModularDistSysPower => '1.3.6.1.4.1.318.1.1.22.4.3',
  isxModularDistSysPowerTotal => '1.3.6.1.4.1.318.1.1.22.4.3.1',
  isxModularDistSysPowerKwhUsage => '1.3.6.1.4.1.318.1.1.22.4.3.2',
  isxModularDistSysPowerKwhReset => '1.3.6.1.4.1.318.1.1.22.4.3.3',
  isxModularDistSysPowerKwhResetDefinition => 'PowerNet-MIB::isxModularDistSysPowerKwhReset',
  isxModularDistSysPowerKwhResetDate => '1.3.6.1.4.1.318.1.1.22.4.3.4',
  isxModularDistSysPowerTable => '1.3.6.1.4.1.318.1.1.22.4.3.5',
  isxModularDistSysPowerEntry => '1.3.6.1.4.1.318.1.1.22.4.3.5.1',
  isxModularDistSysPowerPhaseIndex => '1.3.6.1.4.1.318.1.1.22.4.3.5.1.1',
  isxModularDistSysPowerPhaseIndexDefinition => 'PowerNet-MIB::isxModularDistSysPowerPhaseIndex',
  isxModularDistSysPowerKw => '1.3.6.1.4.1.318.1.1.22.4.3.5.1.2',
  isxModularDistSysPowerKwhPhaseUsage => '1.3.6.1.4.1.318.1.1.22.4.3.5.1.3',
  isxModularPdu => '1.3.6.1.4.1.318.1.1.23',
  isxModularPduIdent => '1.3.6.1.4.1.318.1.1.23.1',
  isxModularPduIdentModelNumber => '1.3.6.1.4.1.318.1.1.23.1.1',
  isxModularPduIdentSerialNumber => '1.3.6.1.4.1.318.1.1.23.1.2',
  isxModularPduIdentDateOfManufacture => '1.3.6.1.4.1.318.1.1.23.1.3',
  isxModularPduIdentMonitorCardSerialNumber => '1.3.6.1.4.1.318.1.1.23.1.4',
  isxModularPduIdentMonitorCardHardwareRev => '1.3.6.1.4.1.318.1.1.23.1.5',
  isxModularPduIdentMonitorCardFirmwareAppRev => '1.3.6.1.4.1.318.1.1.23.1.6',
  isxModularPduIdentMonitorCardFirmwareAppOSRev => '1.3.6.1.4.1.318.1.1.23.1.7',
  isxModularPduDevice => '1.3.6.1.4.1.318.1.1.23.2',
  isxModularPduDeviceTransformerPresent => '1.3.6.1.4.1.318.1.1.23.2.1',
  isxModularPduDeviceTransformerPresentDefinition => 'PowerNet-MIB::isxModularPduDeviceTransformerPresent',
  isxModularPduDeviceServiceType => '1.3.6.1.4.1.318.1.1.23.2.2',
  isxModularPduDeviceServiceTypeDefinition => 'PowerNet-MIB::isxModularPduDeviceServiceType',
  isxModularPduDeviceFansPresent => '1.3.6.1.4.1.318.1.1.23.2.3',
  isxModularPduDeviceFansPresentDefinition => 'PowerNet-MIB::isxModularPduDeviceFansPresent',
  isxModularPduDeviceNominalMainInputVoltage => '1.3.6.1.4.1.318.1.1.23.2.4',
  isxModularPduStatus => '1.3.6.1.4.1.318.1.1.23.3',
  isxModularPduAlarmStatus => '1.3.6.1.4.1.318.1.1.23.3.1',
  isxModularPduAlarmStatusDefinition => 'PowerNet-MIB::isxModularPduAlarmStatus',
  isxModularPduTransformerTempStatus => '1.3.6.1.4.1.318.1.1.23.3.2',
  isxModularPduTransformerTempStatusDefinition => 'PowerNet-MIB::isxModularPduTransformerTempStatus',
  isxModularPduFanStatus => '1.3.6.1.4.1.318.1.1.23.3.3',
  isxModularPduFanStatusDefinition => 'PowerNet-MIB::isxModularPduFanStatus',
  universalInputOutput => '1.3.6.1.4.1.318.1.1.25',
  uioSensor => '1.3.6.1.4.1.318.1.1.25.1',
  uioSensorStatusTableSize => '1.3.6.1.4.1.318.1.1.25.1.1',
  uioSensorStatusTable => '1.3.6.1.4.1.318.1.1.25.1.2',
  uioSensorStatusEntry => '1.3.6.1.4.1.318.1.1.25.1.2.1',
  uioSensorStatusPortID => '1.3.6.1.4.1.318.1.1.25.1.2.1.1',
  uioSensorStatusSensorID => '1.3.6.1.4.1.318.1.1.25.1.2.1.2',
  uioSensorStatusSensorName => '1.3.6.1.4.1.318.1.1.25.1.2.1.3',
  uioSensorStatusSensorLocation => '1.3.6.1.4.1.318.1.1.25.1.2.1.4',
  uioSensorStatusTemperatureDegF => '1.3.6.1.4.1.318.1.1.25.1.2.1.5',
  uioSensorStatusTemperatureDegC => '1.3.6.1.4.1.318.1.1.25.1.2.1.6',
  uioSensorStatusHumidity => '1.3.6.1.4.1.318.1.1.25.1.2.1.7',
  uioSensorStatusViolationStatus => '1.3.6.1.4.1.318.1.1.25.1.2.1.8',
  uioSensorStatusAlarmStatus => '1.3.6.1.4.1.318.1.1.25.1.2.1.9',
  uioSensorStatusAlarmStatusDefinition => 'PowerNet-MIB::uioSensorStatusAlarmStatus',
  uioSensorStatusCommStatus => '1.3.6.1.4.1.318.1.1.25.1.2.1.10',
  uioSensorStatusCommStatusDefinition => 'PowerNet-MIB::uioSensorStatusCommStatus',
  uioInputContact => '1.3.6.1.4.1.318.1.1.25.2',
  uioInputContactStatusTableSize => '1.3.6.1.4.1.318.1.1.25.2.1',
  uioInputContactStatusTable => '1.3.6.1.4.1.318.1.1.25.2.2',
  uioInputContactStatusEntry => '1.3.6.1.4.1.318.1.1.25.2.2.1',
  uioInputContactStatusPortID => '1.3.6.1.4.1.318.1.1.25.2.2.1.1',
  uioInputContactStatusContactID => '1.3.6.1.4.1.318.1.1.25.2.2.1.2',
  uioInputContactStatusContactName => '1.3.6.1.4.1.318.1.1.25.2.2.1.3',
  uioInputContactStatusContactLocation => '1.3.6.1.4.1.318.1.1.25.2.2.1.4',
  uioInputContactStatusCurrentState => '1.3.6.1.4.1.318.1.1.25.2.2.1.5',
  uioInputContactStatusCurrentStateDefinition => 'PowerNet-MIB::uioInputContactStatusCurrentState',
  uioInputContactStatusAlarmStatus => '1.3.6.1.4.1.318.1.1.25.2.2.1.6',
  uioInputContactStatusAlarmStatusDefinition => 'PowerNet-MIB::uioInputContactStatusAlarmStatus',
  uioInputContactStatusCommStatus => '1.3.6.1.4.1.318.1.1.25.2.2.1.7',
  uioInputContactStatusCommStatusDefinition => 'PowerNet-MIB::uioInputContactStatusCommStatus',
  uioOutputRelay => '1.3.6.1.4.1.318.1.1.25.3',
  uioOutputRelayStatusTableSize => '1.3.6.1.4.1.318.1.1.25.3.1',
  uioOutputRelayStatusTable => '1.3.6.1.4.1.318.1.1.25.3.2',
  uioOutputRelayStatusEntry => '1.3.6.1.4.1.318.1.1.25.3.2.1',
  uioOutputRelayStatusPortID => '1.3.6.1.4.1.318.1.1.25.3.2.1.1',
  uioOutputRelayStatusRelayID => '1.3.6.1.4.1.318.1.1.25.3.2.1.2',
  uioOutputRelayStatusRelayName => '1.3.6.1.4.1.318.1.1.25.3.2.1.3',
  uioOutputRelayStatusRelayLocation => '1.3.6.1.4.1.318.1.1.25.3.2.1.4',
  uioOutputRelayStatusCurrentState => '1.3.6.1.4.1.318.1.1.25.3.2.1.5',
  uioOutputRelayStatusCurrentStateDefinition => 'PowerNet-MIB::uioOutputRelayStatusCurrentState',
  uioOutputRelayStatusAlarmStatus => '1.3.6.1.4.1.318.1.1.25.3.2.1.6',
  uioOutputRelayStatusAlarmStatusDefinition => 'PowerNet-MIB::uioOutputRelayStatusAlarmStatus',
  uioOutputRelayStatusCommStatus => '1.3.6.1.4.1.318.1.1.25.3.2.1.7',
  uioOutputRelayStatusCommStatusDefinition => 'PowerNet-MIB::uioOutputRelayStatusCommStatus',
  rPDU2 => '1.3.6.1.4.1.318.1.1.26',
  rPDU2IdentTableSize => '1.3.6.1.4.1.318.1.1.26.1',
  rPDU2IdentTable => '1.3.6.1.4.1.318.1.1.26.2',
  rPDU2IdentEntry => '1.3.6.1.4.1.318.1.1.26.2.1',
  rPDU2IdentIndex => '1.3.6.1.4.1.318.1.1.26.2.1.1',
  rPDU2IdentModule => '1.3.6.1.4.1.318.1.1.26.2.1.2',
  rPDU2IdentName => '1.3.6.1.4.1.318.1.1.26.2.1.3',
  rPDU2IdentLocation => '1.3.6.1.4.1.318.1.1.26.2.1.4',
  rPDU2IdentHardwareRev => '1.3.6.1.4.1.318.1.1.26.2.1.5',
  rPDU2IdentFirmwareRev => '1.3.6.1.4.1.318.1.1.26.2.1.6',
  rPDU2IdentDateOfManufacture => '1.3.6.1.4.1.318.1.1.26.2.1.7',
  rPDU2IdentModelNumber => '1.3.6.1.4.1.318.1.1.26.2.1.8',
  rPDU2IdentSerialNumber => '1.3.6.1.4.1.318.1.1.26.2.1.9',
  rPDU2IdentContact => '1.3.6.1.4.1.318.1.1.26.2.1.10',
  rPDU2DeviceTableSize => '1.3.6.1.4.1.318.1.1.26.3',
  rPDU2Device => '1.3.6.1.4.1.318.1.1.26.4',
  rPDU2DeviceConfigTable => '1.3.6.1.4.1.318.1.1.26.4.1',
  rPDU2DeviceConfigEntry => '1.3.6.1.4.1.318.1.1.26.4.1.1',
  rPDU2DeviceConfigIndex => '1.3.6.1.4.1.318.1.1.26.4.1.1.1',
  rPDU2DeviceConfigModule => '1.3.6.1.4.1.318.1.1.26.4.1.1.2',
  rPDU2DeviceConfigName => '1.3.6.1.4.1.318.1.1.26.4.1.1.3',
  rPDU2DeviceConfigLocation => '1.3.6.1.4.1.318.1.1.26.4.1.1.4',
  rPDU2DeviceConfigDisplayOrientation => '1.3.6.1.4.1.318.1.1.26.4.1.1.5',
  rPDU2DeviceConfigDisplayOrientationDefinition => 'PowerNet-MIB::rPDU2DeviceConfigDisplayOrientation',
  rPDU2DeviceConfigColdstartDelay => '1.3.6.1.4.1.318.1.1.26.4.1.1.6',
  rPDU2DeviceConfigLowLoadPowerThreshold => '1.3.6.1.4.1.318.1.1.26.4.1.1.7',
  rPDU2DeviceConfigNearOverloadPowerThreshold => '1.3.6.1.4.1.318.1.1.26.4.1.1.8',
  rPDU2DeviceConfigOverloadPowerThreshold => '1.3.6.1.4.1.318.1.1.26.4.1.1.9',
  rPDU2DeviceConfigDevicePeakPowerReset => '1.3.6.1.4.1.318.1.1.26.4.1.1.10',
  rPDU2DeviceConfigDevicePeakPowerResetDefinition => 'PowerNet-MIB::rPDU2DeviceConfigDevicePeakPowerReset',
  rPDU2DeviceConfigDeviceEnergyReset => '1.3.6.1.4.1.318.1.1.26.4.1.1.11',
  rPDU2DeviceConfigDeviceEnergyResetDefinition => 'PowerNet-MIB::rPDU2DeviceConfigDeviceEnergyReset',
  rPDU2DeviceConfigOutletsEnergyReset => '1.3.6.1.4.1.318.1.1.26.4.1.1.12',
  rPDU2DeviceConfigOutletsEnergyResetDefinition => 'PowerNet-MIB::rPDU2DeviceConfigOutletsEnergyReset',
  rPDU2DeviceConfigOutletsPeakLoadReset => '1.3.6.1.4.1.318.1.1.26.4.1.1.13',
  rPDU2DeviceConfigOutletsPeakLoadResetDefinition => 'PowerNet-MIB::rPDU2DeviceConfigOutletsPeakLoadReset',
  rPDU2DeviceConfigContact => '1.3.6.1.4.1.318.1.1.26.4.1.1.14',
  rPDU2DevicePropertiesTable => '1.3.6.1.4.1.318.1.1.26.4.2',
  rPDU2DevicePropertiesEntry => '1.3.6.1.4.1.318.1.1.26.4.2.1',
  rPDU2DevicePropertiesIndex => '1.3.6.1.4.1.318.1.1.26.4.2.1.1',
  rPDU2DevicePropertiesModule => '1.3.6.1.4.1.318.1.1.26.4.2.1.2',
  rPDU2DevicePropertiesName => '1.3.6.1.4.1.318.1.1.26.4.2.1.3',
  rPDU2DevicePropertiesNumOutlets => '1.3.6.1.4.1.318.1.1.26.4.2.1.4',
  rPDU2DevicePropertiesNumSwitchedOutlets => '1.3.6.1.4.1.318.1.1.26.4.2.1.5',
  rPDU2DevicePropertiesNumMeteredOutlets => '1.3.6.1.4.1.318.1.1.26.4.2.1.6',
  rPDU2DevicePropertiesNumPhases => '1.3.6.1.4.1.318.1.1.26.4.2.1.7',
  rPDU2DevicePropertiesNumMeteredBanks => '1.3.6.1.4.1.318.1.1.26.4.2.1.8',
  rPDU2DevicePropertiesMaxCurrentRating => '1.3.6.1.4.1.318.1.1.26.4.2.1.9',
  rPDU2DevicePropertiesOrientation => '1.3.6.1.4.1.318.1.1.26.4.2.1.10',
  rPDU2DevicePropertiesOrientationDefinition => 'PowerNet-MIB::rPDU2DevicePropertiesOrientation',
  rPDU2DevicePropertiesOutletLayout => '1.3.6.1.4.1.318.1.1.26.4.2.1.11',
  rPDU2DevicePropertiesOutletLayoutDefinition => 'PowerNet-MIB::rPDU2DevicePropertiesOutletLayout',
  rPDU2DevicePropertiesMaxPhaseCurrentRating => '1.3.6.1.4.1.318.1.1.26.4.2.1.12',
  rPDU2DeviceStatusTable => '1.3.6.1.4.1.318.1.1.26.4.3',
  rPDU2DeviceStatusEntry => '1.3.6.1.4.1.318.1.1.26.4.3.1',
  rPDU2DeviceStatusIndex => '1.3.6.1.4.1.318.1.1.26.4.3.1.1',
  rPDU2DeviceStatusModule => '1.3.6.1.4.1.318.1.1.26.4.3.1.2',
  rPDU2DeviceStatusName => '1.3.6.1.4.1.318.1.1.26.4.3.1.3',
  rPDU2DeviceStatusLoadState => '1.3.6.1.4.1.318.1.1.26.4.3.1.4',
  rPDU2DeviceStatusLoadStateDefinition => 'PowerNet-MIB::rPDU2DeviceStatusLoadState',
  rPDU2DeviceStatusPower => '1.3.6.1.4.1.318.1.1.26.4.3.1.5',
  rPDU2DeviceStatusPeakPower => '1.3.6.1.4.1.318.1.1.26.4.3.1.6',
  rPDU2DeviceStatusPeakPowerTimestamp => '1.3.6.1.4.1.318.1.1.26.4.3.1.7',
  rPDU2DeviceStatusPeakPowerStartTime => '1.3.6.1.4.1.318.1.1.26.4.3.1.8',
  rPDU2DeviceStatusEnergy => '1.3.6.1.4.1.318.1.1.26.4.3.1.9',
  rPDU2DeviceStatusEnergyStartTime => '1.3.6.1.4.1.318.1.1.26.4.3.1.10',
  rPDU2DeviceStatusCommandPending => '1.3.6.1.4.1.318.1.1.26.4.3.1.11',
  rPDU2DeviceStatusCommandPendingDefinition => 'PowerNet-MIB::rPDU2DeviceStatusCommandPending',
  rPDU2DeviceStatusPowerSupplyAlarm => '1.3.6.1.4.1.318.1.1.26.4.3.1.12',
  rPDU2DeviceStatusPowerSupplyAlarmDefinition => 'PowerNet-MIB::rPDU2DeviceStatusPowerSupplyAlarm',
  rPDU2DeviceStatusPowerSupply1Status => '1.3.6.1.4.1.318.1.1.26.4.3.1.13',
  rPDU2DeviceStatusPowerSupply1StatusDefinition => 'PowerNet-MIB::rPDU2DeviceStatusPowerSupply1Status',
  rPDU2DeviceStatusPowerSupply2Status => '1.3.6.1.4.1.318.1.1.26.4.3.1.14',
  rPDU2DeviceStatusPowerSupply2StatusDefinition => 'PowerNet-MIB::rPDU2DeviceStatusPowerSupply2Status',
  rPDU2DeviceStatusOutletsEnergyStartTime => '1.3.6.1.4.1.318.1.1.26.4.3.1.15',
  rPDU2DeviceStatusApparentPower => '1.3.6.1.4.1.318.1.1.26.4.3.1.16',
  rPDU2DeviceStatusPowerFactor => '1.3.6.1.4.1.318.1.1.26.4.3.1.17',
  rPDU2DeviceStatusNPSType => '1.3.6.1.4.1.318.1.1.26.4.3.1.18',
  rPDU2DeviceStatusNPSTypeDefinition => 'PowerNet-MIB::rPDU2DeviceStatusNPSType',
  rPDU2DeviceControlTable => '1.3.6.1.4.1.318.1.1.26.4.4',
  rPDU2DeviceControlEntry => '1.3.6.1.4.1.318.1.1.26.4.4.1',
  rPDU2DeviceControlIndex => '1.3.6.1.4.1.318.1.1.26.4.4.1.1',
  rPDU2DeviceControlModule => '1.3.6.1.4.1.318.1.1.26.4.4.1.2',
  rPDU2DeviceControlName => '1.3.6.1.4.1.318.1.1.26.4.4.1.3',
  rPDU2DeviceControlCommand => '1.3.6.1.4.1.318.1.1.26.4.4.1.4',
  rPDU2DeviceControlCommandDefinition => 'PowerNet-MIB::rPDU2DeviceControlCommand',
  rPDU2PhaseTableSize => '1.3.6.1.4.1.318.1.1.26.5',
  rPDU2Phase => '1.3.6.1.4.1.318.1.1.26.6',
  rPDU2PhaseConfigTable => '1.3.6.1.4.1.318.1.1.26.6.1',
  rPDU2PhaseConfigEntry => '1.3.6.1.4.1.318.1.1.26.6.1.1',
  rPDU2PhaseConfigIndex => '1.3.6.1.4.1.318.1.1.26.6.1.1.1',
  rPDU2PhaseConfigModule => '1.3.6.1.4.1.318.1.1.26.6.1.1.2',
  rPDU2PhaseConfigNumber => '1.3.6.1.4.1.318.1.1.26.6.1.1.3',
  rPDU2PhaseConfigOverloadRestriction => '1.3.6.1.4.1.318.1.1.26.6.1.1.4',
  rPDU2PhaseConfigOverloadRestrictionDefinition => 'PowerNet-MIB::rPDU2PhaseConfigOverloadRestriction',
  rPDU2PhaseConfigLowLoadCurrentThreshold => '1.3.6.1.4.1.318.1.1.26.6.1.1.5',
  rPDU2PhaseConfigNearOverloadCurrentThreshold => '1.3.6.1.4.1.318.1.1.26.6.1.1.6',
  rPDU2PhaseConfigOverloadCurrentThreshold => '1.3.6.1.4.1.318.1.1.26.6.1.1.7',
  rPDU2PhaseConfigPhasePeakCurrentReset => '1.3.6.1.4.1.318.1.1.26.6.1.1.8',
  rPDU2PhaseConfigPhasePeakCurrentResetDefinition => 'PowerNet-MIB::rPDU2PhaseConfigPhasePeakCurrentReset',
  rPDU2PhasePropertiesTable => '1.3.6.1.4.1.318.1.1.26.6.2',
  rPDU2PhasePropertiesEntry => '1.3.6.1.4.1.318.1.1.26.6.2.1',
  rPDU2PhasePropertiesIndex => '1.3.6.1.4.1.318.1.1.26.6.2.1.1',
  rPDU2PhasePropertiesModule => '1.3.6.1.4.1.318.1.1.26.6.2.1.2',
  rPDU2PhasePropertiesNumber => '1.3.6.1.4.1.318.1.1.26.6.2.1.3',
  rPDU2PhaseStatusTable => '1.3.6.1.4.1.318.1.1.26.6.3',
  rPDU2PhaseStatusEntry => '1.3.6.1.4.1.318.1.1.26.6.3.1',
  rPDU2PhaseStatusIndex => '1.3.6.1.4.1.318.1.1.26.6.3.1.1',
  rPDU2PhaseStatusModule => '1.3.6.1.4.1.318.1.1.26.6.3.1.2',
  rPDU2PhaseStatusNumber => '1.3.6.1.4.1.318.1.1.26.6.3.1.3',
  rPDU2PhaseStatusLoadState => '1.3.6.1.4.1.318.1.1.26.6.3.1.4',
  rPDU2PhaseStatusLoadStateDefinition => 'PowerNet-MIB::rPDU2PhaseStatusLoadState',
  rPDU2PhaseStatusCurrent => '1.3.6.1.4.1.318.1.1.26.6.3.1.5',
  rPDU2PhaseStatusVoltage => '1.3.6.1.4.1.318.1.1.26.6.3.1.6',
  rPDU2PhaseStatusPower => '1.3.6.1.4.1.318.1.1.26.6.3.1.7',
  rPDU2PhaseStatusApparentPower => '1.3.6.1.4.1.318.1.1.26.6.3.1.8',
  rPDU2PhaseStatusPowerFactor => '1.3.6.1.4.1.318.1.1.26.6.3.1.9',
  rPDU2PhaseStatusPeakCurrent => '1.3.6.1.4.1.318.1.1.26.6.3.1.10',
  rPDU2PhaseStatusPeakCurrentTimestamp => '1.3.6.1.4.1.318.1.1.26.6.3.1.11',
  rPDU2PhaseStatusPeakCurrentStartTime => '1.3.6.1.4.1.318.1.1.26.6.3.1.12',
  rPDU2BankTableSize => '1.3.6.1.4.1.318.1.1.26.7',
  rPDU2Bank => '1.3.6.1.4.1.318.1.1.26.8',
  rPDU2BankConfigTable => '1.3.6.1.4.1.318.1.1.26.8.1',
  rPDU2BankConfigEntry => '1.3.6.1.4.1.318.1.1.26.8.1.1',
  rPDU2BankConfigIndex => '1.3.6.1.4.1.318.1.1.26.8.1.1.1',
  rPDU2BankConfigModule => '1.3.6.1.4.1.318.1.1.26.8.1.1.2',
  rPDU2BankConfigNumber => '1.3.6.1.4.1.318.1.1.26.8.1.1.3',
  rPDU2BankConfigOverloadRestriction => '1.3.6.1.4.1.318.1.1.26.8.1.1.4',
  rPDU2BankConfigOverloadRestrictionDefinition => 'PowerNet-MIB::rPDU2BankConfigOverloadRestriction',
  rPDU2BankConfigLowLoadCurrentThreshold => '1.3.6.1.4.1.318.1.1.26.8.1.1.5',
  rPDU2BankConfigNearOverloadCurrentThreshold => '1.3.6.1.4.1.318.1.1.26.8.1.1.6',
  rPDU2BankConfigOverloadCurrentThreshold => '1.3.6.1.4.1.318.1.1.26.8.1.1.7',
  rPDU2BankConfigBankPeakCurrentReset => '1.3.6.1.4.1.318.1.1.26.8.1.1.8',
  rPDU2BankConfigBankPeakCurrentResetDefinition => 'PowerNet-MIB::rPDU2BankConfigBankPeakCurrentReset',
  rPDU2BankPropertiesTable => '1.3.6.1.4.1.318.1.1.26.8.2',
  rPDU2BankPropertiesEntry => '1.3.6.1.4.1.318.1.1.26.8.2.1',
  rPDU2BankPropertiesIndex => '1.3.6.1.4.1.318.1.1.26.8.2.1.1',
  rPDU2BankPropertiesModule => '1.3.6.1.4.1.318.1.1.26.8.2.1.2',
  rPDU2BankPropertiesNumber => '1.3.6.1.4.1.318.1.1.26.8.2.1.3',
  rPDU2BankPropertiesPhaseLayout => '1.3.6.1.4.1.318.1.1.26.8.2.1.4',
  rPDU2BankPropertiesPhaseLayoutDefinition => 'PowerNet-MIB::Rpdu2OutletPhaseLayoutType',
  rPDU2BankStatusTable => '1.3.6.1.4.1.318.1.1.26.8.3',
  rPDU2BankStatusEntry => '1.3.6.1.4.1.318.1.1.26.8.3.1',
  rPDU2BankStatusIndex => '1.3.6.1.4.1.318.1.1.26.8.3.1.1',
  rPDU2BankStatusModule => '1.3.6.1.4.1.318.1.1.26.8.3.1.2',
  rPDU2BankStatusNumber => '1.3.6.1.4.1.318.1.1.26.8.3.1.3',
  rPDU2BankStatusLoadState => '1.3.6.1.4.1.318.1.1.26.8.3.1.4',
  rPDU2BankStatusLoadStateDefinition => 'PowerNet-MIB::rPDU2BankStatusLoadState',
  rPDU2BankStatusCurrent => '1.3.6.1.4.1.318.1.1.26.8.3.1.5',
  rPDU2BankStatusPeakCurrent => '1.3.6.1.4.1.318.1.1.26.8.3.1.6',
  rPDU2BankStatusPeakCurrentTimestamp => '1.3.6.1.4.1.318.1.1.26.8.3.1.7',
  rPDU2BankStatusPeakCurrentStartTime => '1.3.6.1.4.1.318.1.1.26.8.3.1.8',
  rPDU2Outlet => '1.3.6.1.4.1.318.1.1.26.9',
  rPDU2OutletSwitchedTableSize => '1.3.6.1.4.1.318.1.1.26.9.1',
  rPDU2OutletSwitched => '1.3.6.1.4.1.318.1.1.26.9.2',
  rPDU2OutletSwitchedConfigTable => '1.3.6.1.4.1.318.1.1.26.9.2.1',
  rPDU2OutletSwitchedConfigEntry => '1.3.6.1.4.1.318.1.1.26.9.2.1.1',
  rPDU2OutletSwitchedConfigIndex => '1.3.6.1.4.1.318.1.1.26.9.2.1.1.1',
  rPDU2OutletSwitchedConfigModule => '1.3.6.1.4.1.318.1.1.26.9.2.1.1.2',
  rPDU2OutletSwitchedConfigName => '1.3.6.1.4.1.318.1.1.26.9.2.1.1.3',
  rPDU2OutletSwitchedConfigNumber => '1.3.6.1.4.1.318.1.1.26.9.2.1.1.4',
  rPDU2OutletSwitchedConfigPowerOnTime => '1.3.6.1.4.1.318.1.1.26.9.2.1.1.5',
  rPDU2OutletSwitchedConfigPowerOffTime => '1.3.6.1.4.1.318.1.1.26.9.2.1.1.6',
  rPDU2OutletSwitchedConfigRebootDuration => '1.3.6.1.4.1.318.1.1.26.9.2.1.1.7',
  rPDU2OutletSwitchedPropertiesTable => '1.3.6.1.4.1.318.1.1.26.9.2.2',
  rPDU2OutletSwitchedPropertiesEntry => '1.3.6.1.4.1.318.1.1.26.9.2.2.1',
  rPDU2OutletSwitchedPropertiesIndex => '1.3.6.1.4.1.318.1.1.26.9.2.2.1.1',
  rPDU2OutletSwitchedPropertiesModule => '1.3.6.1.4.1.318.1.1.26.9.2.2.1.2',
  rPDU2OutletSwitchedPropertiesName => '1.3.6.1.4.1.318.1.1.26.9.2.2.1.3',
  rPDU2OutletSwitchedPropertiesNumber => '1.3.6.1.4.1.318.1.1.26.9.2.2.1.4',
  rPDU2OutletSwitchedPropertiesPhaseLayout => '1.3.6.1.4.1.318.1.1.26.9.2.2.1.5',
  rPDU2OutletSwitchedPropertiesPhaseLayoutDefinition => 'PowerNet-MIB::Rpdu2OutletPhaseLayoutType',
  rPDU2OutletSwitchedPropertiesBank => '1.3.6.1.4.1.318.1.1.26.9.2.2.1.6',
  rPDU2OutletSwitchedStatusTable => '1.3.6.1.4.1.318.1.1.26.9.2.3',
  rPDU2OutletSwitchedStatusEntry => '1.3.6.1.4.1.318.1.1.26.9.2.3.1',
  rPDU2OutletSwitchedStatusIndex => '1.3.6.1.4.1.318.1.1.26.9.2.3.1.1',
  rPDU2OutletSwitchedStatusModule => '1.3.6.1.4.1.318.1.1.26.9.2.3.1.2',
  rPDU2OutletSwitchedStatusName => '1.3.6.1.4.1.318.1.1.26.9.2.3.1.3',
  rPDU2OutletSwitchedStatusNumber => '1.3.6.1.4.1.318.1.1.26.9.2.3.1.4',
  rPDU2OutletSwitchedStatusState => '1.3.6.1.4.1.318.1.1.26.9.2.3.1.5',
  rPDU2OutletSwitchedStatusStateDefinition => 'PowerNet-MIB::rPDU2OutletSwitchedStatusState',
  rPDU2OutletSwitchedStatusCommandPending => '1.3.6.1.4.1.318.1.1.26.9.2.3.1.6',
  rPDU2OutletSwitchedStatusCommandPendingDefinition => 'PowerNet-MIB::rPDU2OutletSwitchedStatusCommandPending',
  rPDU2OutletSwitchedControlTable => '1.3.6.1.4.1.318.1.1.26.9.2.4',
  rPDU2OutletSwitchedControlEntry => '1.3.6.1.4.1.318.1.1.26.9.2.4.1',
  rPDU2OutletSwitchedControlIndex => '1.3.6.1.4.1.318.1.1.26.9.2.4.1.1',
  rPDU2OutletSwitchedControlModule => '1.3.6.1.4.1.318.1.1.26.9.2.4.1.2',
  rPDU2OutletSwitchedControlName => '1.3.6.1.4.1.318.1.1.26.9.2.4.1.3',
  rPDU2OutletSwitchedControlNumber => '1.3.6.1.4.1.318.1.1.26.9.2.4.1.4',
  rPDU2OutletSwitchedControlCommand => '1.3.6.1.4.1.318.1.1.26.9.2.4.1.5',
  rPDU2OutletSwitchedControlCommandDefinition => 'PowerNet-MIB::rPDU2OutletSwitchedControlCommand',
  rPDU2OutletMeteredTableSize => '1.3.6.1.4.1.318.1.1.26.9.3',
  rPDU2OutletMetered => '1.3.6.1.4.1.318.1.1.26.9.4',
  rPDU2OutletMeteredConfigTable => '1.3.6.1.4.1.318.1.1.26.9.4.1',
  rPDU2OutletMeteredConfigEntry => '1.3.6.1.4.1.318.1.1.26.9.4.1.1',
  rPDU2OutletMeteredConfigIndex => '1.3.6.1.4.1.318.1.1.26.9.4.1.1.1',
  rPDU2OutletMeteredConfigModule => '1.3.6.1.4.1.318.1.1.26.9.4.1.1.2',
  rPDU2OutletMeteredConfigName => '1.3.6.1.4.1.318.1.1.26.9.4.1.1.3',
  rPDU2OutletMeteredConfigNumber => '1.3.6.1.4.1.318.1.1.26.9.4.1.1.4',
  rPDU2OutletMeteredConfigLowLoadCurrentThreshold => '1.3.6.1.4.1.318.1.1.26.9.4.1.1.5',
  rPDU2OutletMeteredConfigNearOverloadCurrentThreshold => '1.3.6.1.4.1.318.1.1.26.9.4.1.1.6',
  rPDU2OutletMeteredConfigOverloadCurrentThreshold => '1.3.6.1.4.1.318.1.1.26.9.4.1.1.7',
  rPDU2OutletMeteredPropertiesTable => '1.3.6.1.4.1.318.1.1.26.9.4.2',
  rPDU2OutletMeteredPropertiesEntry => '1.3.6.1.4.1.318.1.1.26.9.4.2.1',
  rPDU2OutletMeteredPropertiesIndex => '1.3.6.1.4.1.318.1.1.26.9.4.2.1.1',
  rPDU2OutletMeteredPropertiesModule => '1.3.6.1.4.1.318.1.1.26.9.4.2.1.2',
  rPDU2OutletMeteredPropertiesName => '1.3.6.1.4.1.318.1.1.26.9.4.2.1.3',
  rPDU2OutletMeteredPropertiesNumber => '1.3.6.1.4.1.318.1.1.26.9.4.2.1.4',
  rPDU2OutletMeteredPropertiesLayout => '1.3.6.1.4.1.318.1.1.26.9.4.2.1.5',
  rPDU2OutletMeteredPropertiesLayoutDefinition => 'PowerNet-MIB::Rpdu2OutletPhaseLayoutType',
  rPDU2OutletMeteredPropertiesPowerRating => '1.3.6.1.4.1.318.1.1.26.9.4.2.1.6',
  rPDU2OutletMeteredPropertiesBank => '1.3.6.1.4.1.318.1.1.26.9.4.2.1.7',
  rPDU2OutletMeteredStatusTable => '1.3.6.1.4.1.318.1.1.26.9.4.3',
  rPDU2OutletMeteredStatusEntry => '1.3.6.1.4.1.318.1.1.26.9.4.3.1',
  rPDU2OutletMeteredStatusIndex => '1.3.6.1.4.1.318.1.1.26.9.4.3.1.1',
  rPDU2OutletMeteredStatusModule => '1.3.6.1.4.1.318.1.1.26.9.4.3.1.2',
  rPDU2OutletMeteredStatusName => '1.3.6.1.4.1.318.1.1.26.9.4.3.1.3',
  rPDU2OutletMeteredStatusNumber => '1.3.6.1.4.1.318.1.1.26.9.4.3.1.4',
  rPDU2OutletMeteredStatusState => '1.3.6.1.4.1.318.1.1.26.9.4.3.1.5',
  rPDU2OutletMeteredStatusStateDefinition => 'PowerNet-MIB::rPDU2OutletMeteredStatusState',
  rPDU2OutletMeteredStatusCurrent => '1.3.6.1.4.1.318.1.1.26.9.4.3.1.6',
  rPDU2OutletMeteredStatusPower => '1.3.6.1.4.1.318.1.1.26.9.4.3.1.7',
  rPDU2OutletMeteredStatusPeakPower => '1.3.6.1.4.1.318.1.1.26.9.4.3.1.8',
  rPDU2OutletMeteredStatusPeakPowerTimestamp => '1.3.6.1.4.1.318.1.1.26.9.4.3.1.9',
  rPDU2OutletMeteredStatusPeakPowerStartTime => '1.3.6.1.4.1.318.1.1.26.9.4.3.1.10',
  rPDU2OutletMeteredStatusEnergy => '1.3.6.1.4.1.318.1.1.26.9.4.3.1.11',
  rPDU2Sensor => '1.3.6.1.4.1.318.1.1.26.10',
  rPDU2SensorTempHumidityTableSize => '1.3.6.1.4.1.318.1.1.26.10.1',
  rPDU2SensorTempHumidity => '1.3.6.1.4.1.318.1.1.26.10.2',
  rPDU2SensorTempHumidityConfigTable => '1.3.6.1.4.1.318.1.1.26.10.2.1',
  rPDU2SensorTempHumidityConfigEntry => '1.3.6.1.4.1.318.1.1.26.10.2.1.1',
  rPDU2SensorTempHumidityConfigIndex => '1.3.6.1.4.1.318.1.1.26.10.2.1.1.1',
  rPDU2SensorTempHumidityConfigModule => '1.3.6.1.4.1.318.1.1.26.10.2.1.1.2',
  rPDU2SensorTempHumidityConfigName => '1.3.6.1.4.1.318.1.1.26.10.2.1.1.3',
  rPDU2SensorTempHumidityConfigNumber => '1.3.6.1.4.1.318.1.1.26.10.2.1.1.4',
  rPDU2SensorTempHumidityConfigTemperatureAlarmEnable => '1.3.6.1.4.1.318.1.1.26.10.2.1.1.5',
  rPDU2SensorTempHumidityConfigTemperatureAlarmEnableDefinition => 'PowerNet-MIB::rPDU2SensorTempHumidityConfigTemperatureAlarmEnable',
  rPDU2SensorTempHumidityConfigHumidityAlarmEnable => '1.3.6.1.4.1.318.1.1.26.10.2.1.1.6',
  rPDU2SensorTempHumidityConfigHumidityAlarmEnableDefinition => 'PowerNet-MIB::rPDU2SensorTempHumidityConfigHumidityAlarmEnable',
  rPDU2SensorTempHumidityConfigTempMaxThreshF => '1.3.6.1.4.1.318.1.1.26.10.2.1.1.7',
  rPDU2SensorTempHumidityConfigTempHighThreshF => '1.3.6.1.4.1.318.1.1.26.10.2.1.1.8',
  rPDU2SensorTempHumidityConfigTempHysteresisF => '1.3.6.1.4.1.318.1.1.26.10.2.1.1.9',
  rPDU2SensorTempHumidityConfigTempMaxThreshC => '1.3.6.1.4.1.318.1.1.26.10.2.1.1.10',
  rPDU2SensorTempHumidityConfigTempHighThreshC => '1.3.6.1.4.1.318.1.1.26.10.2.1.1.11',
  rPDU2SensorTempHumidityConfigTempHysteresisC => '1.3.6.1.4.1.318.1.1.26.10.2.1.1.12',
  rPDU2SensorTempHumidityConfigHumidityLowThresh => '1.3.6.1.4.1.318.1.1.26.10.2.1.1.13',
  rPDU2SensorTempHumidityConfigHumidityMinThresh => '1.3.6.1.4.1.318.1.1.26.10.2.1.1.14',
  rPDU2SensorTempHumidityConfigHumidityHysteresis => '1.3.6.1.4.1.318.1.1.26.10.2.1.1.15',
  rPDU2SensorTempHumidityStatusTable => '1.3.6.1.4.1.318.1.1.26.10.2.2',
  rPDU2SensorTempHumidityStatusEntry => '1.3.6.1.4.1.318.1.1.26.10.2.2.1',
  rPDU2SensorTempHumidityStatusIndex => '1.3.6.1.4.1.318.1.1.26.10.2.2.1.1',
  rPDU2SensorTempHumidityStatusModule => '1.3.6.1.4.1.318.1.1.26.10.2.2.1.2',
  rPDU2SensorTempHumidityStatusName => '1.3.6.1.4.1.318.1.1.26.10.2.2.1.3',
  rPDU2SensorTempHumidityStatusNumber => '1.3.6.1.4.1.318.1.1.26.10.2.2.1.4',
  rPDU2SensorTempHumidityStatusType => '1.3.6.1.4.1.318.1.1.26.10.2.2.1.5',
  rPDU2SensorTempHumidityStatusTypeDefinition => 'PowerNet-MIB::rPDU2SensorTempHumidityStatusType',
  rPDU2SensorTempHumidityStatusCommStatus => '1.3.6.1.4.1.318.1.1.26.10.2.2.1.6',
  rPDU2SensorTempHumidityStatusCommStatusDefinition => 'PowerNet-MIB::rPDU2SensorTempHumidityStatusCommStatus',
  rPDU2SensorTempHumidityStatusTempF => '1.3.6.1.4.1.318.1.1.26.10.2.2.1.7',
  rPDU2SensorTempHumidityStatusTempC => '1.3.6.1.4.1.318.1.1.26.10.2.2.1.8',
  rPDU2SensorTempHumidityStatusTempStatus => '1.3.6.1.4.1.318.1.1.26.10.2.2.1.9',
  rPDU2SensorTempHumidityStatusTempStatusDefinition => 'PowerNet-MIB::rPDU2SensorTempHumidityStatusTempStatus',
  rPDU2SensorTempHumidityStatusRelativeHumidity => '1.3.6.1.4.1.318.1.1.26.10.2.2.1.10',
  rPDU2SensorTempHumidityStatusHumidityStatus => '1.3.6.1.4.1.318.1.1.26.10.2.2.1.11',
  rPDU2SensorTempHumidityStatusHumidityStatusDefinition => 'PowerNet-MIB::rPDU2SensorTempHumidityStatusHumidityStatus',
  rPDU2SensorDiscreteTableSize => '1.3.6.1.4.1.318.1.1.26.10.3',
  rPDU2SensorDiscrete => '1.3.6.1.4.1.318.1.1.26.10.4',
  rPDU2SensorDiscreteConfigTable => '1.3.6.1.4.1.318.1.1.26.10.4.1',
  rPDU2SensorDiscreteConfigEntry => '1.3.6.1.4.1.318.1.1.26.10.4.1.1',
  rPDU2SensorDiscreteConfigIndex => '1.3.6.1.4.1.318.1.1.26.10.4.1.1.1',
  rPDU2SensorDiscreteConfigModule => '1.3.6.1.4.1.318.1.1.26.10.4.1.1.2',
  rPDU2SensorDiscreteConfigName => '1.3.6.1.4.1.318.1.1.26.10.4.1.1.3',
  rPDU2SensorDiscreteConfigNumber => '1.3.6.1.4.1.318.1.1.26.10.4.1.1.4',
  rPDU2SensorDiscreteConfigNormalState => '1.3.6.1.4.1.318.1.1.26.10.4.1.1.5',
  rPDU2SensorDiscreteConfigNormalStateDefinition => 'PowerNet-MIB::rPDU2SensorDiscreteConfigNormalState',
  rPDU2SensorDiscreteConfigAbnormalSeverity => '1.3.6.1.4.1.318.1.1.26.10.4.1.1.6',
  rPDU2SensorDiscreteConfigAbnormalSeverityDefinition => 'PowerNet-MIB::rPDU2SensorDiscreteConfigAbnormalSeverity',
  rPDU2SensorDiscreteStatusTable => '1.3.6.1.4.1.318.1.1.26.10.4.2',
  rPDU2SensorDiscreteStatusEntry => '1.3.6.1.4.1.318.1.1.26.10.4.2.1',
  rPDU2SensorDiscreteStatusIndex => '1.3.6.1.4.1.318.1.1.26.10.4.2.1.1',
  rPDU2SensorDiscreteStatusModule => '1.3.6.1.4.1.318.1.1.26.10.4.2.1.2',
  rPDU2SensorDiscreteStatusName => '1.3.6.1.4.1.318.1.1.26.10.4.2.1.3',
  rPDU2SensorDiscreteStatusNumber => '1.3.6.1.4.1.318.1.1.26.10.4.2.1.4',
  rPDU2SensorDiscreteStatusType => '1.3.6.1.4.1.318.1.1.26.10.4.2.1.5',
  rPDU2SensorDiscreteStatusTypeDefinition => 'PowerNet-MIB::rPDU2SensorDiscreteStatusType',
  rPDU2SensorDiscreteStatusCommStatus => '1.3.6.1.4.1.318.1.1.26.10.4.2.1.6',
  rPDU2SensorDiscreteStatusCommStatusDefinition => 'PowerNet-MIB::rPDU2SensorDiscreteStatusCommStatus',
  rPDU2SensorDiscreteStatusCurrentState => '1.3.6.1.4.1.318.1.1.26.10.4.2.1.7',
  rPDU2SensorDiscreteStatusCurrentStateDefinition => 'PowerNet-MIB::rPDU2SensorDiscreteStatusCurrentState',
  rPDU2SensorDiscreteStatusAlarmState => '1.3.6.1.4.1.318.1.1.26.10.4.2.1.8',
  rPDU2SensorDiscreteStatusAlarmStateDefinition => 'PowerNet-MIB::rPDU2SensorDiscreteStatusAlarmState',
  rPDU2Group => '1.3.6.1.4.1.318.1.1.26.11',
  rPDU2GroupNumberOfDevices => '1.3.6.1.4.1.318.1.1.26.11.1',
  rPDU2GroupTotalPower => '1.3.6.1.4.1.318.1.1.26.11.2',
  rPDU2GroupTotalEnergy => '1.3.6.1.4.1.318.1.1.26.11.3',
  rPDU2GroupEnergyReset => '1.3.6.1.4.1.318.1.1.26.11.4',
  rPDU2GroupEnergyResetDefinition => 'PowerNet-MIB::rPDU2GroupEnergyReset',
  rPDU2PhaseToPhaseStatusTableSize => '1.3.6.1.4.1.318.1.1.26.12',
  rPDU2PhaseToPhase => '1.3.6.1.4.1.318.1.1.26.13',
  rPDU2PhaseToPhaseStatusTable => '1.3.6.1.4.1.318.1.1.26.13.1',
  rPDU2PhaseToPhaseStatusEntry => '1.3.6.1.4.1.318.1.1.26.13.1.1',
  rPDU2PhaseToPhaseStatusIndex => '1.3.6.1.4.1.318.1.1.26.13.1.1.1',
  rPDU2PhaseToPhaseStatusModule => '1.3.6.1.4.1.318.1.1.26.13.1.1.2',
  rPDU2PhaseToPhaseStatusVoltage1to2 => '1.3.6.1.4.1.318.1.1.26.13.1.1.3',
  rPDU2PhaseToPhaseStatusVoltage2to3 => '1.3.6.1.4.1.318.1.1.26.13.1.1.4',
  rPDU2PhaseToPhaseStatusVoltage3to1 => '1.3.6.1.4.1.318.1.1.26.13.1.1.5',
  cooling => '1.3.6.1.4.1.318.1.1.27',
  coolingUnit => '1.3.6.1.4.1.318.1.1.27.1',
  coolingUnitTableSize => '1.3.6.1.4.1.318.1.1.27.1.1',
  coolingUnitTable => '1.3.6.1.4.1.318.1.1.27.1.2',
  coolingUnitEntry => '1.3.6.1.4.1.318.1.1.27.1.2.1',
  coolingUnitTableIndex => '1.3.6.1.4.1.318.1.1.27.1.2.1.1',
  coolingUnitAbout => '1.3.6.1.4.1.318.1.1.27.1.3',
  coolingUnitAboutTableSize => '1.3.6.1.4.1.318.1.1.27.1.3.1',
  coolingUnitAboutTable => '1.3.6.1.4.1.318.1.1.27.1.3.2',
  coolingUnitAboutEntry => '1.3.6.1.4.1.318.1.1.27.1.3.2.1',
  coolingUnitAboutTableIndex => '1.3.6.1.4.1.318.1.1.27.1.3.2.1.1',
  coolingUnitAboutDescription => '1.3.6.1.4.1.318.1.1.27.1.3.2.1.2',
  coolingUnitAboutValue => '1.3.6.1.4.1.318.1.1.27.1.3.2.1.3',
  coolingUnitStatus => '1.3.6.1.4.1.318.1.1.27.1.4',
  coolingUnitStatusAnalog => '1.3.6.1.4.1.318.1.1.27.1.4.1',
  coolingUnitStatusAnalogTableSize => '1.3.6.1.4.1.318.1.1.27.1.4.1.1',
  coolingUnitStatusAnalogTable => '1.3.6.1.4.1.318.1.1.27.1.4.1.2',
  coolingUnitStatusAnalogEntry => '1.3.6.1.4.1.318.1.1.27.1.4.1.2.1',
  coolingUnitStatusAnalogTableIndex => '1.3.6.1.4.1.318.1.1.27.1.4.1.2.1.1',
  coolingUnitStatusAnalogDescription => '1.3.6.1.4.1.318.1.1.27.1.4.1.2.1.2',
  coolingUnitStatusAnalogValue => '1.3.6.1.4.1.318.1.1.27.1.4.1.2.1.3',
  coolingUnitStatusAnalogUnits => '1.3.6.1.4.1.318.1.1.27.1.4.1.2.1.4',
  coolingUnitStatusAnalogScale => '1.3.6.1.4.1.318.1.1.27.1.4.1.2.1.5',
  coolingUnitStatusDiscrete => '1.3.6.1.4.1.318.1.1.27.1.4.2',
  coolingUnitStatusDiscreteTableSize => '1.3.6.1.4.1.318.1.1.27.1.4.2.1',
  coolingUnitStatusDiscreteTable => '1.3.6.1.4.1.318.1.1.27.1.4.2.2',
  coolingUnitStatusDiscreteEntry => '1.3.6.1.4.1.318.1.1.27.1.4.2.2.1',
  coolingUnitStatusDiscreteTableIndex => '1.3.6.1.4.1.318.1.1.27.1.4.2.2.1.1',
  coolingUnitStatusDiscreteDescription => '1.3.6.1.4.1.318.1.1.27.1.4.2.2.1.2',
  coolingUnitStatusDiscreteValueAsString => '1.3.6.1.4.1.318.1.1.27.1.4.2.2.1.3',
  coolingUnitStatusDiscreteValueAsInteger => '1.3.6.1.4.1.318.1.1.27.1.4.2.2.1.4',
  coolingUnitStatusDiscreteIntegerReferenceKey => '1.3.6.1.4.1.318.1.1.27.1.4.2.2.1.5',
  coolingUnitConfiguration => '1.3.6.1.4.1.318.1.1.27.1.5',
  coolingUnitConfigurationAnalog => '1.3.6.1.4.1.318.1.1.27.1.5.1',
  coolingUnitConfigurationAnalogTableSize => '1.3.6.1.4.1.318.1.1.27.1.5.1.1',
  coolingUnitConfigurationAnalogTable => '1.3.6.1.4.1.318.1.1.27.1.5.1.2',
  coolingUnitConfigurationAnalogEntry => '1.3.6.1.4.1.318.1.1.27.1.5.1.2.1',
  coolingUnitConfigurationAnalogTableIndex => '1.3.6.1.4.1.318.1.1.27.1.5.1.2.1.1',
  coolingUnitConfigurationAnalogDescription => '1.3.6.1.4.1.318.1.1.27.1.5.1.2.1.2',
  coolingUnitConfigurationAnalogValue => '1.3.6.1.4.1.318.1.1.27.1.5.1.2.1.3',
  coolingUnitConfigurationAnalogUnits => '1.3.6.1.4.1.318.1.1.27.1.5.1.2.1.4',
  coolingUnitConfigurationAnalogScale => '1.3.6.1.4.1.318.1.1.27.1.5.1.2.1.5',
  coolingUnitConfigurationAnalogAccess => '1.3.6.1.4.1.318.1.1.27.1.5.1.2.1.6',
  coolingUnitConfigurationAnalogAccessDefinition => 'PowerNet-MIB::coolingUnitConfigurationAnalogAccess',
  coolingUnitConfigurationAnalogMinimum => '1.3.6.1.4.1.318.1.1.27.1.5.1.2.1.7',
  coolingUnitConfigurationAnalogMaximum => '1.3.6.1.4.1.318.1.1.27.1.5.1.2.1.8',
  coolingUnitConfigurationDiscrete => '1.3.6.1.4.1.318.1.1.27.1.5.2',
  coolingUnitConfigurationDiscreteTableSize => '1.3.6.1.4.1.318.1.1.27.1.5.2.1',
  coolingUnitConfigurationDiscreteTable => '1.3.6.1.4.1.318.1.1.27.1.5.2.2',
  coolingUnitConfigurationDiscreteEntry => '1.3.6.1.4.1.318.1.1.27.1.5.2.2.1',
  coolingUnitConfigurationDiscreteTableIndex => '1.3.6.1.4.1.318.1.1.27.1.5.2.2.1.1',
  coolingUnitConfigurationDiscreteDescription => '1.3.6.1.4.1.318.1.1.27.1.5.2.2.1.2',
  coolingUnitConfigurationDiscreteValueAsString => '1.3.6.1.4.1.318.1.1.27.1.5.2.2.1.3',
  coolingUnitConfigurationDiscreteValueAsInteger => '1.3.6.1.4.1.318.1.1.27.1.5.2.2.1.4',
  coolingUnitConfigurationDiscreteIntegerReferenceKey => '1.3.6.1.4.1.318.1.1.27.1.5.2.2.1.5',
  coolingUnitConfigurationDiscreteAccess => '1.3.6.1.4.1.318.1.1.27.1.5.2.2.1.6',
  coolingUnitConfigurationDiscreteAccessDefinition => 'PowerNet-MIB::coolingUnitConfigurationDiscreteAccess',
  coolingUnitConfigurationString => '1.3.6.1.4.1.318.1.1.27.1.5.3',
  coolingUnitConfigurationStringTableSize => '1.3.6.1.4.1.318.1.1.27.1.5.3.1',
  coolingUnitConfigurationStringTable => '1.3.6.1.4.1.318.1.1.27.1.5.3.2',
  coolingUnitConfigurationStringEntry => '1.3.6.1.4.1.318.1.1.27.1.5.3.2.1',
  coolingUnitConfigurationStringTableIndex => '1.3.6.1.4.1.318.1.1.27.1.5.3.2.1.1',
  coolingUnitConfigurationStringDescription => '1.3.6.1.4.1.318.1.1.27.1.5.3.2.1.2',
  coolingUnitConfigurationStringValue => '1.3.6.1.4.1.318.1.1.27.1.5.3.2.1.3',
  coolingUnitConfigurationStringMaxLength => '1.3.6.1.4.1.318.1.1.27.1.5.3.2.1.4',
  coolingUnitConfigurationStringAccess => '1.3.6.1.4.1.318.1.1.27.1.5.3.2.1.5',
  coolingUnitConfigurationStringAccessDefinition => 'PowerNet-MIB::coolingUnitConfigurationStringAccess',
  coolingUnitExtended => '1.3.6.1.4.1.318.1.1.27.1.6',
  coolingUnitExtendedAnalog => '1.3.6.1.4.1.318.1.1.27.1.6.1',
  coolingUnitExtendedAnalogTableSize => '1.3.6.1.4.1.318.1.1.27.1.6.1.1',
  coolingUnitExtendedAnalogTable => '1.3.6.1.4.1.318.1.1.27.1.6.1.2',
  coolingUnitExtendedAnalogEntry => '1.3.6.1.4.1.318.1.1.27.1.6.1.2.1',
  coolingUnitExtendedAnalogTableIndex => '1.3.6.1.4.1.318.1.1.27.1.6.1.2.1.1',
  coolingUnitExtendedAnalogDescription => '1.3.6.1.4.1.318.1.1.27.1.6.1.2.1.2',
  coolingUnitExtendedAnalogValue => '1.3.6.1.4.1.318.1.1.27.1.6.1.2.1.3',
  coolingUnitExtendedAnalogUnits => '1.3.6.1.4.1.318.1.1.27.1.6.1.2.1.4',
  coolingUnitExtendedAnalogScale => '1.3.6.1.4.1.318.1.1.27.1.6.1.2.1.5',
  coolingUnitExtendedDiscrete => '1.3.6.1.4.1.318.1.1.27.1.6.2',
  coolingUnitExtendedDiscreteTableSize => '1.3.6.1.4.1.318.1.1.27.1.6.2.1',
  coolingUnitExtendedDiscreteTable => '1.3.6.1.4.1.318.1.1.27.1.6.2.2',
  coolingUnitExtendedDiscreteEntry => '1.3.6.1.4.1.318.1.1.27.1.6.2.2.1',
  coolingUnitExtendedDiscreteTableIndex => '1.3.6.1.4.1.318.1.1.27.1.6.2.2.1.1',
  coolingUnitExtendedDiscreteDescription => '1.3.6.1.4.1.318.1.1.27.1.6.2.2.1.2',
  coolingUnitExtendedDiscreteValueAsString => '1.3.6.1.4.1.318.1.1.27.1.6.2.2.1.3',
  coolingUnitExtendedDiscreteValueAsInteger => '1.3.6.1.4.1.318.1.1.27.1.6.2.2.1.4',
  coolingUnitExtendedDiscreteIntegerReferenceKey => '1.3.6.1.4.1.318.1.1.27.1.6.2.2.1.5',
  coolingUnitExtendedString => '1.3.6.1.4.1.318.1.1.27.1.6.3',
  coolingUnitExtendedStringTableSize => '1.3.6.1.4.1.318.1.1.27.1.6.3.1',
  coolingUnitExtendedStringTable => '1.3.6.1.4.1.318.1.1.27.1.6.3.2',
  coolingUnitExtendedStringEntry => '1.3.6.1.4.1.318.1.1.27.1.6.3.2.1',
  coolingUnitExtendedStringTableIndex => '1.3.6.1.4.1.318.1.1.27.1.6.3.2.1.1',
  coolingUnitExtendedStringDescription => '1.3.6.1.4.1.318.1.1.27.1.6.3.2.1.2',
  coolingUnitExtendedStringValue => '1.3.6.1.4.1.318.1.1.27.1.6.3.2.1.3',
  software => '1.3.6.1.4.1.318.1.2',
  powerNetSubAgent => '1.3.6.1.4.1.318.1.2.1',
  powerNetSoftwareSystem => '1.3.6.1.4.1.318.1.2.1.1',
  powerNetSoftwareSystemDescription => '1.3.6.1.4.1.318.1.2.1.1.1',
  powerNetSoftwareOid => '1.3.6.1.4.1.318.1.2.1.1.2',
  powerNetSoftwareSystemUpTime => '1.3.6.1.4.1.318.1.2.1.1.3',
  powerNetSoftwareConfig => '1.3.6.1.4.1.318.1.2.1.2',
  powerNetSoftwareTableSize => '1.3.6.1.4.1.318.1.2.1.2.1',
  powerNetSoftwareTable => '1.3.6.1.4.1.318.1.2.1.2.2',
  powerNetSoftwareEntry => '1.3.6.1.4.1.318.1.2.1.2.2.1',
  moduleNumber => '1.3.6.1.4.1.318.1.2.1.2.2.1.1',
  moduleName => '1.3.6.1.4.1.318.1.2.1.2.2.1.2',
  moduleVersion => '1.3.6.1.4.1.318.1.2.1.2.2.1.3',
  moduleDate => '1.3.6.1.4.1.318.1.2.1.2.2.1.4',
  struxureWareOperations => '1.3.6.1.4.1.318.1.2.2',
  struxureWareOperationsStatus => '1.3.6.1.4.1.318.1.2.2.1',
  serverStatus => '1.3.6.1.4.1.318.1.2.2.1.1',
  serverStatusDefinition => 'PowerNet-MIB::serverStatus',
  databaseStatus => '1.3.6.1.4.1.318.1.2.2.1.2',
  databaseStatusDefinition => 'PowerNet-MIB::databaseStatus',
  loadBalancerStatus => '1.3.6.1.4.1.318.1.2.2.1.3',
  loadBalancerStatusDefinition => 'PowerNet-MIB::loadBalancerStatus',
  essentialServicesStatus => '1.3.6.1.4.1.318.1.2.2.1.4',
  essentialServicesStatusDefinition => 'PowerNet-MIB::essentialServicesStatus',
  etlStatus => '1.3.6.1.4.1.318.1.2.2.1.5',
  etlStatusDefinition => 'PowerNet-MIB::etlStatus',
  system => '1.3.6.1.4.1.318.1.3',
  backUPS => '1.3.6.1.4.1.318.1.3.1',
  smartUPS => '1.3.6.1.4.1.318.1.3.2',
  smartUPS250 => '1.3.6.1.4.1.318.1.3.2.1',
  smartUPS400 => '1.3.6.1.4.1.318.1.3.2.2',
  smartUPS600 => '1.3.6.1.4.1.318.1.3.2.3',
  smartUPS900 => '1.3.6.1.4.1.318.1.3.2.4',
  smartUPS1250 => '1.3.6.1.4.1.318.1.3.2.5',
  smartUPS2000 => '1.3.6.1.4.1.318.1.3.2.6',
  smartUPS450 => '1.3.6.1.4.1.318.1.3.2.7',
  smartUPS700 => '1.3.6.1.4.1.318.1.3.2.8',
  smartUPS1000 => '1.3.6.1.4.1.318.1.3.2.9',
  smartUPS1400 => '1.3.6.1.4.1.318.1.3.2.10',
  smartUPS2200 => '1.3.6.1.4.1.318.1.3.2.11',
  smartUPS3000 => '1.3.6.1.4.1.318.1.3.2.12',
  smartUPS5000 => '1.3.6.1.4.1.318.1.3.2.13',
  smartUPS7500 => '1.3.6.1.4.1.318.1.3.2.14',
  smartUPS10000 => '1.3.6.1.4.1.318.1.3.2.15',
  smartUPS1500 => '1.3.6.1.4.1.318.1.3.2.16',
  smartUPS3000DSP => '1.3.6.1.4.1.318.1.3.2.17',
  smartUPS5000DSP => '1.3.6.1.4.1.318.1.3.2.18',
  smartUPS8000 => '1.3.6.1.4.1.318.1.3.2.19',
  matrixUPS => '1.3.6.1.4.1.318.1.3.3',
  matrixUPS3000 => '1.3.6.1.4.1.318.1.3.3.1',
  matrixUPS5000 => '1.3.6.1.4.1.318.1.3.3.2',
  masterSwitch => '1.3.6.1.4.1.318.1.3.4',
  masterSwitchV1 => '1.3.6.1.4.1.318.1.3.4.1',
  masterSwitchV2 => '1.3.6.1.4.1.318.1.3.4.2',
  masterSwitchVM => '1.3.6.1.4.1.318.1.3.4.3',
  masterSwitchMSP => '1.3.6.1.4.1.318.1.3.4.4',
  masterSwitchrPDU => '1.3.6.1.4.1.318.1.3.4.5',
  masterSwitchrPDU2 => '1.3.6.1.4.1.318.1.3.4.6',
  masterSwitchsPDU => '1.3.6.1.4.1.318.1.3.4.7',
  symmetraUPS => '1.3.6.1.4.1.318.1.3.5',
  symmetraUPS4kVA => '1.3.6.1.4.1.318.1.3.5.1',
  symmetraUPS8kVA => '1.3.6.1.4.1.318.1.3.5.2',
  symmetraUPS12kVA => '1.3.6.1.4.1.318.1.3.5.3',
  symmetraUPS16kVA => '1.3.6.1.4.1.318.1.3.5.4',
  dp100E => '1.3.6.1.4.1.318.1.3.6',
  dp300E => '1.3.6.1.4.1.318.1.3.7',
  monitors => '1.3.6.1.4.1.318.1.3.8',
  environmental => '1.3.6.1.4.1.318.1.3.8.1',
  environmentalMgtSystem => '1.3.6.1.4.1.318.1.3.8.2',
  emu2 => '1.3.6.1.4.1.318.1.3.8.3',
  mem => '1.3.6.1.4.1.318.1.3.8.4',
  redundantSwitch => '1.3.6.1.4.1.318.1.3.9',
  dcPower => '1.3.6.1.4.1.318.1.3.10',
  dm3 => '1.3.6.1.4.1.318.1.3.10.1',
  dcmim2 => '1.3.6.1.4.1.318.1.3.10.2',
  automaticXferSwitch => '1.3.6.1.4.1.318.1.3.11',
  netLock => '1.3.6.1.4.1.318.1.3.12',
  symmetra3PhaseUPS => '1.3.6.1.4.1.318.1.3.13',
  symmetra3PhaseUPS40kVA => '1.3.6.1.4.1.318.1.3.13.1',
  symmetra3PhaseUPS60kVA => '1.3.6.1.4.1.318.1.3.13.2',
  symmetra3PhaseUPS80kVA => '1.3.6.1.4.1.318.1.3.13.3',
  symmetra3PhaseUPS20kVA => '1.3.6.1.4.1.318.1.3.13.4',
  networkAir => '1.3.6.1.4.1.318.1.3.14',
  airFMSeries => '1.3.6.1.4.1.318.1.3.14.1',
  rackAirRemovalUnit => '1.3.6.1.4.1.318.1.3.14.2',
  airPASeries => '1.3.6.1.4.1.318.1.3.14.3',
  airIRSC100Series => '1.3.6.1.4.1.318.1.3.14.4',
  airIRRC100Series => '1.3.6.1.4.1.318.1.3.14.5',
  airIRRP100Series => '1.3.6.1.4.1.318.1.3.14.6',
  airIRRP500Series => '1.3.6.1.4.1.318.1.3.14.7',
  airIRRD100Series => '1.3.6.1.4.1.318.1.3.14.8',
  airInRoomPerimeter => '1.3.6.1.4.1.318.1.3.14.9',
  airACRC300Series => '1.3.6.1.4.1.318.1.3.14.10',
  airLESeries => '1.3.6.1.4.1.318.1.3.14.11',
  airIRRDU => '1.3.6.1.4.1.318.1.3.14.12',
  airEcoBreeze => '1.3.6.1.4.1.318.1.3.14.13',
  airLELSeries => '1.3.6.1.4.1.318.1.3.14.14',
  airACRC600Series => '1.3.6.1.4.1.318.1.3.14.15',
  airACRD600Series => '1.3.6.1.4.1.318.1.3.14.16',
  infraStruXurePDU => '1.3.6.1.4.1.318.1.3.15',
  ais5000UPS => '1.3.6.1.4.1.318.1.3.16',
  ais5000UPS10kVA => '1.3.6.1.4.1.318.1.3.16.1',
  ais5000UPS20kVA => '1.3.6.1.4.1.318.1.3.16.2',
  ais5000UPS30kVA => '1.3.6.1.4.1.318.1.3.16.3',
  ais5000UPS40kVA => '1.3.6.1.4.1.318.1.3.16.4',
  ais5000UPS60kVA => '1.3.6.1.4.1.318.1.3.16.5',
  ais5000UPS80kVA => '1.3.6.1.4.1.318.1.3.16.6',
  ais5000UPS100kVA => '1.3.6.1.4.1.318.1.3.16.7',
  smartUPS3Phase => '1.3.6.1.4.1.318.1.3.17',
  smartUPS3Phase10kVA => '1.3.6.1.4.1.318.1.3.17.1',
  smartUPS3Phase15kVA => '1.3.6.1.4.1.318.1.3.17.2',
  smartUPS3Phase20kVA => '1.3.6.1.4.1.318.1.3.17.3',
  smartUPS3Phase30kVA => '1.3.6.1.4.1.318.1.3.17.4',
  smartUPS3Phase40kVA => '1.3.6.1.4.1.318.1.3.17.5',
  battManager => '1.3.6.1.4.1.318.1.3.18',
  infraStruXureATS => '1.3.6.1.4.1.318.1.3.19',
  conPortServ => '1.3.6.1.4.1.318.1.3.20',
  conPortServAP930x => '1.3.6.1.4.1.318.1.3.20.1',
  gutor => '1.3.6.1.4.1.318.1.3.21',
  gutorPEW => '1.3.6.1.4.1.318.1.3.21.1',
  gutorPDW => '1.3.6.1.4.1.318.1.3.21.2',
  gutorWEW => '1.3.6.1.4.1.318.1.3.21.3',
  gutorWDW => '1.3.6.1.4.1.318.1.3.21.4',
  gutorSDC => '1.3.6.1.4.1.318.1.3.21.5',
  accControl => '1.3.6.1.4.1.318.1.3.22',
  accPX => '1.3.6.1.4.1.318.1.3.22.1',
  symmetraPX => '1.3.6.1.4.1.318.1.3.23',
  symmetraPx48kVA => '1.3.6.1.4.1.318.1.3.23.1',
  symmetraPx160kVA => '1.3.6.1.4.1.318.1.3.23.2',
  symmetraPx250kVA => '1.3.6.1.4.1.318.1.3.23.3',
  symmetraPx500kVA => '1.3.6.1.4.1.318.1.3.23.4',
  symmetraPx100kVA => '1.3.6.1.4.1.318.1.3.23.5',
  symmetraPxDisplay => '1.3.6.1.4.1.318.1.3.23.6',
  isxModDistribution => '1.3.6.1.4.1.318.1.3.24',
  isx24ModuleHalfRackPdu => '1.3.6.1.4.1.318.1.3.24.1',
  isx6ModuleRackPdu => '1.3.6.1.4.1.318.1.3.24.2',
  isxServers => '1.3.6.1.4.1.318.1.3.25',
  isxcBasic => '1.3.6.1.4.1.318.1.3.25.1',
  isxcStandard => '1.3.6.1.4.1.318.1.3.25.2',
  isxcEnterprise => '1.3.6.1.4.1.318.1.3.25.3',
  isxcVirtual => '1.3.6.1.4.1.318.1.3.25.4',
  smartUPS2 => '1.3.6.1.4.1.318.1.3.27',
  galaxy => '1.3.6.1.4.1.318.1.3.28',
  galaxy7000UPS200kVA => '1.3.6.1.4.1.318.1.3.28.1',
  galaxy7000UPS250kVA => '1.3.6.1.4.1.318.1.3.28.2',
  galaxy7000UPS300kVA => '1.3.6.1.4.1.318.1.3.28.3',
  galaxy7000UPS400kVA => '1.3.6.1.4.1.318.1.3.28.4',
  galaxy7000UPS500kVA => '1.3.6.1.4.1.318.1.3.28.5',
  galaxy7000SSC800kVA => '1.3.6.1.4.1.318.1.3.28.6',
  galaxy7000SSC1200kVA => '1.3.6.1.4.1.318.1.3.28.7',
  galaxy7000SSC2000kVA => '1.3.6.1.4.1.318.1.3.28.8',
  galaxy300UPS10kVA33 => '1.3.6.1.4.1.318.1.3.28.9',
  galaxy300UPS15kVA33 => '1.3.6.1.4.1.318.1.3.28.10',
  galaxy300UPS20kVA33 => '1.3.6.1.4.1.318.1.3.28.11',
  galaxy300UPS30kVA33 => '1.3.6.1.4.1.318.1.3.28.12',
  galaxy300UPS40kVA33 => '1.3.6.1.4.1.318.1.3.28.13',
  galaxy300UPS10kVA31 => '1.3.6.1.4.1.318.1.3.28.14',
  galaxy300UPS15kVA31 => '1.3.6.1.4.1.318.1.3.28.15',
  galaxy300UPS20kVA31 => '1.3.6.1.4.1.318.1.3.28.16',
  galaxy300UPS30kVA31 => '1.3.6.1.4.1.318.1.3.28.17',
  galaxy5000UPS20KVA => '1.3.6.1.4.1.318.1.3.28.18',
  galaxy5000UPS30KVA => '1.3.6.1.4.1.318.1.3.28.19',
  galaxy5000UPS40KVA => '1.3.6.1.4.1.318.1.3.28.20',
  galaxy5000UPS50KVA => '1.3.6.1.4.1.318.1.3.28.21',
  galaxy5000UPS60KVA => '1.3.6.1.4.1.318.1.3.28.22',
  galaxy5000UPS80KVA => '1.3.6.1.4.1.318.1.3.28.23',
  galaxy5000UPS100KVA => '1.3.6.1.4.1.318.1.3.28.24',
  galaxy5000UPS120KVA => '1.3.6.1.4.1.318.1.3.28.25',
  galaxy5000UPS130KVA => '1.3.6.1.4.1.318.1.3.28.26',
  galaxy5500UPS20KVA => '1.3.6.1.4.1.318.1.3.28.27',
  galaxy5500UPS30KVA => '1.3.6.1.4.1.318.1.3.28.28',
  galaxy5500UPS40KVA => '1.3.6.1.4.1.318.1.3.28.29',
  galaxy5500UPS50KVA => '1.3.6.1.4.1.318.1.3.28.30',
  galaxy5500UPS60KVA => '1.3.6.1.4.1.318.1.3.28.31',
  galaxy5500UPS80KVA => '1.3.6.1.4.1.318.1.3.28.32',
  galaxy5500UPS100KVA => '1.3.6.1.4.1.318.1.3.28.33',
  galaxy5500UPS120KVA => '1.3.6.1.4.1.318.1.3.28.34',
  galaxy5500UPS130KVA => '1.3.6.1.4.1.318.1.3.28.35',
  galaxyVMUPS50kVA => '1.3.6.1.4.1.318.1.3.28.36',
  galaxyVMUPS60kVA => '1.3.6.1.4.1.318.1.3.28.37',
  galaxyVMUPS80kVA => '1.3.6.1.4.1.318.1.3.28.38',
  galaxyVMUPS90kVA => '1.3.6.1.4.1.318.1.3.28.39',
  galaxyVMUPS100kVA => '1.3.6.1.4.1.318.1.3.28.40',
  galaxyVMUPS110kVA => '1.3.6.1.4.1.318.1.3.28.41',
  galaxyVMUPS120kVA => '1.3.6.1.4.1.318.1.3.28.42',
  galaxyVMUPS130kVA => '1.3.6.1.4.1.318.1.3.28.43',
  galaxyVMUPS160kVA => '1.3.6.1.4.1.318.1.3.28.44',
  galaxyVMUPS180kVA => '1.3.6.1.4.1.318.1.3.28.45',
  galaxyVMUPS200kVA => '1.3.6.1.4.1.318.1.3.28.46',
  galaxyVMUPS225kVA => '1.3.6.1.4.1.318.1.3.28.47',
  galaxy9000UPS => '1.3.6.1.4.1.318.1.3.28.48',
  galaxy9000SSC => '1.3.6.1.4.1.318.1.3.28.49',
  galaxy9000UPSWithSSC => '1.3.6.1.4.1.318.1.3.28.50',
  galaxy9000FreqConverter => '1.3.6.1.4.1.318.1.3.28.51',
  eps => '1.3.6.1.4.1.318.1.3.30',
  eps6000UPS => '1.3.6.1.4.1.318.1.3.30.1',
  eps6000SSC => '1.3.6.1.4.1.318.1.3.30.2',
  eps6000UPSWithSSC => '1.3.6.1.4.1.318.1.3.30.3',
  eps6000FreqConverter => '1.3.6.1.4.1.318.1.3.30.4',
  eps7000UPS => '1.3.6.1.4.1.318.1.3.30.5',
  eps7000SSC => '1.3.6.1.4.1.318.1.3.30.6',
  eps7000UPSWithSSC => '1.3.6.1.4.1.318.1.3.30.7',
  eps7000FreqConverter => '1.3.6.1.4.1.318.1.3.30.8',
  eps8000UPS => '1.3.6.1.4.1.318.1.3.30.9',
  eps8000SSC => '1.3.6.1.4.1.318.1.3.30.10',
  eps8000UPSWithSSC => '1.3.6.1.4.1.318.1.3.30.11',
  eps8000FreqConverter => '1.3.6.1.4.1.318.1.3.30.12',
  experimental => '1.3.6.1.4.1.318.1.4',
  apcmgmt => '1.3.6.1.4.1.318.2',
  mconfig => '1.3.6.1.4.1.318.2.1',
  mconfigNumTrapReceivers => '1.3.6.1.4.1.318.2.1.1',
  mconfigTrapReceiverTable => '1.3.6.1.4.1.318.2.1.2',
  mconfigTrapReceiverEntry => '1.3.6.1.4.1.318.2.1.2.1',
  trapIndex => '1.3.6.1.4.1.318.2.1.2.1.1',
  receiverAddr => '1.3.6.1.4.1.318.2.1.2.1.2',
  communityString => '1.3.6.1.4.1.318.2.1.2.1.3',
  severity => '1.3.6.1.4.1.318.2.1.2.1.4',
  severityDefinition => 'PowerNet-MIB::severity',
  acceptThisReceiver => '1.3.6.1.4.1.318.2.1.2.1.5',
  acceptThisReceiverDefinition => 'PowerNet-MIB::acceptThisReceiver',
  receiveTrapType => '1.3.6.1.4.1.318.2.1.2.1.6',
  receiveTrapTypeDefinition => 'PowerNet-MIB::receiveTrapType',
  mconfigBOOTPEnabled => '1.3.6.1.4.1.318.2.1.3',
  mconfigBOOTPEnabledDefinition => 'PowerNet-MIB::mconfigBOOTPEnabled',
  mconfigTFTPServerIP => '1.3.6.1.4.1.318.2.1.4',
  newCodeAuthentViaTFTP => '1.3.6.1.4.1.318.2.1.5',
  newCodeAuthentViaTFTPDefinition => 'PowerNet-MIB::newCodeAuthentViaTFTP',
  mconfigClock => '1.3.6.1.4.1.318.2.1.6',
  mconfigClockDate => '1.3.6.1.4.1.318.2.1.6.1',
  mconfigClockTime => '1.3.6.1.4.1.318.2.1.6.2',
  mcontrol => '1.3.6.1.4.1.318.2.2',
  mcontrolRestartAgent => '1.3.6.1.4.1.318.2.2.1',
  mcontrolRestartAgentDefinition => 'PowerNet-MIB::mcontrolRestartAgent',
  mtrapargs => '1.3.6.1.4.1.318.2.3',
  mtrapargsInteger => '1.3.6.1.4.1.318.2.3.1',
  mtrapargsIpAddress => '1.3.6.1.4.1.318.2.3.2',
  mtrapargsString => '1.3.6.1.4.1.318.2.3.3',
  mtrapargsGauge => '1.3.6.1.4.1.318.2.3.4',
  mtrapargsTimeTicks => '1.3.6.1.4.1.318.2.3.5',
  mtrapargsInteger02 => '1.3.6.1.4.1.318.2.3.6',
  mtrapargsInteger03 => '1.3.6.1.4.1.318.2.3.7',
  mtrapargsIpAddress02 => '1.3.6.1.4.1.318.2.3.8',
  mtrapargsIpAddress03 => '1.3.6.1.4.1.318.2.3.9',
  mtrapargsString02 => '1.3.6.1.4.1.318.2.3.10',
  mtrapargsString03 => '1.3.6.1.4.1.318.2.3.11',
  mtrapargsGauge02 => '1.3.6.1.4.1.318.2.3.12',
  mtrapargsGauge03 => '1.3.6.1.4.1.318.2.3.13',
  mtrapargsTimeTicks02 => '1.3.6.1.4.1.318.2.3.14',
  mtrapargsTimeTicks03 => '1.3.6.1.4.1.318.2.3.15',
  mtrapargsString04 => '1.3.6.1.4.1.318.2.3.16',
  mtrapargsString05 => '1.3.6.1.4.1.318.2.3.17',
  mtrapargsInteger04 => '1.3.6.1.4.1.318.2.3.18',
  mtrapargsInteger05 => '1.3.6.1.4.1.318.2.3.19',
  mtrapargsString06 => '1.3.6.1.4.1.318.2.3.20',
  mtrapargsString07 => '1.3.6.1.4.1.318.2.3.21',
  mtrapargsString08 => '1.3.6.1.4.1.318.2.3.22',
  mtrapargsOctetString => '1.3.6.1.4.1.318.2.3.23',
  mtrapargsOctetString02 => '1.3.6.1.4.1.318.2.3.24',
  mtrapargsOctetString03 => '1.3.6.1.4.1.318.2.3.25',
  mtrapargsOctetString04 => '1.3.6.1.4.1.318.2.3.26',
  mtrapargsOctetString05 => '1.3.6.1.4.1.318.2.3.27',
  mtrapargsOctetString06 => '1.3.6.1.4.1.318.2.3.28',
  mtrapargsOctetString07 => '1.3.6.1.4.1.318.2.3.29',
  mtrapargsOctetString08 => '1.3.6.1.4.1.318.2.3.30',
  mfiletransfer => '1.3.6.1.4.1.318.2.4',
  mfiletransferStatus => '1.3.6.1.4.1.318.2.4.1',
  mfiletransferStatusLastTransferResult => '1.3.6.1.4.1.318.2.4.1.1',
  mfiletransferStatusLastTransferResultDefinition => 'PowerNet-MIB::mfiletransferStatusLastTransferResult',
  mfiletransferConfig => '1.3.6.1.4.1.318.2.4.2',
  mfiletransferConfigSettings => '1.3.6.1.4.1.318.2.4.2.1',
  mfiletransferConfigSettingsFilename => '1.3.6.1.4.1.318.2.4.2.1.1',
  mfiletransferConfigTFTP => '1.3.6.1.4.1.318.2.4.2.2',
  mfiletransferConfigTFTPServerAddress => '1.3.6.1.4.1.318.2.4.2.2.1',
  mfiletransferConfigFTP => '1.3.6.1.4.1.318.2.4.2.3',
  mfiletransferConfigFTPServerAddress => '1.3.6.1.4.1.318.2.4.2.3.1',
  mfiletransferConfigFTPServerUser => '1.3.6.1.4.1.318.2.4.2.3.2',
  mfiletransferConfigFTPServerPassword => '1.3.6.1.4.1.318.2.4.2.3.3',
  mfiletransferControl => '1.3.6.1.4.1.318.2.4.3',
  mfiletransferControlInitiateFileTransfer => '1.3.6.1.4.1.318.2.4.3.1',
  mfiletransferControlInitiateFileTransferDefinition => 'PowerNet-MIB::mfiletransferControlInitiateFileTransfer',
};

$Monitoring::GLPlugin::SNMP::MibsAndOids::definitions->{'PowerNet-MIB'} = {
  upsAdvTestDiagnosticsResults => {
    '1' => 'ok',
    '2' => 'failed',
    '3' => 'invalidTest',
    '4' => 'testInProgress',
  },
  upsDiagPMLifetimeStatus => {
    '1' => 'ok',
    '2' => 'nearEnd',
    '3' => 'exceeded',
    '4' => 'unknown',
  },
  airIRRP500UnitStatusLeakSensor => {
    '1' => 'no-leak',
    '2' => 'leak',
  },
  atsStatusSourceBStatus => {
    '1' => 'fail',
    '2' => 'ok',
  },
  airFMGroupSysPresentRole => {
    '1' => 'primary',
    '2' => 'backup',
  },
  airIRRP100UnitConfigInputNormalState => {
    '1' => 'open',
    '2' => 'closed',
  },
  airFMSysAlarmMapMainModHighSupplyTemp => {
    '1' => 'notApplicable',
    '2' => 'disabled',
    '3' => 'enabled',
  },
  battManString2BatteryLowCapacity => {
    '1' => 'normal',
    '2' => 'alarm',
  },
  airFMSysAlarmMapSysHighEnvTemp => {
    '1' => 'notApplicable',
    '2' => 'disabled',
    '3' => 'enabled',
  },
  airFMModRHHumReset => {
    '1' => 'notApplicable',
    '2' => 'noOperation',
    '3' => 'reset',
  },
  rPDU2DevicePropertiesOrientation => {
    '1' => 'horizontal',
    '2' => 'vertical',
    '3' => 'verticalISXv2',
  },
  airIRmPmLouver1Position => {
    '1' => 'closed',
    '2' => 'open',
  },
  airIRmPmLouver3Position => {
    '1' => 'closed',
    '2' => 'open',
  },
  airFMModHumidifierType => {
    '1' => 'notApplicable',
    '2' => 'none',
    '3' => 'steamElectrode',
    '4' => 'liveSteam',
  },
  dm3ConfigRect1ofNAlarm => {
    '1' => 'alarmIgnore',
    '2' => 'alarmRelay1',
    '3' => 'alarmRelay2',
    '4' => 'alarmRelay3',
    '5' => 'alarmRelay4',
    '6' => 'alarmRelay5',
    '7' => 'alarmRelay6',
    '8' => 'alarmMinor',
    '9' => 'alarmMajor',
  },
  dm3ConfigBattHighTempAlarm => {
    '1' => 'alarmIgnore',
    '2' => 'alarmRelay1',
    '3' => 'alarmRelay2',
    '4' => 'alarmRelay3',
    '5' => 'alarmRelay4',
    '6' => 'alarmRelay5',
    '7' => 'alarmRelay6',
    '8' => 'alarmMinor',
    '9' => 'alarmMajor',
  },
  rPDUOutletControlOutletPhase => {
    '1' => 'phase1',
    '2' => 'phase2',
    '3' => 'phase3',
    '4' => 'phase1-2',
    '5' => 'phase2-3',
    '6' => 'phase3-1',
  },
  upsAdvControlTurnOnUPS => {
    '1' => 'noTurnOnUPS',
    '2' => 'turnOnUPS',
    '3' => 'turnOnUPSSyncGroup',
  },
  isxModularPduDeviceFansPresent => {
    '1' => 'notPresent',
    '2' => 'present',
  },
  airFMSysAlarmMapExpMod1MaintReq => {
    '1' => 'notApplicable',
    '2' => 'disabled',
    '3' => 'enabled',
  },
  xATSOutputRelayNormalState => {
    '1' => 'open',
    '2' => 'closed',
  },
  airFMGroupFailoverSysPrimarySensorFail => {
    '1' => 'notApplicable',
    '2' => 'disable',
    '3' => 'enable',
  },
  atsStatusResetMaxMinValues => {
    '1' => 'none',
    '2' => 'reset',
  },
  emConfigContactSeverity => {
    '1' => 'critical',
    '2' => 'warning',
    '3' => 'informational',
  },
  upsAdvTestDiagnosticDay => {
    '1' => 'monday',
    '2' => 'tuesday',
    '3' => 'wednesday',
    '4' => 'thursday',
    '5' => 'friday',
    '6' => 'saturday',
    '7' => 'sunday',
  },
  atsStatusSwitchStatus => {
    '1' => 'fail',
    '2' => 'ok',
  },
  monitoringStatus => {
    '1' => 'unknown',
    '2' => 'enabled',
    '3' => 'disabled',
  },
  dcmim2ConfigLVDState => {
    '1' => 'statusClosed',
    '2' => 'statusOpened',
  },
  airFMGroupCfgDmdFightStatus => {
    '1' => 'off',
    '2' => 'on',
  },
  xATSSwitchSettingsNominalRotation => {
    '1' => 'abc',
    '2' => 'cba',
    '3' => 'any',
    '4' => 'unknown',
  },
  dm3ConfigSysHardwareTempAlarm => {
    '1' => 'alarmIgnore',
    '2' => 'alarmRelay1',
    '3' => 'alarmRelay2',
    '4' => 'alarmRelay3',
    '5' => 'alarmRelay4',
    '6' => 'alarmRelay5',
    '7' => 'alarmRelay6',
    '8' => 'alarmMinor',
    '9' => 'alarmMajor',
  },
  dm3StatusConvFanFail => {
    '1' => 'statusTrue',
    '2' => 'statusFalse',
  },
  airIRG3GroupConfigLoadAssistEnable => {
    '1' => 'disable',
    '2' => 'enable',
  },
  airIRG2GroupConfigCapacityControlType => {
    '1' => 'discrete',
    '2' => 'proportional',
  },
  airFMGroupFailoverSysCommLost => {
    '1' => 'notApplicable',
    '2' => 'disable',
    '3' => 'enable',
  },
  airIRmPmHumidifier2Type => {
    '1' => 'direct',
    '2' => 'proportional',
  },
  airIRRP500UnitStatusOperateMode => {
    '1' => 'standby',
    '2' => 'on',
    '3' => 'idle',
    '4' => 'prestart',
    '5' => 'backup',
    '6' => 'assist',
  },
  sPDUOutletConfigMSPallOutletCtrlMode => {
    '1' => 'modeGracefulShutdown',
    '2' => 'modeAnnunciator',
  },
  atsConfigFrequencyDeviation => {
    '1' => 'one',
    '2' => 'two',
    '3' => 'three',
  },
  battManString1BatteryOpenCell => {
    '1' => 'normal',
    '2' => 'alarm',
  },
  xATSGeneratorStatusModeSwitchPosition => {
    '1' => 'off',
    '2' => 'manual',
    '3' => 'automatic',
    '4' => 'unknown',
  },
  airFMModHeaterType => {
    '1' => 'notApplicable',
    '2' => 'none',
    '3' => 'electricSCR',
    '4' => 'steam',
    '5' => 'hotWaterOnOff',
    '6' => 'hotGasReheat',
    '7' => 'hotGasAndElectric',
    '8' => 'hotWaterProp',
  },
  rPDUPowerSupplyAlarm => {
    '1' => 'allAvailablePowerSuppliesOK',
    '2' => 'powerSupplyOneFailed',
    '3' => 'powerSupplyTwoFailed',
    '4' => 'powerSupplyOneandTwoFailed',
  },
  airFMSysFastStartup => {
    '1' => 'notApplicable',
    '2' => 'disabled',
    '3' => 'enabled',
  },
  airFMSysAlarmMapInput16 => {
    '1' => 'notApplicable',
    '2' => 'disabled',
    '3' => 'enabled',
  },
  atsConfigResetValues => {
    '1' => 'none',
    '2' => 'reset',
  },
  rARUStatusAruManualSetpoint => {
    '1' => 'aruOff',
    '2' => 'aru85F-29C',
    '3' => 'aru90F-32C',
    '4' => 'aru95F-35C',
    '5' => 'aru100F-38C',
    '6' => 'aru7kW',
    '7' => 'aru5kW',
    '8' => 'aru3kW',
    '9' => 'aru2kW',
    '10' => 'aruRem',
  },
  dm3ConfigRectHwVoltAlarm => {
    '1' => 'alarmIgnore',
    '2' => 'alarmRelay1',
    '3' => 'alarmRelay2',
    '4' => 'alarmRelay3',
    '5' => 'alarmRelay4',
    '6' => 'alarmRelay5',
    '7' => 'alarmRelay6',
    '8' => 'alarmMinor',
    '9' => 'alarmMajor',
  },
  dm3ConfigConvLowVoltAlarm => {
    '1' => 'alarmIgnore',
    '2' => 'alarmRelay1',
    '3' => 'alarmRelay2',
    '4' => 'alarmRelay3',
    '5' => 'alarmRelay4',
    '6' => 'alarmRelay5',
    '7' => 'alarmRelay6',
    '8' => 'alarmMinor',
    '9' => 'alarmMajor',
  },
  rPDU2SensorTempHumidityConfigTemperatureAlarmEnable => {
    '1' => 'disabled',
    '2' => 'enabled',
  },
  airIRmPmLouver1ManOpPosition => {
    '1' => 'closed',
    '2' => 'open',
  },
  airFMSysAlarmMapInput14 => {
    '1' => 'notApplicable',
    '2' => 'disabled',
    '3' => 'enabled',
  },
  airIRmPmLouver2Position => {
    '1' => 'closed',
    '2' => 'open',
  },
  isxModularDistSysOutputVoltageAlarmMinEnable => {
    '1' => 'disabled',
    '2' => 'enabled',
  },
  airFMModRHComp2Reset => {
    '1' => 'notApplicable',
    '2' => 'noOperation',
    '3' => 'reset',
  },
  airFMSysAlarmMapExpMod2LowSupplyTemp => {
    '1' => 'notApplicable',
    '2' => 'disabled',
    '3' => 'enabled',
  },
  emStatusProbeHighTempViolation => {
    '1' => 'noViolation',
    '2' => 'highTempViolation',
    '3' => 'disabled',
  },
  airFMSysAlarmMapExpMod2BlwrCntl1Fail => {
    '1' => 'notApplicable',
    '2' => 'disabled',
    '3' => 'enabled',
  },
  dm3StatusSysConvAvailable => {
    '1' => 'statusTrue',
    '2' => 'statusFalse',
  },
  serverStatus => {
    '1' => 'unknown',
    '2' => 'stopped',
    '3' => 'running',
    '4' => 'running-missing',
    '5' => 'initializing',
    '6' => 'starting',
    '7' => 'disaster-recovery',
    '8' => 'postoffice-inconsistent',
    '9' => 'missing-jgroups',
  },
  airFMModSmokeDetector => {
    '1' => 'notApplicable',
    '2' => 'notPresent',
    '3' => 'present',
  },
  upsAdvControlBypassSwitch => {
    '1' => 'noBypassSwitch',
    '2' => 'switchToBypass',
    '3' => 'switchOutOfBypass',
  },
  airIRRCGroupSetpointsActiveFlowControlBias => {
    '1' => 'positive',
    '2' => 'slightlyPositive',
    '3' => 'zero',
    '4' => 'slightlyNegative',
    '5' => 'negative',
  },
  dm3ConfigBattDischargeAlarm => {
    '1' => 'alarmIgnore',
    '2' => 'alarmRelay1',
    '3' => 'alarmRelay2',
    '4' => 'alarmRelay3',
    '5' => 'alarmRelay4',
    '6' => 'alarmRelay5',
    '7' => 'alarmRelay6',
    '8' => 'alarmMinor',
    '9' => 'alarmMajor',
  },
  isxModularDistModuleOutputAlarmGeneration => {
    '1' => 'disabled',
    '2' => 'enabled',
  },
  airFMSysActualHumCtrl => {
    '1' => 'notApplicable',
    '2' => 'relativeHum',
    '3' => 'dewPoint',
  },
  airIRG3RDUStatusOutputState => {
    '1' => 'open',
    '2' => 'closed',
  },
  dm3StatusRectFanFail => {
    '1' => 'statusTrue',
    '2' => 'statusFalse',
  },
  atsStatusSourceAStatus => {
    '1' => 'fail',
    '2' => 'ok',
  },
  isxModularDistModuleBreakerPosition => {
    '1' => 'open',
    '2' => 'closed',
  },
  airIRG3CMConfigRemoteOnStandby => {
    '1' => 'standBy',
    '2' => 'on',
  },
  dm3StatusSysRectAvailable => {
    '1' => 'statusTrue',
    '2' => 'statusFalse',
  },
  airIRRP500UnitConfigHeatAssistEnable => {
    '1' => 'enable',
    '2' => 'disable',
  },
  isxModularDistSubFeedInfoAlarmLowEnable => {
    '1' => 'disabled',
    '2' => 'enabled',
  },
  rPDU2SensorDiscreteStatusType => {
    '1' => 'notConnected',
    '2' => 'doorContactSensor',
    '3' => 'smokeSensor',
    '4' => 'motionDetector',
    '5' => 'vibrationSensor',
    '6' => 'dryContactSensor',
    '7' => 'spotLeakSensor',
  },
  airFMSysPresentRole => {
    '1' => 'notApplicable',
    '2' => 'primary',
    '3' => 'backup',
  },
  upsAdvInputLineFailCause => {
    '1' => 'noTransfer',
    '2' => 'highLineVoltage',
    '3' => 'brownout',
    '4' => 'blackout',
    '5' => 'smallMomentarySag',
    '6' => 'deepMomentarySag',
    '7' => 'smallMomentarySpike',
    '8' => 'largeMomentarySpike',
    '9' => 'selfTest',
    '10' => 'rateOfVoltageChange',
  },
  airFMSysAlarmMapExpMod2WaterDetected => {
    '1' => 'notApplicable',
    '2' => 'disabled',
    '3' => 'enabled',
  },
  memSensorsAlarmGeneration => {
    '1' => 'disabled',
    '2' => 'enabled',
  },
  dm3ConfigLVDEnable => {
    '1' => 'enabledYes',
    '2' => 'enabledNo',
  },
  uioOutputRelayStatusAlarmStatus => {
    '1' => 'uioNormal',
    '2' => 'uioWarning',
    '3' => 'uioCritical',
    '4' => 'inputStatusNotApplicable',
  },
  upsOutletGroupConfigOutletType => {
    '1' => 'upsSwitchedOutletGroup',
    '2' => 'upsMainOutletGroup',
  },
  emStatusProbeTempUnits => {
    '1' => 'celsius',
    '2' => 'fahrenheit',
  },
  AirIRSCFanSpeedControl => {
    '1' => 'automatic',
    '2' => 'manual',
  },
  upsDiagFlyWheelStatus => {
    '1' => 'unknown',
    '2' => 'present',
    '3' => 'notPresent',
  },
  airFMSysAlarmMapOutput7 => {
    '1' => 'notApplicable',
    '2' => 'disabled',
    '3' => 'enabled',
  },
  airIRRP500UnitConfigCoolCapacity => {
    '1' => 'automatic',
    '2' => 'maximum',
  },
  airFMSysCoolState => {
    '1' => 'notApplicable',
    '2' => 'disabled',
    '3' => 'enabled',
  },
  airFMModElectricHeaterType => {
    '1' => 'notApplicable',
    '2' => 'kw10',
    '3' => 'kw15',
  },
  iemStatusProbeLowTempViolation => {
    '1' => 'noViolation',
    '2' => 'lowTempViolation',
    '3' => 'disabled',
  },
  emsAlarmDeviceControlDeviceCommand => {
    '1' => 'alarmDeviceOnEMS',
    '2' => 'alarmDeviceOffEMS',
    '3' => 'alarmDeviceNotInstalledEMS',
  },
  upsDiagSubSysBattMonitorStatus => {
    '1' => 'unknown',
    '2' => 'notInstalled',
    '3' => 'offOk',
    '4' => 'onOk',
    '5' => 'offFail',
    '6' => 'onFail',
    '7' => 'lostComm',
  },
  airIRSCUnitConfigOpControl => {
    '1' => 'standby',
    '2' => 'on',
  },
  rARUStatusAruRemoteSetpoint => {
    '1' => 'aruOff',
    '2' => 'aru85F-29C',
    '3' => 'aru90F-32C',
    '4' => 'aru95F-35C',
    '5' => 'aru100F-38C',
    '6' => 'aru7kW-1200cfm',
    '7' => 'aru5kW-800cfm',
    '8' => 'aru3kW-500cfm',
    '9' => 'aru2kW-300cfm',
    '10' => 'aru400cfm',
    '11' => 'aru600cfm',
    '12' => 'aru700cfm',
    '13' => 'aru900cfm',
    '14' => 'aru1000cfm',
    '15' => 'aru1400cfm',
    '16' => 'aru1600cfm',
    '17' => 'aru1800cfm',
    '18' => 'aru2000cfm',
  },
  battManSystemSuspendVoltage => {
    '1' => 'normal',
    '2' => 'alarm',
  },
  xATSInputContactCurrentState => {
    '1' => 'open',
    '2' => 'closed',
  },
  xPDUDeviceInfraStruXureType => {
    '1' => 'typeB',
    '2' => 'typeC',
  },
  airFMModBlwr2ElOvMode => {
    '1' => 'notApplicable',
    '2' => 'inactive',
    '3' => 'active',
  },
  upsAdvConfigACWiringSetting => {
    '1' => 'threeWire',
    '2' => 'fourWire',
  },
  airIRmPmEheating3Type => {
    '1' => 'direct',
    '2' => 'pwm',
  },
  isxModularDistSubFeedInfoBreakerAlarmEnable => {
    '1' => 'disabled',
    '2' => 'enabled',
  },
  rPDU2DeviceConfigOutletsPeakLoadReset => {
    '1' => 'noOperation',
    '2' => 'reset',
    '3' => 'notSupported',
  },
  dm3ConfigOutRlyAlarm => {
    '1' => 'alarmIgnore',
    '2' => 'alarmRelay1',
    '3' => 'alarmRelay2',
    '4' => 'alarmRelay3',
    '5' => 'alarmRelay4',
    '6' => 'alarmRelay5',
    '7' => 'alarmRelay6',
    '8' => 'alarmMinor',
    '9' => 'alarmMajor',
  },
  airFMSysAlarmMapExpMod1HighFltrDP => {
    '1' => 'notApplicable',
    '2' => 'disabled',
    '3' => 'enabled',
  },
  airIRG2GroupConfigLoadAssistEnable => {
    '1' => 'disable',
    '2' => 'enable',
  },
  upsDiagIMType => {
    '1' => 'imUnknown',
    '2' => 'imMIM',
    '3' => 'imRIM',
  },
  airFMModOutputCapacity => {
    '1' => 'notApplicable',
    '2' => 'kw45',
    '3' => 'kw35',
    '4' => 'kw40',
    '5' => 'kw50',
    '6' => 'kw80',
  },
  switchgearBreakerType => {
    '1' => 'unknown',
    '2' => 'unitInputBreaker',
    '3' => 'staticSwitchInputBreaker',
    '4' => 'maintenanceBypassBreaker',
    '5' => 'unitOutputBreaker',
    '6' => 'systemIsolationBreaker',
  },
  airIRG2RDT2ConfigUnitIdleOnCoolFail => {
    '1' => 'no',
    '2' => 'yes',
  },
  airIRSCUnitConfigOutputSource => {
    '1' => 'anyAlarm',
    '2' => 'criticalAlarm',
  },
  airFMSysAlarmMapExpMod2HumReplCyl => {
    '1' => 'notApplicable',
    '2' => 'disabled',
    '3' => 'enabled',
  },
  dm3ConfigSysLowTempAlarm => {
    '1' => 'alarmIgnore',
    '2' => 'alarmRelay1',
    '3' => 'alarmRelay2',
    '4' => 'alarmRelay3',
    '5' => 'alarmRelay4',
    '6' => 'alarmRelay5',
    '7' => 'alarmRelay6',
    '8' => 'alarmMinor',
    '9' => 'alarmMajor',
  },
  xATSGeneratorStatusOperational => {
    '1' => 'nocomm',
    '2' => 'off',
    '3' => 'ready',
    '4' => 'starting',
    '5' => 'idle',
    '6' => 'running',
    '7' => 'normalStop',
    '8' => 'emergencyStop',
    '9' => 'notInAuto',
    '10' => 'shutdown',
    '11' => 'unknown',
  },
  emsInputContactStatusInputContactNormalState => {
    '1' => 'normallyClosedEMS',
    '2' => 'normallyOpenEMS',
  },
  dm3ConfigConvFailAlarm => {
    '1' => 'alarmIgnore',
    '2' => 'alarmRelay1',
    '3' => 'alarmRelay2',
    '4' => 'alarmRelay3',
    '5' => 'alarmRelay4',
    '6' => 'alarmRelay5',
    '7' => 'alarmRelay6',
    '8' => 'alarmMinor',
    '9' => 'alarmMajor',
    '10' => 'alarmNofN',
  },
  xATSGeneratorSettingsCrankCycleEnable => {
    '1' => 'disabled',
    '2' => 'enabled',
    '3' => 'unknown',
  },
  airFMGroupCfgResetFieldServiceDefaults => {
    '1' => 'noOperation',
    '2' => 'reset',
  },
  airIRRP100UnitStatusOutputState => {
    '1' => 'open',
    '2' => 'closed',
  },
  upsIntegratedATSSourceStatus => {
    '1' => 'upsIntegratedATSSourceGood',
    '2' => 'upsIntegratedATSSourceBad',
    '3' => 'upsIntegratedATSSourceUnknown',
  },
  airFMSysAlarmMapExpMod1CoolFail => {
    '1' => 'notApplicable',
    '2' => 'disabled',
    '3' => 'enabled',
  },
  xPDUOutputRelayCurrentState => {
    '1' => 'open',
    '2' => 'closed',
    '3' => 'unknown',
  },
  xATSSwitchSettingsAllowClosedTransfer => {
    '1' => 'yes',
    '2' => 'no',
    '3' => 'unknown',
  },
  upsDiagPMEnclDoorFltrStatus => {
    '1' => 'ok',
    '2' => 'nearEnd',
    '3' => 'exceeded',
    '4' => 'unknown',
  },
  rPDU2PhaseStatusLoadState => {
    '1' => 'lowLoad',
    '2' => 'normal',
    '3' => 'nearOverload',
    '4' => 'overload',
  },
  airIRRP100GroupConfigConfigurationType => {
    '1' => 'racs',
    '2' => 'hacs',
    '3' => 'in-row',
    '4' => 'cacs',
  },
  atsStatusCommStatus => {
    '1' => 'atsNeverDiscovered',
    '2' => 'atsCommEstablished',
    '3' => 'atsCommLost',
  },
  upsPhaseResetMaxMinValues => {
    '1' => 'none',
    '2' => 'reset',
  },
  upsAdvTestRuntimeCalibration => {
    '1' => 'noPerformCalibration',
    '2' => 'performCalibration',
    '3' => 'cancelCurrentCalibration',
  },
  atsStatusHardwareStatus => {
    '1' => 'fail',
    '2' => 'ok',
  },
  rPDU2DeviceConfigDevicePeakPowerReset => {
    '1' => 'noOperation',
    '2' => 'reset',
  },
  sPDUOutletConfigMSPmupsP1LowTemp => {
    '1' => 'disableAlarm',
    '2' => 'enableAlarm',
  },
  airIRRP500GroupConfigConfigurationType => {
    '1' => 'racs',
    '2' => 'hacs',
    '3' => 'in-row',
    '4' => 'cacs',
  },
  AirIRmStopState => {
    '1' => 'maybeOn',
    '2' => 'unitOff',
  },
  airFMSysCoolEconIsolFunction => {
    '1' => 'notApplicable',
    '2' => 'disabled',
    '3' => 'enabled',
  },
  xPDUCoolingFanStatus => {
    '1' => 'normal',
    '2' => 'failed',
    '3' => 'noCoolingFansPresent',
    '4' => 'unknown',
  },
  dm3StatusLVDState => {
    '1' => 'statusClosed',
    '2' => 'statusOpened',
  },
  atsInputType => {
    '1' => 'unknown',
    '2' => 'main',
    '3' => 'bypass',
  },
  airFMSysAlarmMapMainModHighFltrDP => {
    '1' => 'notApplicable',
    '2' => 'disabled',
    '3' => 'enabled',
  },
  airIRRP500UnitServiceIntervalFansAlarm => {
    '1' => 'enable',
    '2' => 'disable',
  },
  airFMSysAlarmMapSysPrimSensFail => {
    '1' => 'notApplicable',
    '2' => 'disabled',
    '3' => 'enabled',
  },
  xATSSwitchSettingsClearLatchedAlarms => {
    '1' => 'yes',
    '2' => 'no',
  },
  airFMGroupFailoverModLossOrLowAirFlow => {
    '1' => 'notApplicable',
    '2' => 'disable',
    '3' => 'enable',
  },
  airFMSysAlarmMapInput5 => {
    '1' => 'notApplicable',
    '2' => 'disabled',
    '3' => 'enabled',
  },
  airFMGroupFailoverSysLowEnvHum => {
    '1' => 'notApplicable',
    '2' => 'disable',
    '3' => 'enable',
  },
  receiveTrapType => {
    '1' => 'powernet',
    '2' => 'ietf',
    '3' => 'both',
  },
  accessPXStatusRearDoorLock => {
    '1' => 'unlocked',
    '2' => 'locked',
    '3' => 'notInstalled',
    '4' => 'disconnected',
  },
  dm3ConfigLVDOpenAlarm => {
    '1' => 'alarmIgnore',
    '2' => 'alarmRelay1',
    '3' => 'alarmRelay2',
    '4' => 'alarmRelay3',
    '5' => 'alarmRelay4',
    '6' => 'alarmRelay5',
    '7' => 'alarmRelay6',
    '8' => 'alarmMinor',
    '9' => 'alarmMajor',
  },
  upsDiagSwitchGearBypassSwitchStatus => {
    '1' => 'unknown',
    '2' => 'notInstalled',
    '3' => 'opened',
    '4' => 'closed',
  },
  emConfigProbeMaxHumidEnable => {
    '1' => 'disabled',
    '2' => 'enabled',
  },
  iemConfigProbeHighHumidEnable => {
    '1' => 'disabled',
    '2' => 'enabled',
  },
  dm3ConfigRect2ofNAlarm => {
    '1' => 'alarmIgnore',
    '2' => 'alarmRelay1',
    '3' => 'alarmRelay2',
    '4' => 'alarmRelay3',
    '5' => 'alarmRelay4',
    '6' => 'alarmRelay5',
    '7' => 'alarmRelay6',
    '8' => 'alarmMinor',
    '9' => 'alarmMajor',
  },
  airFMSysHumEssFunction => {
    '1' => 'notApplicable',
    '2' => 'yes',
    '3' => 'no',
  },
  iemConfigProbeLowHumidEnable => {
    '1' => 'disabled',
    '2' => 'enabled',
  },
  severity => {
    '1' => 'information',
    '2' => 'warning',
    '3' => 'severe',
  },
  airFMSysDehumPIDMethod => {
    '1' => 'notApplicable',
    '2' => 'p',
    '3' => 'pi',
    '4' => 'pid',
  },
  airIRG3RDUConfigOutputNormalState => {
    '1' => 'open',
    '2' => 'closed',
  },
  airIRRP100UnitServiceIntervalCondensatePumpAlarm => {
    '1' => 'enable',
    '2' => 'disable',
  },
  airFMSysAlarmMapSysLowEnvHum => {
    '1' => 'notApplicable',
    '2' => 'disabled',
    '3' => 'enabled',
  },
  xATSTestingResultsLastResult => {
    '1' => 'noResultsAvailable',
    '2' => 'startTestPassed',
    '3' => 'loadTestPassed',
    '4' => 'startSignalFailure',
    '5' => 'failedGenNotInAuto',
    '6' => 'failedGenEmerStop',
    '7' => 'failedGenShutdown',
    '8' => 'failedGenDidNotStart',
    '9' => 'failedS2NeverGood',
    '10' => 'genFailedDuringWarmup',
    '11' => 'failureOnXferToS1',
    '12' => 'genFailedLoaded',
    '13' => 'failureOnRexferToS2',
    '14' => 'failedOnCooldown',
    '15' => 'genFailedToStop',
    '16' => 'failedAtsInternalFault',
    '17' => 'failedAtsNotInAuto',
    '18' => 'canceledManualTest',
    '19' => 'canceledScheduledTest',
  },
  uioOutputRelayStatusCommStatus => {
    '1' => 'notInstalled',
    '2' => 'commsOK',
    '3' => 'commsLost',
  },
  sPDUOutletCtl => {
    '1' => 'outletOn',
    '2' => 'outletOff',
    '3' => 'outletReboot',
    '4' => 'outletUnknown',
    '5' => 'outletOnWithDelay',
    '6' => 'outletOffWithDelay',
    '7' => 'outletRebootWithDelay',
  },
  atsStatus24VSourceBPowerSupply => {
    '1' => 'atsPowerSupplyFailure',
    '2' => 'atsPowerSupplyOK',
  },
  isxModularDistSysVoltagePhaseIndex => {
    '1' => 'phase1',
    '2' => 'phase2',
    '3' => 'phase3',
  },
  iemConfigRelayNormalState => {
    '1' => 'open',
    '2' => 'closed',
  },
  airIRmPmCmp2ManOperationActive => {
    '1' => 'automatic',
    '2' => 'manual',
  },
  emsSensorControlSensorCommand => {
    '1' => 'noCommandEMS',
    '2' => 'resetCommandEMS',
  },
  battManConfigMonitorWireLength => {
    '1' => 'fiftyFeetOrLess',
    '2' => 'moreThanFiftyFeet',
  },
  airFMSysAlarmMapInput11 => {
    '1' => 'notApplicable',
    '2' => 'disabled',
    '3' => 'enabled',
  },
  airIRRP500UnitConfigOutputSource => {
    '1' => 'anyAlarm',
    '2' => 'criticalAlarm',
  },
  dm3ConfigConvDiagAlarm => {
    '1' => 'alarmIgnore',
    '2' => 'alarmRelay1',
    '3' => 'alarmRelay2',
    '4' => 'alarmRelay3',
    '5' => 'alarmRelay4',
    '6' => 'alarmRelay5',
    '7' => 'alarmRelay6',
    '8' => 'alarmMinor',
    '9' => 'alarmMajor',
    '10' => 'alarmNofN',
  },
  dm3ConfigConvImbalanceAlarm => {
    '1' => 'alarmIgnore',
    '2' => 'alarmRelay1',
    '3' => 'alarmRelay2',
    '4' => 'alarmRelay3',
    '5' => 'alarmRelay4',
    '6' => 'alarmRelay5',
    '7' => 'alarmRelay6',
    '8' => 'alarmMinor',
    '9' => 'alarmMajor',
    '10' => 'alarmNofN',
  },
  airFMGroupFailoverSysHighEnvTemp => {
    '1' => 'notApplicable',
    '2' => 'disable',
    '3' => 'enable',
  },
  xPDUSystemOutputPhaseIndex => {
    '1' => 'phase1',
    '2' => 'phase2',
    '3' => 'phase3',
  },
  xATSGeneratorFuelSystemVeryLowRunTimeThreshold => {
    '1' => 'disabled',
    '2' => 'oneHour',
    '3' => 'twoHours',
    '4' => 'threeHours',
    '5' => 'fourHours',
    '6' => 'fiveHours',
    '7' => 'sixHours',
    '8' => 'twelveHours',
    '9' => 'oneDay',
    '10' => 'twoDays',
    '11' => 'threeDays',
    '12' => 'fourDays',
    '13' => 'fiveDays',
    '14' => 'sixDays',
    '15' => 'sevenDays',
  },
  airIRRP100UnitServiceIntervalAirFilterAlarm => {
    '1' => 'enable',
    '2' => 'disable',
  },
  rPDU2SensorTempHumidityStatusTempStatus => {
    '1' => 'notPresent',
    '2' => 'belowMin',
    '3' => 'belowLow',
    '4' => 'normal',
    '5' => 'aboveHigh',
    '6' => 'aboveMax',
  },
  dm3StatusSysRectVoltSanity => {
    '1' => 'saneYES',
    '2' => 'saneNO',
  },
  airFMSysAlarmMapInput15 => {
    '1' => 'notApplicable',
    '2' => 'disabled',
    '3' => 'enabled',
  },
  iemConfigContactSeverity => {
    '1' => 'critical',
    '2' => 'warning',
    '3' => 'informational',
  },
  dm3StatusConvPresent => {
    '1' => 'statusTrue',
    '2' => 'statusFalse',
  },
  rPDU2SensorDiscreteStatusCommStatus => {
    '1' => 'notInstalled',
    '2' => 'commsOK',
    '3' => 'commsLost',
  },
  isxModularDistSysOutputVoltageAlarmLowEnable => {
    '1' => 'disabled',
    '2' => 'enabled',
  },
  airFMSysAlarmMapOutput12 => {
    '1' => 'notApplicable',
    '2' => 'disabled',
    '3' => 'enabled',
  },
  emStatusProbeMaxTempViolation => {
    '1' => 'noViolation',
    '2' => 'maxTempViolation',
    '3' => 'disabled',
  },
  memBeaconStatusCurrentState => {
    '1' => 'off',
    '2' => 'on',
  },
  atsOutputPhaseState => {
    '1' => 'normal',
    '2' => 'lowload',
    '3' => 'nearoverload',
    '4' => 'overload',
  },
  airIRRP500UnitStatusInputState => {
    '1' => 'open',
    '2' => 'closed',
  },
  atsOutputVoltageOrientation => {
    '1' => 'unknown',
    '2' => 'singlePhase',
    '3' => 'splitPhase',
    '4' => 'threePhasePhaseToNeutral',
    '5' => 'threePhasePhaseToPhase',
  },
  airFMGroupFailoverModHighFilterDP => {
    '1' => 'notApplicable',
    '2' => 'disable',
    '3' => 'enable',
  },
  airFMGroupCfgDmdFightSetting => {
    '1' => 'disable',
    '2' => 'enable',
  },
  upsAdvConfigUPSFail => {
    '1' => 'unknown',
    '2' => 'gotoBypass',
    '3' => 'dropLoad',
  },
  airFMSysActualSteamHotGasReheat => {
    '1' => 'notApplicable',
    '2' => 'off',
    '3' => 'on',
  },
  airFMSysResetSysFailure => {
    '1' => 'notApplicable',
    '2' => 'noOperation',
    '3' => 'reset',
  },
  airIRRP100GroupConfigActiveFlowControllerLampTest => {
    '1' => 'off',
    '2' => 'on',
  },
  airFMSysAlarmMapExpMod2HighFltrDP => {
    '1' => 'notApplicable',
    '2' => 'disabled',
    '3' => 'enabled',
  },
  airIRRCUnitConfigOutputSource => {
    '1' => 'anyAlarm',
    '2' => 'criticalAlarm',
  },
  sPDUOutletConfigMSPmupsP2HiTemp => {
    '1' => 'disableAlarm',
    '2' => 'enableAlarm',
  },
  isxModularDistSysPowerPhaseIndex => {
    '1' => 'phase1',
    '2' => 'phase2',
    '3' => 'phase3',
  },
  emConfigProbeHighHumidEnable => {
    '1' => 'disabled',
    '2' => 'enabled',
  },
  airFMSysTempCtrlMethod => {
    '1' => 'notApplicable',
    '2' => 'avgReturn',
    '3' => 'avgRemote',
    '4' => 'maxRemote',
  },
  rARUConfigAruTempOvrdEnableDisable => {
    '1' => 'disabled',
    '2' => 'enabled',
  },
  airFMSysReheatEssFunction => {
    '1' => 'notApplicable',
    '2' => 'yes',
    '3' => 'no',
  },
  isxModularDistModuleOutputAlarmMinEnable => {
    '1' => 'disabled',
    '2' => 'enabled',
  },
  airIRmPmLouver3ManOpPosition => {
    '1' => 'closed',
    '2' => 'open',
  },
  upsAdvTestDiagnostics => {
    '1' => 'noTestDiagnostics',
    '2' => 'testDiagnostics',
  },
  airIRG2RDT2ConfigUnitRoleOverride => {
    '1' => 'automatic',
    '2' => 'forcedOn',
  },
  upsDiagSwitchGearBypassInputSwitchStatus => {
    '1' => 'unknown',
    '2' => 'notInstalled',
    '3' => 'opened',
    '4' => 'closed',
  },
  airFMSysAlarmMapMainModHumReplCyl => {
    '1' => 'notApplicable',
    '2' => 'disabled',
    '3' => 'enabled',
  },
  upsAdvBatteryCurrentPolarity => {
    '0' => 'positive',
    '1' => 'negative',
  },
  battManAlarmEnvironment => {
    '1' => 'normal',
    '2' => 'alarm',
  },
  airFMSysAlarmMapMainModCondPumpFail => {
    '1' => 'notApplicable',
    '2' => 'disabled',
    '3' => 'enabled',
  },
  xATSDeviceServiceType => {
    '1' => 'threeWire',
    '2' => 'fourWire',
  },
  airFMSysCoilCfg => {
    '1' => 'notApplicable',
    '2' => 'dx',
    '3' => 'econ',
    '4' => 'multicool',
    '5' => 'chilledWater',
  },
  airIRRP500UnitConfigSecondaryPowerFeedCapability => {
    '1' => 'full',
    '2' => 'reduced',
  },
  isxModularDistSubFeedInfoKwhReset => {
    '1' => 'no',
    '2' => 'yes',
  },
  airFMSysActualSteamHum => {
    '1' => 'notApplicable',
    '2' => 'off',
    '3' => 'on',
  },
  battManSystemAmbientProbeDisconnected => {
    '1' => 'normal',
    '2' => 'alarm',
  },
  upsSCGACInputStatus => {
    '1' => 'acInGood',
    '2' => 'acInBad',
  },
  atsConfigVoltageSensitivity => {
    '1' => 'high',
    '2' => 'low',
  },
  accessPXStatusFrontDoor => {
    '1' => 'open',
    '2' => 'closed',
    '3' => 'notInstalled',
    '4' => 'disconnected',
  },
  dm3ConfigConvFanFailAlarm => {
    '1' => 'alarmIgnore',
    '2' => 'alarmRelay1',
    '3' => 'alarmRelay2',
    '4' => 'alarmRelay3',
    '5' => 'alarmRelay4',
    '6' => 'alarmRelay5',
    '7' => 'alarmRelay6',
    '8' => 'alarmMinor',
    '9' => 'alarmMajor',
    '10' => 'alarmNofN',
  },
  battManString2BatteryCellShorted => {
    '1' => 'normal',
    '2' => 'alarm',
  },
  battManString2BatteryOpenCell => {
    '1' => 'normal',
    '2' => 'alarm',
  },
  isxModularDistSysOutputVoltageFrequencyTolerance => {
    '1' => 'freqToleranceOff',
    '2' => 'freqTolerancePointTwo',
    '3' => 'freqTolerancePointFive',
    '4' => 'freqToleranceOne',
    '5' => 'freqToleranceOnePointFive',
    '6' => 'freqToleranceTwo',
    '7' => 'freqToleranceThree',
    '8' => 'freqToleranceFour',
    '9' => 'freqToleranceFive',
    '10' => 'freqToleranceNine',
    '11' => 'freqToleranceNotAvailable',
  },
  xPDUDeviceFansPresent => {
    '1' => 'notPresent',
    '2' => 'present',
  },
  airFMSysSteamHotGasReheatDmd => {
    '1' => 'notApplicable',
    '2' => 'off',
    '3' => 'on',
  },
  airFMGroupSysRole => {
    '1' => 'rolePrimary',
    '2' => 'roleBackup',
  },
  airIRmPmFan2Type => {
    '1' => 'direct',
    '2' => 'proportional',
  },
  xATSSource2Index => {
    '1' => 'phase1',
    '2' => 'phase2',
    '3' => 'phase3',
  },
  airFMModServIntBlwrCtrl2Reset => {
    '1' => 'notApplicable',
    '2' => 'noOperation',
    '3' => 'reset',
  },
  airFMSysAlarmMapExpMod1AirBlckIntOpen => {
    '1' => 'notApplicable',
    '2' => 'disabled',
    '3' => 'enabled',
  },
  atsStatusSelectedSource => {
    '1' => 'sourceA',
    '2' => 'sourceB',
  },
  airIRRCUnitConfigIdleOnLeakDetect => {
    '1' => 'yes',
    '2' => 'no',
  },
  isxModularDistModuleBreakerPositionAlarms => {
    '1' => 'disabled',
    '2' => 'enabled',
  },
  airFMSysAlarmMapSysSecSensActive => {
    '1' => 'notApplicable',
    '2' => 'disabled',
    '3' => 'enabled',
  },
  isxModularDistSysCurrentPhaseIndex => {
    '1' => 'phase1',
    '2' => 'phase2',
    '3' => 'phase3',
  },
  memInputAbnormalSeverity => {
    '1' => 'inputSeverityinformational',
    '2' => 'inputSeveritywarning',
    '3' => 'inputSeveritysevere',
    '4' => 'inputSeverityNotApplicable',
  },
  battManSystemConfigurationInvalid => {
    '1' => 'normal',
    '2' => 'alarm',
  },
  emsConfigCheckLogLight => {
    '1' => 'lightDisabled',
    '2' => 'lightOnInformational',
    '3' => 'lightOnWarning',
    '4' => 'lightOnSevere',
  },
  airIRG3GroupConfigCoolPIDReset => {
    '1' => 'readBack',
    '2' => 'reset',
  },
  airIRRP100GroupConfigRuntimeBalancingEnable => {
    '1' => 'disable',
    '2' => 'enable',
  },
  airIRSCUnitStatusOutputState => {
    '1' => 'open',
    '2' => 'closed',
  },
  emStatusProbeHighHumidViolation => {
    '1' => 'noViolation',
    '2' => 'highHumidViolation',
    '3' => 'disabled',
  },
  isxModularPduDeviceTransformerPresent => {
    '1' => 'notPresent',
    '2' => 'isoXfmrPresent',
    '3' => 'autoXfmrPresent',
  },
  airIRG3RDUConfigInputNormalState => {
    '1' => 'open',
    '2' => 'closed',
  },
  upsOutletGroupControlCommand => {
    '1' => 'upsOutletGroupImmediateOn',
    '2' => 'upsOutletGroupImmediateOff',
    '3' => 'upsOutletGroupImmediateRebootWithOrWithoutAC',
    '4' => 'upsOutletGroupDelayedOn',
    '5' => 'upsOutletGroupDelayedOff',
    '6' => 'upsOutletGroupDelayedRebootWithOrWithoutAC',
    '7' => 'upsOutletGroupCancelPendingCommand',
    '8' => 'upsOutletGroupControlUnknown',
    '9' => 'upsOutletGroupImmediateRebootShutdown',
    '10' => 'upsOutletGroupDelayedRebootShutdown',
  },
  airIRSCUnitStatusCompressor => {
    '1' => 'off',
    '2' => 'on',
  },
  uioSensorStatusCommStatus => {
    '1' => 'notInstalled',
    '2' => 'commsOK',
    '3' => 'commsLost',
  },
  rPDULoadBankConfigAlarm => {
    '1' => 'noLoadAlarm',
    '2' => 'underCurrentAlarm',
    '3' => 'nearOverCurrentAlarm',
    '4' => 'overCurrentAlarm',
  },
  upsAdvConfigOutputFreqSlewRate => {
    '1' => 'unknown',
    '2' => 'slewRateQuarterHzPerSec',
    '3' => 'slewRateHalfHzPerSec',
    '4' => 'slewRate1HzPerSec',
    '5' => 'slewRate2HzPerSec',
    '6' => 'slewRate4HzPerSec',
    '7' => 'slewRate6HzPerSec',
  },
  isxModularDistSubFeedInfoAlarmMaxEnable => {
    '1' => 'disabled',
    '2' => 'enabled',
  },
  rPDU2DeviceStatusNPSType => {
    '1' => 'notNPS',
    '2' => 'host',
    '3' => 'guest',
  },
  isxModularPduDeviceServiceType => {
    '1' => 'threeWire',
    '2' => 'fourWire',
  },
  battManSystemPilotProbeDisconnected => {
    '1' => 'normal',
    '2' => 'alarm',
  },
  battManString1BatteryUserHighVoltageAlarm => {
    '1' => 'normal',
    '2' => 'alarm',
  },
  iemStatusContactStatus => {
    '1' => 'noFault',
    '2' => 'fault',
    '3' => 'disabled',
  },
  airFMGroupLoadShareCoolRequests => {
    '1' => 'disable',
    '2' => 'enable',
  },
  upsOutletGroupConfigLoadShedControlRuntimeRemaining => {
    '1' => 'upsOutletGroupConfigDisableRuntimeRemainingLoadShed',
    '2' => 'upsOutletGroupConfigEnableRuntimeRemainingLoadShed',
  },
  isxModularDistModuleOutputStatus => {
    '1' => 'normal',
    '2' => 'warning',
    '3' => 'critical',
    '4' => 'notPresent',
    '6' => 'unknown',
  },
  sPDUOutletConfigMSPmupsP2LowTemp => {
    '1' => 'disableAlarm',
    '2' => 'enableAlarm',
  },
  upsAdvConfigSetEEPROMDefaults => {
    '1' => 'noSetEEPROMDefaults',
    '2' => 'setEEPROMDefaults',
  },
  sPDUOutletConfigMSPannunOutletCtrlMode => {
    '1' => 'modeGracefulShutdown',
    '2' => 'modeAnnunciator',
  },
  airFMSysAlarmMapExpMod2MaintReq => {
    '1' => 'notApplicable',
    '2' => 'disabled',
    '3' => 'enabled',
  },
  airIRSCUnitConfigInputNormalState => {
    '1' => 'open',
    '2' => 'closed',
  },
  atsOutputPhaseIndex => {
    '1' => 'phase1',
    '2' => 'phase2',
    '3' => 'phase3',
    '4' => 'neutral',
  },
  iemConfigProbeTempUnits => {
    '1' => 'celsius',
    '2' => 'fahrenheit',
  },
  iemConfigContactNormalState => {
    '1' => 'open',
    '2' => 'closed',
  },
  airFMSysAlarmMapExpMod1BlwrCntl2Fail => {
    '1' => 'notApplicable',
    '2' => 'disabled',
    '3' => 'enabled',
  },
  airFMSysAlarmMapInput9 => {
    '1' => 'notApplicable',
    '2' => 'disabled',
    '3' => 'enabled',
  },
  atsConfigPreferredSource => {
    '1' => 'sourceA',
    '2' => 'sourceB',
    '3' => 'none',
  },
  airFMSysAlarmMapOutput14 => {
    '1' => 'notApplicable',
    '2' => 'disabled',
    '3' => 'enabled',
  },
  upsHighPrecBatteryActualVoltagePolarity => {
    '0' => 'positive',
    '1' => 'negative',
  },
  airFMSysAlarmMapInput8 => {
    '1' => 'notApplicable',
    '2' => 'disabled',
    '3' => 'enabled',
  },
  emsAlarmDeviceStatusDeviceState => {
    '1' => 'alarmDeviceOnEMS',
    '2' => 'alarmDeviceOffEMS',
    '3' => 'alarmDeviceNotInstalledEMS',
  },
  airFMSysAlarmMapSystemOn => {
    '1' => 'notApplicable',
    '2' => 'disabled',
    '3' => 'enabled',
  },
  accessPXStatusFrontDoorHandle => {
    '1' => 'open',
    '2' => 'closed',
    '3' => 'notInstalled',
    '4' => 'disconnected',
  },
  airIRG3RDUConfigByPassValveEnabled => {
    '1' => 'no',
    '2' => 'yes',
  },
  airIRG3GroupConfigFanSpeedControl => {
    '1' => 'automatic',
    '2' => 'manual',
  },
  upsDiagSubSysInverterStatus => {
    '1' => 'unknown',
    '2' => 'notInstalled',
    '3' => 'offOk',
    '4' => 'onOk',
    '5' => 'offFail',
    '6' => 'onFail',
    '7' => 'lostComm',
  },
  airFMGroupFailoverSysSupplySensorFail => {
    '1' => 'notApplicable',
    '2' => 'disable',
    '3' => 'enable',
  },
  battManStringOnBattery => {
    '1' => 'normal',
    '2' => 'alarm',
  },
  xPDUBypassInputVoltagePhaseIndex => {
    '1' => 'phase1',
    '2' => 'phase2',
    '3' => 'phase3',
  },
  sPDUOutletStatusVMOutletState => {
    '1' => 'outletStatusVMOn',
    '2' => 'outletStatusVMOff',
  },
  airFMModStmElectHumMode => {
    '1' => 'notApplicable',
    '2' => 'off',
    '3' => 'auto',
    '4' => 'drain',
  },
  upsAdvConfigMainsSetting => {
    '1' => 'singleInput',
    '2' => 'dualInput',
  },
  dm3ConfigConv2ofNAlarm => {
    '1' => 'alarmIgnore',
    '2' => 'alarmRelay1',
    '3' => 'alarmRelay2',
    '4' => 'alarmRelay3',
    '5' => 'alarmRelay4',
    '6' => 'alarmRelay5',
    '7' => 'alarmRelay6',
    '8' => 'alarmMinor',
    '9' => 'alarmMajor',
  },
  airFMSysAlarmMapInput7 => {
    '1' => 'notApplicable',
    '2' => 'disabled',
    '3' => 'enabled',
  },
  xATSGeneratorFuelSystemType => {
    '1' => 'diesel',
    '2' => 'propane',
    '3' => 'naturalGas',
    '4' => 'unknown',
  },
  emsOutletConfigOutletNormalState => {
    '1' => 'normallyOnEMS',
    '2' => 'normallyOffEMS',
  },
  airFMSysAlarmMapExpMod1HumFail => {
    '1' => 'notApplicable',
    '2' => 'disabled',
    '3' => 'enabled',
  },
  airIRRCUnitStatusInputState => {
    '1' => 'open',
    '2' => 'closed',
  },
  upsAdvBatteryReplaceIndicator => {
    '1' => 'noBatteryNeedsReplacing',
    '2' => 'batteryNeedsReplacing',
  },
  battManRemoteAnnunciatorReset => {
    '1' => 'noOperation',
    '2' => 'reset',
  },
  rPDULoadPhaseConfigIndex => {
    '1' => 'phase1',
    '2' => 'phase2',
    '3' => 'phase3',
  },
  atsStatus5VPowerSupply => {
    '1' => 'atsPowerSupplyFailure',
    '2' => 'atsPowerSupplyOK',
  },
  airIRRP100GroupSetpointsActiveFlowControlBias => {
    '1' => 'positive',
    '2' => 'slightlyPositive',
    '3' => 'zero',
    '4' => 'slightlyNegative',
    '5' => 'negative',
  },
  battManStringChargerHighVoltageAlarm => {
    '1' => 'normal',
    '2' => 'alarm',
  },
  airIRmPmHumidifier1Type => {
    '1' => 'direct',
    '2' => 'proportional',
  },
  airIRmPmControllerType => {
    '1' => 'unknown',
    '2' => 'c4000',
    '3' => 'c1001',
    '4' => 'c1002',
    '5' => 'c5000',
    '6' => 'c6000',
    '7' => 'c1010',
    '8' => 'c7000IOC',
    '9' => 'c7000AT',
    '10' => 'c7000PT',
    '11' => 'c5MSC',
    '12' => 'c7000PT2',
  },
  atsCalibrationPowerSupplyVoltage => {
    '1' => 'powerSupply24V',
    '2' => 'powerSupply12V',
    '3' => 'powerSupply',
    '4' => 'powerSupply24VSourceB',
    '5' => 'powerSupplyMinus12V',
  },
  emStatusProbeStatus => {
    '1' => 'disconnected',
    '2' => 'connected',
  },
  memSensorsCommStatus => {
    '1' => 'notInstalled',
    '2' => 'commsOK',
    '3' => 'commsLost',
  },
  upsDiagPMFanLifetimeStatus => {
    '1' => 'ok',
    '2' => 'nearEnd',
    '3' => 'exceeded',
    '4' => 'unknown',
  },
  loadBalancerStatus => {
    '1' => 'unknown',
    '2' => 'stopped',
    '3' => 'running',
    '4' => 'running-missing',
  },
  xATSSwitchStatusEngineStartSignal => {
    '1' => 'run',
    '2' => 'stop',
    '3' => 'unknown',
  },
  upsHighPrecBatteryCurrentPolarity => {
    '0' => 'positive',
    '1' => 'negative',
  },
  rARUStatusSysTempUnits => {
    '1' => 'celsius',
    '2' => 'fahrenheit',
  },
  coolingUnitConfigurationAnalogAccess => {
    '1' => 'readOnly',
    '2' => 'readWrite',
  },
  sPDUOutletControlVMOutletCommand => {
    '1' => 'immediateOnVM',
    '2' => 'immediateOffVM',
    '3' => 'immediateRebootVM',
    '4' => 'delayedOnVM',
    '5' => 'delayedOffVM',
    '6' => 'delayedRebootVM',
    '7' => 'cancelPendingCommandVM',
  },
  airFMSysHotWaterVlvAct => {
    '1' => 'notApplicable',
    '2' => 'none',
    '3' => 'springAnalog',
    '4' => 'floatingControl',
  },
  airFMSysCoolPIDMethod => {
    '1' => 'notApplicable',
    '2' => 'p',
    '3' => 'pi',
    '4' => 'pid',
  },
  dcmim2ControlRunCapacityBatteryTest => {
    '1' => 'battTestOff',
    '2' => 'battTestOn',
  },
  dm3StatusRectStandby => {
    '1' => 'statusTrue',
    '2' => 'statusFalse',
  },
  xATSTestingScheduleTestWithLoadInterval => {
    '1' => 'applyLoadEveryTest',
    '2' => 'neverApplyLoad',
    '3' => 'applyLoadMonthly',
    '4' => 'applyLoadMonthlyDetailed',
  },
  sPDUOutletPending => {
    '1' => 'commandPending',
    '2' => 'noCommandPending',
    '3' => 'commandPendingUnknown',
  },
  rPDUIdentDeviceDisplayOrientation => {
    '1' => 'displayNormal',
    '2' => 'displayReverse',
  },
  atsCalibrationOutputPhasesTableIndex => {
    '1' => 'phase1',
    '2' => 'phase2',
    '3' => 'phase3',
    '4' => 'neutral',
  },
  airFMModServIntBlwr2Reset => {
    '1' => 'notApplicable',
    '2' => 'noOperation',
    '3' => 'reset',
  },
  upsDiagSubSysFrameType => {
    '1' => 'unknown',
    '2' => 'notInstalled',
    '3' => 'frameTypeMain',
    '4' => 'frameTypeXR',
    '5' => 'frameTypeLXR',
  },
  airFMStatusSystemOn => {
    '1' => 'statusOn',
    '2' => 'statusOff',
  },
  airFMSysAlarmMapSysHighEnvHum => {
    '1' => 'notApplicable',
    '2' => 'disabled',
    '3' => 'enabled',
  },
  battManString1BatteryChemLowVoltageAlarm => {
    '1' => 'normal',
    '2' => 'alarm',
  },
  airFMGroupCfgFailoverCommLoss => {
    '1' => 'disable',
    '2' => 'enable',
  },
  xPDUOutputRelayNormalState => {
    '1' => 'open',
    '2' => 'closed',
  },
  airFMSysAlarmMapExpMod2AnyAlarm => {
    '1' => 'notApplicable',
    '2' => 'disabled',
    '3' => 'enabled',
  },
  battManStringHighRippleCurrent => {
    '1' => 'normal',
    '2' => 'alarm',
  },
  rPDU2SensorTempHumidityStatusCommStatus => {
    '1' => 'notInstalled',
    '2' => 'commsOK',
    '3' => 'commsLost',
  },
  airFMSysFlowSwitch => {
    '1' => 'notApplicable',
    '2' => 'none',
    '3' => 'dxEcon',
    '4' => 'multiCoolChillWater',
  },
  memOutletAction => {
    '1' => 'turnOff',
    '2' => 'turnOn',
  },
  rPDUOutletPhaseIndex => {
    '1' => 'phase1',
    '2' => 'phase2',
    '3' => 'phase3',
  },
  atsConfigTransferVoltageRange => {
    '1' => 'wide',
    '2' => 'medium',
    '3' => 'narrow',
  },
  atsConfigFrontPanelLockout => {
    '1' => 'disableFrontPanel',
    '2' => 'enableFrontPanel',
  },
  airIRG3CMStatusUnitType => {
    '1' => 'unconfigured',
    '2' => 'oa',
    '3' => 'ra',
  },
  airIRRP100UnitStatusLeakSensor => {
    '1' => 'no-leak',
    '2' => 'leak',
  },
  iemStatusProbeLowHumidViolation => {
    '1' => 'noViolation',
    '2' => 'lowHumidViolation',
    '3' => 'disabled',
  },
  rPDULoadStatusLoadState => {
    '1' => 'phaseLoadNormal',
    '2' => 'phaseLoadLow',
    '3' => 'phaseLoadNearOverload',
    '4' => 'phaseLoadOverload',
  },
  airFMSysDischAirPtrn => {
    '1' => 'notApplicable',
    '2' => 'upFlow',
    '3' => 'downFlow',
    '4' => 'horizFlow',
  },
  airIRG3GroupConfigConfigurationType => {
    '1' => 'racs',
    '2' => 'spot',
    '3' => 'in-row',
    '4' => 'hacs',
  },
  upsDiagComBusExternalMIMStatus => {
    '1' => 'unknown',
    '2' => 'notInstalled',
    '3' => 'ok',
    '4' => 'lostComm',
    '5' => 'rxFailure',
    '6' => 'txFailure',
  },
  airFMSysAlarmMapExpMod1LowAirFlow => {
    '1' => 'notApplicable',
    '2' => 'disabled',
    '3' => 'enabled',
  },
  airFMStatusSystemDehumidifyEnabled => {
    '1' => 'enabledYes',
    '2' => 'enabledNo',
  },
  emsOutputRelayConfigOutputRelayNormalState => {
    '1' => 'normallyClosedEMS',
    '2' => 'normallyOpenEMS',
  },
  rPDULoadPhaseConfigAlarm => {
    '1' => 'noLoadAlarm',
    '2' => 'underCurrentAlarm',
    '3' => 'nearOverCurrentAlarm',
    '4' => 'overCurrentAlarm',
  },
  battManResetLowestDischargeVoltages => {
    '1' => 'noOperation',
    '2' => 'reset',
  },
  iemConfigProbeMaxHumidEnable => {
    '1' => 'disabled',
    '2' => 'enabled',
  },
  airFMModBlwr2CtrlType => {
    '1' => 'notApplicable',
    '2' => 'fujiVFD',
    '3' => 'ecController',
    '4' => 'danfossVFD',
  },
  xPDUBranchBreakerRDPFeed => {
    '1' => 'remoteDistribution',
    '2' => 'noRemoteDistribution',
  },
  coolingUnitConfigurationDiscreteAccess => {
    '1' => 'readOnly',
    '2' => 'readWrite',
  },
  xATSSource1Position => {
    '1' => 'open',
    '2' => 'closed',
    '3' => 'tripped',
    '4' => 'unknown',
  },
  upsAdvConfigLCDLocalLanguage => {
    '1' => 'english',
    '2' => 'french',
    '3' => 'italian',
    '4' => 'german',
    '5' => 'spanish',
    '6' => 'portuguese',
    '7' => 'japanese',
  },
  airIRRP100GroupSetpointsFanSpeedControl => {
    '1' => 'automatic',
    '2' => 'manual',
  },
  sPDUOutletStatusMSPOutletCtrlMode => {
    '1' => 'modeGracefulShutdown',
    '2' => 'modeAnnunciator',
  },
  upsAdvStateEcomode => {
    '1' => 'upsOnEcoMode',
    '2' => 'upsNotOnEcoMode',
  },
  airFMSysSuctPresCompensation => {
    '1' => 'notApplicable',
    '2' => 'disabled',
    '3' => 'enabled',
  },
  emStatusProbeMaxHumidViolation => {
    '1' => 'noViolation',
    '2' => 'maxHumidViolation',
    '3' => 'disabled',
  },
  emConfigProbeLowTempEnable => {
    '1' => 'disabled',
    '2' => 'enabled',
  },
  iemStatusProbeMinHumidViolation => {
    '1' => 'noViolation',
    '2' => 'minHumidViolation',
    '3' => 'disabled',
  },
  apcLocalDisplayConfigBeeperVolume => {
    '1' => 'beeperDisabled',
    '2' => 'beeperLow',
    '3' => 'beeperMedium',
    '4' => 'beeperHigh',
  },
  upsBasicSystemPFCStatus => {
    '1' => 'unknown',
    '2' => 'ok',
    '3' => 'inFaultCondition',
  },
  rPDUIdentDeviceOrientation => {
    '1' => 'orientHorizontal',
    '2' => 'orientVertical',
  },
  upsAdvConfigOutputFreqRange => {
    '1' => 'unknown',
    '2' => 'freqRangeAUTO',
    '3' => 'freqRange60Var1',
    '4' => 'freqRange60Var3',
    '5' => 'freqRange50Var1',
    '6' => 'freqRange50Var3',
    '7' => 'freqRange60Var10',
    '8' => 'freqRange50Var10',
    '9' => 'freqRange60Var1dot0',
    '10' => 'freqRange50Var1dot0',
    '11' => 'freqRange50Pct0dot5',
    '12' => 'freqRange50Pct1',
    '13' => 'freqRange50Pct2',
    '14' => 'freqRange50Pct4',
    '15' => 'freqRange50Pct6',
    '16' => 'freqRange50Pct8',
    '17' => 'freqRange60Pct0dot5',
    '18' => 'freqRange60Pct1',
    '19' => 'freqRange60Pct2',
    '20' => 'freqRange60Pct4',
    '21' => 'freqRange60Pct6',
    '22' => 'freqRange60Pct8',
  },
  dm3StatusConvFail => {
    '1' => 'statusTrue',
    '2' => 'statusFalse',
  },
  airIRG3CMStatusLocalDisplayOnOffEnabled => {
    '1' => 'no',
    '2' => 'yes',
  },
  iemConfigProbeMinTempEnable => {
    '1' => 'disabled',
    '2' => 'enabled',
  },
  airFMSysCndsrFluidVlvAct => {
    '1' => 'notApplicable',
    '2' => 'none',
    '3' => 'floatingControl',
  },
  airFMSysAlarmMapSysEconIsol => {
    '1' => 'notApplicable',
    '2' => 'disabled',
    '3' => 'enabled',
  },
  airPACondenserFan => {
    '1' => 'statusON',
    '2' => 'statusOFF',
  },
  emConfigContactNormalState => {
    '1' => 'open',
    '2' => 'closed',
  },
  airFMSysAlarmMapMainModMaintReq => {
    '1' => 'notApplicable',
    '2' => 'disabled',
    '3' => 'enabled',
  },
  battManConfigApplication => {
    '1' => 'silcon',
    '2' => 'other',
  },
  airFMSysAlarmMapOutput10 => {
    '1' => 'notApplicable',
    '2' => 'disabled',
    '3' => 'enabled',
  },
  xATSSwitchStatusAutomaticOperationSwitch => {
    '1' => 'disabled',
    '2' => 'enabled',
    '3' => 'unknown',
  },
  airFMSysAlarmMapOutput13 => {
    '1' => 'notApplicable',
    '2' => 'disabled',
    '3' => 'enabled',
  },
  emsOutputRelayStatusOutputRelayNormalState => {
    '1' => 'normallyClosedEMS',
    '2' => 'normallyOpenEMS',
  },
  rPDUPowerSupply1Status => {
    '1' => 'powerSupplyOneOk',
    '2' => 'powerSupplyOneFailed',
  },
  rARUPowerStatusPrimaryAcPresent => {
    '1' => 'yes',
    '2' => 'no',
  },
  rARUPowerStatusRedundantAcConfig => {
    '1' => 'singleCord',
    '2' => 'dualCord',
  },
  apcLocalDisplayConfigCheckLogIndicator => {
    '1' => 'checklogNotPresent',
    '2' => 'checklogDisabled',
    '3' => 'checklogInformational',
    '4' => 'checklogWarning',
    '5' => 'checklogCritical',
  },
  airFMGroupSysComm => {
    '1' => 'commLost',
    '2' => 'commEstablished',
  },
  airIRRCGroupSetpointsFanSpeedPreference => {
    '1' => 'low',
    '2' => 'med-low',
    '3' => 'med',
    '4' => 'med-high',
    '5' => 'high',
  },
  upsAdvControlUpsSleep => {
    '1' => 'noPutUpsToSleep',
    '2' => 'putUpsToSleep',
    '3' => 'putUpsToSleepGracefully',
    '4' => 'putUpsSyncGroupToSleep',
    '5' => 'putUpsSyncGroupToSleepGracefully',
  },
  dm3ConfigConvCurrLimitAlarm => {
    '1' => 'alarmIgnore',
    '2' => 'alarmRelay1',
    '3' => 'alarmRelay2',
    '4' => 'alarmRelay3',
    '5' => 'alarmRelay4',
    '6' => 'alarmRelay5',
    '7' => 'alarmRelay6',
    '8' => 'alarmMinor',
    '9' => 'alarmMajor',
    '10' => 'alarmNofN',
  },
  dm3ConfigConvConfigAlarm => {
    '1' => 'alarmIgnore',
    '2' => 'alarmRelay1',
    '3' => 'alarmRelay2',
    '4' => 'alarmRelay3',
    '5' => 'alarmRelay4',
    '6' => 'alarmRelay5',
    '7' => 'alarmRelay6',
    '8' => 'alarmMinor',
    '9' => 'alarmMajor',
  },
  apcLocalDisplayConfigContrast => {
    '1' => 'contrast1',
    '2' => 'contrast2',
    '3' => 'contrast3',
    '4' => 'contrast4',
    '5' => 'contrast5',
    '6' => 'contrast6',
    '7' => 'contrast7',
    '8' => 'contrast8',
  },
  xATSTestingStatusSelectTestProcess => {
    '1' => 'engineStartTest',
    '2' => 'systemLoadTest',
    '3' => 'generatorHoldTest',
    '4' => 'cancelTest',
  },
  accessPXStatusFrontDoorLock => {
    '1' => 'unlocked',
    '2' => 'locked',
    '3' => 'notInstalled',
    '4' => 'disconnected',
  },
  upsDiagSubSysExternalSwitchGearStatus => {
    '1' => 'unknown',
    '2' => 'notInstalled',
    '3' => 'offOk',
    '4' => 'onOk',
    '5' => 'offFail',
    '6' => 'onFail',
    '7' => 'lostComm',
  },
  airIRG2GroupStatusActiveFlowControlStatus => {
    '1' => 'under',
    '2' => 'okay',
    '3' => 'over',
    '4' => 'notApplicable',
  },
  airIRG2RDT2ConfigUnitType => {
    '1' => 'fluidCooled',
    '2' => 'airCooled',
  },
  airIRRCGroupStatusActiveFlowControlStatus => {
    '1' => 'under',
    '2' => 'okay',
    '3' => 'over',
    '4' => 'notApplicable',
  },
  emConfigProbeMinHumidEnable => {
    '1' => 'disabled',
    '2' => 'enabled',
  },
  iemConfigProbeLowTempEnable => {
    '1' => 'disabled',
    '2' => 'enabled',
  },
  dm3StatusOutRlyStatus => {
    '1' => 'statusOn',
    '2' => 'statusOff',
  },
  sPDUOutletConfigMSPgsDeviceConfirm => {
    '1' => 'deviceConfirmNo',
    '2' => 'deviceConfirmYes',
  },
  upsDiagPMEnclDoorFltrLifetime => {
    '1' => 'heavyFiltration15days',
    '2' => 'normalFiltration30days',
    '3' => 'lightFiltration60days',
    '4' => 'notPresent',
  },
  xATSSource1Rotation => {
    '1' => 'abc',
    '2' => 'cba',
    '3' => 'unknown',
  },
  airIRRP500UnitConfigHumidifierControl => {
    '1' => 'auto',
    '2' => 'drainOff',
  },
  airIRSCGroupConfigActiveFlowControllerLampTest => {
    '1' => 'off',
    '2' => 'on',
  },
  rPDU2DeviceConfigDisplayOrientation => {
    '1' => 'displayNormal',
    '2' => 'displayReverse',
  },
  dm3StatusRectCfg => {
    '1' => 'statusTrue',
    '2' => 'statusFalse',
  },
  airFMSysAlarmMapInput1 => {
    '1' => 'notApplicable',
    '2' => 'disabled',
    '3' => 'enabled',
  },
  iemStatusRelayStatus => {
    '1' => 'faultState',
    '2' => 'normalState',
  },
  memBeaconAction => {
    '1' => 'turnOff',
    '2' => 'turnOn',
  },
  xATSTestingSimulatePowerFailTest => {
    '1' => 'cancelSimulation',
    '2' => 'fiveSecondsSimulation',
    '3' => 'tenSecondsSimulation',
    '4' => 'thirtySecondsSimulation',
    '5' => 'oneMinuteSimulation',
    '6' => 'threeMinutesSimulation',
    '7' => 'fiveMinutesSimulation',
    '8' => 'tenMinutesSimulation',
  },
  airIRRP500GroupConfigLoadAssistEnable => {
    '1' => 'disable',
    '2' => 'enable',
  },
  battManResetChargeCurrentDeviationBenchmark => {
    '1' => 'noOperation',
    '2' => 'reset',
  },
  airFMModRHBlwr1Reset => {
    '1' => 'notApplicable',
    '2' => 'noOperation',
    '3' => 'reset',
  },
  airFMSysAlarmMapSystemOffline => {
    '1' => 'notApplicable',
    '2' => 'disabled',
    '3' => 'enabled',
  },
  dm3ConfigBattHwTempAlarm => {
    '1' => 'alarmIgnore',
    '2' => 'alarmRelay1',
    '3' => 'alarmRelay2',
    '4' => 'alarmRelay3',
    '5' => 'alarmRelay4',
    '6' => 'alarmRelay5',
    '7' => 'alarmRelay6',
    '8' => 'alarmMinor',
    '9' => 'alarmMajor',
  },
  battManSystemAmbientHighTempAlarm => {
    '1' => 'normal',
    '2' => 'alarm',
  },
  upsCommStatus => {
    '1' => 'ok',
    '2' => 'noComm',
  },
  essentialServicesStatus => {
    '1' => 'unknown',
    '2' => 'stopped',
    '3' => 'running',
    '4' => 'time-sync-problems',
    '5' => 'backup-problems',
  },
  airFMGroupFailoverModBlwrCntrl1Fail => {
    '1' => 'notApplicable',
    '2' => 'disable',
    '3' => 'enable',
  },
  upsSCGActiveMembershipStatus => {
    '1' => 'enabledSCG',
    '2' => 'disabledSCG',
  },
  xPDUDeviceCrossTieOutputPresent => {
    '1' => 'notPresent',
    '2' => 'present',
  },
  iemConfigProbeMaxTempEnable => {
    '1' => 'disabled',
    '2' => 'enabled',
  },
  airFMStatusSystemReheatingEnabled => {
    '1' => 'enabledYes',
    '2' => 'enabledNo',
  },
  airIRmPmLouver2ManOpPosition => {
    '1' => 'closed',
    '2' => 'open',
  },
  xPDUDeviceFusesPresent => {
    '1' => 'notPresent',
    '2' => 'present',
  },
  airIRRP100UnitServiceIntervalHeaterAlarm => {
    '1' => 'enable',
    '2' => 'disable',
  },
  airFMSysAlarmMapExpMod1BlwrCntl1Fail => {
    '1' => 'notApplicable',
    '2' => 'disabled',
    '3' => 'enabled',
  },
  airFMModServIntHeaterReset => {
    '1' => 'notApplicable',
    '2' => 'noOperation',
    '3' => 'reset',
  },
  rPDU2PhaseConfigOverloadRestriction => {
    '1' => 'alwaysAllowTurnON',
    '2' => 'restrictOnNearOverload',
    '3' => 'restrictOnOverload',
    '4' => 'notSupported',
  },
  xPDUSystemBreakerPosition => {
    '1' => 'open',
    '2' => 'closed',
    '3' => 'unknown',
  },
  airIRG3RDUConfigRefrigerantLeakDetectorEnabled => {
    '1' => 'no',
    '2' => 'yes',
  },
  memSensorsStatusSysTempUnits => {
    '1' => 'celsius',
    '2' => 'fahrenheit',
  },
  xATSInputContactNormalState => {
    '1' => 'open',
    '2' => 'closed',
  },
  airFMModServIntHumReset => {
    '1' => 'notApplicable',
    '2' => 'noOperation',
    '3' => 'reset',
  },
  airFMGroupFailoverSysReturnSensorFail => {
    '1' => 'notApplicable',
    '2' => 'disable',
    '3' => 'enable',
  },
  dm3StatusConvDiagPass => {
    '1' => 'statusTrue',
    '2' => 'statusFalse',
  },
  dm3ConfigConvHwVoltAlarm => {
    '1' => 'alarmIgnore',
    '2' => 'alarmRelay1',
    '3' => 'alarmRelay2',
    '4' => 'alarmRelay3',
    '5' => 'alarmRelay4',
    '6' => 'alarmRelay5',
    '7' => 'alarmRelay6',
    '8' => 'alarmMinor',
    '9' => 'alarmMajor',
    '10' => 'alarmNofN',
  },
  xATSSwitchStatisticsReset => {
    '1' => 'yes',
    '2' => 'no',
  },
  xATSGeneratorServiceResetRecord => {
    '1' => 'yes',
    '2' => 'no',
  },
  battManString2BatteryUserLowVoltageAlarm => {
    '1' => 'normal',
    '2' => 'alarm',
  },
  upsAdvControlUpsOff => {
    '1' => 'noTurnUpsOff',
    '2' => 'turnUpsOff',
    '3' => 'turnUpsOffGracefully',
    '4' => 'turnUpsSyncGroupOff',
    '5' => 'turnUpsSyncGroupOffAfterDelay',
    '6' => 'turnUpsSyncGroupOffGracefully',
  },
  airFMSysRefrigType => {
    '1' => 'notApplicable',
    '2' => 'r22',
    '3' => 'r407C',
  },
  airPAOperatingMode => {
    '1' => 'modeOFF',
    '2' => 'modeVENTING',
    '3' => 'modeCOOLING',
  },
  rARUStatusAruCommStatus => {
    '1' => 'commsNeverDiscovered',
    '2' => 'commsEstablished',
    '3' => 'commsLost',
  },
  airIRG2GroupSetpointsActiveFlowControlBias => {
    '1' => 'positive',
    '2' => 'slightlyPositive',
    '3' => 'zero',
    '4' => 'slightlyNegative',
    '5' => 'negative',
  },
  airFMSysCoilFluidVlvType => {
    '1' => 'notApplicable',
    '2' => 'twoWay',
    '3' => 'threeWay',
  },
  dcmim2ControlRunFunctBatteryTest => {
    '1' => 'battTestOff',
    '2' => 'battTestOn',
  },
  emsOutputRelayControlOutputRelayCommand => {
    '1' => 'immediateCloseEMS',
    '2' => 'immediateOpenEMS',
  },
  isxModularDistModuleOutputAlarmLowEnable => {
    '1' => 'disabled',
    '2' => 'enabled',
  },
  atsControlClearAllAlarms => {
    '1' => 'none',
    '2' => 'clear',
  },
  emStatusProbeLowTempViolation => {
    '1' => 'noViolation',
    '2' => 'lowTempViolation',
    '3' => 'disabled',
  },
  accessPXConfigBeaconAction => {
    '1' => 'turnOff',
    '2' => 'turnOn',
    '3' => 'notInstalledReadOnly',
    '4' => 'disconnectedReadOnly',
  },
  sPDUMasterStatusVMLowLoadCondition => {
    '1' => 'lowLoadConditionTrueVM',
    '2' => 'lowLoadConditionFalseVM',
  },
  airIRRCUnitConfigInputNormalState => {
    '1' => 'open',
    '2' => 'closed',
  },
  xATSGeneratorStatusRemoteStart => {
    '1' => 'stop',
    '2' => 'run',
    '3' => 'unknown',
  },
  airFMSysHeatRejection => {
    '1' => 'notApplicable',
    '2' => 'airCooled',
    '3' => 'waterCooled',
    '4' => 'glycolCooled',
  },
  emStatusProbeMinHumidViolation => {
    '1' => 'noViolation',
    '2' => 'minHumidViolation',
    '3' => 'disabled',
  },
  airIRRP500GroupConfigRuntimeBalancingEnable => {
    '1' => 'disable',
    '2' => 'enable',
  },
  accessPXConfigFrontDoorLockControl => {
    '1' => 'unlock',
    '2' => 'lock',
    '3' => 'notInstalledReadOnly',
    '4' => 'disconnectedReadOnly',
  },
  upsAdvConfigBypassPhaseLockRequired => {
    '1' => 'unknown',
    '2' => 'disabled',
    '3' => 'enabled',
  },
  airIRRP500UnitStatusActivePowerSource => {
    '1' => 'sourceA',
    '2' => 'sourceB',
  },
  battManProbeRange => {
    '1' => 'amps1000',
    '2' => 'amps500',
    '3' => 'amps100',
    '4' => 'amps200',
    '5' => 'amps2000',
  },
  airFMSysCoolEssFunction => {
    '1' => 'notApplicable',
    '2' => 'yes',
    '3' => 'no',
  },
  airFMSysAlarmMapExpMod1LowSupplyTemp => {
    '1' => 'notApplicable',
    '2' => 'disabled',
    '3' => 'enabled',
  },
  battManString2BatteryUserHighVoltageAlarm => {
    '1' => 'normal',
    '2' => 'alarm',
  },
  airIRG2RDT2StatusCompressor => {
    '1' => 'off',
    '2' => 'on',
  },
  rPDU2SensorDiscreteStatusAlarmState => {
    '1' => 'normal',
    '2' => 'alarm',
  },
  isxModularDistSysOutputVoltageAlarmMaxEnable => {
    '1' => 'disabled',
    '2' => 'enabled',
  },
  airFMSysAlarmMapExpMod1HighSupplyTemp => {
    '1' => 'notApplicable',
    '2' => 'disabled',
    '3' => 'enabled',
  },
  airFMGroupFailoverModBlwrCntrl2Fail => {
    '1' => 'notApplicable',
    '2' => 'disable',
    '3' => 'enable',
  },
  airIRRP100GroupStatusActiveFlowControlStatus => {
    '1' => 'under',
    '2' => 'okay',
    '3' => 'over',
    '4' => 'notApplicable',
  },
  upsDiagBatteryFramePresent => {
    '0' => 'notPresent',
    '1' => 'present',
  },
  upsOutletGroupConfigLoadShedControlTimeOnBattery => {
    '1' => 'upsOutletGroupConfigDisableTimeOnBatteryLoadShed',
    '2' => 'upsOutletGroupConfigEnableTimeOnBatteryLoadShed',
  },
  upsDiagSwitchGearOutputSwitchStatus => {
    '1' => 'unknown',
    '2' => 'notInstalled',
    '3' => 'opened',
    '4' => 'closed',
  },
  airIRRP100UnitConfigIdleOnCoolFail => {
    '1' => 'enable',
    '2' => 'disable',
  },
  isxModularDistSysCurrentAlarmMinEnable => {
    '1' => 'disabled',
    '2' => 'enabled',
  },
  airFMGroupCfgShutdownSmoke => {
    '1' => 'disable',
    '2' => 'enable',
  },
  upsAsiUpsControlServerRequestShutdown => {
    '1' => 'serverShutdownOff',
    '2' => 'serverShutdownReboot',
  },
  accessPXConfigCardReaderEnableDisableAction => {
    '1' => 'disabled',
    '2' => 'enable',
  },
  battManAlarmCharger => {
    '1' => 'normal',
    '2' => 'alarm',
  },
  airIRG3RDUStatusInputState => {
    '1' => 'open',
    '2' => 'closed',
  },
  dm3ConfigRectStandbyAlarm => {
    '1' => 'alarmIgnore',
    '2' => 'alarmRelay1',
    '3' => 'alarmRelay2',
    '4' => 'alarmRelay3',
    '5' => 'alarmRelay4',
    '6' => 'alarmRelay5',
    '7' => 'alarmRelay6',
    '8' => 'alarmMinor',
    '9' => 'alarmMajor',
    '10' => 'alarmNofN',
  },
  rPDUOutletPhaseOverloadRestriction => {
    '1' => 'alwaysAllowTurnON',
    '2' => 'restrictOnNearOverload',
    '3' => 'restrictOnOverload',
  },
  isxModularDistSysCurrentAlarmLowEnable => {
    '1' => 'disabled',
    '2' => 'enabled',
  },
  airFMSysAlarmMapMainModWaterDetected => {
    '1' => 'notApplicable',
    '2' => 'disabled',
    '3' => 'enabled',
  },
  xATSGeneratorServiceCalendarIntervalThreshold => {
    '1' => 'disabled',
    '2' => 'interval1month',
    '3' => 'interval2month',
    '4' => 'interval3month',
    '5' => 'interval6month',
    '6' => 'intervalyearly',
  },
  rARUStatusAruTempOvrdStatus => {
    '1' => 'inactive',
    '2' => 'active',
  },
  airIRG3CMStatusOperatingMode => {
    '1' => 'standBy',
    '2' => 'on',
    '3' => 'idle',
  },
  switchgearBreakerPresent => {
    '1' => 'notPresent',
    '2' => 'present',
  },
  airIRRP500GroupSetpointsActiveFlowControlBias => {
    '1' => 'positive',
    '2' => 'slightlyPositive',
    '3' => 'zero',
    '4' => 'slightlyNegative',
    '5' => 'negative',
  },
  airFMGroupFailoverSysSecondarySensorFail => {
    '1' => 'notApplicable',
    '2' => 'disable',
    '3' => 'enable',
  },
  rPDUOutletStatusCommandPending => {
    '1' => 'outletStatusCommandPending',
    '2' => 'outletStatusNoCommandPending',
  },
  airIRG3GroupConfigCapacityControlType => {
    '1' => 'discrete',
    '2' => 'proportional',
  },
  rARUPowerStatusAuxiliaryAcPresent => {
    '1' => 'yes',
    '2' => 'no',
  },
  rPDUStatusOutletState => {
    '1' => 'outletLoadNormal',
    '2' => 'outletLoadLow',
    '3' => 'outletLoadNearOverload',
    '4' => 'outletLoadOverload',
  },
  upsAdvConfigAlarm => {
    '1' => 'timed',
    '2' => 'atLowBattery',
    '3' => 'never',
    '4' => 'mute',
  },
  accessPXConfigCardFormat => {
    '1' => 'hidStd26',
    '2' => 'hid37Bit',
    '3' => 'hid37BitWithFacility',
    '4' => 'hidCorp1000',
  },
  upsAdvControlFirmwareUpdate => {
    '1' => 'noFirmwareUpdate',
    '2' => 'firmwareUpdate',
    '3' => 'updateInProcess',
    '4' => 'updateSuccessful',
    '5' => 'updateFailed',
  },
  airFMSysResetUserDflts => {
    '1' => 'notApplicable',
    '2' => 'noOperation',
    '3' => 'reset',
  },
  memInputNormalState => {
    '1' => 'inputClosedHighMEM',
    '2' => 'inputOpenLowMEM',
    '3' => 'inputDisabled',
    '4' => 'inputStateNotApplicable',
  },
  switchgearBreakerStatus => {
    '1' => 'unknown',
    '2' => 'opened',
    '3' => 'closed',
  },
  iemStatusProbeStatus => {
    '1' => 'disconnected',
    '2' => 'connected',
  },
  battManConfigAutoAnnunciatorReset => {
    '1' => 'disabled',
    '2' => 'enabled',
  },
  airFMSysAlarmMapExpMod1HumReplCyl => {
    '1' => 'notApplicable',
    '2' => 'disabled',
    '3' => 'enabled',
  },
  airIRG3RDUServiceIntervalsAirFilterAlarm => {
    '1' => 'enable',
    '2' => 'disable',
  },
  airIRmPmRemoteUPS => {
    '1' => 'off',
    '2' => 'on',
  },
  airFMSysAlarmMapInput6 => {
    '1' => 'notApplicable',
    '2' => 'disabled',
    '3' => 'enabled',
  },
  airIRRCUnitStatusOutputState => {
    '1' => 'open',
    '2' => 'closed',
  },
  dm3ConfigBattLowTempAlarm => {
    '1' => 'alarmIgnore',
    '2' => 'alarmRelay1',
    '3' => 'alarmRelay2',
    '4' => 'alarmRelay3',
    '5' => 'alarmRelay4',
    '6' => 'alarmRelay5',
    '7' => 'alarmRelay6',
    '8' => 'alarmMinor',
    '9' => 'alarmMajor',
  },
  xATSTestingScheduleFrequency => {
    '1' => 'never',
    '2' => 'daily',
    '3' => 'weekly',
    '4' => 'monthly',
  },
  airFMGroupFailoverSysNoSensorsAvailable => {
    '1' => 'notApplicable',
    '2' => 'disable',
    '3' => 'enable',
  },
  emConfigProbeTempUnits => {
    '1' => 'celsius',
    '2' => 'fahrenheit',
  },
  iemStatusProbeMinTempViolation => {
    '1' => 'noViolation',
    '2' => 'minTempViolation',
    '3' => 'disabled',
  },
  upsDiagSwitchGearInputSwitchStatus => {
    '1' => 'unknown',
    '2' => 'notInstalled',
    '3' => 'opened',
    '4' => 'closed',
  },
  airIRRP100UnitConfigIdleOnLeakDetect => {
    '1' => 'yes',
    '2' => 'no',
  },
  airFMGroupSysRoleAssignment => {
    '1' => 'staticManual',
    '2' => 'dynamicAutomatic',
  },
  airFMSysCndsrFluidVlvType => {
    '1' => 'notApplicable',
    '2' => 'twoWay',
    '3' => 'threeWay',
  },
  airFMSysAlarmMapExpMod1AnyAlarm => {
    '1' => 'notApplicable',
    '2' => 'disabled',
    '3' => 'enabled',
  },
  airFMSysAlarmMapOutput11 => {
    '1' => 'notApplicable',
    '2' => 'disabled',
    '3' => 'enabled',
  },
  battManStringChargerLowVoltageAlarm => {
    '1' => 'normal',
    '2' => 'alarm',
  },
  isxModularDistSubFeedLoadingPhaseIndex => {
    '1' => 'phase1',
    '2' => 'phase2',
    '3' => 'phase3',
  },
  xPDUDeviceLoadTieBreakerPresent => {
    '1' => 'notPresent',
    '2' => 'present',
  },
  airFMModComp2 => {
    '1' => 'notApplicable',
    '2' => 'on',
    '3' => 'off',
  },
  airIRmPmFan3Type => {
    '1' => 'direct',
    '2' => 'proportional',
  },
  xATSSource2Position => {
    '1' => 'open',
    '2' => 'closed',
    '3' => 'tripped',
    '4' => 'unknown',
  },
  rPDU2SensorDiscreteConfigNormalState => {
    '1' => 'normallyOpen',
    '2' => 'normallyClosed',
  },
  airFMGroupFailoverSysFireAlarm => {
    '1' => 'notApplicable',
    '2' => 'disable',
    '3' => 'enable',
  },
  airIRRP500UnitConfigIdleOnLeakDetect => {
    '1' => 'yes',
    '2' => 'no',
  },
  airFMSysDehumCapacity => {
    '1' => 'notApplicable',
    '2' => 'half',
    '3' => 'full',
  },
  airFMModHumidifier => {
    '1' => 'notApplicable',
    '2' => 'none',
    '3' => 'steamElectrode',
    '4' => 'liveSteam',
  },
  accessPXStatusBeaconCurrentState => {
    '1' => 'off',
    '2' => 'on',
    '3' => 'notInstalled',
    '4' => 'disconnected',
  },
  emConfigContactEnable => {
    '1' => 'disabled',
    '2' => 'enabled',
  },
  xATSSwitchSettingsSetToFactoryDefaults => {
    '1' => 'yes',
    '2' => 'no',
  },
  airFMGroupLoadShareHumRequests => {
    '1' => 'disable',
    '2' => 'enable',
  },
  dm3ConfigConv1ofNAlarm => {
    '1' => 'alarmIgnore',
    '2' => 'alarmRelay1',
    '3' => 'alarmRelay2',
    '4' => 'alarmRelay3',
    '5' => 'alarmRelay4',
    '6' => 'alarmRelay5',
    '7' => 'alarmRelay6',
    '8' => 'alarmMinor',
    '9' => 'alarmMajor',
  },
  atsOutputPhase => {
    '1' => 'phase1',
    '2' => 'phase2',
    '3' => 'phase3',
  },
  airIRmPmUnitTemperatureScale => {
    '1' => 'celsius',
    '2' => 'fahrenheit',
  },
  atsStatusPhaseSyncStatus => {
    '1' => 'inSync',
    '2' => 'outOfSync',
  },
  airIRRP100GroupConfigLoadAssistEnable => {
    '1' => 'disable',
    '2' => 'enable',
  },
  sPDUOutletConfigMSPgsOutletCtrlMode => {
    '1' => 'modeGracefulShutdown',
    '2' => 'modeAnnunciator',
  },
  airFMModRHHeaterReset => {
    '1' => 'notApplicable',
    '2' => 'noOperation',
    '3' => 'reset',
  },
  dm3StatusSysTempSanity => {
    '1' => 'saneYES',
    '2' => 'saneNO',
  },
  accessPXStatusRearDoor => {
    '1' => 'open',
    '2' => 'closed',
    '3' => 'notInstalled',
    '4' => 'disconnected',
  },
  coolingUnitConfigurationStringAccess => {
    '1' => 'readOnly',
    '2' => 'readWrite',
  },
  memInputType => {
    '1' => 'noConnection',
    '2' => 'dryContact',
    '3' => 'digital',
    '4' => 'analogmAmps',
    '5' => 'analogVolts',
  },
  sPDUOutletConfigMSPannunInitialState => {
    '1' => 'initialStateOff',
    '2' => 'initialStateOn',
  },
  AirIRSCFanSpeedPreference => {
    '1' => 'low',
    '2' => 'med-low',
    '3' => 'med',
    '4' => 'med-high',
    '5' => 'high',
  },
  emConfigProbeMinTempEnable => {
    '1' => 'disabled',
    '2' => 'enabled',
  },
  airIRG3GroupSetpointsAirFlowControl => {
    '1' => 'automatic',
    '2' => 'manual',
  },
  upsDiagSubSysXRCommunicationCardStatus => {
    '1' => 'unknown',
    '2' => 'notInstalled',
    '3' => 'offOk',
    '4' => 'onOk',
    '5' => 'offFail',
    '6' => 'onFail',
    '7' => 'lostComm',
  },
  upsAdvConfigLCDLockOut => {
    '1' => 'disable',
    '2' => 'enable',
  },
  airFMSysAlarmMapExpMod2CondPumpFail => {
    '1' => 'notApplicable',
    '2' => 'disabled',
    '3' => 'enabled',
  },
  airIRRP500GroupSetpointsFanSpeedControl => {
    '1' => 'automatic',
    '2' => 'manual',
  },
  upsOutletGroupStatusCommandPending => {
    '1' => 'upsOutletGroupCommandPending',
    '2' => 'upsOutletGroupNoCommandPending',
  },
  sPDUOutletConfigMSPmupsZone1 => {
    '1' => 'disableAlarm',
    '2' => 'enableAlarm',
  },
  airFMSysAlarmMapMainModBlwrCntl1Fail => {
    '1' => 'notApplicable',
    '2' => 'disabled',
    '3' => 'enabled',
  },
  dm3ConfigRectCurrLimitAlarm => {
    '1' => 'alarmIgnore',
    '2' => 'alarmRelay1',
    '3' => 'alarmRelay2',
    '4' => 'alarmRelay3',
    '5' => 'alarmRelay4',
    '6' => 'alarmRelay5',
    '7' => 'alarmRelay6',
    '8' => 'alarmMinor',
    '9' => 'alarmMajor',
    '10' => 'alarmNofN',
  },
  airFMSysInputStatus => {
    '1' => 'open',
    '2' => 'closed',
  },
  xPDUUPSInputVoltagePhaseIndex => {
    '1' => 'phase1',
    '2' => 'phase2',
    '3' => 'phase3',
  },
  upsDiagComBusExternalRIMStatus => {
    '1' => 'unknown',
    '2' => 'notInstalled',
    '3' => 'ok',
    '4' => 'lostComm',
    '5' => 'rxFailure',
    '6' => 'txFailure',
  },
  rPDU2SensorDiscreteConfigAbnormalSeverity => {
    '1' => 'informational',
    '2' => 'warning',
    '3' => 'critical',
  },
  upsDiagSubSysDisplayInterfaceCardStatus => {
    '1' => 'unknown',
    '2' => 'notInstalled',
    '3' => 'offOk',
    '4' => 'onOk',
    '5' => 'offFail',
    '6' => 'onFail',
    '7' => 'lostComm',
  },
  airFMGroupAutoRoleNumPrimary => {
    '1' => 'one',
    '2' => 'two',
    '3' => 'three',
    '4' => 'four',
  },
  rPDU2DeviceStatusCommandPending => {
    '1' => 'commandPending',
    '2' => 'noCommandPending',
    '3' => 'commandPendingUnknown',
  },
  airIRRP500UnitConfigHumidifyEnable => {
    '1' => 'enable',
    '2' => 'disable',
  },
  memOutputNormalState => {
    '1' => 'memOutputClosed',
    '2' => 'memOutputOpen',
  },
  airFMSysAlarmMapOutput3 => {
    '1' => 'notApplicable',
    '2' => 'disabled',
    '3' => 'enabled',
  },
  airIRmPmUnitType => {
    '1' => 'mc',
    '2' => 'dx',
    '3' => 'cw',
    '4' => 'ch',
    '5' => 'ecoCool',
    '6' => 'msc',
    '7' => 'ge1',
    '8' => 'ge2',
    '9' => 'dualFluid',
    '10' => 'cw2',
    '256' => 'unknown',
  },
  dcmim2StatusLVDState => {
    '1' => 'statusClosed',
    '2' => 'statusOpened',
  },
  battManInputContactAlarmState => {
    '1' => 'normal',
    '2' => 'alarm',
  },
  rPDU2DeviceStatusPowerSupply2Status => {
    '1' => 'normal',
    '2' => 'alarm',
    '3' => 'notInstalled',
  },
  airIRRP100GroupSetpointsFanSpeedPreference => {
    '1' => 'low',
    '2' => 'med-low',
    '3' => 'med',
    '4' => 'med-high',
    '5' => 'high',
  },
  upsAdvControlSimulatePowerFail => {
    '1' => 'noSimulatePowerFailure',
    '2' => 'simulatePowerFailure',
  },
  rPDU2SensorTempHumidityConfigHumidityAlarmEnable => {
    '1' => 'disabled',
    '2' => 'enabled',
  },
  battManSystemPilotBatteryHighTempAlarm => {
    '1' => 'normal',
    '2' => 'alarm',
  },
  airIRmPmPWWHeatingType => {
    '1' => 'direct',
    '2' => 'undefined',
  },
  emsProbeStatusProbeCommStatus => {
    '1' => 'commsNeverDiscovered',
    '2' => 'commsEstablished',
    '3' => 'commsLost',
  },
  airIRSCGroupSetpointsActiveFlowControlBias => {
    '1' => 'positive',
    '2' => 'slightlyPositive',
    '3' => 'zero',
    '4' => 'slightlyNegative',
    '5' => 'negative',
  },
  dm3ConfigFusesAlarm => {
    '1' => 'alarmIgnore',
    '2' => 'alarmRelay1',
    '3' => 'alarmRelay2',
    '4' => 'alarmRelay3',
    '5' => 'alarmRelay4',
    '6' => 'alarmRelay5',
    '7' => 'alarmRelay6',
    '8' => 'alarmMinor',
    '9' => 'alarmMajor',
  },
  airIRG3CMServiceIntervalsAirFilterAlarm => {
    '1' => 'disable',
    '2' => 'enable',
  },
  sPDUMasterControlVMCommand => {
    '1' => 'noCommandAllVM',
    '2' => 'immediateAllOnVM',
    '3' => 'immediateAllOffVM',
    '4' => 'immediateAllRebootVM',
    '5' => 'delayedAllOnVM',
    '6' => 'delayedAllOffVM',
    '7' => 'sequencedAllRebootVM',
    '8' => 'delayedAllRebootVM',
    '9' => 'delayedSequenceAllRebootVM',
    '10' => 'cancelAllPendingCommandsVM',
    '11' => 'audioAlarmMute',
  },
  airFMGroupCfgSetpointShareSetting => {
    '1' => 'disable',
    '2' => 'enable',
  },
  isxModularDistSysOutputVoltageMonitoring => {
    '1' => 'notPresent',
    '2' => 'present',
  },
  airFMGroupFailoverModCoolFail => {
    '1' => 'notApplicable',
    '2' => 'disable',
    '3' => 'enable',
  },
  dm3StatusConvCfg => {
    '1' => 'statusTrue',
    '2' => 'statusFalse',
  },
  memInputsCommStatus => {
    '1' => 'notInstalled',
    '2' => 'commsOK',
    '3' => 'commsLost',
  },
  xPDUMainInputVoltagePhaseIndex => {
    '1' => 'phase1',
    '2' => 'phase2',
    '3' => 'phase3',
  },
  upsParallelSysRedundancy => {
    '1' => 'nplus0',
    '2' => 'nplus1',
    '3' => 'nplus2',
    '4' => 'nplus3',
    '5' => 'nplus4',
    '6' => 'nplus5',
  },
  upsDiagSubSysSystemPowerSupplyStatus => {
    '1' => 'unknown',
    '2' => 'notInstalled',
    '3' => 'offOk',
    '4' => 'onOk',
    '5' => 'offFail',
    '6' => 'onFail',
    '7' => 'lostComm',
  },
  airFMSysAlarmMapMainModBlwrCntl2Fail => {
    '1' => 'notApplicable',
    '2' => 'disabled',
    '3' => 'enabled',
  },
  upsIntegratedATSSelectedSource => {
    '1' => 'noSourceSelected',
    '2' => 'unknown',
    '3' => 'sourceA',
    '4' => 'sourceB',
  },
  rARUStatusAruMasterControl => {
    '1' => 'aruOn',
    '2' => 'aruOff',
  },
  emStatusCommStatus => {
    '1' => 'noComm',
    '2' => 'comm',
    '3' => 'commLost',
  },
  airFMSysReheatState => {
    '1' => 'notApplicable',
    '2' => 'disabled',
    '3' => 'enabled',
  },
  airFMSysAlarmMapExpMod2LowAirFlow => {
    '1' => 'notApplicable',
    '2' => 'disabled',
    '3' => 'enabled',
  },
  xATSSource2Rotation => {
    '1' => 'abc',
    '2' => 'cba',
    '3' => 'unknown',
  },
  battManConfigCellsperBattery => {
    '1' => 'oneCell',
    '2' => 'twoCells',
    '4' => 'fourCells',
    '6' => 'sixCells',
  },
  upsParallelSysRedundancyStatus => {
    '1' => 'nplus0',
    '2' => 'nplus1',
    '3' => 'nplus2',
    '4' => 'nplus3',
    '5' => 'nplus4',
    '6' => 'nplus5',
  },
  rARUFanStatusFanOperatingStatus => {
    '1' => 'unknown',
    '2' => 'off',
    '3' => 'onOk',
    '4' => 'onDegraded',
    '5' => 'offFailed',
  },
  apcLocalDisplayConfigKeyClick => {
    '1' => 'keyclickDisabled',
    '2' => 'keyclickEnabled',
  },
  airFMModServIntComp1Reset => {
    '1' => 'notApplicable',
    '2' => 'noOperation',
    '3' => 'reset',
  },
  airFMModBlwr1CtrlType => {
    '1' => 'notApplicable',
    '2' => 'fujiVFD',
    '3' => 'ecController',
    '4' => 'danfossVFD',
  },
  airFMSysOutputStatus => {
    '1' => 'open',
    '2' => 'closed',
  },
  airFMGroupFailoverModLowSupplyTemp => {
    '1' => 'notApplicable',
    '2' => 'disable',
    '3' => 'enable',
  },
  dm3ConfigLVDHWAlarm => {
    '1' => 'alarmIgnore',
    '2' => 'alarmRelay1',
    '3' => 'alarmRelay2',
    '4' => 'alarmRelay3',
    '5' => 'alarmRelay4',
    '6' => 'alarmRelay5',
    '7' => 'alarmRelay6',
    '8' => 'alarmMinor',
    '9' => 'alarmMajor',
  },
  emsSensorStatusSensorState => {
    '1' => 'sensorFaultedEMS',
    '2' => 'sensorOKEMS',
    '3' => 'sensorNotInstalledEMS',
  },
  airFMGroupFailoverModMaintRequired => {
    '1' => 'notApplicable',
    '2' => 'disable',
    '3' => 'enable',
  },
  dm3StatusInRlyStatus => {
    '1' => 'statusOn',
    '2' => 'statusOff',
  },
  airIRmPmCoolingPriority => {
    '1' => 'ge',
    '2' => 'cw',
    '3' => 'dx',
  },
  atsStatusFrontPanel => {
    '1' => 'locked',
    '2' => 'unlocked',
  },
  airIRRCGroupSetpointsFanSpeedControl => {
    '1' => 'automatic',
    '2' => 'manual',
  },
  airIRmPmEheating2Type => {
    '1' => 'direct',
    '2' => 'pwm',
  },
  emsStatusCommStatus => {
    '1' => 'noComm',
    '2' => 'comm',
    '3' => 'commLost',
  },
  AirIRmControlState => {
    '1' => 'off',
    '2' => 'on',
  },
  upsDiagComBusInternalMIMStatus => {
    '1' => 'unknown',
    '2' => 'notInstalled',
    '3' => 'ok',
    '4' => 'lostComm',
    '5' => 'rxFailure',
    '6' => 'txFailure',
  },
  isxModularPduFanStatus => {
    '1' => 'normal',
    '2' => 'failed',
    '3' => 'noCoolingFansPresent',
    '4' => 'unknown',
  },
  airFMSysAlarmMapExpMod2CoolFail => {
    '1' => 'notApplicable',
    '2' => 'disabled',
    '3' => 'enabled',
  },
  isxModularDistModuleBreakerPhaseIndex => {
    '1' => 'phaseL1',
    '2' => 'phaseL2',
    '3' => 'phaseL3',
  },
  battManString1BatteryDryout => {
    '1' => 'normal',
    '2' => 'alarm',
  },
  xATSSystemOutputFrequencyTolerance => {
    '1' => 'freqToleranceOff',
    '2' => 'freqTolerancePointTwo',
    '3' => 'freqTolerancePointFive',
    '4' => 'freqToleranceOne',
    '5' => 'freqToleranceOnePointFive',
    '6' => 'freqToleranceTwo',
    '7' => 'freqToleranceThree',
    '8' => 'freqToleranceFour',
    '9' => 'freqToleranceFive',
    '10' => 'freqToleranceNine',
  },
  airIRSCGroupStatusActiveFlowControlStatus => {
    '1' => 'under',
    '2' => 'okay',
    '3' => 'over',
    '4' => 'notApplicable',
  },
  mcontrolRestartAgent => {
    '1' => 'restartCurrentAgent',
    '2' => 'continueCurrentAgent',
    '3' => 'loadAndExecuteNewAgent',
    '4' => 'restartWithoutAgent',
    '5' => 'resetNetworkAndRestart',
    '6' => 'resetNetworkLeaveModeAndRestart',
  },
  airIRRP100UnitConfigReheatEnable => {
    '1' => 'enable',
    '2' => 'disable',
  },
  airIRRP500UnitServiceIntervalAirFilterAlarm => {
    '1' => 'enable',
    '2' => 'disable',
  },
  battManString2BatteryChemHighVoltageAlarm => {
    '1' => 'normal',
    '2' => 'alarm',
  },
  airIRmPmEheating1Type => {
    '1' => 'direct',
    '2' => 'pwm',
  },
  xATSSwitchTimersStatus => {
    '1' => 'inactive',
    '2' => 'active',
  },
  airIRRP100UnitConfigDehumidifyEnable => {
    '1' => 'enable',
    '2' => 'disable',
  },
  airIRG3RDUStatusOperatingMode => {
    '1' => 'standby',
    '2' => 'ready',
    '3' => 'on',
    '4' => 'stop',
    '5' => 'maintenancemode',
  },
  airPABlowerSpeed => {
    '1' => 'speedLOW',
    '2' => 'speedHIGH',
  },
  isxModularDistSubFeedInfoAlarmStatus => {
    '1' => 'normal',
    '2' => 'warning',
    '3' => 'critical',
  },
  isxModularPduAlarmStatus => {
    '1' => 'normal',
    '2' => 'warning',
    '3' => 'critical',
  },
  airIRRP500GroupConfigActiveFlowControllerLampTest => {
    '1' => 'off',
    '2' => 'on',
  },
  airFMAlarmSeverity => {
    '1' => 'informational',
    '2' => 'warningMinor',
    '3' => 'criticalMajor',
  },
  airFMGroupFailoverModHumFail => {
    '1' => 'notApplicable',
    '2' => 'disable',
    '3' => 'enable',
  },
  airFMGroupLoadShareReheatRequests => {
    '1' => 'disable',
    '2' => 'enable',
  },
  dm3StatusRectFail => {
    '1' => 'statusTrue',
    '2' => 'statusFalse',
  },
  rPDU2DevicePropertiesOutletLayout => {
    '1' => 'seqPhaseToNeutral',
    '2' => 'seqPhaseToPhase',
    '3' => 'seqPhToNeu21PhToPh',
    '4' => 'seqPhToPhGrouped',
    '5' => 'seqPhToNGrouped',
    '6' => 'seqPToN1516PToPGrouped',
    '7' => 'seqPhToPh2xGrouped',
    '8' => 'seqPhToN2xGrouped',
    '9' => 'seqNotApplicable',
    '10' => 'seqPhToNPhToPhPhToN',
  },
  airFMSysAlarmMapOutput8 => {
    '1' => 'notApplicable',
    '2' => 'disabled',
    '3' => 'enabled',
  },
  airFMSysAlarmMapExpMod2HighSupplyTemp => {
    '1' => 'notApplicable',
    '2' => 'disabled',
    '3' => 'enabled',
  },
  emsStatusCheckLogLight => {
    '1' => 'lightOff',
    '2' => 'lightOn',
  },
  airIRRP100UnitConfigSecondaryPowerFeedCapability => {
    '1' => 'full',
    '2' => 'reduced',
  },
  airIRRP100UnitConfigHumidifierControl => {
    '1' => 'auto',
    '2' => 'drainOff',
  },
  battManConfigBatteryChemistry => {
    '1' => 'leadAcid',
    '2' => 'nickel-Cadmium',
  },
  airIRmPmEheating4Type => {
    '1' => 'direct',
    '2' => 'pwm',
  },
  acceptThisDevice => {
    '1' => 'yes',
    '2' => 'no',
  },
  upsPhaseInputVoltageOrientation => {
    '1' => 'unknown',
    '2' => 'singlePhase',
    '3' => 'splitPhase',
    '4' => 'threePhasePhaseToNeutral',
    '5' => 'threePhasePhaseToPhase',
  },
  airIRG2RDT2ConfigOutputSource => {
    '1' => 'anyAlarm',
    '2' => 'criticalAlarm',
  },
  airIRRP100UnitConfigUnitRoleOverride => {
    '1' => 'automatic',
    '2' => 'forcedOn',
  },
  isxModularDistSubFeedInfoBreakerPosition => {
    '1' => 'open',
    '2' => 'closed',
  },
  airIRRCGroupConfigActiveFlowControllerLampTest => {
    '1' => 'off',
    '2' => 'on',
  },
  airIRG2GroupConfigCoolPIDReset => {
    '1' => 'readBack',
    '2' => 'reset',
  },
  iemConfigContactEnable => {
    '1' => 'disabled',
    '2' => 'enabled',
  },
  AirIRSCConfigType => {
    '1' => 'racs',
    '2' => 'spot',
    '3' => 'in-row',
  },
  memOutputAction => {
    '1' => 'memActionClose',
    '2' => 'memActionOpen',
  },
  isxModularDistSysOutputVoltageAlarmHighEnable => {
    '1' => 'disabled',
    '2' => 'enabled',
  },
  dm3ConfigBattHighVoltAlarm => {
    '1' => 'alarmIgnore',
    '2' => 'alarmRelay1',
    '3' => 'alarmRelay2',
    '4' => 'alarmRelay3',
    '5' => 'alarmRelay4',
    '6' => 'alarmRelay5',
    '7' => 'alarmRelay6',
    '8' => 'alarmMinor',
    '9' => 'alarmMajor',
  },
  upsDiagSubSysDCCircuitBreakerStatus => {
    '1' => 'unknown',
    '2' => 'notInstalled',
    '3' => 'opened',
    '4' => 'closed',
  },
  rARUConfigAruMasterControl => {
    '1' => 'aruOn',
    '2' => 'aruOff',
  },
  airIRG2GroupConfigConfigurationType => {
    '1' => 'racs',
    '2' => 'spot',
    '3' => 'in-row',
    '4' => 'hacs',
    '5' => 'cacs',
  },
  airFMSysAlarmMapOutput5 => {
    '1' => 'notApplicable',
    '2' => 'disabled',
    '3' => 'enabled',
  },
  battManSystemAmbientLowTempAlarm => {
    '1' => 'normal',
    '2' => 'alarm',
  },
  airFMGroupFailoverSysHighEnvHum => {
    '1' => 'notApplicable',
    '2' => 'disable',
    '3' => 'enable',
  },
  rPDU2OutletSwitchedControlCommand => {
    '1' => 'immediateOn',
    '2' => 'immediateOff',
    '3' => 'immediateReboot',
    '4' => 'outletUnknown',
    '5' => 'delayedOn',
    '6' => 'delayedOff',
    '7' => 'delayedReboot',
    '8' => 'cancelPendingCommand',
  },
  airIRmPmUnitControlType => {
    '1' => 'room',
    '2' => 'supply',
    '3' => 'room-SupplyLimit',
    '4' => 'supply-RoomLimit',
  },
  airFMGroupLoadShareDehumRequests => {
    '1' => 'disable',
    '2' => 'enable',
  },
  isxModularDistModuleInfoAlarmStatus => {
    '1' => 'normal',
    '2' => 'warning',
    '3' => 'critical',
    '4' => 'notPresent',
    '5' => 'unknown',
  },
  airIRG2GroupSetptsFanSpeedPreference => {
    '1' => 'low',
    '2' => 'med-low',
    '3' => 'med',
    '4' => 'med-high',
    '5' => 'high',
  },
  airIRRP100UnitServiceIntervalCompressorAlarm => {
    '1' => 'enable',
    '2' => 'disable',
  },
  isxModularDistSubFeedInfoAlarmMinEnable => {
    '1' => 'disabled',
    '2' => 'enabled',
  },
  upsDiagIMStatus => {
    '1' => 'unknown',
    '2' => 'notInstalled',
    '3' => 'offOk',
    '4' => 'onOk',
    '5' => 'offFail',
    '6' => 'onFail',
    '7' => 'lostComm',
  },
  emsSensorConfigSensorNormalState => {
    '1' => 'normallyClosedEMS',
    '2' => 'normallyOpenEMS',
  },
  battManUnitRelayStuck => {
    '1' => 'normal',
    '2' => 'alarm',
  },
  xPDUEPOMode => {
    '1' => 'armed',
    '2' => 'disarmed',
    '3' => 'unknown',
  },
  airFMGroupFailoverSysAnyMinorAlarm => {
    '1' => 'notApplicable',
    '2' => 'disable',
    '3' => 'enable',
  },
  rPDU2BankStatusLoadState => {
    '1' => 'lowLoad',
    '2' => 'normal',
    '3' => 'nearOverload',
    '4' => 'overload',
  },
  rARUFanStatusFanRunhourReset => {
    '1' => 'yes',
    '2' => 'no',
  },
  airIRSCUnitStatusLeakSensor => {
    '1' => 'no-leak',
    '2' => 'leak',
  },
  airFMSysAlarmMapOutput1 => {
    '1' => 'notApplicable',
    '2' => 'disabled',
    '3' => 'enabled',
  },
  dm3StatusConvCurrentLimit => {
    '1' => 'statusTrue',
    '2' => 'statusFalse',
  },
  airFMAlarmClearActiveSysModAlarms => {
    '1' => 'noOperation',
    '2' => 'clearAlarms',
  },
  upsAdvTestCalibrationResults => {
    '1' => 'ok',
    '2' => 'invalidCalibration',
    '3' => 'calibrationInProgress',
  },
  airPACondensatePump => {
    '1' => 'statusON',
    '2' => 'statusOFF',
  },
  battManInputContactNormalState => {
    '1' => 'open',
    '2' => 'closed',
  },
  upsOutletGroupConfigLoadShedControlAutoRestart => {
    '1' => 'upsOutletGroupConfigAutoRestart',
    '2' => 'upsOutletGroupConfigManualRestart',
  },
  rPDU2OutletSwitchedStatusState => {
    '1' => 'off',
    '2' => 'on',
  },
  dm3ConfigInRlyAlarm => {
    '1' => 'alarmIgnore',
    '2' => 'alarmRelay1',
    '3' => 'alarmRelay2',
    '4' => 'alarmRelay3',
    '5' => 'alarmRelay4',
    '6' => 'alarmRelay5',
    '7' => 'alarmRelay6',
    '8' => 'alarmMinor',
    '9' => 'alarmMajor',
  },
  rARUConfigAruRemoteSetpoint => {
    '1' => 'aruOff',
    '2' => 'aru85F-29C',
    '3' => 'aru90F-32C',
    '4' => 'aru95F-35C',
    '5' => 'aru100F-38C',
    '6' => 'aru7kW-1200cfm',
    '7' => 'aru5kW-800cfm',
    '8' => 'aru3kW-500cfm',
    '9' => 'aru2kW-300cfm',
    '10' => 'aru400cfm',
    '11' => 'aru600cfm',
    '12' => 'aru700cfm',
    '13' => 'aru900cfm',
    '14' => 'aru1000cfm',
    '15' => 'aru1400cfm',
    '16' => 'aru1600cfm',
    '17' => 'aru1800cfm',
    '18' => 'aru2000cfm',
  },
  upsBasicOutputACwiringConfiguration => {
    '1' => 'unknown',
    '2' => 'noNeutralWiredonSystem',
    '3' => 'neutralUsedforSupplyingLoad',
  },
  airIRG2GroupConfigActiveFlowControllerLampTest => {
    '1' => 'off',
    '2' => 'on',
  },
  mfiletransferStatusLastTransferResult => {
    '1' => 'lastFileTransferResultSuccessful',
    '2' => 'lastFileTransferResultNotAvailable',
    '3' => 'lastFileTransferResultFailureUnknown',
    '4' => 'lastFileTransferResultFailureServerInaccessible',
    '5' => 'lastFileTransferResultFailureServerAccessDenied',
    '6' => 'lastFileTransferResultFailureFileNotFound',
    '7' => 'lastFileTransferResultFailureFileTypeUnknown',
    '8' => 'lastFileTransferResultFailureFileCorrupted',
  },
  rPDUOutletConfigOutletPhase => {
    '1' => 'phase1',
    '2' => 'phase2',
    '3' => 'phase3',
    '4' => 'phase1-2',
    '5' => 'phase2-3',
    '6' => 'phase3-1',
  },
  airFMSysAlarmMapExpMod2HumFail => {
    '1' => 'notApplicable',
    '2' => 'disabled',
    '3' => 'enabled',
  },
  newCodeAuthentViaTFTP => {
    '1' => 'unknown',
    '2' => 'validNewAgentCodeImage',
    '3' => 'sameAgentCodeImage',
    '4' => 'invalidAgentCodeImage',
  },
  airFMSysAlarmMapExpMod2AirBlckIntOpen => {
    '1' => 'notApplicable',
    '2' => 'disabled',
    '3' => 'enabled',
  },
  airIRG3RDUStatusPowerSource => {
    '1' => 'singleFeed',
    '2' => 'dualFeed',
  },
  airIRSCUnitServiceIntervalsAirFilterAlarm => {
    '1' => 'enable',
    '2' => 'disable',
  },
  airFMSysAlarmMapMainModAnyAlarm => {
    '1' => 'notApplicable',
    '2' => 'disabled',
    '3' => 'enabled',
  },
  emsOutletStatusOutletState => {
    '1' => 'outletOnEMS',
    '2' => 'outletOffEMS',
  },
  rPDU2DeviceControlCommand => {
    '1' => 'immediateAllOn',
    '2' => 'delayedAllOn',
    '3' => 'immediateAllOff',
    '4' => 'immediateAllReboot',
    '5' => 'delayedAllReboot',
    '6' => 'noCommandAll',
    '7' => 'delayedAllOff',
    '8' => 'cancelAllPendingCommands',
  },
  airFMSysAlarmMapInput12 => {
    '1' => 'notApplicable',
    '2' => 'disabled',
    '3' => 'enabled',
  },
  upsDiagTransformerStatus => {
    '1' => 'unknown',
    '2' => 'notInstalled',
    '3' => 'ok',
    '4' => 'fail',
    '5' => 'lostComm',
    '6' => 'overtemp',
    '7' => 'opened',
    '8' => 'closed',
  },
  rPDUOutletDevCommand => {
    '1' => 'noCommandAll',
    '2' => 'immediateAllOn',
    '3' => 'immediateAllOff',
    '4' => 'immediateAllReboot',
    '5' => 'delayedAllOn',
    '6' => 'delayedAllOff',
    '7' => 'delayedAllReboot',
    '8' => 'cancelAllPendingCommands',
  },
  airIRG2GroupConfigFanSpeedControl => {
    '1' => 'automatic',
    '2' => 'manual',
  },
  upsPhaseOutputVoltageOrientation => {
    '1' => 'unknown',
    '2' => 'singlePhase',
    '3' => 'splitPhase',
    '4' => 'threePhasePhaseToNeutral',
    '5' => 'threePhasePhaseToPhase',
  },
  dm3ConfigRectFanFailAlarm => {
    '1' => 'alarmIgnore',
    '2' => 'alarmRelay1',
    '3' => 'alarmRelay2',
    '4' => 'alarmRelay3',
    '5' => 'alarmRelay4',
    '6' => 'alarmRelay5',
    '7' => 'alarmRelay6',
    '8' => 'alarmMinor',
    '9' => 'alarmMajor',
    '10' => 'alarmNofN',
  },
  rPDUOutletStatusOutletPhase => {
    '1' => 'phase1',
    '2' => 'phase2',
    '3' => 'phase3',
    '4' => 'phase1-2',
    '5' => 'phase2-3',
    '6' => 'phase3-1',
  },
  dm3StatusBattCurrentSanity => {
    '1' => 'saneYES',
    '2' => 'saneNO',
  },
  iemStatusProbeTempUnits => {
    '1' => 'celsius',
    '2' => 'fahrenheit',
  },
  xATSSwitchTimersAbort => {
    '1' => 'yes',
    '2' => 'no',
  },
  memOutletStatusCurrentState => {
    '1' => 'off',
    '2' => 'on',
  },
  airFMModCondPump => {
    '1' => 'notApplicable',
    '2' => 'notPresent',
    '3' => 'present',
  },
  dm3StatusSysConvVoltSanity => {
    '1' => 'saneYES',
    '2' => 'saneNO',
  },
  memInputsStatusAlarmStatus => {
    '1' => 'memNormal',
    '2' => 'memWarning',
    '3' => 'memCritical',
  },
  airIRSCUnitStatusOperateMode => {
    '1' => 'standby',
    '2' => 'on',
    '3' => 'idle',
  },
  upsBasicBatteryStatus => {
    '1' => 'unknown',
    '2' => 'batteryNormal',
    '3' => 'batteryLow',
    '4' => 'batteryInFaultCondition',
  },
  memOutletNormalState => {
    '1' => 'off',
    '2' => 'on',
  },
  iemConfigProbeMinHumidEnable => {
    '1' => 'disabled',
    '2' => 'enabled',
  },
  airFMGroupFailoverModCondensatePumpFail => {
    '1' => 'notApplicable',
    '2' => 'disable',
    '3' => 'enable',
  },
  sPDUOutletConfigMSPmupsP2LowHum => {
    '1' => 'disableAlarm',
    '2' => 'enableAlarm',
  },
  sPDUOutletConfigMSPmupsP1HiTemp => {
    '1' => 'disableAlarm',
    '2' => 'enableAlarm',
  },
  airFMGroupCfgSetpointShareStatus => {
    '1' => 'off',
    '2' => 'on',
  },
  airIRRP500UnitConfigPowerSourceConfig => {
    '1' => 'single',
    '2' => 'dual',
  },
  upsOutletGroupStatusGroupState => {
    '1' => 'upsOutletGroupStatusOn',
    '2' => 'upsOutletGroupStatusOff',
    '3' => 'upsOutletGroupStatusUnknown',
  },
  acceptThisReceiver => {
    '1' => 'yes',
    '2' => 'no',
  },
  airFMSysHumState => {
    '1' => 'notApplicable',
    '2' => 'disabled',
    '3' => 'enabled',
  },
  sPDUOutletStatusMSPCommandPending => {
    '1' => 'outletStatusMSPCommandPending',
    '2' => 'outletStatusMSPNoCommandPending',
  },
  airIRRP500UnitServiceIntervalHumidifierAlarm => {
    '1' => 'enable',
    '2' => 'disable',
  },
  airFMSysAlarmMapInput3 => {
    '1' => 'notApplicable',
    '2' => 'disabled',
    '3' => 'enabled',
  },
  rPDU2SensorTempHumidityStatusHumidityStatus => {
    '1' => 'notPresent',
    '2' => 'belowMin',
    '3' => 'belowLow',
    '4' => 'normal',
    '5' => 'aboveHigh',
    '6' => 'aboveMax',
  },
  upsDiagSwitchGearStatus => {
    '1' => 'unknown',
    '2' => 'notInstalled',
    '3' => 'ok',
    '4' => 'fail',
    '5' => 'lostComm',
    '6' => 'overtemp',
  },
  upsAdvTotalDCCurrentPolarity => {
    '0' => 'positive',
    '1' => 'negative',
  },
  dm3StatusRectDiagPass => {
    '1' => 'statusTrue',
    '2' => 'statusFalse',
  },
  rPDU2OutletSwitchedStatusCommandPending => {
    '1' => 'commandPending',
    '2' => 'noCommandPending',
    '3' => 'commandPendingUnknown',
  },
  isxModularDistSubFeedInfoAlarmGeneration => {
    '1' => 'disabled',
    '2' => 'enabled',
  },
  airFMModRHComp1Reset => {
    '1' => 'notApplicable',
    '2' => 'noOperation',
    '3' => 'reset',
  },
  sPDUOutletConfigMSPmupsP1HiHum => {
    '1' => 'disableAlarm',
    '2' => 'enableAlarm',
  },
  isxModularDistSubFeedInfoAlarmHighEnable => {
    '1' => 'disabled',
    '2' => 'enabled',
  },
  emStatusProbeMinTempViolation => {
    '1' => 'noViolation',
    '2' => 'minTempViolation',
    '3' => 'disabled',
  },
  airPASystemPower => {
    '1' => 'powerON',
    '2' => 'powerOFF',
  },
  upsAdvConfigSimpleSignalShutdowns => {
    '1' => 'unknown',
    '2' => 'disabled',
    '3' => 'enabled',
  },
  airIRG2RDT2RunHoursFanPSPosition => {
    '1' => 'upper',
    '2' => 'lower',
    '3' => 'left',
    '4' => 'right',
  },
  upsAdvTestDiagnosticSchedule => {
    '1' => 'unknown',
    '2' => 'biweekly',
    '3' => 'weekly',
    '4' => 'atTurnOn',
    '5' => 'never',
    '6' => 'fourWeeks',
    '7' => 'twelveWeeks',
    '8' => 'biweeklySinceLastTest',
    '9' => 'weeklySinceLastTest',
    '10' => 'eightWeeks',
    '11' => 'twentysixWeeks',
    '12' => 'fiftytwoWeeks',
  },
  iemStatusProbeMaxHumidViolation => {
    '1' => 'noViolation',
    '2' => 'maxHumidViolation',
    '3' => 'disabled',
  },
  upsAdvConfigGreenMode => {
    '1' => 'disable',
    '2' => 'enable',
  },
  battManString1BatteryOpenFuseOrConnection => {
    '1' => 'normal',
    '2' => 'alarm',
  },
  airFMModWaterDetector => {
    '1' => 'notApplicable',
    '2' => 'notPresent',
    '3' => 'present',
  },
  airIRSCUnitConfigIdleOnLeakDetect => {
    '1' => 'yes',
    '2' => 'no',
  },
  airFMSysRemoteSensorData => {
    '1' => 'notApplicable',
    '2' => 'average',
    '3' => 'maximum',
  },
  subfeedBreakerPresent => {
    '1' => 'notPresent',
    '2' => 'present',
  },
  airIRRP500UnitConfigUnitRoleOverride => {
    '1' => 'automatic',
    '2' => 'forcedOn',
  },
  databaseStatus => {
    '1' => 'unknown',
    '2' => 'stopped',
    '3' => 'running',
    '4' => 'detached',
    '5' => 'catching-up',
    '6' => 'attaching',
    '7' => 'running-master',
    '8' => 'running-primary-slave',
    '9' => 'running-slave',
    '10' => 'running-alone',
  },
  airFMModBlwr1ElOvMode => {
    '1' => 'notApplicable',
    '2' => 'inactive',
    '3' => 'active',
  },
  emsStatusSysTempUnits => {
    '1' => 'celsius',
    '2' => 'fahrenheit',
  },
  atsControlResetATS => {
    '1' => 'none',
    '2' => 'reset',
  },
  airFMSysAlarmMapInput13 => {
    '1' => 'notApplicable',
    '2' => 'disabled',
    '3' => 'enabled',
  },
  airFMSysAlarmMapOutput15 => {
    '1' => 'notApplicable',
    '2' => 'disabled',
    '3' => 'enabled',
  },
  xATSGeneratorSettingsMetricUnit => {
    '1' => 'disabled',
    '2' => 'enabled',
  },
  battManUnitCommLoss => {
    '1' => 'normal',
    '2' => 'alarm',
  },
  upsDiagPMStatus => {
    '1' => 'unknown',
    '2' => 'notInstalled',
    '3' => 'offOk',
    '4' => 'onOk',
    '5' => 'offFail',
    '6' => 'onFail',
    '7' => 'lostComm',
  },
  battManString1BatteryCellShorted => {
    '1' => 'normal',
    '2' => 'alarm',
  },
  xPDUDeviceEarthGroundMonitorPresent => {
    '1' => 'notPresent',
    '2' => 'present',
  },
  xPDUSystemOutputFrequencyTolerance => {
    '1' => 'freqToleranceOff',
    '2' => 'freqTolerancePointTwo',
    '3' => 'freqTolerancePointFive',
    '4' => 'freqToleranceOne',
    '5' => 'freqToleranceOnePointFive',
    '6' => 'freqToleranceTwo',
    '7' => 'freqToleranceThree',
    '8' => 'freqToleranceFour',
    '9' => 'freqToleranceFive',
    '10' => 'freqToleranceNine',
  },
  atsStatusRedundancyState => {
    '1' => 'atsRedundancyLost',
    '2' => 'atsFullyRedundant',
  },
  airFMGroupFailoverSysLowEnvTemp => {
    '1' => 'notApplicable',
    '2' => 'disable',
    '3' => 'enable',
  },
  rPDU2OutletMeteredStatusState => {
    '1' => 'lowLoad',
    '2' => 'normal',
    '3' => 'nearOverload',
    '4' => 'overload',
  },
  battManString2BatteryChemLowVoltageAlarm => {
    '1' => 'normal',
    '2' => 'alarm',
  },
  airFMGroupFailoverModHighSupplyTemp => {
    '1' => 'notApplicable',
    '2' => 'disable',
    '3' => 'enable',
  },
  apcLocalDisplayIdentDisplayType => {
    '1' => 'noDisplayFound',
    '2' => 'powerviewRM',
    '3' => 'powerviewWW',
  },
  airFMSysNumModules => {
    '1' => 'notApplicable',
    '2' => 'one',
    '3' => 'two',
    '4' => 'three',
  },
  airFMSysAlarmMapExpMod2BlwrCntl2Fail => {
    '1' => 'notApplicable',
    '2' => 'disabled',
    '3' => 'enabled',
  },
  dm3ConfigRectConfigAlarm => {
    '1' => 'alarmIgnore',
    '2' => 'alarmRelay1',
    '3' => 'alarmRelay2',
    '4' => 'alarmRelay3',
    '5' => 'alarmRelay4',
    '6' => 'alarmRelay5',
    '7' => 'alarmRelay6',
    '8' => 'alarmMinor',
    '9' => 'alarmMajor',
  },
  battManStringCurrentProbeDisconnected => {
    '1' => 'normal',
    '2' => 'alarm',
  },
  airIRmPmCmp1ManOperationActive => {
    '1' => 'automatic',
    '2' => 'manual',
  },
  isxModularDistSysPowerKwhReset => {
    '1' => 'no',
    '2' => 'yes',
  },
  airIRG3CMConfigPowerSource => {
    '1' => 'singleFeed',
    '2' => 'dualFeed',
  },
  airFMSysAlarmMapOutput9 => {
    '1' => 'notApplicable',
    '2' => 'disabled',
    '3' => 'enabled',
  },
  iemConfigProbeHighTempEnable => {
    '1' => 'disabled',
    '2' => 'enabled',
  },
  airIRRCUnitConfigCoolCapacity => {
    '1' => 'automatic',
    '2' => 'maximum',
  },
  battManString2BatteryOpenFuseOrConnection => {
    '1' => 'normal',
    '2' => 'alarm',
  },
  airFMSysAlarmMapOutput2 => {
    '1' => 'notApplicable',
    '2' => 'disabled',
    '3' => 'enabled',
  },
  dm3ConfigRectImbalanceAlarm => {
    '1' => 'alarmIgnore',
    '2' => 'alarmRelay1',
    '3' => 'alarmRelay2',
    '4' => 'alarmRelay3',
    '5' => 'alarmRelay4',
    '6' => 'alarmRelay5',
    '7' => 'alarmRelay6',
    '8' => 'alarmMinor',
    '9' => 'alarmMajor',
  },
  emConfigProbeLowHumidEnable => {
    '1' => 'disabled',
    '2' => 'enabled',
  },
  airIRRP500GroupSetpointsFanSpeedPreference => {
    '1' => 'low',
    '2' => 'med-low',
    '3' => 'med',
    '4' => 'med-high',
    '5' => 'high',
  },
  battManString1BatteryChemHighVoltageAlarm => {
    '1' => 'normal',
    '2' => 'alarm',
  },
  airIRRP500UnitServiceIntervalCondensatePumpAlarm => {
    '1' => 'enable',
    '2' => 'disable',
  },
  airFMSysPrimaryControlSensor => {
    '1' => 'notApplicable',
    '2' => 'return',
    '3' => 'remote',
  },
  dm3ConfigCompMethod => {
    '1' => 'tempcompOn',
    '2' => 'tempcompOff',
  },
  emsOutletStatusOutletNormalState => {
    '1' => 'normallyOnEMS',
    '2' => 'normallyOffEMS',
  },
  xPDUTransformTempStatus => {
    '1' => 'normal',
    '2' => 'overtemp',
    '3' => 'noTransformerPresent',
    '4' => 'unknown',
  },
  airFMSysActualTempCtrlMethod => {
    '1' => 'notApplicable',
    '2' => 'avgReturn',
    '3' => 'avgRemote',
    '4' => 'maxRemote',
  },
  airFMSysAlarmMapOutput6 => {
    '1' => 'notApplicable',
    '2' => 'disabled',
    '3' => 'enabled',
  },
  airFMSysReheatPIDMethod => {
    '1' => 'notApplicable',
    '2' => 'p',
    '3' => 'pi',
    '4' => 'pid',
  },
  airIRmPmMaintenance => {
    '1' => 'notNecessary',
    '2' => 'necessary',
  },
  rPDU2DeviceConfigDeviceEnergyReset => {
    '1' => 'noOperation',
    '2' => 'reset',
    '3' => 'notSupported',
  },
  airIRRP500UnitConfigIdleOnCoolFail => {
    '1' => 'enable',
    '2' => 'disable',
  },
  upsDiagSubSysChargerStatus => {
    '1' => 'unknown',
    '2' => 'notInstalled',
    '3' => 'offOk',
    '4' => 'onOk',
    '5' => 'offFail',
    '6' => 'onFail',
    '7' => 'lostComm',
  },
  airIRRCUnitConfigIdleOnCoolFail => {
    '1' => 'yes',
    '2' => 'no',
  },
  uioInputContactStatusAlarmStatus => {
    '1' => 'uioNormal',
    '2' => 'uioWarning',
    '3' => 'uioCritical',
    '4' => 'inputStatusNotApplicable',
  },
  airFMSysCoilFluidVlvAct => {
    '1' => 'notApplicable',
    '2' => 'none',
    '3' => 'springAnalog',
    '4' => 'floatingControl',
  },
  rPDUStatusPhaseState => {
    '1' => 'phaseLoadNormal',
    '2' => 'phaseLoadLow',
    '3' => 'phaseLoadNearOverload',
    '4' => 'phaseLoadOverload',
  },
  airFMSysOutputNormalState => {
    '1' => 'open',
    '2' => 'closed',
  },
  dm3ConfigConvHighVoltAlarm => {
    '1' => 'alarmIgnore',
    '2' => 'alarmRelay1',
    '3' => 'alarmRelay2',
    '4' => 'alarmRelay3',
    '5' => 'alarmRelay4',
    '6' => 'alarmRelay5',
    '7' => 'alarmRelay6',
    '8' => 'alarmMinor',
    '9' => 'alarmMajor',
  },
  dm3ConfigBattHwCurrentAlarm => {
    '1' => 'alarmIgnore',
    '2' => 'alarmRelay1',
    '3' => 'alarmRelay2',
    '4' => 'alarmRelay3',
    '5' => 'alarmRelay4',
    '6' => 'alarmRelay5',
    '7' => 'alarmRelay6',
    '8' => 'alarmMinor',
    '9' => 'alarmMajor',
  },
  rPDU2BankConfigOverloadRestriction => {
    '1' => 'alwaysAllowTurnON',
    '2' => 'restrictOnNearOverload',
    '3' => 'restrictOnOverload',
    '4' => 'notSupported',
  },
  xPDUInputContactNormalState => {
    '1' => 'open',
    '2' => 'closed',
  },
  airFMSysResetFldSrvcDflts => {
    '1' => 'notApplicable',
    '2' => 'noOperation',
    '3' => 'reset',
  },
  airFMSysAlarmMapOutput16 => {
    '1' => 'notApplicable',
    '2' => 'disabled',
    '3' => 'enabled',
  },
  upsSCGACOutputStatus => {
    '1' => 'acOutOn',
    '2' => 'acOutOff',
  },
  upsDiagComBusMIMtoRIMStatus => {
    '1' => 'unknown',
    '2' => 'notInstalled',
    '3' => 'ok',
    '4' => 'lostComm',
    '5' => 'rxFailure',
    '6' => 'txFailure',
  },
  memSensorsAlarmStatus => {
    '1' => 'memNormal',
    '2' => 'memWarning',
    '3' => 'memCritical',
  },
  dm3ConfigSysHighTempAlarm => {
    '1' => 'alarmIgnore',
    '2' => 'alarmRelay1',
    '3' => 'alarmRelay2',
    '4' => 'alarmRelay3',
    '5' => 'alarmRelay4',
    '6' => 'alarmRelay5',
    '7' => 'alarmRelay6',
    '8' => 'alarmMinor',
    '9' => 'alarmMajor',
  },
  rPDUIdentDeviceOutletLayout => {
    '1' => 'seqPhaseToNeutral',
    '2' => 'seqPhaseToPhase',
    '3' => 'seqPhToNeu21PhToPh',
    '4' => 'seqPhToPhGrouped',
    '5' => 'seqPhToNGrouped',
    '6' => 'seqPToN1516PToPGrouped',
    '7' => 'seqPhToPh2xGrouped',
    '8' => 'seqPhToN2xGrouped',
    '9' => 'seqNotApplicable',
  },
  isxModularDistSysCurrentAlarmMaxEnable => {
    '1' => 'disabled',
    '2' => 'enabled',
  },
  isxModularDistModuleOutputAlarmHighEnable => {
    '1' => 'disabled',
    '2' => 'enabled',
  },
  airFMSysAirFltr => {
    '1' => 'notApplicable',
    '2' => 'standard',
    '3' => 'highEfficiency',
  },
  airIRRP500UnitConfigOutputNormalState => {
    '1' => 'open',
    '2' => 'closed',
  },
  airIRG3CMConfigStopOnCoolFail => {
    '1' => 'no',
    '2' => 'yes',
  },
  emStatusProbeLowHumidViolation => {
    '1' => 'noViolation',
    '2' => 'lowHumidViolation',
    '3' => 'disabled',
  },
  atsInputVoltageOrientation => {
    '1' => 'unknown',
    '2' => 'singlePhase',
    '3' => 'splitPhase',
    '4' => 'threePhasePhaseToNeutral',
    '5' => 'threePhasePhaseToPhase',
  },
  sPDUOutletStatusVMCommandPending => {
    '1' => 'outletStatusVMCommandPending',
    '2' => 'outletStatusVMNoCommandPending',
  },
  airFMSysNumber => {
    '1' => 'notApplicable',
    '2' => 'one',
    '3' => 'two',
    '4' => 'three',
    '5' => 'four',
  },
  airIRRP100UnitConfigPowerSourceConfig => {
    '1' => 'single',
    '2' => 'dual',
  },
  sPDUMasterConfigMSPManualButton => {
    '1' => 'manualButtonDisabled',
    '2' => 'manualButtonEnabled',
  },
  upsHighPrecTotalDCCurrentPolarity => {
    '0' => 'positive',
    '1' => 'negative',
  },
  airFMModRHBlwr2Reset => {
    '1' => 'notApplicable',
    '2' => 'noOperation',
    '3' => 'reset',
  },
  airIRRP500UnitServiceIntervalHeaterAlarm => {
    '1' => 'enable',
    '2' => 'disable',
  },
  battManString2BatteryThermalRunaway => {
    '1' => 'normal',
    '2' => 'alarm',
  },
  memInputAlarmGeneration => {
    '1' => 'disabled',
    '2' => 'enabled',
  },
  upsAdvConfigSensitivity => {
    '1' => 'auto',
    '2' => 'low',
    '3' => 'medium',
    '4' => 'high',
  },
  airFMSysAlarmMapSysSecSensFail => {
    '1' => 'notApplicable',
    '2' => 'disabled',
    '3' => 'enabled',
  },
  airIRG3RDUStatusRefrigerantLeakDetector => {
    '1' => 'suspended',
    '2' => 'calibrating',
    '3' => 'operating',
    '4' => 'disabled',
  },
  airFMGroupFailoverSysSmokeAlarm => {
    '1' => 'notApplicable',
    '2' => 'disable',
    '3' => 'enable',
  },
  battManString1BatteryUserLowVoltageAlarm => {
    '1' => 'normal',
    '2' => 'alarm',
  },
  airFMSysResetRunHours => {
    '1' => 'notApplicable',
    '2' => 'noOperation',
    '3' => 'reset',
  },
  sPDUMasterStatusVMCommandPending => {
    '1' => 'commandPendingMasterTrueVM',
    '2' => 'commandPendingMasterFalseVM',
  },
  upsOutletGroupConfigLoadShedControlInOverload => {
    '1' => 'upsOutletGroupConfigDisableInOverloadLoadShed',
    '2' => 'upsOutletGroupConfigEnableInOverloadLoadShed',
  },
  upsDiagMCCBBoxStatus => {
    '1' => 'unknown',
    '2' => 'notInstalled',
    '3' => 'opened',
    '4' => 'closed',
  },
  xATSGeneratorAdvStatusOilLevel => {
    '1' => 'ok',
    '2' => 'low',
    '3' => 'unknown',
  },
  upsDiagSubSysExternalPowerFrameBoardStatus => {
    '1' => 'unknown',
    '2' => 'notInstalled',
    '3' => 'offOk',
    '4' => 'onOk',
    '5' => 'offFail',
    '6' => 'onFail',
    '7' => 'lostComm',
  },
  airIRRCUnitConfigPowerSource => {
    '1' => 'sourceA',
    '2' => 'sourceB',
    '3' => 'sourceAandB',
  },
  airFMAlarmClearActiveGroupAlarms => {
    '1' => 'noOperation',
    '2' => 'clearAlarms',
  },
  rPDU2DeviceConfigOutletsEnergyReset => {
    '1' => 'noOperation',
    '2' => 'reset',
    '3' => 'notSupported',
  },
  airIRRP500GroupStatusActiveFlowControlStatus => {
    '1' => 'under',
    '2' => 'okay',
    '3' => 'over',
    '4' => 'notApplicable',
  },
  airIRRP100UnitServiceIntervalHumidifierAlarm => {
    '1' => 'enable',
    '2' => 'disable',
  },
  rARUStatusAruTempOvrdEnableDisable => {
    '1' => 'disabled',
    '2' => 'enabled',
  },
  airIRRP100UnitConfigCoolCapacity => {
    '1' => 'automatic',
    '2' => 'maximum',
  },
  airIRmPmDayNightMode => {
    '1' => 'day',
    '2' => 'night',
  },
  airFMSysAlarmMapMainModHumFail => {
    '1' => 'notApplicable',
    '2' => 'disabled',
    '3' => 'enabled',
  },
  upsAdvConfigBatterySelection => {
    '1' => 'vrla',
    '2' => 'ventedcell',
  },
  airIRRCUnitConfigOutputNormalState => {
    '1' => 'open',
    '2' => 'closed',
  },
  airFMSysInputNormalState => {
    '1' => 'open',
    '2' => 'closed',
  },
  emConfigProbeHighTempEnable => {
    '1' => 'disabled',
    '2' => 'enabled',
  },
  dcmim2StatusBattFunctTestResult => {
    '1' => 'functTestNotPerformed',
    '2' => 'functTestInProcess',
    '3' => 'functTestInterrupted',
    '4' => 'functTestPass',
    '5' => 'functTestFail',
  },
  xATSGeneratorFuelSystemLowRunTimeThreshold => {
    '1' => 'disabled',
    '2' => 'oneHour',
    '3' => 'twoHours',
    '4' => 'threeHours',
    '5' => 'fourHours',
    '6' => 'fiveHours',
    '7' => 'sixHours',
    '8' => 'twelveHours',
    '9' => 'oneDay',
    '10' => 'twoDays',
    '11' => 'threeDays',
    '12' => 'fourDays',
    '13' => 'fiveDays',
    '14' => 'sixDays',
    '15' => 'sevenDays',
  },
  xPDUDeviceTransformerPresent => {
    '1' => 'notPresent',
    '2' => 'present',
  },
  battManString2BatteryHighOhmicValue => {
    '1' => 'normal',
    '2' => 'alarm',
  },
  xPDUUPSInputVoltageLtoNPresent => {
    '1' => 'notPresent',
    '2' => 'present',
    '3' => 'unknown',
  },
  airIRG3RDUConfigOnReadyStandby => {
    '1' => 'standby',
    '2' => 'ready',
    '3' => 'on',
  },
  airFMGroupFailoverModAirBlockInterlockOpen => {
    '1' => 'notApplicable',
    '2' => 'disable',
    '3' => 'enable',
  },
  upsBasicSystemStatus => {
    '1' => 'unknown',
    '2' => 'onLine',
    '3' => 'onBattery',
    '4' => 'onSmartBoost',
    '5' => 'timedSleeping',
    '6' => 'softwareBypass',
    '7' => 'off',
    '8' => 'rebooting',
    '9' => 'switchedBypass',
    '10' => 'hardwareFailureBypass',
    '11' => 'sleepingUntilPowerReturn',
    '12' => 'onSmartTrim',
    '13' => 'ecoMode',
    '14' => 'inverter',
    '15' => 'eConversion',
    '16' => 'staticBypassStandby',
  },
  dm3ConfigRectLowVoltAlarm => {
    '1' => 'alarmIgnore',
    '2' => 'alarmRelay1',
    '3' => 'alarmRelay2',
    '4' => 'alarmRelay3',
    '5' => 'alarmRelay4',
    '6' => 'alarmRelay5',
    '7' => 'alarmRelay6',
    '8' => 'alarmMinor',
    '9' => 'alarmMajor',
  },
  airIRRP100UnitConfigHumidifyEnable => {
    '1' => 'enable',
    '2' => 'disable',
  },
  airIRG2RDT2StatusOperateMode => {
    '1' => 'standby',
    '2' => 'on',
    '3' => 'idle',
    '4' => 'reserved',
    '5' => 'service',
  },
  AirIRSCCapacityControlType => {
    '1' => 'discrete',
    '2' => 'proportional',
  },
  airFMSysDehumEssFunction => {
    '1' => 'notApplicable',
    '2' => 'yes',
    '3' => 'no',
  },
  dm3StatusBattTempSanity => {
    '1' => 'saneYES',
    '2' => 'saneNO',
  },
  upsIntegratedATSPreferredSource => {
    '1' => 'upsIntegratedATSNoSourcePreference',
    '2' => 'upsIntegratedATSPreferSourceA',
    '3' => 'upsIntegratedATSPreferSourceB',
  },
  airFMGroupFailoverModHumReplaceCylinder => {
    '1' => 'notApplicable',
    '2' => 'disable',
    '3' => 'enable',
  },
  AirIRmActivityState => {
    '1' => 'inactive',
    '2' => 'active',
  },
  airFMSysAlarmMapMainModLowSupplyTemp => {
    '1' => 'notApplicable',
    '2' => 'disabled',
    '3' => 'enabled',
  },
  xPDUDeviceBypassInputPresent => {
    '1' => 'notPresent',
    '2' => 'present',
  },
  atsOutputBank => {
    '1' => 'total',
    '2' => 'bank1',
    '3' => 'bank2',
  },
  airFMGroupCfgNumSystems => {
    '1' => 'one',
    '2' => 'two',
    '3' => 'three',
    '4' => 'four',
  },
  rPDUPowerSupply2Status => {
    '1' => 'powerSupplyTwoOk',
    '2' => 'powerSupplyTwoFailed',
    '3' => 'powerSupplyTwoNotPresent',
  },
  airIRRCUnitServiceIntervalsAirFilterAlarm => {
    '1' => 'enable',
    '2' => 'disable',
  },
  airIRRP100UnitConfigOutputNormalState => {
    '1' => 'open',
    '2' => 'closed',
  },
  isxModularDistSysCurrentMonitoring => {
    '1' => 'notPresent',
    '2' => 'present',
  },
  xATSSource2Quality => {
    '1' => 'sourceGood',
    '2' => 'lowVoltage',
    '3' => 'highVoltage',
    '4' => 'phaseImbalance',
    '5' => 'freqOutOfRange',
    '6' => 'badRotation',
    '7' => 'unknown',
  },
  iemStatusProbeHighHumidViolation => {
    '1' => 'noViolation',
    '2' => 'highHumidViolation',
    '3' => 'disabled',
  },
  airIRG3RDUConfigOutputSource => {
    '1' => 'anyalarm',
    '2' => 'onlycriticalalarms',
  },
  dm3StatusRectCurrentLimit => {
    '1' => 'statusTrue',
    '2' => 'statusFalse',
  },
  dm3ConfigConvStandbyAlarm => {
    '1' => 'alarmIgnore',
    '2' => 'alarmRelay1',
    '3' => 'alarmRelay2',
    '4' => 'alarmRelay3',
    '5' => 'alarmRelay4',
    '6' => 'alarmRelay5',
    '7' => 'alarmRelay6',
    '8' => 'alarmMinor',
    '9' => 'alarmMajor',
    '10' => 'alarmNofN',
  },
  Rpdu2OutletPhaseLayoutType => {
    '1' => 'seqPhase1ToNeutral',
    '2' => 'seqPhase2ToNeutral',
    '3' => 'seqPhase3ToNeutral',
    '4' => 'seqPhase1ToPhase2',
    '5' => 'seqPhase2ToPhase3',
    '6' => 'seqPhase3ToPhase1',
  },
  atsStatusOverCurrentState => {
    '1' => 'atsOverCurrent',
    '2' => 'atsCurrentOK',
  },
  airFMModServIntComp2Reset => {
    '1' => 'notApplicable',
    '2' => 'noOperation',
    '3' => 'reset',
  },
  memOutputStatusCurrentState => {
    '1' => 'memOutputClosed',
    '2' => 'memOutputOpen',
  },
  airIRRP500UnitConfigInputNormalState => {
    '1' => 'open',
    '2' => 'closed',
  },
  dm3ConfigSysRemoteAccess => {
    '1' => 'accessEnabled',
    '2' => 'accessDisabled',
  },
  xATSOutputRelayCurrentState => {
    '1' => 'open',
    '2' => 'closed',
  },
  airFMSysHumCtrlSetting => {
    '1' => 'notApplicable',
    '2' => 'relativeHum',
    '3' => 'dewPoint',
  },
  airFMSysPresentStatus => {
    '1' => 'notApplicable',
    '2' => 'reserved1',
    '3' => 'reserved2',
    '4' => 'onLine',
    '5' => 'idle',
    '6' => 'loadShare',
    '7' => 'failed',
    '8' => 'offLine',
  },
  emsInputContactConfigInputContactNormalState => {
    '1' => 'normallyClosedEMS',
    '2' => 'normallyOpenEMS',
  },
  airFMSysInputAlarmAction => {
    '1' => 'statusOnly',
    '2' => 'minor',
    '3' => 'major',
    '4' => 'remoteRunStop',
    '5' => 'nonessStop',
    '6' => 'immShutdown',
  },
  xATSSystemOutputPhaseIndex => {
    '1' => 'phase1',
    '2' => 'phase2',
    '3' => 'phase3',
  },
  battManAlarmBatteries => {
    '1' => 'normal',
    '2' => 'alarm',
  },
  airIRG2GroupConfigRuntimeBalancingEnable => {
    '1' => 'disable',
    '2' => 'enable',
  },
  airIRRP100UnitServiceIntervalFansAlarm => {
    '1' => 'enable',
    '2' => 'disable',
  },
  upsAdvConfigChargerLevel => {
    '1' => 'unknown',
    '2' => 'low',
    '3' => 'high',
  },
  rPDU2DeviceStatusLoadState => {
    '1' => 'lowLoad',
    '2' => 'normal',
    '3' => 'nearOverload',
    '4' => 'overload',
  },
  airIRRCUnitStatusActivePowerSource => {
    '1' => 'sourceA',
    '2' => 'sourceB',
  },
  rPDU2SensorDiscreteStatusCurrentState => {
    '1' => 'open',
    '2' => 'closed',
    '3' => 'unknown',
  },
  emsOutletControlOutletCommand => {
    '1' => 'immediateOnEMS',
    '2' => 'immediateOffEMS',
  },
  atsStatusPlus12VPowerSupply => {
    '1' => 'atsPowerSupplyFailure',
    '2' => 'atsPowerSupplyOK',
  },
  etlStatus => {
    '1' => 'unknown',
    '2' => 'running',
    '3' => 'failed',
    '4' => 'paused',
    '5' => 'stopped',
  },
  airIRSCUnitStatusInputState => {
    '1' => 'open',
    '2' => 'closed',
  },
  upsOutletGroupConfigLoadShedControlSkipOffDelay => {
    '1' => 'upsOutletGroupConfigSkipOffDelay',
    '2' => 'upsOutletGroupConfigUseOffDelay',
  },
  airFMSysDehumState => {
    '1' => 'notApplicable',
    '2' => 'disabled',
    '3' => 'enabled',
  },
  memInputsStatusCurrentState => {
    '1' => 'inputClosedHighMEM',
    '2' => 'inputOpenLowMEM',
    '3' => 'inputDisabled',
    '4' => 'inputStateNotApplicable',
  },
  rPDU2PhaseConfigPhasePeakCurrentReset => {
    '1' => 'noOperation',
    '2' => 'reset',
  },
  xATSSwitchStatusSelectedSource => {
    '1' => 'none',
    '2' => 'source1',
    '3' => 'source2',
    '4' => 'fault',
    '5' => 'unknown',
  },
  airFMSysAlarmMapMainModCoolFail => {
    '1' => 'notApplicable',
    '2' => 'disabled',
    '3' => 'enabled',
  },
  battManString2BatteryDryout => {
    '1' => 'normal',
    '2' => 'alarm',
  },
  rPDU2GroupEnergyReset => {
    '1' => 'noOperation',
    '2' => 'reset',
    '3' => 'notSupported',
  },
  battManString1BatteryLowCapacity => {
    '1' => 'normal',
    '2' => 'alarm',
  },
  rPDU2SensorTempHumidityStatusType => {
    '1' => 'temperatureOnly',
    '2' => 'temperatureHumidity',
    '3' => 'commsLost',
    '4' => 'notInstalled',
  },
  subfeedBreakerStatus => {
    '1' => 'unknown',
    '2' => 'notInstalled',
    '3' => 'opened',
    '4' => 'closed',
  },
  xATSTestingStatusTestStatus => {
    '1' => 'noTestInProcess',
    '2' => 'testPending',
    '3' => 'startingEngine',
    '4' => 'engineWarmingUp',
    '5' => 'awaitingTransferToS2',
    '6' => 'testingWithLoad',
    '7' => 'awaitingRetransferToS1',
    '8' => 'testingWithoutLoad',
    '9' => 'stoppingEngine',
    '10' => 'holdingOnGenerator',
  },
  upsPhaseInputType => {
    '1' => 'unknown',
    '2' => 'main',
    '3' => 'bypass',
  },
  rARUFanStatusReplacementThreshold => {
    '1' => 'disabled',
    '2' => 'khr20',
    '3' => 'khr25',
    '4' => 'khr30',
    '5' => 'khr35',
    '6' => 'khr40',
    '7' => 'khr50',
  },
  xATSSource1Index => {
    '1' => 'phase1',
    '2' => 'phase2',
    '3' => 'phase3',
  },
  dm3StatusLVDHwFault => {
    '1' => 'statusFault',
    '2' => 'statusNofault',
  },
  airIRG2RDT2ConfigIdleOnLeakDetect => {
    '1' => 'yes',
    '2' => 'no',
  },
  airFMSysAlarmMapMainModAirBlckIntOpen => {
    '1' => 'notApplicable',
    '2' => 'disabled',
    '3' => 'enabled',
  },
  airFMModFireDetector => {
    '1' => 'notApplicable',
    '2' => 'notPresent',
    '3' => 'present',
  },
  airIRG3RDUStatusStopOnLeakDetect => {
    '1' => 'no',
    '2' => 'yes',
  },
  sPDUMasterConfigVMOverloadRestriction => {
    '1' => 'alwaysAllowTurnON',
    '2' => 'restrictOnWarning',
    '3' => 'restrictOnOverload',
  },
  upsAdvConfigVoutReporting => {
    '1' => 'unknown',
    '2' => 'voutAUTO',
    '3' => 'vout208',
    '4' => 'vout240',
  },
  airFMSysAlarmMapSysFireDet => {
    '1' => 'notApplicable',
    '2' => 'disabled',
    '3' => 'enabled',
  },
  upsOutletGroupStatusOutletType => {
    '1' => 'upsSwitchedOutletGroup',
    '2' => 'upsMainOutletGroup',
  },
  battManString1BatteryThermalRunaway => {
    '1' => 'normal',
    '2' => 'alarm',
  },
  isxModularPduTransformerTempStatus => {
    '1' => 'normal',
    '2' => 'overtemp',
    '3' => 'noTransformerPresent',
    '4' => 'unknown',
  },
  dipSwitchStatus => {
    '1' => 'on',
    '2' => 'off',
  },
  airFMSysAlarmMapExpMod1CondPumpFail => {
    '1' => 'notApplicable',
    '2' => 'disabled',
    '3' => 'enabled',
  },
  isxModularDistModuleOutputAlarmMaxEnable => {
    '1' => 'disabled',
    '2' => 'enabled',
  },
  airIRRCUnitStatusOperateMode => {
    '1' => 'standby',
    '2' => 'on',
    '3' => 'idle',
  },
  dm3ConfigRectFailAlarm => {
    '1' => 'alarmIgnore',
    '2' => 'alarmRelay1',
    '3' => 'alarmRelay2',
    '4' => 'alarmRelay3',
    '5' => 'alarmRelay4',
    '6' => 'alarmRelay5',
    '7' => 'alarmRelay6',
    '8' => 'alarmMinor',
    '9' => 'alarmMajor',
    '10' => 'alarmNofN',
  },
  atsConfigPhase => {
    '1' => 'phase1',
    '2' => 'phase2',
    '3' => 'phase3',
  },
  emsInputContactStatusInputContactState => {
    '1' => 'contactClosedEMS',
    '2' => 'contactOpenEMS',
  },
  sPDUOutletControlMSPOutletCommand => {
    '1' => 'immediateOnMSP',
    '2' => 'delayedOnMSP',
    '3' => 'immediateOffMSP',
    '4' => 'gracefulRebootMSP',
    '5' => 'immediateRebootMSP',
    '6' => 'gracefulshutdownMSP',
    '7' => 'overrideBatCapThreshMSP',
    '8' => 'cancelPendingCommandMSP',
  },
  airFMStatusSystemHumidifyEnabled => {
    '1' => 'enabledYes',
    '2' => 'enabledNo',
  },
  dm3StatusBreakersStatus => {
    '1' => 'statusClosed',
    '2' => 'statusOpen',
  },
  iemStatusProbeHighTempViolation => {
    '1' => 'noViolation',
    '2' => 'highTempViolation',
    '3' => 'disabled',
  },
  airFMSysAlarmMapSysRemSensRemoved => {
    '1' => 'notApplicable',
    '2' => 'disabled',
    '3' => 'enabled',
  },
  dm3ConfigBreakersAlarm => {
    '1' => 'alarmIgnore',
    '2' => 'alarmRelay1',
    '3' => 'alarmRelay2',
    '4' => 'alarmRelay3',
    '5' => 'alarmRelay4',
    '6' => 'alarmRelay5',
    '7' => 'alarmRelay6',
    '8' => 'alarmMinor',
    '9' => 'alarmMajor',
  },
  emConfigProbeMaxTempEnable => {
    '1' => 'disabled',
    '2' => 'enabled',
  },
  rPDU2BankConfigBankPeakCurrentReset => {
    '1' => 'noOperation',
    '2' => 'reset',
  },
  emsOutputRelayStatusOutputRelayState => {
    '1' => 'relayClosedEMS',
    '2' => 'relayOpenEMS',
  },
  mconfigBOOTPEnabled => {
    '1' => 'yes',
    '2' => 'no',
  },
  normalState => {
    '1' => 'unknown',
    '2' => 'open',
    '3' => 'closed',
  },
  airFMGroupFailoverSysAnyMajorAlarm => {
    '1' => 'notApplicable',
    '2' => 'disable',
    '3' => 'enable',
  },
  airFMModComp1 => {
    '1' => 'notApplicable',
    '2' => 'on',
    '3' => 'off',
  },
  xPDUInputContactCurrentState => {
    '1' => 'open',
    '2' => 'closed',
    '3' => 'unknown',
  },
  airFMModServIntBlwrCtrl1Reset => {
    '1' => 'notApplicable',
    '2' => 'noOperation',
    '3' => 'reset',
  },
  airFMSysAlarmMapExpMod1WaterDetected => {
    '1' => 'notApplicable',
    '2' => 'disabled',
    '3' => 'enabled',
  },
  airFMSysAlarmMapInput10 => {
    '1' => 'notApplicable',
    '2' => 'disabled',
    '3' => 'enabled',
  },
  dcmim2StatusBattCapacityTestResult => {
    '1' => 'capacityTestNotPerformed',
    '2' => 'capacityTestInProcess',
    '3' => 'capacityTestInterrupted',
    '4' => 'capacityTestPass',
    '5' => 'capacityTestFail',
  },
  apcLocalDisplayConfigAlarmBeeper => {
    '1' => 'beeperDisabled',
    '2' => 'beeperEnabled',
  },
  airFMSysAlarmMapInput4 => {
    '1' => 'notApplicable',
    '2' => 'disabled',
    '3' => 'enabled',
  },
  AirIRmAlarmState => {
    '1' => 'ok',
    '2' => 'alarm',
  },
  uioInputContactStatusCommStatus => {
    '1' => 'notInstalled',
    '2' => 'commsOK',
    '3' => 'commsLost',
  },
  xATSGeneratorOutputPhaseIndex => {
    '1' => 'phase1',
    '2' => 'phase2',
    '3' => 'phase3',
  },
  upsAdvControlRebootShutdownUps => {
    '1' => 'noRebootShutdownUps',
    '2' => 'rebootShutdownUps',
    '3' => 'rebootShutdownUpsGracefully',
    '4' => 'rebootShutdownSyncGroupUps',
    '5' => 'rebootShutdownSyncGroupUpsGracefully',
  },
  dm3StatusSysRemoteAccess => {
    '1' => 'accessEnabled',
    '2' => 'accessDisabled',
  },
  dm3ConfigBattLowVoltAlarm => {
    '1' => 'alarmIgnore',
    '2' => 'alarmRelay1',
    '3' => 'alarmRelay2',
    '4' => 'alarmRelay3',
    '5' => 'alarmRelay4',
    '6' => 'alarmRelay5',
    '7' => 'alarmRelay6',
    '8' => 'alarmMinor',
    '9' => 'alarmMajor',
  },
  rPDUOutletBankOverloadRestriction => {
    '1' => 'alwaysAllowTurnON',
    '2' => 'restrictOnNearOverload',
    '3' => 'restrictOnOverload',
  },
  airIRmPmResetAllAlarms => {
    '1' => 'doNothing',
    '2' => 'reset',
  },
  sPDUOutletConfigMSPmupsP1LowHum => {
    '1' => 'disableAlarm',
    '2' => 'enableAlarm',
  },
  upsBasicOutputStatus => {
    '1' => 'unknown',
    '2' => 'onLine',
    '3' => 'onBattery',
    '4' => 'onSmartBoost',
    '5' => 'timedSleeping',
    '6' => 'softwareBypass',
    '7' => 'off',
    '8' => 'rebooting',
    '9' => 'switchedBypass',
    '10' => 'hardwareFailureBypass',
    '11' => 'sleepingUntilPowerReturn',
    '12' => 'onSmartTrim',
    '13' => 'ecoMode',
    '14' => 'hotStandby',
    '15' => 'onBatteryTest',
    '16' => 'emergencyStaticBypass',
    '17' => 'staticBypassStandby',
    '18' => 'powerSavingMode',
    '19' => 'spotMode',
    '20' => 'eConversion',
    '21' => 'chargerSpotmode',
    '22' => 'inverterSpotmode',
  },
  battManResetDischargeCounters => {
    '1' => 'noOperation',
    '2' => 'reset',
  },
  battManInputContactState => {
    '1' => 'open',
    '2' => 'closed',
  },
  uioInputContactStatusCurrentState => {
    '1' => 'uioInputClosed',
    '2' => 'uioInputOpen',
    '3' => 'uioInputDisabled',
    '4' => 'inputStateNotApplicable',
  },
  dcmim2StatusSysTempUnits => {
    '1' => 'celsius',
    '2' => 'fahrenheit',
  },
  airFMSysAlarmMapSysAnyAlarm => {
    '1' => 'notApplicable',
    '2' => 'disabled',
    '3' => 'enabled',
  },
  airFMStatusSystemCoolingEnabled => {
    '1' => 'enabledYes',
    '2' => 'enabledNo',
  },
  airIRG3RDUConfigStopOnLeakDetect => {
    '1' => 'no',
    '2' => 'yes',
  },
  xPDUBranchBreakerTieIndicator => {
    '1' => 'breakerUnTied',
    '2' => 'breakerTied',
  },
  upsAdvConfigBypassToleranceSetting => {
    '1' => 'unknown',
    '2' => 'wide',
    '3' => 'medium',
    '4' => 'narrow',
    '5' => 'custom',
  },
  emStatusContactStatus => {
    '1' => 'noFault',
    '2' => 'fault',
    '3' => 'disabled',
  },
  airFMGroupCfgShutdownFire => {
    '1' => 'disable',
    '2' => 'enable',
  },
  upsDiagSubSysPowerFactorCorrectionStatus => {
    '1' => 'unknown',
    '2' => 'notInstalled',
    '3' => 'offOk',
    '4' => 'onOk',
    '5' => 'offFail',
    '6' => 'onFail',
    '7' => 'lostComm',
  },
  dm3StatusFusesStatus => {
    '1' => 'statusClosed',
    '2' => 'statusOpen',
  },
  sPDUOutletConfigMSPmupsZone4 => {
    '1' => 'disableAlarm',
    '2' => 'enableAlarm',
  },
  airIRG2RDT2StatusLeakSensor => {
    '1' => 'no-leak',
    '2' => 'leak',
  },
  airFMAlarmType => {
    '1' => 'group',
    '2' => 'system',
    '3' => 'mainMod',
    '4' => 'expMod1',
    '5' => 'expMod2',
  },
  serialPort2Mode => {
    '1' => 'localConsole',
    '2' => 'passthrough',
  },
  airFMGroupSysStatus => {
    '1' => 'statusOnLine',
    '2' => 'statusIdle',
    '3' => 'statusLoadShare',
    '4' => 'statusOffLine',
    '5' => 'statusFailed',
    '6' => 'statusDisabled',
    '7' => 'statusUndefined',
  },
  xATSGeneratorServiceRunHoursThreshold => {
    '1' => 'disabled',
    '2' => 'runThreshold100Hours',
    '3' => 'runThreshold150Hours',
    '4' => 'runThreshold200Hours',
    '5' => 'runThreshold250Hours',
    '6' => 'runThreshold300Hours',
    '7' => 'runThreshold400Hours',
    '8' => 'runThreshold500Hours',
  },
  airIRG3GroupSetpointsFanSpeedPreference => {
    '1' => 'low',
    '2' => 'med-low',
    '3' => 'med',
    '4' => 'med-high',
    '5' => 'high',
  },
  dcmim2StatusRectFail => {
    '1' => 'statusTrue',
    '2' => 'statusFalse',
  },
  airFMSysAlarmMapOutput4 => {
    '1' => 'notApplicable',
    '2' => 'disabled',
    '3' => 'enabled',
  },
  emsSensorStatusSensorNormalState => {
    '1' => 'normallyClosedEMS',
    '2' => 'normallyOpenEMS',
  },
  battManAlarmManagementController => {
    '1' => 'normal',
    '2' => 'alarm',
  },
  atsConfigBank => {
    '1' => 'total',
    '2' => 'bank1',
    '3' => 'bank2',
  },
  rPDU2DeviceStatusPowerSupply1Status => {
    '1' => 'normal',
    '2' => 'alarm',
    '3' => 'notInstalled',
  },
  upsAdvConfigPositionSelector => {
    '1' => 'unknown',
    '2' => 'rack',
    '3' => 'tower',
  },
  sPDUOutletStatusMSPOutletState => {
    '1' => 'outletStatusMSPOn',
    '2' => 'outletStatusMSPOff',
  },
  uioOutputRelayStatusCurrentState => {
    '1' => 'uioOutputClosed',
    '2' => 'uioOutputOpen',
    '3' => 'outputStateNotApplicable',
  },
  atsStatus24VPowerSupply => {
    '1' => 'atsPowerSupplyFailure',
    '2' => 'atsPowerSupplyOK',
  },
  airFMSysHumCtrlMethod => {
    '1' => 'notApplicable',
    '2' => 'avgReturnRH',
    '3' => 'avgReturnDewPt',
    '4' => 'avgRemoteRH',
    '5' => 'avgRemoteDewPt',
  },
  upsDiagBatteryStatus => {
    '1' => 'unknown',
    '2' => 'notInstalled',
    '3' => 'ok',
    '4' => 'failed',
    '5' => 'highTemperature',
    '6' => 'replaceImmediately',
    '7' => 'lowCapacity',
  },
  isxModularDistSysCurrentAlarmHighEnable => {
    '1' => 'disabled',
    '2' => 'enabled',
  },
  airIRRP500UnitConfigReheatEnable => {
    '1' => 'enable',
    '2' => 'disable',
  },
  uioSensorStatusAlarmStatus => {
    '1' => 'uioNormal',
    '2' => 'uioWarning',
    '3' => 'uioCritical',
    '4' => 'sensorStatusNotApplicable',
  },
  battManString1BatteryHighOhmicValue => {
    '1' => 'normal',
    '2' => 'alarm',
  },
  airIRRCGroupConfigConfigurationType => {
    '1' => 'racs',
    '2' => 'hacs',
    '3' => 'in-row',
    '4' => 'cacs',
  },
  iemStatusProbeMaxTempViolation => {
    '1' => 'noViolation',
    '2' => 'maxTempViolation',
    '3' => 'disabled',
  },
  upsAdvBatteryActualVoltagePolarity => {
    '0' => 'positive',
    '1' => 'negative',
  },
  airIRRP100UnitStatusInputState => {
    '1' => 'open',
    '2' => 'closed',
  },
  airFMSysSteamHumDmd => {
    '1' => 'notApplicable',
    '2' => 'off',
    '3' => 'on',
  },
  airPACompressor => {
    '1' => 'statusON',
    '2' => 'statusOFF',
  },
  airIRG3RDUConfigPowerSource => {
    '1' => 'singleFeed',
    '2' => 'dualFeed',
  },
  upsAdvControlFlashAndBeep => {
    '1' => 'noFlashAndBeep',
    '2' => 'flashAndBeep',
    '3' => 'flashAndBeepSyncGroup',
    '4' => 'flashAndBeepCont',
    '5' => 'flashAndBeepCancel',
  },
  airIRmPmFan1Type => {
    '1' => 'direct',
    '2' => 'proportional',
  },
  airIRG3RDUStatusOnReadyStandby => {
    '1' => 'standby',
    '2' => 'ready',
    '3' => 'on',
  },
  airFMSysAlarmMapSysLowEnvTemp => {
    '1' => 'notApplicable',
    '2' => 'disabled',
    '3' => 'enabled',
  },
  xATSSource1Quality => {
    '1' => 'sourceGood',
    '2' => 'lowVoltage',
    '3' => 'highVoltage',
    '4' => 'phaseImbalance',
    '5' => 'freqOutOfRange',
    '6' => 'badRotation',
    '7' => 'unknown',
  },
  airFMSysAlarmMapSysSupplySensFail => {
    '1' => 'notApplicable',
    '2' => 'disabled',
    '3' => 'enabled',
  },
  accessPXStatusRearDoorHandle => {
    '1' => 'open',
    '2' => 'closed',
    '3' => 'notInstalled',
    '4' => 'disconnected',
  },
  rPDUStatusBankState => {
    '1' => 'bankLoadNormal',
    '2' => 'bankLoadLow',
    '3' => 'bankLoadNearOverload',
    '4' => 'bankLoadOverload',
  },
  dm3StatusConvStandby => {
    '1' => 'statusTrue',
    '2' => 'statusFalse',
  },
  dm3ConfigRectHighVoltAlarm => {
    '1' => 'alarmIgnore',
    '2' => 'alarmRelay1',
    '3' => 'alarmRelay2',
    '4' => 'alarmRelay3',
    '5' => 'alarmRelay4',
    '6' => 'alarmRelay5',
    '7' => 'alarmRelay6',
    '8' => 'alarmMinor',
    '9' => 'alarmMajor',
  },
  airFMModCapacityCtrl => {
    '1' => 'notApplicable',
    '2' => 'tandem',
    '3' => 'hotGasBypass',
  },
  sPDUOutletConfigMSPmupsZone3 => {
    '1' => 'disableAlarm',
    '2' => 'enableAlarm',
  },
  upsOutletGroupControlOutletType => {
    '1' => 'upsSwitchedOutletGroup',
    '2' => 'upsMainOutletGroup',
  },
  airFMGroupCfgIdleBlower => {
    '1' => 'off',
    '2' => 'minimumSpeed',
    '3' => 'normalSpeed',
  },
  airFMSysActualHumCtrlMethod => {
    '1' => 'notApplicable',
    '2' => 'avgReturnRH',
    '3' => 'avgReturnDewPt',
    '4' => 'avgRemoteRH',
    '5' => 'avgRemoteDewPt',
  },
  airIRSCUnitConfigOutputNormalState => {
    '1' => 'open',
    '2' => 'closed',
  },
  airFMSysNumPCIOMs => {
    '1' => 'notApplicable',
    '2' => 'one',
    '3' => 'two',
    '4' => 'three',
    '5' => 'four',
  },
  atsStatusVoltageOutStatus => {
    '1' => 'fail',
    '2' => 'ok',
  },
  currentStatus => {
    '1' => 'unknown',
    '2' => 'noFault',
    '3' => 'fault',
  },
  airIRmPmUnitWinterMode => {
    '1' => 'summer',
    '2' => 'winter',
  },
  dm3ConfigRectDiagAlarm => {
    '1' => 'alarmIgnore',
    '2' => 'alarmRelay1',
    '3' => 'alarmRelay2',
    '4' => 'alarmRelay3',
    '5' => 'alarmRelay4',
    '6' => 'alarmRelay5',
    '7' => 'alarmRelay6',
    '8' => 'alarmMinor',
    '9' => 'alarmMajor',
    '10' => 'alarmNofN',
  },
  dm3StatusSysAlarmState => {
    '1' => 'alarmMinor',
    '2' => 'alarmMajor',
    '3' => 'alarmBoth',
    '4' => 'alarmNone',
  },
  airIRRP500UnitStatusOutputState => {
    '1' => 'open',
    '2' => 'closed',
  },
  airIRRP100UnitConfigHeatAssistEnable => {
    '1' => 'enable',
    '2' => 'disable',
  },
  airFMSysAlarmMapSysSmokeDet => {
    '1' => 'notApplicable',
    '2' => 'disabled',
    '3' => 'enabled',
  },
  airFMModServIntBlwr1Reset => {
    '1' => 'notApplicable',
    '2' => 'noOperation',
    '3' => 'reset',
  },
  airFMSysAlarmMapInput2 => {
    '1' => 'notApplicable',
    '2' => 'disabled',
    '3' => 'enabled',
  },
  accessPXConfigRearDoorLockControl => {
    '1' => 'unlock',
    '2' => 'lock',
    '3' => 'notInstalledReadOnly',
    '4' => 'disconnectedReadOnly',
  },
  airFMSysAlarmMapSysReturnSensFail => {
    '1' => 'notApplicable',
    '2' => 'disabled',
    '3' => 'enabled',
  },
  upsAdvControlRebootUpsWithOrWithoutAC => {
    '1' => 'noRebootUpsWithOrWithoutAC',
    '2' => 'rebootUpsImmediatelyWithOrWithoutAC',
    '3' => 'rebootUpsDelayedWithOrWithoutAC',
  },
  sPDUMasterStatusVMOverloadCondition => {
    '1' => 'overloadConditionTrueVM',
    '2' => 'overloadConditionFalseVM',
  },
  upsBasicControlConserveBattery => {
    '1' => 'noTurnOffUps',
    '2' => 'turnOffUpsToConserveBattery',
  },
  xPDUDeviceServiceType => {
    '1' => 'threeWire',
    '2' => 'fourWire',
  },
  airIRG3RDUConfigCalibrateRefrigerantLeakDetector => {
    '1' => 'no',
    '2' => 'yes',
  },
  airIRG3RDUStatusLeadPump => {
    '1' => 'pump1',
    '2' => 'pump2',
  },
  airIRRP100UnitConfigOutputSource => {
    '1' => 'anyAlarm',
    '2' => 'criticalAlarm',
  },
  airFMGroupSysManualRoleSetting => {
    '1' => 'primary',
    '2' => 'backup',
  },
  rPDU2DeviceStatusPowerSupplyAlarm => {
    '1' => 'normal',
    '2' => 'alarm',
  },
  xPDUDeviceLoadTestPortPresent => {
    '1' => 'notPresent',
    '2' => 'present',
  },
  sPDUOutletConfigMSPmupsZone2 => {
    '1' => 'disableAlarm',
    '2' => 'enableAlarm',
  },
  xATSSwitchStatusOperationalMode => {
    '1' => 'automatic',
    '2' => 'notInAutoAbnormal',
    '3' => 'notInAuto',
    '4' => 'unknown',
  },
  dm3StatusRectPresent => {
    '1' => 'statusTrue',
    '2' => 'statusFalse',
  },
  upsBasicSystemInverterStatus => {
    '1' => 'unknown',
    '2' => 'ok',
    '3' => 'inFaultCondition',
  },
  upsDiagComBusInternalRIMStatus => {
    '1' => 'unknown',
    '2' => 'notInstalled',
    '3' => 'ok',
    '4' => 'lostComm',
    '5' => 'rxFailure',
    '6' => 'txFailure',
  },
  dm3StatusSysTempUnits => {
    '1' => 'celsius',
    '2' => 'fahrenheit',
  },
  airIRG3GroupConfigRuntimeBalancingEnable => {
    '1' => 'disable',
    '2' => 'enable',
  },
  airIRG2RDT2ServiceIntervalsAirFilterAlarm => {
    '1' => 'enable',
    '2' => 'disable',
  },
  airFMGroupFailoverModWaterDetected => {
    '1' => 'notApplicable',
    '2' => 'disable',
    '3' => 'enable',
  },
  sPDUMasterConfigVMAudioAlarmActivated => {
    '1' => 'audioAlarmActiveNever',
    '2' => 'audioAlarmActiveOnOverload',
    '3' => 'audioAlarmActiveOnOverloadImminent',
  },
  sPDUMasterControlMSPCommand => {
    '1' => 'noCommandAllMSP',
    '2' => 'immediateAllOnMSP',
    '3' => 'sequencedAllOnMSP',
    '4' => 'immediateAllOffMSP',
    '5' => 'gracefulAllRebootMSP',
    '6' => 'immediateAllRebootMSP',
    '7' => 'gracefulAllShutdownMSP',
    '8' => 'overrideAllBatCapThreshMSP',
    '9' => 'cancelAllPendingCommandsMSP',
    '10' => 'restoreFactoryDefaultsMSP',
  },
  sPDUMasterControlSwitch => {
    '1' => 'turnAllOnNow',
    '2' => 'turnAllOnSequence',
    '3' => 'turnAllOffNow',
    '4' => 'rebootAllNow',
    '5' => 'rebootAllSequence',
    '6' => 'noCommand',
    '7' => 'turnAllOffSequence',
  },
  upsParallelDiagSubSysBreakerStatus => {
    '1' => 'unknown',
    '2' => 'notInstalled',
    '3' => 'opened',
    '4' => 'closed',
  },
  mfiletransferControlInitiateFileTransfer => {
    '1' => 'doNotInitiateFileTransfer',
    '2' => 'initiateFileTransferDownloadViaTFTP',
    '3' => 'initiateFileTransferDownloadViaFTP',
  },
  sPDUOutletConfigMSPmupsP2HiHum => {
    '1' => 'disableAlarm',
    '2' => 'enableAlarm',
  },
  upsDiagSubSysIntBypSwitchStatus => {
    '1' => 'unknown',
    '2' => 'notInstalled',
    '3' => 'offOk',
    '4' => 'onOk',
    '5' => 'offFail',
    '6' => 'onFail',
    '7' => 'lostComm',
  },
  airIRRP100UnitStatusOperateMode => {
    '1' => 'standby',
    '2' => 'on',
    '3' => 'idle',
    '4' => 'prestart',
    '5' => 'service',
    '6' => 'backup',
    '7' => 'assist',
  },
  isxModularDistModuleOutputKwhReset => {
    '1' => 'no',
    '2' => 'yes',
  },
  airFMGroupSysRoleStatus => {
    '1' => 'reserved1',
    '2' => 'reserved2',
    '3' => 'onLine',
    '4' => 'idle',
    '5' => 'loadShare',
    '6' => 'failed',
    '7' => 'offLine',
  },
  xATSGeneratorAdvStatusCoolantLevel => {
    '1' => 'ok',
    '2' => 'low',
    '3' => 'unknown',
  },
  AirIRG2RDType2IOState => {
    '1' => 'open',
    '2' => 'closed',
  },
  rPDUOutletControlOutletCommand => {
    '1' => 'immediateOn',
    '2' => 'immediateOff',
    '3' => 'immediateReboot',
    '4' => 'delayedOn',
    '5' => 'delayedOff',
    '6' => 'delayedReboot',
    '7' => 'cancelPendingCommand',
  },
  airFMSysAlarmMapMainModLowAirFlow => {
    '1' => 'notApplicable',
    '2' => 'disabled',
    '3' => 'enabled',
  },
  xATSDeviceDCBackUpPresent => {
    '1' => 'yes',
    '2' => 'no',
  },
  airIRRP500UnitConfigDehumidifyEnable => {
    '1' => 'enable',
    '2' => 'disable',
  },
  upsAdvBatteryChargerStatus => {
    '1' => 'unknown',
    '2' => 'ok',
    '3' => 'inFaultCondition',
  },
  setPulseOnTXD => {
    '1' => 'noSetPulseOnTXD',
    '2' => 'setPulseOnTXD',
    '3' => 'setTXDLow',
    '4' => 'setTXDHigh',
  },
  atsOutputBankState => {
    '1' => 'normal',
    '2' => 'lowload',
    '3' => 'nearoverload',
    '4' => 'overload',
  },
  rPDUOutletStatusOutletState => {
    '1' => 'outletStatusOn',
    '2' => 'outletStatusOff',
  },
  atsStatusMinus12VPowerSupply => {
    '1' => 'atsPowerSupplyFailure',
    '2' => 'atsPowerSupplyOK',
  },
  'upsBasicStateOutputState' => sub {
    # ftp://ftp.apc.com/apc/public/software/pnetmib/mib/417/powernet417.mib
    my ($state) = @_;
    if ($state eq 'UNKNOWN') {
      return '0'x64;
    } else {
      # The flags are numbered from 1 to 32, and read from left to right
      return '0'.$state;
    }
    # Flag  1: Abnormal Condition Present
    # Flag  2: On Battery
    # Flag  3: Low Battery
    # Flag  4: On Line

    # Flag  5: Replace Battery
    # Flag  6: Serial Communication Established
    # Flag  7: AVR Boost Active
    # Flag  8: AVR Trim Active

    # Flag  9: Overload
    # Flag 10: Runtime Calibration
    # Flag 11: Batteries Discharged
    # Flag 12: Manual Bypass

    # Flag 13: Software Bypass
    # Flag 14: In Bypass due to Internal Fault
    # Flag 15: In Bypass due to Supply Failure
    # Flag 16: In Bypass due to Fan Failure

    # Flag 17: Sleeping on a Timer
    # Flag 18: Sleeping until Utility Power Returns
    # Flag 19: On
    # Flag 20: Rebooting

    # Flag 21: Battery Communication Lost
    # Flag 22: Graceful Shutdown Initiated
    # Flag 23: Smart Boost or Smart Trim Fault
    # Flag 24: Bad Output Voltage

    # Flag 25: Battery Charger Failure
    # Flag 26: High Battery Temperature
    # Flag 27: Warning Battery Temperature
    # Flag 28: Critical Battery Temperature

    # Flag 29: Self Test In Progress
    # Flag 30: Low Battery / On Battery
    # Flag 31: Graceful Shutdown Issued by Upstream Device
    # Flag 32: Graceful Shutdown Issued by Downstream Device

    # Flag 33: No Batteries Attached
    # Flag 34: Synchronized Command is in Progress
    # Flag 35: Synchronized Sleeping Command is in Progress
    # Flag 36: Synchronized Rebooting Command is in Progress

    # Flag 37: Inverter DC Imbalance
    # Flag 38: Transfer Relay Failure
    # Flag 39: Shutdown or Unable to Transfer
    # Flag 40: Low Battery Shutdown

    # Flag 41: Electronic Unit Fan Failure
    # Flag 42: Main Relay Failure
    # Flag 43: Bypass Relay Failure
    # Flag 44: Temporary Bypass

    # Flag 45: High Internal Temperature
    # Flag 46: Battery Temperature Sensor Fault
    # Flag 47: Input Out of Range for Bypass
    # Flag 48: DC Bus Overvoltage

    # Flag 49: PFC Failure
    # Flag 50: Critical Hardware Fault
    # Flag 51: Green Mode/ECO Mode
    # Flag 52: Hot Standby

    # Flag 53: Emergency Power Off (EPO) Activated
    # Flag 54: Load Alarm Violation
    # Flag 55: Bypass Phase Fault
    # Flag 56: UPS Internal Communication Failure

    # Flag 57: Efficiency Booster Mode
    # Flag 58: Off
    # Flag 59: Standby
    # Flag 60: <Not Used>

    # Flag 61: <Not Used>
    # Flag 62: <Not Used>
    # Flag 63: <Not Used>
    # Flag 64: <Not Used>
  },
};
package Monitoring::GLPlugin::SNMP::MibsAndOids::SNMPFRAMEWORKMIB;

$Monitoring::GLPlugin::SNMP::MibsAndOids::origin->{'SNMP-FRAMEWORK-MIB'} = {
  url => "",
  name => "MIB-II",
};

$Monitoring::GLPlugin::SNMP::MibsAndOids::mibs_and_oids->{'SNMP-FRAMEWORK-MIB'} = {
  snmpEngineID => '1.3.6.1.6.3.10.2.1.1.0',
  snmpEngineBoots => '1.3.6.1.6.3.10.2.1.2.0',
  snmpEngineTime => '1.3.6.1.6.3.10.2.1.3.0',
  snmpEngineMaxMessageSize => '1.3.6.1.6.3.10.2.1.4.0',
};



package Monitoring::GLPlugin::SNMP::MibsAndOids::UPSMIB;

$Monitoring::GLPlugin::SNMP::MibsAndOids::origin->{'UPS-MIB'} = {
  url => "",
  name => "UPS-MIB-MIB",
};

$Monitoring::GLPlugin::SNMP::MibsAndOids::mib_ids->{'UPS-MIB'} =
  '1.3.6.1.2.1.33';

$Monitoring::GLPlugin::SNMP::MibsAndOids::mibs_and_oids->{'UPS-MIB'} = {
  upsObjects => '1.3.6.1.2.1.33.1',
  upsIdent => '1.3.6.1.2.1.33.1.1',
  upsIdent => '1.3.6.1.2.1.33.1.1',
  upsIdentManufacturer => '1.3.6.1.2.1.33.1.1.1.0',
  upsIdentModel => '1.3.6.1.2.1.33.1.1.2.0',
  upsIdentUPSSoftwareVersion => '1.3.6.1.2.1.33.1.1.3.0',
  upsIdentAgentSoftwareVersion => '1.3.6.1.2.1.33.1.1.4.0',
  upsIdentName => '1.3.6.1.2.1.33.1.1.5.0',
  upsIdentAttachedDevices => '1.3.6.1.2.1.33.1.1.6.0',
  upsBattery => '1.3.6.1.2.1.33.1.2',
  upsBatteryStatus => '1.3.6.1.2.1.33.1.2.1.0',
  upsBatteryStatusDefinition => {
    1 => 'unknown',
    2 => 'batteryNormal',
    3 => 'batteryLow',
    4 => 'batteryDepleted',
  },
  upsSecondsOnBattery => '1.3.6.1.2.1.33.1.2.2.0',
  upsEstimatedMinutesRemaining => '1.3.6.1.2.1.33.1.2.3.0',
  upsEstimatedChargeRemaining => '1.3.6.1.2.1.33.1.2.4.0',
  upsBatteryVoltage => '1.3.6.1.2.1.33.1.2.5.0',
  upsBatteryCurrent => '1.3.6.1.2.1.33.1.2.6.0',
  upsBatteryTemperature => '1.3.6.1.2.1.33.1.2.7.0',
  upsInput => '1.3.6.1.2.1.33.1.3',
  upsInputLineBads => '1.3.6.1.2.1.33.1.3.1.0',
  upsInputNumLines => '1.3.6.1.2.1.33.1.3.2.0',
  upsInputTable => '1.3.6.1.2.1.33.1.3.3',
  upsInputEntry => '1.3.6.1.2.1.33.1.3.3.1',
  upsInputLineIndex => '1.3.6.1.2.1.33.1.3.3.1.1',
  upsInputFrequency => '1.3.6.1.2.1.33.1.3.3.1.2',
  upsInputVoltage => '1.3.6.1.2.1.33.1.3.3.1.3',
  upsInputCurrent => '1.3.6.1.2.1.33.1.3.3.1.4',
  upsInputTruePower => '1.3.6.1.2.1.33.1.3.3.1.5',
  upsOutput => '1.3.6.1.2.1.33.1.4',
  upsOutputSource => '1.3.6.1.2.1.33.1.4.1.0',
  upsOutputSourceDefinition => {
    1 => 'other',
    2 => 'none',
    3 => 'normal',
    4 => 'bypess',
    5 => 'battery',
    6 => 'booster',
    7 => 'reducer',
  },
  upsOutputFrequency => '1.3.6.1.2.1.33.1.4.2.0',
  upsOutputNumLines => '1.3.6.1.2.1.33.1.4.3.0',
  upsOutputTable => '1.3.6.1.2.1.33.1.4.4',
  upsOutputEntry => '1.3.6.1.2.1.33.1.4.4.1',
  upsOutputLineIndex => '1.3.6.1.2.1.33.1.4.4.1.1',
  upsOutputVoltage => '1.3.6.1.2.1.33.1.4.4.1.2',
  upsOutputCurrent => '1.3.6.1.2.1.33.1.4.4.1.3',
  upsOutputPower => '1.3.6.1.2.1.33.1.4.4.1.4',
  upsOutputPercentLoad => '1.3.6.1.2.1.33.1.4.4.1.5',
  upsBypass => '1.3.6.1.2.1.33.1.5',
  upsBypass => '1.3.6.1.2.1.33.1.5',
  upsBypassFrequency => '1.3.6.1.2.1.33.1.5.1.0',
  upsBypassNumLines => '1.3.6.1.2.1.33.1.5.2.0',
  upsBypassTable => '1.3.6.1.2.1.33.1.5.3',
  upsBypassEntry => '1.3.6.1.2.1.33.1.5.3.1',
  upsBypassLineIndex => '1.3.6.1.2.1.33.1.5.3.1.1',
  upsBypassVoltage => '1.3.6.1.2.1.33.1.5.3.1.2',
  upsBypassCurrent => '1.3.6.1.2.1.33.1.5.3.1.3',
  upsBypassPower => '1.3.6.1.2.1.33.1.5.3.1.4',
  upsAlarm => '1.3.6.1.2.1.33.1.6',
  upsAlarm => '1.3.6.1.2.1.33.1.6',
  upsAlarmsPresent => '1.3.6.1.2.1.33.1.6.1.0',
  upsAlarmTable => '1.3.6.1.2.1.33.1.6.2',
  upsAlarmEntry => '1.3.6.1.2.1.33.1.6.2.1',
  upsAlarmId => '1.3.6.1.2.1.33.1.6.2.1.1',
  upsAlarmDescr => '1.3.6.1.2.1.33.1.6.2.1.2',
  upsAlarmTime => '1.3.6.1.2.1.33.1.6.2.1.3',
  upsWellKnownAlarms => '1.3.6.1.2.1.33.1.6.3',
  upsAlarmBatteryBad => '1.3.6.1.2.1.33.1.6.3.1',
  upsAlarmOnBattery => '1.3.6.1.2.1.33.1.6.3.2',
  upsAlarmLowBattery => '1.3.6.1.2.1.33.1.6.3.3',
  upsAlarmDepletedBattery => '1.3.6.1.2.1.33.1.6.3.4',
  upsAlarmTempBad => '1.3.6.1.2.1.33.1.6.3.5',
  upsAlarmInputBad => '1.3.6.1.2.1.33.1.6.3.6',
  upsAlarmOutputBad => '1.3.6.1.2.1.33.1.6.3.7',
  upsAlarmOutputOverload => '1.3.6.1.2.1.33.1.6.3.8',
  upsAlarmOnBypass => '1.3.6.1.2.1.33.1.6.3.9',
  upsAlarmBypassBad => '1.3.6.1.2.1.33.1.6.3.10',
  upsAlarmOutputOffAsRequested => '1.3.6.1.2.1.33.1.6.3.11',
  upsAlarmUpsOffAsRequested => '1.3.6.1.2.1.33.1.6.3.12',
  upsAlarmChargerFailed => '1.3.6.1.2.1.33.1.6.3.13',
  upsAlarmUpsOutputOff => '1.3.6.1.2.1.33.1.6.3.14',
  upsAlarmUpsSystemOff => '1.3.6.1.2.1.33.1.6.3.15',
  upsAlarmFanFailure => '1.3.6.1.2.1.33.1.6.3.16',
  upsAlarmFuseFailure => '1.3.6.1.2.1.33.1.6.3.17',
  upsAlarmGeneralFault => '1.3.6.1.2.1.33.1.6.3.18',
  upsAlarmDiagnosticTestFailed => '1.3.6.1.2.1.33.1.6.3.19',
  upsAlarmCommunicationsLost => '1.3.6.1.2.1.33.1.6.3.20',
  upsAlarmAwaitingPower => '1.3.6.1.2.1.33.1.6.3.21',
  upsAlarmShutdownPending => '1.3.6.1.2.1.33.1.6.3.22',
  upsAlarmShutdownImminent => '1.3.6.1.2.1.33.1.6.3.23',
  upsAlarmTestInProgress => '1.3.6.1.2.1.33.1.6.3.24',
  upsTest => '1.3.6.1.2.1.33.1.7',
  upsTest => '1.3.6.1.2.1.33.1.7',
  upsTestId => '1.3.6.1.2.1.33.1.7.1.0',
  upsTestSpinLock => '1.3.6.1.2.1.33.1.7.2.0',
  upsTestResultsSummary => '1.3.6.1.2.1.33.1.7.3.0',
  upsTestResultsSummaryDefinition => {
      1 => 'donePass',
      2 => 'doneWarning',
      3 => 'doneError',
      4 => 'aborted',
      5 => 'inProgress',
      6 => 'noTestsInitiated',
  },
  upsTestResultsDetail => '1.3.6.1.2.1.33.1.7.4.0',
  upsTestStartTime => '1.3.6.1.2.1.33.1.7.5.0',
  upsTestElapsedTime => '1.3.6.1.2.1.33.1.7.6.0',
  upsWellKnownTests => '1.3.6.1.2.1.33.1.7.7',
  upsTestNoTestsInitiated => '1.3.6.1.2.1.33.1.7.7.1',
  upsTestAbortTestInProgress => '1.3.6.1.2.1.33.1.7.7.2',
  upsTestGeneralSystemsTest => '1.3.6.1.2.1.33.1.7.7.3',
  upsTestQuickBatteryTest => '1.3.6.1.2.1.33.1.7.7.4',
  upsTestDeepBatteryCalibration => '1.3.6.1.2.1.33.1.7.7.5',
  upsControl => '1.3.6.1.2.1.33.1.8',
  upsControl => '1.3.6.1.2.1.33.1.8',
  upsShutdownType => '1.3.6.1.2.1.33.1.8.1.0',
  upsShutdownTypeDefinition => {
    1 => 'output',
    2 => 'system',
  },
  upsShutdownAfterDelay => '1.3.6.1.2.1.33.1.8.2.0',
  upsStartupAfterDelay => '1.3.6.1.2.1.33.1.8.3.0',
  upsRebootWithDuration => '1.3.6.1.2.1.33.1.8.4.0',
  upsAutoRestart => '1.3.6.1.2.1.33.1.8.5.0',
  upsAutoRestartDefinition => {
    1 => 'on',
    2 => 'off',
  },
  upsConfig => '1.3.6.1.2.1.33.1.9',
  upsConfig => '1.3.6.1.2.1.33.1.9',
  upsConfigInputVoltage => '1.3.6.1.2.1.33.1.9.1.0',
  upsConfigInputFreq => '1.3.6.1.2.1.33.1.9.2.0',
  upsConfigOutputVoltage => '1.3.6.1.2.1.33.1.9.3.0',
  upsConfigOutputFreq => '1.3.6.1.2.1.33.1.9.4.0',
  upsConfigOutputVA => '1.3.6.1.2.1.33.1.9.5.0',
  upsConfigOutputPower => '1.3.6.1.2.1.33.1.9.6.0',
  upsConfigLowBattTime => '1.3.6.1.2.1.33.1.9.7.0',
  upsConfigAudibleStatus => '1.3.6.1.2.1.33.1.9.8.0',
  upsConfigLowVoltageTransferPoint => '1.3.6.1.2.1.33.1.9.9.0',
  upsConfigHighVoltageTransferPoint => '1.3.6.1.2.1.33.1.9.10.0',
};


package Monitoring::GLPlugin::SNMP::MibsAndOids::UPSV4MIB;

$Monitoring::GLPlugin::SNMP::MibsAndOids::origin->{'UPSV4-MIB'} = {
  url => "",
  name => "UPSV4-MIB",
};

$Monitoring::GLPlugin::SNMP::MibsAndOids::mib_ids->{'UPSV4-MIB'} =
  '1.3.6.1.4.1.2254.2.4';

$Monitoring::GLPlugin::SNMP::MibsAndOids::mibs_and_oids->{'UPSV4-MIB'} = {
  delta => '1.3.6.1.4.1.2254',
  ups => '1.3.6.1.4.1.2254.2',
  upsv4 => '1.3.6.1.4.1.2254.2.4',
  dupsIdent => '1.3.6.1.4.1.2254.2.4.1',
  dupsIdentManufacturer => '1.3.6.1.4.1.2254.2.4.1.1',
  dupsRatingInputVoltage => '1.3.6.1.4.1.2254.2.4.1.10',
  dupsRatingInputFrequency => '1.3.6.1.4.1.2254.2.4.1.11',
  dupsRatingBatteryVoltage => '1.3.6.1.4.1.2254.2.4.1.12',
  dupsLowTransferVoltUpBound => '1.3.6.1.4.1.2254.2.4.1.13',
  dupsLowTransferVoltLowBound => '1.3.6.1.4.1.2254.2.4.1.14',
  dupsHighTransferVoltUpBound => '1.3.6.1.4.1.2254.2.4.1.15',
  dupsHighTransferVoltLowBound => '1.3.6.1.4.1.2254.2.4.1.16',
  dupsLowBattTime => '1.3.6.1.4.1.2254.2.4.1.17',
  dupsOutletRelays => '1.3.6.1.4.1.2254.2.4.1.18',
  dupsType => '1.3.6.1.4.1.2254.2.4.1.19',
  dupsTypeDefinition => {
    1 => 'on-line',
    2 => 'off-line',
    3 => 'line-interactive',
    4 => '3phase',
    5 => 'splite-phase',
  },
  dupsIdentModel => '1.3.6.1.4.1.2254.2.4.1.2',
  dupsIdentUPSSoftwareVersion => '1.3.6.1.4.1.2254.2.4.1.3',
  dupsIdentAgentSoftwareVersion => '1.3.6.1.4.1.2254.2.4.1.4',
  dupsIdentName => '1.3.6.1.4.1.2254.2.4.1.5',
  dupsAttachedDevices => '1.3.6.1.4.1.2254.2.4.1.6',
  dupsRatingOutputVA => '1.3.6.1.4.1.2254.2.4.1.7',
  dupsRatingOutputVoltage => '1.3.6.1.4.1.2254.2.4.1.8',
  dupsRatingOutputFrequency => '1.3.6.1.4.1.2254.2.4.1.9',
  dupsEnvironment => '1.3.6.1.4.1.2254.2.4.10',
  dupsEnvTemperature => '1.3.6.1.4.1.2254.2.4.10.1',
  dupsAlarmOverEnvHumidity => '1.3.6.1.4.1.2254.2.4.10.10',
  dupsAlarmOverEnvHumidityDefinition => 'UPSV4-MIB::dupsAlarm',
  dupsAlarmEnvRelay1 => '1.3.6.1.4.1.2254.2.4.10.11',
  dupsAlarmEnvRelay1Definition => 'UPSV4-MIB::dupsAlarm',
  dupsAlarmEnvRelay2 => '1.3.6.1.4.1.2254.2.4.10.12',
  dupsAlarmEnvRelay2Definition => 'UPSV4-MIB::dupsAlarm',
  dupsAlarmEnvRelay3 => '1.3.6.1.4.1.2254.2.4.10.13',
  dupsAlarmEnvRelay3Definition => 'UPSV4-MIB::dupsAlarm',
  dupsAlarmEnvRelay4 => '1.3.6.1.4.1.2254.2.4.10.14',
  dupsAlarmEnvRelay4Definition => 'UPSV4-MIB::dupsAlarm',
  dupsEnvHumidity => '1.3.6.1.4.1.2254.2.4.10.2',
  dupsEnvSetTemperatureLimit => '1.3.6.1.4.1.2254.2.4.10.3',
  dupsEnvSetHumidityLimit => '1.3.6.1.4.1.2254.2.4.10.4',
  dupsEnvSetEnvRelay1 => '1.3.6.1.4.1.2254.2.4.10.5',
  dupsEnvSetEnvRelay2 => '1.3.6.1.4.1.2254.2.4.10.6',
  dupsEnvSetEnvRelay3 => '1.3.6.1.4.1.2254.2.4.10.7',
  dupsEnvSetEnvRelay4 => '1.3.6.1.4.1.2254.2.4.10.8',
  dupsAlarmOverEnvTemperature => '1.3.6.1.4.1.2254.2.4.10.9',
  dupsAlarmOverEnvTemperatureDefinition => 'UPSV4-MIB::dupsAlarm',
  dupsControl => '1.3.6.1.4.1.2254.2.4.2',
  dupsShutdownType => '1.3.6.1.4.1.2254.2.4.2.1',
  dupsAutoReboot => '1.3.6.1.4.1.2254.2.4.2.2',
  dupsShutdownAction => '1.3.6.1.4.1.2254.2.4.2.3',
  dupsShutdownRestart => '1.3.6.1.4.1.2254.2.4.2.4',
  dupsSetOutletRelay => '1.3.6.1.4.1.2254.2.4.2.5',
  dupsRelayOffDelay => '1.3.6.1.4.1.2254.2.4.2.6',
  dupsRelayOnDelay => '1.3.6.1.4.1.2254.2.4.2.7',
  dupsConfig => '1.3.6.1.4.1.2254.2.4.3',
  dupsConfigBuzzerAlarm => '1.3.6.1.4.1.2254.2.4.3.1',
  dupsConfigBuzzerState => '1.3.6.1.4.1.2254.2.4.3.2',
  dupsConfigSensitivity => '1.3.6.1.4.1.2254.2.4.3.3',
  dupsConfigLowVoltageTransferPoint => '1.3.6.1.4.1.2254.2.4.3.4',
  dupsConfigHighVoltageTransferPoint => '1.3.6.1.4.1.2254.2.4.3.5',
  dupsConfigShutdownOSDelay => '1.3.6.1.4.1.2254.2.4.3.6',
  dupsConfigUPSBootDelay => '1.3.6.1.4.1.2254.2.4.3.7',
  dupsConfigExternalBatteryPack => '1.3.6.1.4.1.2254.2.4.3.8',
  dupsInput => '1.3.6.1.4.1.2254.2.4.4',
  dupsInputNumLines => '1.3.6.1.4.1.2254.2.4.4.1',
  dupsInputCurrent3 => '1.3.6.1.4.1.2254.2.4.4.10',
  dupsInputFrequency1 => '1.3.6.1.4.1.2254.2.4.4.2',
  dupsInputVoltage1 => '1.3.6.1.4.1.2254.2.4.4.3',
  dupsInputCurrent1 => '1.3.6.1.4.1.2254.2.4.4.4',
  dupsInputFrequency2 => '1.3.6.1.4.1.2254.2.4.4.5',
  dupsInputVoltage2 => '1.3.6.1.4.1.2254.2.4.4.6',
  dupsInputCurrent2 => '1.3.6.1.4.1.2254.2.4.4.7',
  dupsInputFrequency3 => '1.3.6.1.4.1.2254.2.4.4.8',
  dupsInputVoltage3 => '1.3.6.1.4.1.2254.2.4.4.9',
  dupsOutput => '1.3.6.1.4.1.2254.2.4.5',
  dupsOutputSource => '1.3.6.1.4.1.2254.2.4.5.1',
  dupsOutputSourceDefinition => {
    0 => 'normal',
    1 => 'battery',
    2 => 'bypass',
    3 => 'reducing',
    4 => 'boosting',
    5 => 'manualBypass',
    6 => 'other',
    7 => 'none',
  },
  dupsOutputPower2 => '1.3.6.1.4.1.2254.2.4.5.10',
  dupsOutputLoad2 => '1.3.6.1.4.1.2254.2.4.5.11',
  dupsOutputVoltage3 => '1.3.6.1.4.1.2254.2.4.5.12',
  dupsOutputCurrent3 => '1.3.6.1.4.1.2254.2.4.5.13',
  dupsOutputPower3 => '1.3.6.1.4.1.2254.2.4.5.14',
  dupsOutputLoad3 => '1.3.6.1.4.1.2254.2.4.5.15',
  dupsOutputFrequency => '1.3.6.1.4.1.2254.2.4.5.2',
  dupsOutputNumLines => '1.3.6.1.4.1.2254.2.4.5.3',
  dupsOutputVoltage1 => '1.3.6.1.4.1.2254.2.4.5.4',
  dupsOutputCurrent1 => '1.3.6.1.4.1.2254.2.4.5.5',
  dupsOutputPower1 => '1.3.6.1.4.1.2254.2.4.5.6',
  dupsOutputLoad1 => '1.3.6.1.4.1.2254.2.4.5.7',
  dupsOutputVoltage2 => '1.3.6.1.4.1.2254.2.4.5.8',
  dupsOutputCurrent2 => '1.3.6.1.4.1.2254.2.4.5.9',
  dupsBypass => '1.3.6.1.4.1.2254.2.4.6',
  dupsBypassFrequency => '1.3.6.1.4.1.2254.2.4.6.1',
  dupsBypassCurrent3 => '1.3.6.1.4.1.2254.2.4.6.10',
  dupsBypassPower3 => '1.3.6.1.4.1.2254.2.4.6.11',
  dupsBypassNumLines => '1.3.6.1.4.1.2254.2.4.6.2',
  dupsBypassVoltage1 => '1.3.6.1.4.1.2254.2.4.6.3',
  dupsBypassCurrent1 => '1.3.6.1.4.1.2254.2.4.6.4',
  dupsBypassPower1 => '1.3.6.1.4.1.2254.2.4.6.5',
  dupsBypassVoltage2 => '1.3.6.1.4.1.2254.2.4.6.6',
  dupsBypassCurrent2 => '1.3.6.1.4.1.2254.2.4.6.7',
  dupsBypassPower2 => '1.3.6.1.4.1.2254.2.4.6.8',
  dupsBypassVoltage3 => '1.3.6.1.4.1.2254.2.4.6.9',
  dupsBattery => '1.3.6.1.4.1.2254.2.4.7',
  dupsBatteryCondiction => '1.3.6.1.4.1.2254.2.4.7.1',
  dupsBatteryCondictionDefinition => {
    0 => 'good',
    1 => 'weak',
    2 => 'replace',
  },
  dupsLastReplaceDate => '1.3.6.1.4.1.2254.2.4.7.10',
  dupsNextReplaceDate => '1.3.6.1.4.1.2254.2.4.7.11',
  dupsBatteryStatus => '1.3.6.1.4.1.2254.2.4.7.2',
  dupsBatteryStatusDefinition => {
    0 => 'ok',
    1 => 'low',
    2 => 'depleted',
  },
  dupsBatteryCharge => '1.3.6.1.4.1.2254.2.4.7.3',
  dupsBatteryChargeDefinition => {
    0 => 'floating',
    1 => 'charging',
    2 => 'resting',
    3 => 'discharging',
  },
  dupsSecondsOnBattery => '1.3.6.1.4.1.2254.2.4.7.4',
  dupsBatteryEstimatedTime => '1.3.6.1.4.1.2254.2.4.7.5',
  dupsBatteryVoltage => '1.3.6.1.4.1.2254.2.4.7.6',
  dupsBatteryCurrent => '1.3.6.1.4.1.2254.2.4.7.7',
  dupsBatteryCapacity => '1.3.6.1.4.1.2254.2.4.7.8',
  dupsTemperature => '1.3.6.1.4.1.2254.2.4.7.9',
  dupsTest => '1.3.6.1.4.1.2254.2.4.8',
  dupsTestType => '1.3.6.1.4.1.2254.2.4.8.1',
  dupsTestTypeDefinition => {
    0 => 'abort',
    1 => 'generalTest',
    2 => 'batteryTest',
    3 => 'testFor10sec',
    4 => 'testUntilBattlow',
  },
  dupsTestResultsSummary => '1.3.6.1.4.1.2254.2.4.8.2',
  dupsTestResultsSummaryDefinition => {
    0 => 'noTestsInitiated',
    1 => 'donePass',
    2 => 'inProgress',
    3 => 'generalTestFail',
    4 => 'batteryTestFail',
    5 => 'deepBatteryTestFail',
  },
  dupsTestResultsDetail => '1.3.6.1.4.1.2254.2.4.8.3',

  dupsAlarm => '1.3.6.1.4.1.2254.2.4.9',
  dupsAlarmDisconnect => '1.3.6.1.4.1.2254.2.4.9.1',
  dupsAlarmBatteryTestFail => '1.3.6.1.4.1.2254.2.4.9.10',
  dupsAlarmFuseFailure => '1.3.6.1.4.1.2254.2.4.9.11',
  dupsAlarmOutputOverload => '1.3.6.1.4.1.2254.2.4.9.12',
  dupsAlarmOutputOverCurrent => '1.3.6.1.4.1.2254.2.4.9.13',
  dupsAlarmInverterAbnormal => '1.3.6.1.4.1.2254.2.4.9.14',
  dupsAlarmRectifierAbnormal => '1.3.6.1.4.1.2254.2.4.9.15',
  dupsAlarmReserveAbnormal => '1.3.6.1.4.1.2254.2.4.9.16',
  dupsAlarmLoadOnReserve => '1.3.6.1.4.1.2254.2.4.9.17',
  dupsAlarmOverTemperature => '1.3.6.1.4.1.2254.2.4.9.18',
  dupsAlarmOutputBad => '1.3.6.1.4.1.2254.2.4.9.19',
  dupsAlarmPowerFail => '1.3.6.1.4.1.2254.2.4.9.2',
  dupsAlarmBypassBad => '1.3.6.1.4.1.2254.2.4.9.20',
  dupsAlarmUPSOff => '1.3.6.1.4.1.2254.2.4.9.21',
  dupsAlarmChargerFail => '1.3.6.1.4.1.2254.2.4.9.22',
  dupsAlarmFanFail => '1.3.6.1.4.1.2254.2.4.9.23',
  dupsAlarmEconomicMode => '1.3.6.1.4.1.2254.2.4.9.24',
  dupsAlarmOutputOff => '1.3.6.1.4.1.2254.2.4.9.25',
  dupsAlarmSmartShutdown => '1.3.6.1.4.1.2254.2.4.9.26',
  dupsAlarmEmergencyPowerOff => '1.3.6.1.4.1.2254.2.4.9.27',
  dupsAlarmBatteryLow => '1.3.6.1.4.1.2254.2.4.9.3',
  dupsAlarmLoadWarning => '1.3.6.1.4.1.2254.2.4.9.4',
  dupsAlarmLoadSeverity => '1.3.6.1.4.1.2254.2.4.9.5',
  dupsAlarmLoadOnBypass => '1.3.6.1.4.1.2254.2.4.9.6',
  dupsAlarmUPSFault => '1.3.6.1.4.1.2254.2.4.9.7',
  dupsAlarmBatteryGroundFault => '1.3.6.1.4.1.2254.2.4.9.8',
  dupsAlarmTestInProgress => '1.3.6.1.4.1.2254.2.4.9.9',
  dupsAlarmDisconnectDefinition => 'UPSV4-MIB::dupsAlarm',
  dupsAlarmBatteryTestFailDefinition => 'UPSV4-MIB::dupsAlarm',
  dupsAlarmFuseFailureDefinition => 'UPSV4-MIB::dupsAlarm',
  dupsAlarmOutputOverloadDefinition => 'UPSV4-MIB::dupsAlarm',
  dupsAlarmOutputOverCurrentDefinition => 'UPSV4-MIB::dupsAlarm',
  dupsAlarmInverterAbnormalDefinition => 'UPSV4-MIB::dupsAlarm',
  dupsAlarmRectifierAbnormalDefinition => 'UPSV4-MIB::dupsAlarm',
  dupsAlarmReserveAbnormalDefinition => 'UPSV4-MIB::dupsAlarm',
  dupsAlarmLoadOnReserveDefinition => 'UPSV4-MIB::dupsAlarm',
  dupsAlarmOverTemperatureDefinition => 'UPSV4-MIB::dupsAlarm',
  dupsAlarmOutputBadDefinition => 'UPSV4-MIB::dupsAlarm',
  dupsAlarmPowerFailDefinition => 'UPSV4-MIB::dupsAlarm',
  dupsAlarmBypassBadDefinition => 'UPSV4-MIB::dupsAlarm',
  dupsAlarmUPSOffDefinition => 'UPSV4-MIB::dupsAlarm',
  dupsAlarmChargerFailDefinition => 'UPSV4-MIB::dupsAlarm',
  dupsAlarmFanFailDefinition => 'UPSV4-MIB::dupsAlarm',
  dupsAlarmEconomicModeDefinition => 'UPSV4-MIB::dupsAlarm',
  dupsAlarmOutputOffDefinition => 'UPSV4-MIB::dupsAlarm',
  dupsAlarmSmartShutdownDefinition => 'UPSV4-MIB::dupsAlarm',
  dupsAlarmEmergencyPowerOffDefinition => 'UPSV4-MIB::dupsAlarm',
  dupsAlarmBatteryLowDefinition => 'UPSV4-MIB::dupsAlarm',
  dupsAlarmLoadWarningDefinition => 'UPSV4-MIB::dupsAlarm',
  dupsAlarmLoadSeverityDefinition => 'UPSV4-MIB::dupsAlarm',
  dupsAlarmLoadOnBypassDefinition => 'UPSV4-MIB::dupsAlarm',
  dupsAlarmUPSFaultDefinition => 'UPSV4-MIB::dupsAlarm',
  dupsAlarmBatteryGroundFaultDefinition => 'UPSV4-MIB::dupsAlarm',
  dupsAlarmTestInProgressDefinition => 'UPSV4-MIB::dupsAlarm',
};



package Monitoring::GLPlugin::SNMP::MibsAndOids::XPPCMIB;

$Monitoring::GLPlugin::SNMP::MibsAndOids::origin->{'XPPC-MIB'} = {
  url => "",
  name => "XPPC-MIB",
};

$Monitoring::GLPlugin::SNMP::MibsAndOids::mib_ids->{'XPPC-MIB'} =
  '1.3.6.1.4.1.935';

$Monitoring::GLPlugin::SNMP::MibsAndOids::mibs_and_oids->{'XPPC-MIB'} = {
  ppc => '1.3.6.1.4.1.935',
  products => '1.3.6.1.4.1.935.1',
  hardware => '1.3.6.1.4.1.935.1.1',
  ups => '1.3.6.1.4.1.935.1.1.1',
  upsIdentp => '1.3.6.1.4.1.935.1.1.1.1',
  upsBaseIdent => '1.3.6.1.4.1.935.1.1.1.1.1',
  upsBaseIdentModel => '1.3.6.1.4.1.935.1.1.1.1.1.1',
  upsBaseIdentUpsName => '1.3.6.1.4.1.935.1.1.1.1.1.2',
  upsSmartIdent => '1.3.6.1.4.1.935.1.1.1.1.2',
  upsSmartIdentFirmwareRevision => '1.3.6.1.4.1.935.1.1.1.1.2.1',
  upsSmartIdentDateOfManufacture => '1.3.6.1.4.1.935.1.1.1.1.2.2',
  upsSmartIdentUpsSerialNumber => '1.3.6.1.4.1.935.1.1.1.1.2.3',
  upsSmartIdentAgentFirmwareRevision => '1.3.6.1.4.1.935.1.1.1.1.2.4',
  upsBatteryp => '1.3.6.1.4.1.935.1.1.1.2',
  upsBaseBattery => '1.3.6.1.4.1.935.1.1.1.2.1',
  upsBaseBatteryStatus => '1.3.6.1.4.1.935.1.1.1.2.1.1',
  upsBaseBatteryStatusDefinition => {
    1 => 'unknown',
    3 => 'batteryLow',
    2 => 'batteryNormal',
  },
  upsBaseBatteryTimeOnBattery => '1.3.6.1.4.1.935.1.1.1.2.1.2',
  upsBaseBatteryLastReplaceDate => '1.3.6.1.4.1.935.1.1.1.2.1.3',
  upsSmartBattery => '1.3.6.1.4.1.935.1.1.1.2.2',
  upsSmartBatteryCapacity => '1.3.6.1.4.1.935.1.1.1.2.2.1',
  upsSmartBatteryVoltage => '1.3.6.1.4.1.935.1.1.1.2.2.2',
  upsSmartBatteryTemperature => '1.3.6.1.4.1.935.1.1.1.2.2.3',
  upsSmartBatteryRunTimeRemaining => '1.3.6.1.4.1.935.1.1.1.2.2.4',
  upsSmartBatteryReplaceIndicator => '1.3.6.1.4.1.935.1.1.1.2.2.5',
  upsSmartBatteryReplaceIndicatorDefinition => {
    1 => 'noBatteryNeedsReplacing',
    2 => 'batteryNeedsReplacing',
  },
  upsSmartBatteryFullChargeVoltage => '1.3.6.1.4.1.935.1.1.1.2.2.6',
  upsSmartBatteryCurrent => '1.3.6.1.4.1.935.1.1.1.2.2.7',
  upsInputp => '1.3.6.1.4.1.935.1.1.1.3',
  upsBaseInput => '1.3.6.1.4.1.935.1.1.1.3.1',
  upsBaseInputPhase => '1.3.6.1.4.1.935.1.1.1.3.1.1',
  upsSmartInput => '1.3.6.1.4.1.935.1.1.1.3.2',
  upsSmartInputLineVoltage => '1.3.6.1.4.1.935.1.1.1.3.2.1',
  upsSmartInputMaxLineVoltage => '1.3.6.1.4.1.935.1.1.1.3.2.2',
  upsSmartInputMinLineVoltage => '1.3.6.1.4.1.935.1.1.1.3.2.3',
  upsSmartInputFrequency => '1.3.6.1.4.1.935.1.1.1.3.2.4',
  upsSmartInputLineFailCause => '1.3.6.1.4.1.935.1.1.1.3.2.5',
  upsSmartInputLineFailCauseDefinition => {
    6 => 'deepMomentarySag',
    5 => 'smallMomentarySag',
    2 => 'highLineVoltage',
    8 => 'largeMomentarySpike',
    1 => 'noTransfer',
    4 => 'blackout',
    3 => 'brownout',
    7 => 'smallMomentarySpike',
  },
  upsOutputp => '1.3.6.1.4.1.935.1.1.1.4',
  upsBaseOutput => '1.3.6.1.4.1.935.1.1.1.4.1',
  upsBaseOutputStatus => '1.3.6.1.4.1.935.1.1.1.4.1.1',
  upsBaseOutputStatusDefinition => {
    7 => 'rebooting',
    4 => 'onBoost',
    2 => 'onLine',
    9 => 'onBuck',
    6 => 'onBypass',
    8 => 'standBy',
    1 => 'unknown',
    5 => 'sleeping',
    3 => 'onBattery',
  },
  upsBaseOutputPhase => '1.3.6.1.4.1.935.1.1.1.4.1.2',
  upsSmartOutput => '1.3.6.1.4.1.935.1.1.1.4.2',
  upsSmartOutputVoltage => '1.3.6.1.4.1.935.1.1.1.4.2.1',
  upsSmartOutputFrequency => '1.3.6.1.4.1.935.1.1.1.4.2.2',
  upsSmartOutputLoad => '1.3.6.1.4.1.935.1.1.1.4.2.3',
  upsConfigp => '1.3.6.1.4.1.935.1.1.1.5',
  upsBaseConfig => '1.3.6.1.4.1.935.1.1.1.5.1',
  upsBaseConfigNumDevices => '1.3.6.1.4.1.935.1.1.1.5.1.1',
  upsBaseConfigDeviceTable => '1.3.6.1.4.1.935.1.1.1.5.1.2',
  upsBaseConfigDeviceEntry => '1.3.6.1.4.1.935.1.1.1.5.1.2.1',
  indexOfDevice => '1.3.6.1.4.1.935.1.1.1.5.1.2.1.1',
  nameOfDevice => '1.3.6.1.4.1.935.1.1.1.5.1.2.1.2',
  vaRatingOfDevice => '1.3.6.1.4.1.935.1.1.1.5.1.2.1.3',
  deviceAccept => '1.3.6.1.4.1.935.1.1.1.5.1.2.1.4',
  deviceAcceptDefinition => {
    1 => 'yes',
    2 => 'no',
  },
  upsSmartConfig => '1.3.6.1.4.1.935.1.1.1.5.2',
  upsSmartConfigRatedOutputVoltage => '1.3.6.1.4.1.935.1.1.1.5.2.1',
  upsSmartConfigHighTransferVolt => '1.3.6.1.4.1.935.1.1.1.5.2.2',
  upsSmartConfigLowTransferVolt => '1.3.6.1.4.1.935.1.1.1.5.2.3',
  upsSmartConfigAlarm => '1.3.6.1.4.1.935.1.1.1.5.2.4',
  upsSmartConfigAlarmDefinition => {
    1 => 'timed',
    3 => 'never',
    2 => 'atLowBattery',
  },
  upsSmartConfigAlarmTimer => '1.3.6.1.4.1.935.1.1.1.5.2.5',
  upsSmartConfigMinReturnCapacity => '1.3.6.1.4.1.935.1.1.1.5.2.6',
  upsSmartConfigSensitivity => '1.3.6.1.4.1.935.1.1.1.5.2.7',
  upsSmartConfigSensitivityDefinition => {
    4 => 'high',
    1 => 'auto',
    3 => 'medium',
    2 => 'low',
  },
  upsSmartConfigLowBatteryRunTime => '1.3.6.1.4.1.935.1.1.1.5.2.8',
  upsSmartConfigReturnDelay => '1.3.6.1.4.1.935.1.1.1.5.2.9',
  upsSmartConfigShutoffDelay => '1.3.6.1.4.1.935.1.1.1.5.2.10',
  upsSmartConfigUpsSleepTime => '1.3.6.1.4.1.935.1.1.1.5.2.11',
  upsSmartConfigSetEEPROMDefaults => '1.3.6.1.4.1.935.1.1.1.5.2.12',
  upsSmartConfigSetEEPROMDefaultsDefinition => {
    2 => 'setEEPROMDefaults',
    1 => 'noSetEEPROMDefaults',
  },
  upsControlp => '1.3.6.1.4.1.935.1.1.1.6',
  upsBaseControl => '1.3.6.1.4.1.935.1.1.1.6.1',
  upsBaseControlConserveBattery => '1.3.6.1.4.1.935.1.1.1.6.1.1',
  upsBaseControlConserveBatteryDefinition => {
    2 => 'turnUpsOffToConserveBattery',
    3 => 'turnUpsOffToConserveBatteryDelay',
    1 => 'noTurnOffUps',
  },
  upsSmartControl => '1.3.6.1.4.1.935.1.1.1.6.2',
  upsSmartControlUpsOff => '1.3.6.1.4.1.935.1.1.1.6.2.1',
  upsSmartControlUpsOffDefinition => {
    2 => 'turnUpsOff',
    1 => 'noTurnUpsOff',
  },
  upsSmartControlRebootUps => '1.3.6.1.4.1.935.1.1.1.6.2.2',
  upsSmartControlRebootUpsDefinition => {
    2 => 'rebootUps',
    1 => 'noRebootUps',
  },
  upsSmartControlUpsSleep => '1.3.6.1.4.1.935.1.1.1.6.2.3',
  upsSmartControlUpsSleepDefinition => {
    1 => 'noPutUpsToSleep',
    2 => 'putUpsToSleep',
  },
  upsSmartControlSimulatePowerFail => '1.3.6.1.4.1.935.1.1.1.6.2.4',
  upsSmartControlSimulatePowerFailDefinition => {
    2 => 'simulatePowerFailure',
    1 => 'noSimulatePowerFailure',
  },
  upsSmartControlFlashAndBeep => '1.3.6.1.4.1.935.1.1.1.6.2.5',
  upsSmartControlFlashAndBeepDefinition => {
    2 => 'flashAndBeep',
    1 => 'noFlashAndBeep',
  },
  upsSmartControlTurnOnUpsLoad => '1.3.6.1.4.1.935.1.1.1.6.2.6',
  upsSmartControlTurnOnUpsLoadDefinition => {
    2 => 'upsSmartControlTurnOnUpsLoad',
    1 => 'noUpsSmartControlTurnOnUpsLoad',
  },
  upsTestp => '1.3.6.1.4.1.935.1.1.1.7',
  upsBaseTest => '1.3.6.1.4.1.935.1.1.1.7.1',
  upsSmartTest => '1.3.6.1.4.1.935.1.1.1.7.2',
  upsSmartTestDiagnosticSchedule => '1.3.6.1.4.1.935.1.1.1.7.2.1',
  upsSmartTestDiagnosticScheduleDefinition => {
    3 => 'weekly',
    1 => 'unknown',
    2 => 'biweekly',
    4 => 'never',
  },
  upsSmartTestDiagnostics => '1.3.6.1.4.1.935.1.1.1.7.2.2',
  upsSmartTestDiagnosticsDefinition => {
    2 => 'testDiagnostics',
    1 => 'noTestDiagnostics',
  },
  upsSmartTestDiagnosticsResults => '1.3.6.1.4.1.935.1.1.1.7.2.3',
  upsSmartTestDiagnosticsResultsDefinition => {
    1 => 'ok',
    3 => 'invalidTest',
    4 => 'testInProgress',
    2 => 'failed',
  },
  upsSmartTestLastDiagnosticsDate => '1.3.6.1.4.1.935.1.1.1.7.2.4',
  upsSmartTestIndicators => '1.3.6.1.4.1.935.1.1.1.7.2.5',
  upsSmartTestIndicatorsDefinition => {
    2 => 'testIndicators',
    1 => 'noTestIndicators',
  },
  upsSmartTestRuntimeCalibration => '1.3.6.1.4.1.935.1.1.1.7.2.6',
  upsSmartTestRuntimeCalibrationDefinition => {
    1 => 'noPerformCalibration',
    2 => 'performCalibration',
    3 => 'cancelCurrentCalibration',
  },
  upsSmartTestCalibrationResults => '1.3.6.1.4.1.935.1.1.1.7.2.7',
  upsSmartTestCalibrationResultsDefinition => {
    3 => 'calibrationInProgress',
    1 => 'ok',
    2 => 'invalidTest',
  },
  upsSmartTestCalibrationDate => '1.3.6.1.4.1.935.1.1.1.7.2.8',
  upsThreePhase => '1.3.6.1.4.1.935.1.1.1.8',
  upsThreePhaseBatteryGrp => '1.3.6.1.4.1.935.1.1.1.8.1',
  upsThreePhaseBatteryVoltage => '1.3.6.1.4.1.935.1.1.1.8.1.1',
  upsThreePhaseBatteryCapacityPercentage => '1.3.6.1.4.1.935.1.1.1.8.1.2',
  upsThreePhaseBatteryTimeRemain => '1.3.6.1.4.1.935.1.1.1.8.1.3',
  upsThreePhaseBatteryCurrent => '1.3.6.1.4.1.935.1.1.1.8.1.4',
  upsThreePhaseBatteryTemperature => '1.3.6.1.4.1.935.1.1.1.8.1.5',
  upsThreePhaseInputGrp => '1.3.6.1.4.1.935.1.1.1.8.2',
  upsThreePhaseInputFrequency => '1.3.6.1.4.1.935.1.1.1.8.2.1',
  upsThreePhaseInputVoltageR => '1.3.6.1.4.1.935.1.1.1.8.2.2',
  upsThreePhaseInputVoltageS => '1.3.6.1.4.1.935.1.1.1.8.2.3',
  upsThreePhaseInputVoltageT => '1.3.6.1.4.1.935.1.1.1.8.2.4',
  upsThreePhaseOutputGrp => '1.3.6.1.4.1.935.1.1.1.8.3',
  upsThreePhaseOutputFrequency => '1.3.6.1.4.1.935.1.1.1.8.3.1',
  upsThreePhaseOutputVoltageR => '1.3.6.1.4.1.935.1.1.1.8.3.2',
  upsThreePhaseOutputVoltageS => '1.3.6.1.4.1.935.1.1.1.8.3.3',
  upsThreePhaseOutputVoltageT => '1.3.6.1.4.1.935.1.1.1.8.3.4',
  upsThreePhaseOutputLoadPercentageR => '1.3.6.1.4.1.935.1.1.1.8.3.5',
  upsThreePhaseOutputLoadPercentageS => '1.3.6.1.4.1.935.1.1.1.8.3.6',
  upsThreePhaseOutputLoadPercentageT => '1.3.6.1.4.1.935.1.1.1.8.3.7',
  upsThreePhaseBypassGrp => '1.3.6.1.4.1.935.1.1.1.8.4',
  upsThreePhaseBypassSourceFrequency => '1.3.6.1.4.1.935.1.1.1.8.4.1',
  upsThreePhaseBypssSourceVoltageR => '1.3.6.1.4.1.935.1.1.1.8.4.2',
  upsThreePhaseBypssSourceVoltageS => '1.3.6.1.4.1.935.1.1.1.8.4.3',
  upsThreePhaseBypssSourceVoltageT => '1.3.6.1.4.1.935.1.1.1.8.4.4',
  upsThreePhaseDCandRectifierStatusGrp => '1.3.6.1.4.1.935.1.1.1.8.5',
  upsThreePhaseDCandRectifierStatusRecRotError => '1.3.6.1.4.1.935.1.1.1.8.5.1',
  upsThreePhaseDCandRectifierStatusRecRotErrorDefinition => {
    14 => 'yes',
    16 => 'no',
  },
  upsThreePhaseDCandRectifierStatusLowBatteryShutdown => '1.3.6.1.4.1.935.1.1.1.8.5.2',
  upsThreePhaseDCandRectifierStatusLowBatteryShutdownDefinition => {
    14 => 'yes',
    16 => 'no',
  },
  upsThreePhaseDCandRectifierStatusLowBattery => '1.3.6.1.4.1.935.1.1.1.8.5.3',
  upsThreePhaseDCandRectifierStatusLowBatteryDefinition => {
    14 => 'yes',
    16 => 'no',
  },
  upsThreePhaseDCandRectifierStatusInAndOut => '1.3.6.1.4.1.935.1.1.1.8.5.4',
  upsThreePhaseDCandRectifierStatusInAndOutDefinition => {
    3 => 'threeInThreeOut',
    2 => 'threeInOneOut',
  },
  upsThreePhaseDCandRectifierStatusBatteryStatus => '1.3.6.1.4.1.935.1.1.1.8.5.5',
  upsThreePhaseDCandRectifierStatusBatteryStatusDefinition => {
    5 => 'acnormal',
    4 => 'backup',
  },
  upsThreePhaseDCandRectifierStatusChargeStatus => '1.3.6.1.4.1.935.1.1.1.8.5.6',
  upsThreePhaseDCandRectifierStatusChargeStatusDefinition => {
    7 => 'float',
    6 => 'boost',
    16 => 'no',
  },
  upsThreePhaseDCandRectifierStatusRecOperating => '1.3.6.1.4.1.935.1.1.1.8.5.7',
  upsThreePhaseDCandRectifierStatusRecOperatingDefinition => {
    14 => 'yes',
    16 => 'no',
  },
  upsThreePhaseUPSStatusGrp => '1.3.6.1.4.1.935.1.1.1.8.6',
  upsThreePhaseUPSStatusBypassFreqFail => '1.3.6.1.4.1.935.1.1.1.8.6.1',
  upsThreePhaseUPSStatusBypassFreqFailDefinition => {
    14 => 'yes',
    16 => 'no',
  },
  upsThreePhaseUPSStatusManualBypassBreaker => '1.3.6.1.4.1.935.1.1.1.8.6.2',
  upsThreePhaseUPSStatusManualBypassBreakerDefinition => {
    9 => 'open',
    8 => 'close',
  },
  upsThreePhaseUPSStatusACStatus => '1.3.6.1.4.1.935.1.1.1.8.6.3',
  upsThreePhaseUPSStatusACStatusDefinition => {
    10 => 'normal',
    11 => 'abnormal',
  },
  upsThreePhaseUPSStaticSwitchMode => '1.3.6.1.4.1.935.1.1.1.8.6.4',
  upsThreePhaseUPSStaticSwitchModeDefinition => {
    13 => 'bypassmode',
    12 => 'invermode',
  },
  upsThreePhaseUPSStatusInverterOperating => '1.3.6.1.4.1.935.1.1.1.8.6.5',
  upsThreePhaseUPSStatusInverterOperatingDefinition => {
    14 => 'yes',
    16 => 'no',
  },
  upsThreePhaseFaultStatusGrp => '1.3.6.1.4.1.935.1.1.1.8.7',
  upsThreePhaseFaultStatusEmergencyStop => '1.3.6.1.4.1.935.1.1.1.8.7.1',
  upsThreePhaseFaultStatusEmergencyStopDefinition => {
    14 => 'yes',
    16 => 'no',
  },
  upsThreePhaseFaultStatusHighDCShutdown => '1.3.6.1.4.1.935.1.1.1.8.7.2',
  upsThreePhaseFaultStatusHighDCShutdownDefinition => {
    14 => 'yes',
    16 => 'no',
  },
  upsThreePhaseFaultStatusBypassBreaker => '1.3.6.1.4.1.935.1.1.1.8.7.3',
  upsThreePhaseFaultStatusBypassBreakerDefinition => {
    14 => 'yes',
    16 => 'no',
  },
  upsThreePhaseFaultStatusOverLoad => '1.3.6.1.4.1.935.1.1.1.8.7.4',
  upsThreePhaseFaultStatusOverLoadDefinition => {
    14 => 'yes',
    16 => 'no',
  },
  upsThreePhaseFaultStatusInverterOutputFail => '1.3.6.1.4.1.935.1.1.1.8.7.5',
  upsThreePhaseFaultStatusInverterOutputFailDefinition => {
    14 => 'yes',
    16 => 'no',
  },
  upsThreePhaseFaultStatusOverTemperature => '1.3.6.1.4.1.935.1.1.1.8.7.6',
  upsThreePhaseFaultStatusOverTemperatureDefinition => {
    14 => 'yes',
    16 => 'no',
  },
  upsThreePhaseFaultStatusShortCircuit => '1.3.6.1.4.1.935.1.1.1.8.7.7',
  upsThreePhaseFaultStatusShortCircuitDefinition => {
    14 => 'yes',
    16 => 'no',
  },
  upsThreePhaseRatingGrp => '1.3.6.1.4.1.935.1.1.1.8.8',
  upsThreePhaseRatingRectifierVoltage => '1.3.6.1.4.1.935.1.1.1.8.8.1',
  upsThreePhaseRatingRectifierFrequency => '1.3.6.1.4.1.935.1.1.1.8.8.2',
  upsThreePhaseRatingBypassVoltage => '1.3.6.1.4.1.935.1.1.1.8.8.3',
  upsThreePhaseRatingBypassFrequency => '1.3.6.1.4.1.935.1.1.1.8.8.4',
  upsThreePhaseRatingOutputVoltage => '1.3.6.1.4.1.935.1.1.1.8.8.5',
  upsThreePhaseRatingOutputFrequency => '1.3.6.1.4.1.935.1.1.1.8.8.6',
  upsThreePhaseRatingBatteryVoltage => '1.3.6.1.4.1.935.1.1.1.8.8.7',
  upsThreePhaseRatingPower => '1.3.6.1.4.1.935.1.1.1.8.8.8',
  upsEnvironment => '1.3.6.1.4.1.935.1.1.1.9',
  upsEnvStatus => '1.3.6.1.4.1.935.1.1.1.9.1',
  upsEnvTemperature => '1.3.6.1.4.1.935.1.1.1.9.1.1',
  upsEnvHumidity => '1.3.6.1.4.1.935.1.1.1.9.1.2',
  upsEnvWater => '1.3.6.1.4.1.935.1.1.1.9.1.3',
  upsEnvWaterDefinition => {
    1 => 'normal',
    2 => 'abnormal',
  },
  upsEnvSmoke => '1.3.6.1.4.1.935.1.1.1.9.1.4',
  upsEnvSmokeDefinition => {
    1 => 'normal',
    2 => 'abnormal',
  },
  upsEnvSecurity1 => '1.3.6.1.4.1.935.1.1.1.9.1.5',
  upsEnvSecurity1Definition => {
    1 => 'normal',
    2 => 'abnormal',
  },
  upsEnvSecurity2 => '1.3.6.1.4.1.935.1.1.1.9.1.6',
  upsEnvSecurity2Definition => {
    1 => 'normal',
    2 => 'abnormal',
  },
  upsEnvSecurity3 => '1.3.6.1.4.1.935.1.1.1.9.1.7',
  upsEnvSecurity3Definition => {
    1 => 'normal',
    2 => 'abnormal',
  },
  upsEnvSecurity4 => '1.3.6.1.4.1.935.1.1.1.9.1.8',
  upsEnvSecurity4Definition => {
    1 => 'normal',
    2 => 'abnormal',
  },
  upsEnvSecurity5 => '1.3.6.1.4.1.935.1.1.1.9.1.9',
  upsEnvSecurity5Definition => {
    1 => 'normal',
    2 => 'abnormal',
  },
  upsEnvSecurity6 => '1.3.6.1.4.1.935.1.1.1.9.1.10',
  upsEnvSecurity6Definition => {
    1 => 'normal',
    2 => 'abnormal',
  },
  upsEnvSecurity7 => '1.3.6.1.4.1.935.1.1.1.9.1.11',
  upsEnvSecurity7Definition => {
    1 => 'normal',
    2 => 'abnormal',
  },
  upsEnvSetting => '1.3.6.1.4.1.935.1.1.1.9.2',
  upsEnvOverTemperature => '1.3.6.1.4.1.935.1.1.1.9.2.1',
  upsEnvUnderTemperature => '1.3.6.1.4.1.935.1.1.1.9.2.2',
  upsEnvOverHumidity => '1.3.6.1.4.1.935.1.1.1.9.2.3',
  upsEnvUnderHumidity => '1.3.6.1.4.1.935.1.1.1.9.2.4',
  ppcmgmt => '1.3.6.1.4.1.935.2',
  mconfig => '1.3.6.1.4.1.935.2.1',
  mconfigTrapsReceiversNum => '1.3.6.1.4.1.935.2.1.1',
  mconfigTrapsReceiversTable => '1.3.6.1.4.1.935.2.1.2',
  mconfigTrapsReceiversEntry => '1.3.6.1.4.1.935.2.1.2.1',
  trapsIndex => '1.3.6.1.4.1.935.2.1.2.1.1',
  trapsReceiverAddr => '1.3.6.1.4.1.935.2.1.2.1.2',
  receiverCommunityString => '1.3.6.1.4.1.935.2.1.2.1.3',
  severityLevel => '1.3.6.1.4.1.935.2.1.2.1.4',
  severityLevelDefinition => {
    3 => 'severe',
    2 => 'warning',
    1 => 'information',
  },
  receiverAccept => '1.3.6.1.4.1.935.2.1.2.1.5',
  receiverAcceptDefinition => {
    1 => 'yes',
    2 => 'no',
  },
};



package Monitoring::GLPlugin::SNMP::MibsAndOids::XUPSMIB;

$Monitoring::GLPlugin::SNMP::MibsAndOids::origin->{'XUPS-MIB'} = {
  url => "",
  name => "XUPS-MIB-MIB",
};

$Monitoring::GLPlugin::SNMP::MibsAndOids::mib_ids->{'XUPS-MIB'} =
  '1.3.6.1.4.1.534.1';

$Monitoring::GLPlugin::SNMP::MibsAndOids::mibs_and_oids->{'XUPS-MIB'} = {
  exide => '1.3.6.1.4.1.534',
  xups => '1.3.6.1.4.1.534.1',
  xupsIdent => '1.3.6.1.4.1.534.1.1',
  xupsBattery => '1.3.6.1.4.1.534.1.2',
  xupsInput => '1.3.6.1.4.1.534.1.3',
  xupsOutput => '1.3.6.1.4.1.534.1.4',
  xupsBypass => '1.3.6.1.4.1.534.1.5',
  xupsEnvironment => '1.3.6.1.4.1.534.1.6',
  xupsAlarm => '1.3.6.1.4.1.534.1.7',
  xupsTest => '1.3.6.1.4.1.534.1.8',
  xupsControl => '1.3.6.1.4.1.534.1.9',
  xupsConfig => '1.3.6.1.4.1.534.1.10',
  xupsTrapControl => '1.3.6.1.4.1.534.1.11',
  xupsObjectId => '1.3.6.1.4.1.534.2',
  powerwareEthernetSnmpAdapter => '1.3.6.1.4.1.534.2.1',
  powerwareNetworkSnmpAdapterEther => '1.3.6.1.4.1.534.2.2',
  powerwareNetworkSnmpAdapterToken => '1.3.6.1.4.1.534.2.3',
  onlinetDaemon => '1.3.6.1.4.1.534.2.4',
  connectUPSAdapterEthernet => '1.3.6.1.4.1.534.2.5',
  powerwareNetworkDigitalIOEther => '1.3.6.1.4.1.534.2.6',
  connectUPSAdapterTokenRing => '1.3.6.1.4.1.534.2.7',
  xupsIdent => '1.3.6.1.4.1.534.1.1',
  xupsIdentManufacturer => '1.3.6.1.4.1.534.1.1.1.0',
  xupsIdentModel => '1.3.6.1.4.1.534.1.1.2.0',
  xupsIdentSoftwareVersion => '1.3.6.1.4.1.534.1.1.3.0',
  xupsBattery => '1.3.6.1.4.1.534.1.2',
  xupsBatTimeRemaining => '1.3.6.1.4.1.534.1.2.1.0',
  xupsBatVoltage => '1.3.6.1.4.1.534.1.2.2.0',
  xupsBatCurrent => '1.3.6.1.4.1.534.1.2.3.0',
  xupsBatCapacity => '1.3.6.1.4.1.534.1.2.4.0',
  xupsInput => '1.3.6.1.4.1.534.1.3',
  xupsInputFrequency => '1.3.6.1.4.1.534.1.3.1.0',
  xupsInputLineBads => '1.3.6.1.4.1.534.1.3.2.0',
  xupsInputNumPhases => '1.3.6.1.4.1.534.1.3.3.0',
  xupsInputTable => '1.3.6.1.4.1.534.1.3.4',
  xupsInputEntry => '1.3.6.1.4.1.534.1.3.4.1',
  xupsInputPhase => '1.3.6.1.4.1.534.1.3.4.1.1',
  xupsInputVoltage => '1.3.6.1.4.1.534.1.3.4.1.2',
  xupsInputCurrent => '1.3.6.1.4.1.534.1.3.4.1.3',
  xupsInputWatts => '1.3.6.1.4.1.534.1.3.4.1.4',
  xupsOutput => '1.3.6.1.4.1.534.1.4',
  xupsOutputLoad => '1.3.6.1.4.1.534.1.4.1.0',
  xupsOutputFrequency => '1.3.6.1.4.1.534.1.4.2.0',
  xupsOutputNumPhases => '1.3.6.1.4.1.534.1.4.3.0',
  xupsOutputTable => '1.3.6.1.4.1.534.1.4.4',
  xupsOutputEntry => '1.3.6.1.4.1.534.1.4.4.1',
  xupsOutputPhase => '1.3.6.1.4.1.534.1.4.4.1.1',
  xupsOutputVoltage => '1.3.6.1.4.1.534.1.4.4.1.2',
  xupsOutputCurrent => '1.3.6.1.4.1.534.1.4.4.1.3',
  xupsOutputWatts => '1.3.6.1.4.1.534.1.4.4.1.4',
  xupsBypass => '1.3.6.1.4.1.534.1.5',
  xupsBypassFrequency => '1.3.6.1.4.1.534.1.5.1.0',
  xupsBypassNumPhases => '1.3.6.1.4.1.534.1.5.2.0',
  xupsBypassTable => '1.3.6.1.4.1.534.1.5.3',
  xupsBypassEntry => '1.3.6.1.4.1.534.1.5.3.1',
  xupsBypassPhase => '1.3.6.1.4.1.534.1.5.3.1.1',
  xupsBypassVoltage => '1.3.6.1.4.1.534.1.5.3.1.2',
  xupsAlarm => '1.3.6.1.4.1.534.1.7',
  xupsAlarms => '1.3.6.1.4.1.534.1.7.1',
  xupsAlarmTable => '1.3.6.1.4.1.534.1.7.2',
  xupsAlarmEntry => '1.3.6.1.4.1.534.1.7.2.1',
  xupsAlarmID => '1.3.6.1.4.1.534.1.7.2.1.1',
  xupsAlarmDescr => '1.3.6.1.4.1.534.1.7.2.1.2',
  xupsAlarmDescrDefinition => 'OID::XUPS-MIB-MIB',
  xupsAlarmTime => '1.3.6.1.4.1.534.1.7.2.1.3',
  xupsOnBattery => '1.3.6.1.4.1.534.1.7.3',
  xupsLowBattery => '1.3.6.1.4.1.534.1.7.4',
  xupsUtilityPowerRestored => '1.3.6.1.4.1.534.1.7.5',
  xupsReturnFromLowBattery => '1.3.6.1.4.1.534.1.7.6',
  xupsOutputOverload => '1.3.6.1.4.1.534.1.7.7',
  xupsInternalFailure => '1.3.6.1.4.1.534.1.7.8',
  xupsBatteryDischarged => '1.3.6.1.4.1.534.1.7.9',
  xupsInverterFailure => '1.3.6.1.4.1.534.1.7.10',
  xupsOnBypass => '1.3.6.1.4.1.534.1.7.11',
  xupsBypassNotAvailable => '1.3.6.1.4.1.534.1.7.12',
  xupsOutputOff => '1.3.6.1.4.1.534.1.7.13',
  xupsInputFailure => '1.3.6.1.4.1.534.1.7.14',
  xupsBuildingAlarm => '1.3.6.1.4.1.534.1.7.15',
  xupsShutdownImminent => '1.3.6.1.4.1.534.1.7.16',
  xupsOnInverter => '1.3.6.1.4.1.534.1.7.17',
  xupsAlarmNumEvents => '1.3.6.1.4.1.534.1.7.18.0',
  xupsAlarmEventTable => '1.3.6.1.4.1.534.1.7.19',
  xupsAlarmEventEntry => '1.3.6.1.4.1.534.1.7.19.1',
  xupsAlarmEventID => '1.3.6.1.4.1.534.1.7.19.1.1',
  xupsAlarmEventDateAndTime => '1.3.6.1.4.1.534.1.7.19.1.2',
  xupsAlarmEventKind => '1.3.6.1.4.1.534.1.7.19.1.3',
  xupsAlarmEventDescr => '1.3.6.1.4.1.534.1.7.19.1.4',
  xupsBreakerOpen => '1.3.6.1.4.1.534.1.7.20',
  xupsAlarmEntryAdded => '1.3.6.1.4.1.534.1.7.21',
  xupsAlarmEntryRemoved => '1.3.6.1.4.1.534.1.7.22',
  xupsAlarmBatteryBad => '1.3.6.1.4.1.534.1.7.23',
  xupsOutputOffAsRequested => '1.3.6.1.4.1.534.1.7.24',
  xupsDiagnosticTestFailed => '1.3.6.1.4.1.534.1.7.25',
  xupsCommunicationsLost => '1.3.6.1.4.1.534.1.7.26',
  xupsUpsShutdownPending => '1.3.6.1.4.1.534.1.7.27',
  xupsAlarmTestInProgress => '1.3.6.1.4.1.534.1.7.28',
  xupsAmbientTempBad => '1.3.6.1.4.1.534.1.7.29',
  xupsLossOfRedundancy => '1.3.6.1.4.1.534.1.7.30',
  xupsAlarmTempBad => '1.3.6.1.4.1.534.1.7.31',
  xupsAlarmChargerFailed => '1.3.6.1.4.1.534.1.7.32',
  xupsAlarmFanFailure => '1.3.6.1.4.1.534.1.7.33',
  xupsAlarmFuseFailure => '1.3.6.1.4.1.534.1.7.34',
  xupsPowerSwitchBad => '1.3.6.1.4.1.534.1.7.35',
  xupsModuleFailure => '1.3.6.1.4.1.534.1.7.36',
  xupsOnAlternatePowerSource => '1.3.6.1.4.1.534.1.7.37',
  xupsAltPowerNotAvailable => '1.3.6.1.4.1.534.1.7.38',
  xupsNoticeCondition => '1.3.6.1.4.1.534.1.7.39',
  xupsRemoteTempBad => '1.3.6.1.4.1.534.1.7.40',
  xupsRemoteHumidityBad => '1.3.6.1.4.1.534.1.7.41',
  xupsTest => '1.3.6.1.4.1.534.1.8',
  xupsTestBattery => '1.3.6.1.4.1.534.1.8.1.0',
  xupsTestBatteryStatus => '1.3.6.1.4.1.534.1.8.2.0',
  xupsTestBatteryStatusDefinition => {
    1 => 'unknown',
    2 => 'passed',
    3 => 'failed',
    4 => 'inProgress',
    5 => 'notSupported',
    6 => 'inhibited',
    7 => 'scheduled',
  },
  xupsControl => '1.3.6.1.4.1.534.1.9',
  xupsControlOutputOffDelay => '1.3.6.1.4.1.534.1.9.1.0',
  xupsControlOutputOnDelay => '1.3.6.1.4.1.534.1.9.2.0',
  xupsControlOutputOffTrapDelay => '1.3.6.1.4.1.534.1.9.3.0',
  xupsControlOutputOnTrapDelay => '1.3.6.1.4.1.534.1.9.4.0',
  xupsConfig => '1.3.6.1.4.1.534.1.10',
  xupsConfigOutputVoltage => '1.3.6.1.4.1.534.1.10.1.0',
  xupsConfigInputVoltage => '1.3.6.1.4.1.534.1.10.2.0',
  xupsConfigOutputWatts => '1.3.6.1.4.1.534.1.10.3.0',
  xupsConfigOutputFreq => '1.3.6.1.4.1.534.1.10.4.0',
  xupsConfigDateAndTime => '1.3.6.1.4.1.534.1.10.5.0',
  xupsTrapControl => '1.3.6.1.4.1.534.1.11',
  xupsMaxTrapLevel => '1.3.6.1.4.1.534.1.11.1.0',
  xupsSendTrapType => '1.3.6.1.4.1.534.1.11.2.0',
  xupsTrapMessage => '1.3.6.1.4.1.534.1.11.3.0',
  xupsNull => '1.3.6.1.4.1.534.1.0',
  xupsTrapBasic => '1.3.6.1.4.1.534.1.0.0',
  xupsTrapSource => '1.3.6.1.4.1.534.1.11.4',
  xupsTrapDefined => '1.3.6.1.4.1.534.1.11.4.1',
  xupsTrapPortN => '1.3.6.1.4.1.534.1.11.4.2',
};



package Classes::APC::Powermib::UPS::Components::EnvironmentalSubsystem;
our @ISA = qw(Classes::APC::Powermib);
use strict;
use POSIX qw(mktime);

sub new {
  my $class = shift;
  my $self = {};
  bless $self, $class;
  $self->init();
  return $self;
}

sub init {
  my $self = shift;
  # aufteilen in eigene packages: basic, advanced und smart
  # wenn adv keine tests hatte, dann upsBasicStateOutputState fragen
  $self->get_snmp_objects('PowerNet-MIB', (qw(
      upsBasicIdentModel 
      upsBasicOutputStatus upsBasicSystemStatus
      upsBasicSystemInternalTemperature
      upsBasicStateOutputState 
      upsAdvIdentDateOfManufacture upsAdvIdentSerialNumber
      upsAdvTestDiagnosticSchedule
      upsAdvTestDiagnosticsResults upsAdvTestLastDiagnosticsDate
      upsAdvStateAbnormalConditions
      upsAdvStateSymmetra3PhaseSpecificFaults
      upsAdvStateDP300ESpecificFaults
      upsAdvStateSymmetraSpecificFaults
      upsAdvStateSmartUPSSpecificFaults
      upsAdvStateSystemMessages
  )));
  eval {
    die if ! $self->{upsAdvTestLastDiagnosticsDate};
    $self->{upsAdvTestLastDiagnosticsDate} =~ /(\d+)\/(\d+)\/(\d+)/ || die;
    $self->{upsAdvTestLastDiagnosticsDate} = mktime(0, 0, 0, $2, $1 - 1, $3 - 1900);
    $self->{upsAdvTestLastDiagnosticsAge} = (time - $self->{upsAdvTestLastDiagnosticsDate}) / (3600 * 24);
  };
  if ($@) {
    $self->{upsAdvTestLastDiagnosticsDate} = 0;
  }
}

sub check {
  my $self = shift;
  my $info = undef;
  $self->add_info('checking hardware and self-tests');
  if (defined $self->{upsBasicStateOutputState}) {
    my @bits = split(//, $self->{upsBasicStateOutputState});
    if (scalar(@bits) == 64) {
      $self->add_unknown('status unknown');
    } else {
      $self->add_ok('On Line') if $bits[4];
      #$self->add_ok('Serial Communication Established') if $bits[6];
      #$self->add_ok('On') if $bits[19];
      $self->add_warning('Abnormal Condition Present') if $bits[1];
      $self->add_warning('Electronic Unit Fan Failure') if $bits[41];
      $self->add_warning('Main Relay Failure') if $bits[42];
      $self->add_warning('Bypass Relay Failure') if $bits[43];
      $self->add_warning('High Internal Temperature') if $bits[45];
      $self->add_warning('Battery Temperature Sensor Fault') if $bits[46];
      $self->add_warning('PFC Failure') if $bits[49];
      $self->add_critical('Critical Hardware Fault') if $bits[50];
      $self->add_critical('Emergency Power Off (EPO) Activated') if $bits[53];
      $self->add_warning('UPS Internal Communication Failure') if $bits[56];
    }
  }
  if ($self->{upsAdvTestLastDiagnosticsDate}) {
    $self->add_info(sprintf 'selftest result was %s',
        $self->{upsAdvTestDiagnosticsResults});
    if ($self->{upsAdvTestDiagnosticsResults} ne 'ok') {
      $self->add_warning();
    } else {
      $self->add_ok();
    } 
    my $maxage = undef;
    if ($self->{upsAdvTestDiagnosticSchedule} eq 'never') {
      $maxage = 365;
    } elsif ($self->{upsAdvTestDiagnosticSchedule} eq 'biweekly') {
      $maxage = 14;
    } elsif ($self->{upsAdvTestDiagnosticSchedule} eq 'weekly') {
      $maxage = 7;
    } elsif ($self->{upsAdvTestDiagnosticSchedule} eq 'fourWeeks') {
      $maxage = 28;
    } elsif ($self->{upsAdvTestDiagnosticSchedule} eq 'twelveWeeks') {
      $maxage = 84;
    } elsif ($self->{upsAdvTestDiagnosticSchedule} eq 'biweeklySinceLastTest') {
      $maxage = 14;
    } elsif ($self->{upsAdvTestDiagnosticSchedule} eq 'weeklySinceLastTest') {
      $maxage = 7;
    }
    if (! defined $maxage && $self->{upsAdvTestDiagnosticSchedule} ne 'never') {
      $self->set_thresholds(
          metric => 'selftest_age', warning => '30', critical => '60');
    } else {
      $maxage *= 2; # got lots of alerts from my test devices
      $self->set_thresholds(
          metric => 'selftest_age', warning => $maxage, critical => $maxage);
    }
    $self->add_info(sprintf 'last selftest was %d days ago (%s)', $self->{upsAdvTestLastDiagnosticsAge}, scalar localtime $self->{upsAdvTestLastDiagnosticsDate});
    $self->add_message(
        $self->check_thresholds(
            value => $self->{upsAdvTestLastDiagnosticsAge},
            metric => 'selftest_age'));
    $self->add_perfdata(
        label => 'selftest_age',
        value => $self->{upsAdvTestLastDiagnosticsAge},
    );
  } else {
    $self->add_ok("hardware working fine, at least i hope so, because self-tests were never run") if ! $self->check_messages();
    $self->add_ok("self-tests were never run") if $self->check_messages();
  }
}

sub xdump {
  my $self = shift;
  printf "[HARDWARE]\n";
  foreach (qw(upsBasicIdentModel 
      upsAdvIdentDateOfManufacture upsAdvIdentSerialNumber
      upsAdvTestDiagnosticSchedule
      upsAdvTestDiagnosticsResults upsAdvTestLastDiagnosticsDate)) {
    printf "%s: %s\n", $_, $self->{$_} if defined $self->{$_};
    printf "%s: %s\n", $_, scalar localtime $self->{$_} if (defined $self->{$_} && $_ =~ /Date$/);
  }
  printf "info: %s\n", $self->{info};
  printf "\n";
}

package Classes::APC::Powermib::UPS::Components::EnvironmentalSubsystem::Simple;
our @ISA = qw(Classes::APC::Powermib);
use strict;

package Classes::APC::Powermib::UPS::Components::EnvironmentalSubsystem::Advanced;
our @ISA = qw(Classes::APC::Powermib);
use strict;

package Classes::APC::Powermib::UPS::Components::BatterySubsystem;
our @ISA = qw(Classes::APC::Powermib);
use strict;

sub new {
  my $class = shift;
  my $self = {};
  bless $self, $class;
  $self->init();
  return $self;
}

sub init {
  my $self = shift;
  $self->get_snmp_objects('PowerNet-MIB', (qw(
      upsBasicBatteryStatus upsAdvBatteryCapacity 
      upsAdvBatteryReplaceIndicator upsAdvBatteryTemperature 
      upsAdvBatteryRunTimeRemaining 
      upsAdvInputLineVoltage upsAdvInputFrequency 
      upsAdvInputMaxLineVoltage upsAdvInputMinLineVoltage 
      upsAdvOutputVoltage upsAdvOutputFrequency 
      upsBasicOutputStatus upsAdvOutputLoad upsAdvOutputCurrent
      upsHighPrecOutputLoad  
      upsAdvInputLineFailCause)));
  $self->{upsAdvBatteryRunTimeRemaining} = $self->{upsAdvBatteryRunTimeRemaining} / 6000;
  # beobachtet bei Smart-Classes RT 1000 RM XL, da gab's nur
  # upsAdvOutputVoltage und upsAdvOutputFrequency
  $self->{upsAdvOutputLoad} = 
      ! defined $self->{upsAdvOutputLoad} || $self->{upsAdvOutputLoad} eq '' ?
      $self->{upsHighPrecOutputLoad} / 10 : $self->{upsAdvOutputLoad};
  # wer keine Angaben macht, gilt als gesund.
  $self->{upsBasicBatteryStatus} ||= 'batteryNormal';
}

sub check {
  my $self = shift;
  $self->add_info('checking battery');
  $self->add_info(sprintf 'battery status is %s',
      $self->{upsBasicBatteryStatus});
  if ($self->{upsBasicBatteryStatus} ne 'batteryNormal') {
    $self->add_critical();
  } else {
    $self->add_ok();
  } 
  if ($self->{upsAdvBatteryReplaceIndicator} && $self->{upsAdvBatteryReplaceIndicator} eq 'batteryNeedsReplacing') {
    $self->add_critical('battery needs replacing');
  }
  if ($self->{upsBasicOutputStatus} && # kann auch undef sein (10kv z.b.)
      $self->{upsBasicOutputStatus} ne 'onLine') {
    $self->add_warning(sprintf 'output status is %s',
        $self->{upsBasicOutputStatus});
    $self->add_warning(sprintf 'caused by %s',
        $self->{upsAdvInputLineFailCause});
  }

  $self->set_thresholds(
      metric => 'capacity', warning => '25:', critical => '10:');
  $self->add_info(sprintf 'capacity is %.2f%%', $self->{upsAdvBatteryCapacity});
  $self->add_message(
      $self->check_thresholds(
          value => $self->{upsAdvBatteryCapacity},
          metric => 'capacity'));
  $self->add_perfdata(
      label => 'capacity',
      value => $self->{upsAdvBatteryCapacity},
      uom => '%',
  );

  $self->set_thresholds(
      metric => 'output_load', warning => '75', critical => '85');
  $self->add_info(sprintf 'output load %.2f%%', $self->{upsAdvOutputLoad});
  $self->add_message(
      $self->check_thresholds(
          value => $self->{upsAdvOutputLoad},
          metric => 'output_load'));
  $self->add_perfdata(
      label => 'output_load',
      value => $self->{upsAdvOutputLoad},
      uom => '%',
  );

  $self->set_thresholds(
      metric => 'battery_temperature', warning => '70', critical => '80');
  $self->add_info(sprintf 'temperature is %.2fC', $self->{upsAdvBatteryTemperature});
  $self->add_message(
      $self->check_thresholds(
          value => $self->{upsAdvBatteryTemperature},
          metric => 'battery_temperature'));
  $self->add_perfdata(
      label => 'battery_temperature',
      value => $self->{upsAdvBatteryTemperature},
  );

  $self->set_thresholds(
      metric => 'remaining_time', warning => '10:', critical => '8:');
  $self->add_info(sprintf 'remaining battery run time is %.2fmin', $self->{upsAdvBatteryRunTimeRemaining});
  $self->add_message(
      $self->check_thresholds(
          value => $self->{upsAdvBatteryRunTimeRemaining},
          metric => 'remaining_time'));
  $self->add_perfdata(
      label => 'remaining_time',
      value => $self->{upsAdvBatteryRunTimeRemaining},
  );

  if (defined $self->{upsAdvInputLineVoltage} && $self->{upsAdvInputLineVoltage} < 1 && $self->{upsAdvBatteryCapacity} < 90) {
    # upsAdvInputLineVoltage can be noTransfer after spikes or selftests.
    # this might be tolerable as long as the battery is full.
    # only when external voltage is needed this should raise an alarm
    # (< 100 is not enough, even under normal circumstances the capacity drops
    # below 100)
    $self->add_critical('input power outage');
    if ($self->{upsAdvInputLineFailCause}) {
      $self->add_critical($self->{upsAdvInputLineFailCause});
      if ($self->{upsAdvInputLineFailCause} eq 'noTransfer') {
        $self->add_critical('please repeat self-tests or reboot');
      }
    }
  }
  $self->add_perfdata(
      label => 'input_voltage',
      value => $self->{upsAdvInputLineVoltage},
  ) if defined $self->{upsAdvInputLineVoltage};
  $self->add_perfdata(
      label => 'input_frequency',
      value => $self->{upsAdvInputFrequency},
  ) if defined $self->{upsAdvInputFrequency};
  $self->add_perfdata(
      label => 'output_voltage',
      value => $self->{upsAdvOutputVoltage},
  ) if defined $self->{upsAdvOutputVoltage};;
  $self->add_perfdata(
      label => 'output_frequency',
      value => $self->{upsAdvOutputFrequency},
  ) if defined $self->{upsAdvOutputFrequency};
}

sub dump {
  my $self = shift;
  printf "[BATTERY]\n";
  foreach (qw(upsBasicBatteryStatus upsAdvBatteryCapacity 
      upsAdvBatteryReplaceIndicator upsAdvBatteryTemperature 
      upsAdvBatteryRunTimeRemaining 
      upsAdvInputLineVoltage upsAdvInputFrequency 
      upsAdvInputMaxLineVoltage upsAdvInputMinLineVoltage 
      upsAdvOutputVoltage upsAdvOutputFrequency 
      upsBasicOutputStatus upsAdvOutputLoad upsAdvOutputCurrent
      upsAdvInputLineFailCause)) { 
    printf "%s: %s\n", $_, $self->{$_} if defined $self->{$_};
  }
  printf "info: %s\n", $self->{info};
  printf "\n";
}
package Classes::APC::Powermib::UPS;
our @ISA = qw(Classes::APC::Powermib);
use strict;

sub init {
  my $self = shift;
  if ($self->mode =~ /device::battery/) {
    $self->analyze_and_check_battery_subsystem(ref($self).'::Components::BatterySubsystem');
  } elsif ($self->mode =~ /device::hardware/) {
    $self->analyze_and_check_environmental_subsystem(ref($self).'::Components::EnvironmentalSubsystem');
  } else {
    $self->no_such_mode();
  }
}

package Classes::APC::Powermib;
our @ISA = qw(Classes::APC);
use strict;

sub init {
  my $self = shift;
  if ($self->mode =~ /device::battery/) {
    $self->analyze_and_check_battery_subsystem(ref($self).'::Components::BatterySubsystem');
  } elsif ($self->mode =~ /device::hardware/) {
    $self->analyze_and_check_environmental_subsystem(ref($self).'::Components::EnvironmentalSubsystem');
  } else {
    $self->no_such_mode();
  }
}

package Classes::APC;
our @ISA = qw(Classes::Device);
use strict;
package Classes::Socomec::Netvision::Components::EnvironmentalSubsystem;
our @ISA = qw(Classes::Socomec::Netvision);
use strict;

sub new {
  my $class = shift;
  my $self = {};
  bless $self, $class;
  $self->init();
  return $self;
}

sub init {
  my $self = shift;
  $self->get_snmp_objects("Netvision-v6-MIB", (qw(
      upsIdentModel upsIdentClassesFirmwareVersion upsIdentUpsSerialNumber
      upsAlarmsPresent)));
  $self->get_snmp_tables("Netvision-v6-MIB", [
      ["alarms", "upsAlarmTable", "Classes::Socomec::Netvision::Components::EnvironmentalSubsystem::Alarm"],
  ]);
}

sub check {
  my $self = shift;
  $self->add_info('checking alarms');
  $self->add_info(sprintf 'found %d alarms', $self->{upsAlarmsPresent});
  if ($self->{upsAlarmsPresent}) {
    $self->add_critical();
  } else {
    $self->add_ok();
  } 

}

sub dump {
  my $self = shift;
  printf "[HARDWARE]\n";
  foreach (grep /^ups/, keys %{$self}) {
    printf "%s: %s\n", $_, $self->{$_};
  }
  printf "info: %s\n", $self->{info};
  printf "\n";
  foreach (@{$self->{alarms}}) {
    $_->dump();
  }
}


package Classes::Socomec::Netvision::Components::EnvironmentalSubsystem::Alarm;
our @ISA = qw(Monitoring::GLPlugin::SNMP::TableItem);
use strict;

sub check {
  my $self = shift;
  $self->add_info(sprintf '%s', $self->{upsAlarmDescr});
  $self->add_critical();
}

sub dump {
  my $self = shift;
  printf "[ALARM]\n";
  foreach (grep /^ups/, keys %{$self}) {
    printf "%s: %s\n", $_, $self->{$_};
  }
  printf "info: %s\n", $self->{info};
  printf "\n";
}

package Classes::Socomec::Netvision::Components::BatterySubsystem;
our @ISA = qw(Classes::Socomec::Netvision);
use strict;

sub new {
  my $class = shift;
  my $self = {};
  bless $self, $class;
  $self->init();
  return $self;
}

sub init {
  my $self = shift;
  $self->get_snmp_objects('Netvision-v6-MIB', (qw(
      upsBatteryStatus upsSecondsonBattery upsEstimatedMinutesRemaining
      upsEstimatedChargeRemaining upsBatteryVoltage upsBatteryTemperature
      upsInputFrequency upsOutputFrequency
      upsOutputSource upsTestResultsSummary upsTestResultsDetail
      upsControlStatusControl)));
  $self->{upsSecondsonBattery} ||= 0;
  $self->{upsBatteryVoltage} /= 10;
  $self->{upsInputFrequency} /= 10;
  $self->{upsOutputFrequency} /= 10;
  $self->get_snmp_tables('Netvision-v6-MIB', [
      ['inputs', 'upsInputTable', 'Classes::Socomec::Netvision::Components::BatterySubsystem::Input'],
      ['outputs', 'upsOutputTable', 'Classes::Socomec::Netvision::Components::BatterySubsystem::Output'],
      ['bypasses', 'upsBypassTable', 'Classes::Socomec::Netvision::Components::BatterySubsystem::Bypass'],
  ]);
  foreach ($self->get_snmp_table_objects('Netvision-v6-MIB', 'upsAlarmTable')) {
#printf "%s\n", Data::Dumper::Dumper($_);
##!!!!
  }
}

sub check {
  my $self = shift;
  $self->add_info('checking battery');
  $self->add_info(sprintf 'battery status is %s', $self->{upsBatteryStatus});
  if ($self->{upsBatteryStatus} ne 'batteryNormal') {
    $self->add_critical();
  } else {
    $self->add_ok();
  } 

  $self->set_thresholds(
      metric => 'capacity', warning => '25:', critical => '10:');
  $self->add_info(sprintf 'capacity is %.2f%%', $self->{upsEstimatedChargeRemaining});
  $self->add_message(
      $self->check_thresholds(
          value => $self->{upsEstimatedChargeRemaining},
          metric => 'capacity'));
  $self->add_perfdata(
      label => 'capacity',
      value => $self->{upsEstimatedChargeRemaining},
      uom => '%',
  );

  $self->set_thresholds(
      metric => 'battery_temperature', warning => '35', critical => '38');
  $self->add_info(sprintf 'temperature is %.2fC', $self->{upsBatteryTemperature});
  $self->add_message(
      $self->check_thresholds(
          value => $self->{upsBatteryTemperature},
          metric => 'battery_temperature'));
  $self->add_perfdata(
      label => 'battery_temperature',
      value => $self->{upsBatteryTemperature},
  );

  if ($self->{upsEstimatedMinutesRemaining} == -1) {
    $self->set_thresholds(
        metric => 'remaining_time', warning => '0', critical => '0');
    $self->add_info('battery run time is unknown');
  } else {
    $self->set_thresholds(
        metric => 'remaining_time', warning => '15:', critical => '10:');
    $self->add_info(sprintf 'remaining battery run time is %.2fmin', $self->{upsEstimatedMinutesRemaining});
    $self->add_message(
        $self->check_thresholds(
            value => $self->{upsEstimatedMinutesRemaining},
            metric => 'remaining_time'));
  }
  $self->add_perfdata(
      label => 'remaining_time',
      value => $self->{upsEstimatedMinutesRemaining},
  );

  $self->add_perfdata(
      label => 'input_frequency',
      value => $self->{upsInputFrequency},
  );

  foreach (@{$self->{inputs}}) {
    $_->check();
  }
  $self->add_perfdata(
      label => 'output_frequency',
      value => $self->{upsOutputFrequency},
  );

  foreach (@{$self->{outputs}}) {
    $_->check();
  }

}

sub dump {
  my $self = shift;
  printf "[BATTERY]\n";
  foreach (grep /^ups/, keys %{$self}) {
    printf "%s: %s\n", $_, $self->{$_};
  }
  printf "info: %s\n", $self->{info};
  printf "\n";
  foreach (@{$self->{inputs}}) {
    $_->dump();
  }
  foreach (@{$self->{outputs}}) {
    $_->dump();
  }
  foreach (@{$self->{bypasses}}) {
    $_->dump();
  }
}


package Classes::Socomec::Netvision::Components::BatterySubsystem::Input;
our @ISA = qw(Monitoring::GLPlugin::SNMP::TableItem);
use strict;


sub check {
  my $self = shift;
  $self->{upsInputVoltage} /= 10;
  $self->{upsInputVoltageMin} /= 10;
  $self->{upsInputVoltageMax} /= 10;
  $self->{upsInputCurrent} /= 10;
  $self->add_info(sprintf 'input%d voltage is %dV', $self->{upsInputLineIndex}, $self->{upsInputVoltage});
  if ($self->{upsInputVoltage} < 1) {
    $self->add_critical(sprintf 'input power%s outage', $self->{upsInputLineIndex});
  }
  $self->add_perfdata(
      label => 'input_voltage'.$self->{upsInputLineIndex},
      value => $self->{upsInputVoltage},
  );
}

sub dump {
  my $self = shift;
  printf "[INPUT]\n";
  foreach (grep /^ups/, keys %{$self}) {
    printf "%s: %s\n", $_, $self->{$_};
  }
  printf "info: %s\n", $self->{info};
  printf "\n";
}


package Classes::Socomec::Netvision::Components::BatterySubsystem::Output;
our @ISA = qw(Monitoring::GLPlugin::SNMP::TableItem);
use strict;


sub check {
  my $self = shift;
  $self->{upsOutputVoltage} /= 10;
  $self->{upsOutputCurrent} /= 10;
  $self->set_thresholds(
      metric => 'output_load'.$self->{upsOutputLineIndex}, warning => '75', critical => '85');
  $self->add_info(sprintf 'output load%d %.2f%%', $self->{upsOutputLineIndex}, $self->{upsOutputPercentLoad});
  $self->add_message(
      $self->check_thresholds(
          value => $self->{upsOutputPercentLoad},
          metric => 'output_load'.$self->{upsOutputLineIndex}));
  $self->add_perfdata(
      label => 'output_load'.$self->{upsOutputLineIndex},
      value => $self->{upsOutputPercentLoad},
      uom => '%',
  );

  $self->add_perfdata(
      label => 'output_voltage'.$self->{upsOutputLineIndex},
      value => $self->{upsOutputVoltage},
  );

}

sub dump {
  my $self = shift;
  printf "[OUTPUT]\n";
  foreach (grep /^ups/, keys %{$self}) {
    printf "%s: %s\n", $_, $self->{$_};
  }
  printf "info: %s\n", $self->{info};
  printf "\n";
}


package Classes::Socomec::Netvision::Components::BatterySubsystem::Bypass;
our @ISA = qw(Monitoring::GLPlugin::SNMP::TableItem);
use strict;


sub check {
  my $self = shift;
  $self->{upsBypassVoltage} /= 10;
  $self->add_info(sprintf 'bypass%d voltage is %dV', $self->{upsBypassLineIndex}, $self->{upsBypassVoltage});
}

sub dump {
  my $self = shift;
  printf "[BYPASS]\n";
  foreach (grep /^ups/, keys %{$self}) {
    printf "%s: %s\n", $_, $self->{$_};
  }
  printf "info: %s\n", $self->{info};
  printf "\n";
}


package Classes::Socomec::Netvision;
our @ISA = qw(Classes::Socomec);
use strict;

sub init {
  my $self = shift;
  if ($self->mode =~ /device::hardware::health/) {
    $self->analyze_and_check_environmental_subsystem('Classes::Socomec::Netvision::Components::EnvironmentalSubsystem');
  } elsif ($self->mode =~ /device::battery/) {
    $self->analyze_and_check_battery_subsystem('Classes::Socomec::Netvision::Components::BatterySubsystem');
  } else {
    $self->no_such_mode();
  }
}

package Classes::Socomec;
our @ISA = qw(Classes::Device);
use strict;

sub init {
  my $self = shift;
  if ($self->{productname} =~ /Net Vision/i) {
    bless $self, 'Classes::Socomec::Netvision';
    $self->debug('using Classes::Socomec::Netvision');
  } else {
    $self->no_such_model();
  }
  $self->init();
}

package Classes::UPS::Components::EnvironmentalSubsystem;
our @ISA = qw(Classes::UPS);
use strict;

sub new {
  my $class = shift;
  my $self = {};
  bless $self, $class;
  $self->init();
  return $self;
}

sub init {
  my $self = shift;
  $self->get_snmp_objects("UPS-MIB", qw(upsAlarmsPresent upsTestResultsSummary
      upsTestResultsDetail upsTestStartTime));
  $self->get_snmp_tables("UPS-MIB", [
      ["alarms", "upsAlarmTable", "Classes::UPS::Components::EnvironmentalSubsystem::Alarm"],
  ]);
}

sub check {
  my $self = shift;
  $self->add_info('checking alarms');
  foreach (@{$self->{alarms}}) {
    next if ! $_->{upsAlarmDescr}; # irgendwelche Blindgaenger sind auch moeglich, z.b. einer bei upsTestResultsSummary: noTestsInitiated
    $_->check();
  }
  if ($self->{upsTestStartTime}) {
    my $result = sprintf "test result from %s was %s", 
        scalar localtime time - $Monitoring::GLPlugin::SNMP::uptime + $self->{upsTestStartTime},
        $self->{upsTestResultsDetail} ? $self->{upsTestResultsDetail} : $self->{upsTestResultsSummary};
    if ($self->{upsTestResultsSummary} eq "doneWarning") {
      $self->add_warning($result);
    } elsif ($self->{upsTestResultsSummary} eq "doneError") {
      $self->add_critical($result);
    }
    my $last_test = $Monitoring::GLPlugin::SNMP::uptime - $self->{upsTestStartTime};
    my $days_ago = (time - $last_test) / (3600 * 24);
    $self->add_info(sprintf 'last selftest was %d days ago (%s)',
        $self->{upsAdvTestLastDiagnosticsAge}, scalar localtime $self->{upsAdvTestLastDiagnosticsDate});
    $self->add_message(
        $self->check_thresholds(
            value => $self->{upsAdvTestLastDiagnosticsAge},
            metric => 'selftest_age'));
    $self->add_perfdata(
        label => 'selftest_age',
        value => $self->{upsAdvTestLastDiagnosticsAge},
    );
  }

  if (! $self->check_messages()) {
    $self->add_ok("hardware working fine. no alarms");
  }
}

sub dump {
  my $self = shift;
  printf "[ALARMS]\n";
  foreach (grep /^ups/, keys %{$self}) {
    printf "%s: %s\n", $_, $self->{$_};
  }
  printf "info: %s\n", $self->{info};
  printf "\n";
  foreach (@{$self->{alarms}}) {
    $_->dump();
  }
}


package Classes::UPS::Components::EnvironmentalSubsystem::Alarm;
our @ISA = qw(Monitoring::GLPlugin::SNMP::TableItem);
use strict;

sub check {
  my $self = shift;
  foreach (qw(upsAlarmBatteryBad upsAlarmOnBattery upsAlarmLowBattery
      upsAlarmDepletedBattery upsAlarmTempBad upsAlarmInputBad
      upsAlarmOutputBad upsAlarmOutputOverload upsAlarmOnBypass
      upsAlarmBypassBad upsAlarmOutputOffAsRequested upsAlarmUpsOffAsRequested
      upsAlarmChargerFailed upsAlarmUpsOutputOff upsAlarmUpsSystemOff
      upsAlarmFanFailure upsAlarmFuseFailure upsAlarmGeneralFault
      upsAlarmDiagnosticTestFailed upsAlarmCommunicationsLost upsAlarmAwaitingPower
      upsAlarmShutdownPending upsAlarmShutdownImminent upsAlarmTestInProgress)) {
    if ($self->{upsAlarmDescr} eq  $Monitoring::GLPlugin::SNMP::MibsAndOids::mibs_and_oids->{"UPS-MIB"}->{$_}) {
      $self->{upsAlarmDescr} = $_;
    }
  }
  my $age = $Monitoring::GLPlugin::SNMP::uptime - $self->{upsAlarmTime};
  if ($age < 3600) {
    $self->add_critical(sprintf "alarm: %s (%d min ago)",
        $self->{upsAlarmDescr}, $age / 60);
  }
}
package Classes::UPS::Components::BatterySubsystem;
our @ISA = qw(Classes::UPS);
use strict;

sub new {
  my $class = shift;
  my $self = {};
  bless $self, $class;
  $self->init();
  return $self;
}

sub init {
  my $self = shift;
  $self->get_snmp_objects("UPS-MIB", qw(upsBatteryStatus upsSecondsOnBattery 
      upsEstimatedMinutesRemaining upsBatteryVoltage upsBatteryCurrent
      upsBatteryTemperature upsOutputFrequency));
  $self->get_snmp_tables("UPS-MIB", [
      ["inputs", "upsInputTable", "Classes::UPS::Components::BatterySubsystem::Input"],
      ["outputs", "upsOutputTable", "Classes::UPS::Components::BatterySubsystem::Output"],
  ]);
  # Une generex cs141 situé en france n'avait pas de upsBatteryCurrent
  # C'était en juin 2016. La grève dans les centrales nucléaires était
  # annoncé à ce temps là, peut-être il y avait une coupure de counrant.
  $self->{upsBatteryCurrent} = 0 if ! $self->{upsBatteryCurrent};
  $self->{upsBatteryVoltage} /= 10;
  $self->{upsBatteryCurrent} /= 10;
  $self->{upsOutputFrequency} /= 10;
  # bad firmware, no sensor? who knows...
  $self->{upsBatteryTemperature} = 0 if $self->{upsBatteryTemperature} == -50;
  # The same generex cs141 had inputs and outputs with only the index oid.
  # So these do not exist in reality.
  @{$self->{inputs}} = grep {
      exists $_->{upsInputVoltage} && exists $_->{upsInputFrequency};
  } @{$self->{inputs}};
  @{$self->{outputs}} = grep {
      exists $_->{upsOutputVoltage} && exists $_->{upsOutputPower};
  } @{$self->{outputs}};
}

sub check {
  my $self = shift;
  $self->add_info('checking battery');

  $self->set_thresholds(
      metric => 'battery_temperature', warning => '35', critical => '38');
  $self->add_info(sprintf 'temperature is %.2fC', $self->{upsBatteryTemperature});
  $self->add_message(
      $self->check_thresholds(
          value => $self->{upsBatteryTemperature},
          metric => 'battery_temperature'));
  $self->add_perfdata(
      label => 'battery_temperature',
      value => $self->{upsBatteryTemperature},
  );

  if ($self->{upsBaseBatteryTimeOnBattery}) {
    $self->set_thresholds(
        metric => 'remaining_time', warning => '15:', critical => '10:');
    $self->add_info(sprintf 'remaining battery run time is %.2fmin', $self->{upsEstimatedMinutesRemaining});
  } else {
    $self->set_thresholds(
        metric => 'remaining_time', warning => '0:', critical => '0:');
    $self->add_info('unit is not on battery power');
  }
  $self->add_message(
      $self->check_thresholds(
          value => $self->{upsEstimatedMinutesRemaining},
          metric => 'remaining_time'));
  $self->add_perfdata(
      label => 'remaining_time',
      value => $self->{upsEstimatedMinutesRemaining},
  );

  $self->add_perfdata(
      label => 'output_frequency',
      value => $self->{upsOutputFrequency},
  );

  foreach (@{$self->{inputs}}) {
    $_->check();
  }
  foreach (@{$self->{outputs}}) {
    $_->check();
  }

  if ($self->{upsBatteryStatus} && $self->{upsBatteryStatus} ne "batteryNormal") {
    $self->add_critical("battery has status: ".$self->{upsBatteryStatus});
  }
}

sub dump {
  my $self = shift;
  printf "[BATTERY]\n";
  foreach (grep /^ups/, keys %{$self}) {
    printf "%s: %s\n", $_, $self->{$_};
  }
  printf "info: %s\n", $self->{info};
  printf "\n";
  foreach (@{$self->{inputs}}) {
    $_->dump();
  }
  foreach (@{$self->{outputs}}) {
    $_->dump();
  }
}


package Classes::UPS::Components::BatterySubsystem::Input;
our @ISA = qw(Monitoring::GLPlugin::SNMP::TableItem);
use strict;

sub check {
  my $self = shift;
  $self->{upsInputFrequency} /= 10;
  $self->{upsInputCurrent} /= 10;
  if ($self->{upsInputVoltage} < 1) {
    $self->add_critical(sprintf 'input power%s outage', $self->{flat_indices});
  }
  $self->add_perfdata(
      label => 'input_voltage'.$self->{flat_indices},
      value => $self->{upsInputVoltage},
  );
  $self->add_perfdata(
      label => 'input_frequency'.$self->{flat_indices},
      value => $self->{upsInputFrequency},
  );
  $self->add_perfdata(
      label => 'input_current'.$self->{flat_indices},
      value => $self->{upsInputCurrent},
  );
}

package Classes::UPS::Components::BatterySubsystem::Output;
our @ISA = qw(Monitoring::GLPlugin::SNMP::TableItem);
use strict;

sub check {
  my $self = shift;
  $self->{upsOutputCurrent} /= 10;
  my $metric = 'output_load'.$self->{flat_indices};
  $self->set_thresholds(
      metric => $metric, warning => '75', critical => '85');
  $self->add_info(sprintf 'output load%d %.2f%%', $self->{flat_indices}, $self->{upsOutputPercentLoad});
  $self->add_message(
      $self->check_thresholds(
          value => $self->{upsOutputPercentLoad},
          metric => $metric));
  $self->add_perfdata(
      label => $metric,
      value => $self->{upsOutputPercentLoad},
      uom => '%',
  );
  $self->add_perfdata(
      label => 'output_voltage'.$self->{flat_indices},
      value => $self->{upsOutputVoltage},
  );
  $self->add_perfdata(
      label => 'output_current'.$self->{flat_indices},
      value => $self->{upsOutputCurrent},
  );
}

package Classes::UPS;
our @ISA = qw(Classes::Device);
use strict;

sub init {
  my $self = shift;
  if ($self->mode =~ /device::hardware::health/) {
    $self->analyze_and_check_environmental_subsystem('Classes::UPS::Components::EnvironmentalSubsystem');
  } elsif ($self->mode =~ /device::battery/) {
    $self->analyze_and_check_battery_subsystem('Classes::UPS::Components::BatterySubsystem');
  } else {
    $self->no_such_mode();
  }
}

package Classes::XUPS::Components::EnvironmentalSubsystem;
our @ISA = qw(Classes::XUPS);
use strict;

sub new {
  my $class = shift;
  my $self = {};
  bless $self, $class;
  $self->init();
  return $self;
}

sub init {
  my $self = shift;
  $self->get_snmp_objects("XUPS-MIB", qw(xupsAlarmNumEvents));
  $self->get_snmp_tables("XUPS-MIB", [
      ["alarms", "xupsAlarmTable", "Classes::XUPS::Components::EnvironmentalSubsystem::Alarm"],
  ]);
}

sub check {
  my $self = shift;
  $self->add_info('checking alarms');
  foreach (@{$self->{alarms}}) {
    $_->check();
  }
  if (! $self->check_messages()) {
    $self->add_ok("hardware working fine. no alarms");
  }
}

sub dump {
  my $self = shift;
  printf "[ALARMS]\n";
  foreach (grep /^xups/, keys %{$self}) {
    printf "%s: %s\n", $_, $self->{$_};
  }
  printf "info: %s\n", $self->{info};
  printf "\n";
  foreach (@{$self->{alarms}}) {
    $_->dump();
  }
}


package Classes::XUPS::Components::EnvironmentalSubsystem::Alarm;
our @ISA = qw(Monitoring::GLPlugin::SNMP::TableItem);
use strict;
use constant { OK => 0, WARNING => 1, CRITICAL => 2, UNKNOWN => 3 };

sub check {
  my $self = shift;
  foreach (qw(xupsOnBattery xupsLowBattery xupsUtilityPowerRestored xupsReturnFromLowBattery 
      xupsOutputOverload xupsInternalFailure xupsBatteryDischarged xupsInverterFailure 
      xupsOnBypass xupsBypassNotAvailable xupsOutputOff xupsInputFailure 
      xupsBuildingAlarm xupsShutdownImminent xupsOnInverter)) {
    if ($self->{xupsAlarmDescr} eq  $Monitoring::GLPlugin::SNMP::MibsAndOids::mibs_and_oids->{"XUPS-MIB"}->{$_}) {
      $self->{xupsAlarmDescr} = $_;
    }
  }
  my $age = $Monitoring::GLPlugin::SNMP::uptime - $self->{xupsAlarmTime};
  # xupsAlarmDescr: xupsUtilityPowerRestored
  # xupsAlarmTime: 723852361
  # CRITICAL - alarm: xupsUtilityPowerRestored (-11941630 min ago)
  if ($age < 3600 && $age >= 0) {
    $self->add_critical(sprintf "alarm: %s (%d min ago)",
        $self->{xupsAlarmDescr}, $age / 60);
  }
}
package Classes::XUPS::Components::BatterySubsystem;
our @ISA = qw(Classes::XUPS);
use strict;

sub new {
  my $class = shift;
  my $self = {};
  bless $self, $class;
  $self->init();
  return $self;
}

sub init {
  my $self = shift;
  $self->get_snmp_objects("XUPS-MIB", qw(xupsBatTimeRemaining xupsBatVoltage xupsBatCurrent xupsBatCapacity xupsInputFrequency xupsOutputFrequency xupsOutputLoad xupsTestBatteryStatus));
  $self->get_snmp_tables("XUPS-MIB", [
      ["inputs", "xupsInputTable", "Classes::XUPS::Components::BatterySubsystem::Input"],
      ["outputs", "xupsOutputTable", "Classes::XUPS::Components::BatterySubsystem::Output"],
  ]);
  $self->{xupsBatTimeRemaining} /= 60;
  $self->{xupsInputFrequency} /= 10;
  $self->{xupsOutputFrequency} /= 10;
}

sub check {
  my $self = shift;
  $self->add_info('checking battery');
  $self->set_thresholds(
      metric => 'capacity', warning => '25:', critical => '10:');
  $self->add_info(sprintf 'capacity is %.2f%%', $self->{xupsBatCapacity});
  $self->add_message(
      $self->check_thresholds(
          value => $self->{xupsBatCapacity},
          metric => 'capacity'));
  $self->add_perfdata(
      label => 'capacity',
      value => $self->{xupsBatCapacity},
      uom => '%',
  );

  $self->set_thresholds(
      metric => 'output_load', warning => '75', critical => '85');
  $self->add_info(sprintf 'output load %.2f%%', $self->{xupsOutputLoad});
  $self->add_message(
      $self->check_thresholds(
          value => $self->{xupsOutputLoad},
          metric => 'output_load'));
  $self->add_perfdata(
      label => 'output_load',
      value => $self->{xupsOutputLoad},
      uom => '%',
  );
  $self->add_perfdata(
      label => 'output_frequency',
      value => $self->{xupsOutputFrequency});
  foreach (@{$self->{outputs}}) {
    $_->check();
  }
  $self->add_perfdata(
      label => 'input_frequency',
      value => $self->{xupsInputFrequency});
  foreach (@{$self->{inputs}}) {
    $_->check();
  }

  $self->set_thresholds(
      metric => 'remaining_time', warning => '15:', critical => '10:');
  $self->add_info(sprintf 'remaining battery run time is %.2fmin', $self->{xupsBatTimeRemaining});
  $self->add_message(
      $self->check_thresholds(
          value => $self->{xupsBatTimeRemaining},
          metric => 'remaining_time'));
  $self->add_perfdata(
      label => 'remaining_time',
      value => $self->{xupsBatTimeRemaining},
  );

  if ($self->{xupsTestBatteryStatus} eq "failed") {
    $self->add_critical("battery has status: failed");
  }
}

sub dump {
  my $self = shift;
  printf "[BATTERY]\n";
  foreach (grep /^xups/, keys %{$self}) {
    printf "%s: %s\n", $_, $self->{$_};
  }
  printf "info: %s\n", $self->{info};
  printf "\n";
}


package Classes::XUPS::Components::BatterySubsystem::Input;
our @ISA = qw(Monitoring::GLPlugin::SNMP::TableItem);
use strict;

sub check {
  my $self = shift;
  if ($self->{xupsInputVoltage} < 1) {
    $self->add_critical(sprintf 'input power%s outage', $self->{flat_indices});
  }
  $self->add_perfdata(
      label => 'input_voltage'.$self->{flat_indices},
      value => $self->{xupsInputVoltage},
  );
  $self->add_perfdata(
      label => 'input_current'.$self->{flat_indices},
      value => $self->{xupsInputCurrent} || 0,
  );
}

package Classes::XUPS::Components::BatterySubsystem::Output;
our @ISA = qw(Monitoring::GLPlugin::SNMP::TableItem);
use strict;

sub check {
  my $self = shift;
  $self->add_perfdata(
      label => 'output_voltage_'.$self->{flat_indices},
      value => $self->{xupsOutputVoltage},
  );
  $self->add_perfdata(
      label => 'output_current'.$self->{flat_indices},
      value => $self->{xupsOutputCurrent},
  );
}
package Classes::XUPS;
our @ISA = qw(Classes::Device);
use strict;

sub init {
  my $self = shift;
  if ($self->mode =~ /device::hardware::health/) {
    $self->analyze_and_check_environmental_subsystem('Classes::XUPS::Components::EnvironmentalSubsystem');
  } elsif ($self->mode =~ /device::battery/) {
    $self->analyze_and_check_battery_subsystem('Classes::XUPS::Components::BatterySubsystem');
  } else {
    $self->no_such_mode();
  }
}

package Classes::XPPC::Components::EnvironmentalSubsystem;
our @ISA = qw(Classes::XPPC);
use strict;
use POSIX qw(mktime);

sub new {
  my $class = shift;
  my $self = {};
  bless $self, $class;
  $self->init();
  return $self;
}

sub init {
  my $self = shift;
  $self->get_snmp_objects('XPPC-MIB', (qw(upsSmartTestDiagnosticSchedule
      upsSmartTestDiagnostics upsSmartTestDiagnosticsResults
      upsSmartTestLastDiagnosticsDate upsSmartTestIndicators    upsThreePhaseBatteryGrp
      upsEnvTemperature upsEnvHumidity upsEnvWater upsEnvSmoke 
      upsEnvSecurity1 upsEnvSecurity2 upsEnvSecurity3 upsEnvSecurity4
      upsEnvSecurity5 upsEnvSecurity6 upsEnvSecurity7
      upsEnvOverTemperature upsEnvUnderTemperature upsEnvOverHumidity upsEnvUnderHumidity)));
  eval {
    die if ! $self->{upsSmartTestLastDiagnosticsDate};
    $self->{upsSmartTestLastDiagnosticsDate} =~ /(\d+)\/(\d+)\/(\d+)/;
    $self->{upsSmartTestLastDiagnosticsDate} = mktime(0, 0, 0, $2, $1 - 1, $3 - 1900);
    $self->{upsSmartTestLastDiagnosticsAge} = (time - $self->{upsSmartTestLastDiagnosticsDate}) / (3600 * 24);
  };
  if ($@) {
    $self->{upsSmartTestLastDiagnosticsDate} = 0;
  }

}

sub check {
  my $self = shift;
  $self->add_info('checking hardware and self-tests');
  if ($self->{upsEnvTemperature}) {
    my $over = $self->{upsEnvOverTemperature} || 30;
    my $under = $self->{upsEnvUnderTemperature} || 10;
    $self->set_thresholds(
        metric => 'temperature', warning => $under.':'.$over, critical => $under.':'.$over);
    $self->add_info(sprintf 'temperature is %.2fC', $self->{upsEnvTemperature});
    $self->add_message(
        $self->check_thresholds(
            value => $self->{upsEnvTemperature},
            metric => 'temperature'));
    $self->add_perfdata(
        label => 'temperature',
        value => $self->{upsEnvTemperature},
    );
  }
  if ($self->{upsEnvHumidity}) {
    my $over = $self->{upsEnvOverHumidity} || 50;
    my $under = $self->{upsEnvUnderHumidity} || 12;
    $self->set_thresholds(
        metric => 'humidity', warning => $under.':'.$over, critical => $under.':'.$over);
    $self->add_info(sprintf 'humidity is %.2f%%', $self->{upsEnvHumidity});
    $self->add_message(
        $self->check_thresholds(
            value => $self->{upsEnvHumidity},
            metric => 'humidity'));
    $self->add_perfdata(
        label => 'humidity',
        value => $self->{upsEnvHumidity},
    );
  }
  if ($self->{upsSmartTestLastDiagnosticsDate}) {
    $self->add_info(sprintf 'selftest result was %s', $self->{upsSmartTestDiagnosticsResults});
    if ($self->{upsSmartTestDiagnosticsResults} eq 'failed') {
      $self->add_warning();
    } else {
      $self->add_ok();
    } 
    my $maxage = undef;
    if ($self->{upsSmartTestDiagnosticSchedule} eq 'never') {
      $maxage = 365;
    } elsif ($self->{upsSmartTestDiagnosticSchedule} eq 'biweekly') {
      $maxage = 14;
    } elsif ($self->{upsSmartTestDiagnosticSchedule} eq 'weekly') {
      $maxage = 7;
    }
    if (! defined $maxage && $self->{upsSmartTestDiagnosticSchedule} ne 'never') {
      $self->set_thresholds(
          metric => 'selftest_age', warning => '30', critical => '60');
    } else {
      $maxage *= 2; # got lots of alerts from my test devices
      $self->set_thresholds(
          metric => 'selftest_age', warning => $maxage, critical => $maxage);
    }
    $self->add_info(sprintf 'last selftest was %d days ago (%s)', $self->{upsSmartTestLastDiagnosticsAge}, scalar localtime $self->{upsSmartTestLastDiagnosticsDate});
    $self->add_message(
        $self->check_thresholds(
            value => $self->{upsSmartTestLastDiagnosticsAge},
            metric => 'selftest_age'));
    $self->add_perfdata(
        label => 'selftest_age',
        value => $self->{upsSmartTestLastDiagnosticsAge},
    );
  } else {
    $self->add_warning("please run diagnostics");
  }
  if (! $self->check_messages()) {
    $self->add_ok("hardware working fine");
  }
}

sub xdump {
  my $self = shift;
  printf "[HARDWARE]\n";
  foreach (qw(upsBasicIdentModel 
      upsAdvIdentDateOfManufacture upsAdvIdentSerialNumber
      upsSmartTestDiagnosticSchedule
      upsAdvTestDiagnosticsResults upsSmartTestLastDiagnosticsDate)) {
    printf "%s: %s\n", $_, $self->{$_} if defined $self->{$_};
    printf "%s: %s\n", $_, scalar localtime $self->{$_} if (defined $self->{$_} && $_ =~ /Date$/);
  }
  printf "info: %s\n", $self->{info};
  printf "\n";
}
package Classes::XPPC::Components::BatterySubsystem;
our @ISA = qw(Classes::XPPC);
use strict;
use constant { OK => 0, WARNING => 1, CRITICAL => 2, UNKNOWN => 3 };

sub new {
  my $class = shift;
  my $self = {};
  bless $self, $class;
  $self->init();
  return $self;
}

sub init {
  my $self = shift;
  $self->get_snmp_objects('XPPC-MIB', (qw(upsBaseBatteryStatus
      upsSmartBatteryCapacity upsSmartBatteryVoltage upsSmartBatteryTemperature
      upsSmartBatteryRunTimeRemaining upsSmartBatteryReplaceIndicator
      upsSmartBatteryCurrent 
      upsSmartInputLineVoltage upsSmartInputFrequency upsSmartInputLineFailCause
      upsBaseOutputStatus upsSmartOutputVoltage upsSmartOutputFrequency
      upsSmartOutputLoad)));
  $self->{upsSmartBatteryTemperature} /= 10;
  $self->{upsSmartBatteryVoltage} *= 10;
  $self->{upsSmartInputLineVoltage} /= 10 if defined $self->{upsSmartInputLineVoltage};
  $self->{upsSmartInputFrequency} /= 10 if defined $self->{upsSmartInputFrequency};
  $self->{upsSmartOutputVoltage} /= 10 if defined $self->{upsSmartOutputVoltage};
  $self->{upsSmartOutputFrequency} /= 10 if defined $self->{upsSmartOutputFrequency};
}

sub check {
  my $self = shift;
  $self->add_info('checking battery');
  $self->add_info(sprintf 'battery status is %s', $self->{upsBaseBatteryStatus});
  if ($self->{upsBaseBatteryStatus} ne 'batteryNormal') {
    $self->add_critical();
  } else {
    $self->add_ok();
  } 
  if ($self->{upsSmartBatteryReplaceIndicator} &&
      $self->{upsSmartBatteryReplaceIndicator} eq 'batteryNeedsReplacing') {
    $self->add_critical('battery needs replacing');
  }
  if ($self->{upsBaseOutputStatus} && # kann auch undef sein (10kv z.b.)
      $self->{upsBaseOutputStatus} ne 'onLine') {
    $self->add_warning(sprintf 'output status is %s',
        $self->{upsBaseOutputStatus});
    $self->add_warning(sprintf 'caused by %s',
        $self->{upsSmartInputLineFailCause});
  }

  $self->set_thresholds(
      metric => 'capacity', warning => '25:', critical => '10:');
  $self->add_info(sprintf 'capacity is %.2f%%', $self->{upsSmartBatteryCapacity});
  $self->add_message(
      $self->check_thresholds(
          value => $self->{upsSmartBatteryCapacity},
          metric => 'capacity'));
  $self->add_perfdata(
      label => 'capacity',
      value => $self->{upsSmartBatteryCapacity},
      uom => '%',
  );

  $self->set_thresholds(
      metric => 'output_load', warning => '75', critical => '85');
  $self->add_info(sprintf 'output load %.2f%%', $self->{upsSmartOutputLoad});
  $self->add_message(
      $self->check_thresholds(
          value => $self->{upsSmartOutputLoad},
          metric => 'output_load'));
  $self->add_perfdata(
      label => 'output_load',
      value => $self->{upsSmartOutputLoad},
      uom => '%',
  );

  $self->set_thresholds(
      metric => 'battery_temperature', warning => '70', critical => '80');
  $self->add_info(sprintf 'temperature is %.2fC', $self->{upsSmartBatteryTemperature});
  $self->add_message(
      $self->check_thresholds(
          value => $self->{upsSmartBatteryTemperature},
          metric => 'battery_temperature'));
  $self->add_perfdata(
      label => 'battery_temperature',
      value => $self->{upsSmartBatteryTemperature},
  );

  $self->set_thresholds(
      metric => 'remaining_time', warning => '15:', critical => '10:');
  $self->add_info(sprintf 'remaining battery run time is %.2fmin', $self->{upsSmartBatteryRunTimeRemaining});
  # $self->{upsSmartBatteryRunTimeRemaining} = 0 probably is normal
  # as long as the battery is not in use
  $self->add_message(
      $self->{upsSmartBatteryRunTimeRemaining} ? $self->check_thresholds(
          value => $self->{upsSmartBatteryRunTimeRemaining},
          metric => 'remaining_time') : OK);
  $self->add_perfdata(
      label => 'remaining_time',
      value => $self->{upsSmartBatteryRunTimeRemaining},
  );

  if (defined $self->{upsSmartInputLineVoltage} && $self->{upsSmartInputLineVoltage} < 1) {
    $self->add_critical(sprintf 'input power outage');
  }
  $self->add_perfdata(
      label => 'input_voltage',
      value => $self->{upsSmartInputLineVoltage},
  ) if defined $self->{upsSmartInputLineVoltage};
  $self->add_perfdata(
      label => 'input_frequency',
      value => $self->{upsSmartInputFrequency},
  ) if defined $self->{upsSmartInputFrequency};
  $self->add_perfdata(
      label => 'output_voltage',
      value => $self->{upsSmartOutputVoltage},
  ) if defined $self->{upsSmartOutputVoltage};
  $self->add_perfdata(
      label => 'output_frequency',
      value => $self->{upsSmartOutputFrequency},
  ) if defined $self->{upsSmartOutputFrequency};
}

sub dump {
  my $self = shift;
  printf "[BATTERY]\n";
  foreach (qw(upsBaseBatteryStatus
      upsSmartBatteryCapacity upsSmartBatteryVoltage upsSmartBatteryTemperature
      upsSmartBatteryRunTimeRemaining upsSmartBatteryReplaceIndicator
      upsSmartBatteryCurrent 
      upsSmartInputLineVoltage upsSmartInputFrequency upsSmartInputLineFailCause
      upsBaseOutputStatus upsSmartOutputVoltage upsSmartOutputFrequency
      upsSmartOutputLoad)) {
    printf "%s: %s\n", $_, $self->{$_} if defined $self->{$_};
  }
  printf "info: %s\n", $self->{info};
  printf "\n";
}
package Classes::XPPC;
our @ISA = qw(Classes::Device);
use strict;

sub init {
  my $self = shift;
  if ($self->mode =~ /device::hardware::health/) {
    $self->analyze_and_check_environmental_subsystem('Classes::XPPC::Components::EnvironmentalSubsystem');
  } elsif ($self->mode =~ /device::battery/) {
    $self->analyze_and_check_battery_subsystem('Classes::XPPC::Components::BatterySubsystem');
  } else {
    $self->no_such_mode();
  }
}

package Classes::V4::Components::EnvironmentalSubsystem;
our @ISA = qw(Classes::V4);
use strict;

sub new {
  my $class = shift;
  my $self = {};
  bless $self, $class;
  $self->init();
  return $self;
}

sub init {
  my $self = shift;
  $self->get_snmp_objects('UPSV4-MIB', (qw(
      dupsEnvTemperature dupsAlarmOverEnvHumidity dupsAlarmEnvRelay1 
      dupsAlarmEnvRelay2 dupsAlarmEnvRelay3 dupsAlarmEnvRelay4 
      dupsEnvHumidity dupsEnvSetTemperatureLimit dupsEnvSetHumidityLimit 
      dupsEnvSetEnvRelay1 dupsEnvSetEnvRelay2 dupsEnvSetEnvRelay3
      dupsEnvSetEnvRelay4 dupsAlarmOverEnvTemperature
      dupsTemperature)));
  $self->{dupsEnvTemperature} ||= $self->{dupsTemperature};
  $self->get_snmp_objects('UPSV4-MIB', (qw(
      dupsAlarmDisconnect dupsAlarmBatteryTestFail
      dupsAlarmFuseFailure dupsAlarmOutputOverload dupsAlarmOutputOverCurrent
      dupsAlarmInverterAbnormal dupsAlarmRectifierAbnormal
      dupsAlarmReserveAbnormal dupsAlarmLoadOnReserve 
      dupsAlarmOverTemperature dupsAlarmOutputBad dupsAlarmPowerFail
      dupsAlarmBypassBad dupsAlarmClassesOff dupsAlarmChargerFail
      dupsAlarmFanFail dupsAlarmEconomicMode dupsAlarmOutputOff
      dupsAlarmSmartShutdown dupsAlarmEmergencyPowerOff
      dupsAlarmBatteryLow dupsAlarmLoadWarning dupsAlarmLoadSeverity
      dupsAlarmLoadOnBypass dupsAlarmClassesFault dupsAlarmBatteryGroundFault
      dupsAlarmTestInProgress)));
}

sub check {
  my $self = shift;
  $self->add_info('checking environment');
  $self->add_info(sprintf 'temperature %dC', $self->{dupsEnvTemperature});
  $self->add_ok();
  if ($self->{dupsEnvHumidity}) {
    $self->add_info(sprintf ', humidity %d%%', $self->{dupsEnvHumidity});
    $self->add_ok();
  }
  my $alarms = 0;
  foreach (qw(dupsAlarmDisconnect dupsAlarmBatteryTestFail
      dupsAlarmFuseFailure dupsAlarmOutputOverload dupsAlarmOutputOverCurrent
      dupsAlarmInverterAbnormal dupsAlarmRectifierAbnormal
      dupsAlarmReserveAbnormal dupsAlarmLoadOnReserve
      dupsAlarmOverTemperature dupsAlarmOutputBad dupsAlarmPowerFail
      dupsAlarmBypassBad dupsAlarmClassesOff dupsAlarmChargerFail
      dupsAlarmFanFail dupsAlarmEconomicMode dupsAlarmOutputOff
      dupsAlarmSmartShutdown dupsAlarmEmergencyPowerOff
      dupsAlarmBatteryLow dupsAlarmLoadWarning dupsAlarmLoadSeverity
      dupsAlarmLoadOnBypass dupsAlarmClassesFault dupsAlarmBatteryGroundFault
      dupsAlarmTestInProgress)) {
    if ($self->{$_} && $self->{$_} eq 'on') {
      $self->add_critical(sprintf 'alarm %s is on', $_);
      $alarms++;
    }
  }
  if ($self->{dupsAlarmOverEnvTemperature} eq 'on') {
    $self->add_critical(sprintf 'temperature too high, %d max',
        $self->{dupsEnvSetTemperatureLimit});
    $alarms++;
  }
  if ($self->{dupsAlarmOverEnvHumidity} eq 'on') {
    $self->add_critical(sprintf 'humidity too high, %d max',
        $self->{dupsEnvSetHumidityLimit});
    $alarms++;
  }
  if (! $alarms) {
    $self->add_ok('no alarms');
  }
  $self->add_perfdata(
      label => 'temperature',
      value => $self->{dupsEnvTemperature},
  );
  if ($self->{dupsEnvHumidity}) {
    $self->add_perfdata(
        label => 'humidity',
        value => $self->{dupsEnvHumidity},
        uom => '%',
    );
  }
}

sub dump {
  my $self = shift;
  printf "[HARDWARE]\n";
  foreach (qw(dupsEnvTemperature dupsAlarmOverEnvHumidity dupsAlarmEnvRelay1 
      dupsAlarmEnvRelay2 dupsAlarmEnvRelay3 dupsAlarmEnvRelay4 
      dupsEnvHumidity dupsEnvSetTemperatureLimit dupsEnvSetHumidityLimit 
      dupsEnvSetEnvRelay1 dupsEnvSetEnvRelay2 dupsEnvSetEnvRelay3
      dupsEnvSetEnvRelay4 dupsAlarmOverEnvTemperature)) {
    printf "%s: %s\n", $_, defined $self->{$_} ? $self->{$_} : 'undefined';
  }
  foreach (qw(dupsAlarmDisconnect dupsAlarmBatteryTestFail dupsAlarmFuseFailure dupsAlarmOutputOverload dupsAlarmOutputOverCurrent dupsAlarmInverterAbnormal dupsAlarmRectifierAbnormal dupsAlarmReserveAbnormal dupsAlarmLoadOnReserve dupsAlarmOverTemperature dupsAlarmOutputBad dupsAlarmPowerFail dupsAlarmBypassBad dupsAlarmClassesOff dupsAlarmChargerFail dupsAlarmFanFail dupsAlarmEconomicMode dupsAlarmOutputOff dupsAlarmSmartShutdown dupsAlarmEmergencyPowerOff dupsAlarmBatteryLow dupsAlarmLoadWarning dupsAlarmLoadSeverity dupsAlarmLoadOnBypass dupsAlarmClassesFault dupsAlarmBatteryGroundFault dupsAlarmTestInProgress)) {
    printf "%s: %s\n", $_, defined $self->{$_} ? $self->{$_} : 'undefined';
  }
  printf "info: %s\n", $self->{info};
  printf "\n";
}
package Classes::V4::Components::BatterySubsystem;
our @ISA = qw(Classes::V4);
use strict;

sub new {
  my $class = shift;
  my $self = {};
  bless $self, $class;
  $self->init();
  return $self;
}

sub init {
  my $self = shift;
  $self->get_snmp_objects('UPSV4-MIB', (qw(
      dupsBatteryCondiction dupsLastReplaceDate dupsNextReplaceDate
      dupsBatteryStatus dupsBatteryCharge dupsSecondsOnBattery
      dupsBatteryEstimatedTime dupsBatteryVoltage
      dupsBatteryCapacity dupsTemperature dupsLowBattTime dupsOutputSource
      dupsInputNumLines
      dupsOutputNumLines dupsOutputFrequency)));
  $self->{dupsLastReplaceDate} ||= 0;
  $self->{dupsNextReplaceDate} ||= 0;
  $self->{dupsBatteryCurrent} ||= 0;
  $self->{dupsLowBattTime} ||= 0;
  $self->{dupsOutputFrequency} /= 10;
  foreach (1..$self->{dupsInputNumLines}) {
    $self->{'dupsInputVoltage'.$_} = $self->get_snmp_object('UPSV4-MIB', 'dupsInputVoltage'.$_, 0) / 10;
    $self->{'dupsInputFrequency'.$_} = $self->get_snmp_object('UPSV4-MIB', 'dupsInputFrequency'.$_, 0) / 10;
  }
  foreach (1..$self->{dupsOutputNumLines}) {
    $self->{'dupsOutputLoad'.$_} = $self->get_snmp_object('UPSV4-MIB', 'dupsOutputLoad'.$_, 0);
    $self->{'dupsOutputVoltage'.$_} = $self->get_snmp_object('UPSV4-MIB', 'dupsOutputVoltage'.$_, 0) / 10;
  }
}

sub check {
  my $self = shift;
  $self->add_info('checking battery');
  $self->add_info(sprintf 'output source is %s, battery condition is %s, %s', 
      $self->{dupsOutputSource}, 
      $self->{dupsBatteryCondiction}, $self->{dupsBatteryCharge});
  if ($self->{dupsBatteryCondiction} eq 'weak') {
    $self->add_warning();
  } elsif ($self->{dupsBatteryCondiction} eq 'replace') {
    $self->add_critical();
  } 
  if ($self->{dupsOutputSource} eq 'battery') {
    if ($self->{dupsBatteryStatus} ne 'ok') {
      $self->add_critical();
    }
  }
  if (! $self->check_messages()) {
    $self->add_ok();
  }
  $self->set_thresholds(
      metric => 'capacity', warning => '25:', critical => '10:');
  $self->add_info(sprintf 'capacity is %.2f%%', $self->{dupsBatteryCapacity});
  $self->add_message(
      $self->check_thresholds(
          value => $self->{dupsBatteryCapacity},
          metric => 'capacity'));
  $self->add_perfdata(
      label => 'capacity',
      value => $self->{dupsBatteryCapacity},
      uom => '%',
  );

  foreach (1..$self->{dupsOutputNumLines}) {
    $self->set_thresholds(
        metric => 'output_load'.$_, warning => '75', critical => '85');
    $self->add_info(sprintf 'output load%d %.2f%%', $_, $self->{'dupsOutputLoad'.$_});
    $self->add_message(
        $self->check_thresholds(
            value => $self->{'dupsOutputLoad'.$_},
            metric => 'output_load'.$_));
    $self->add_perfdata(
        label => 'output_load'.$_,
        value => $self->{'dupsOutputLoad'.$_},
        uom => '%',
    );
  }

  $self->set_thresholds(
      metric => 'battery_temperature', warning => '35', critical => '38');
  $self->add_info(sprintf 'temperature is %.2fC', $self->{dupsTemperature});
  $self->add_message(
      $self->check_thresholds(
          value => $self->{dupsTemperature},
          metric => 'battery_temperature'));
  $self->add_perfdata(
      label => 'battery_temperature',
      value => $self->{dupsTemperature},
  );

  if ($self->{dupsSecondsOnBattery}) {
    $self->set_thresholds(
        metric => 'remaining_time', warning => '15:', critical => '10:');
    $self->add_info(sprintf 'remaining battery run time is %.2fmin', $self->{dupsBatteryEstimatedTime});
  } else {
    # laeuft nicht auf batterie, kann also nicht sagen, wie lang diese haelt.
    # dupsBatteryEstimatedTime liefert in dem fall undef
    $self->{dupsBatteryEstimatedTime} = 0;
    $self->force_thresholds(
        metric => 'remaining_time', warning => '0:', critical => '0:');
    $self->add_info(sprintf 'unit is not on battery power');
  }
  $self->add_message(
      $self->check_thresholds(
          value => $self->{dupsBatteryEstimatedTime},
          metric => 'remaining_time'));
  $self->add_perfdata(
      label => 'remaining_time',
      value => $self->{dupsBatteryEstimatedTime},
  );

  foreach (1..$self->{dupsInputNumLines}) {
    if ($self->{'dupsInputVoltage'.$_} < 1) {
      $self->add_critical(sprintf 'input power%s outage', $_);
    }
    $self->add_perfdata(
        label => 'input_voltage'.$_,
        value => $self->{'dupsInputVoltage'.$_},
    );
    $self->add_perfdata(
        label => 'input_frequency'.$_,
        value => $self->{'dupsInputFrequency'.$_},
    );
  }
  foreach (1..$self->{dupsOutputNumLines}) {
    $self->add_perfdata(
        label => 'output_voltage'.$_,
        value => $self->{'dupsOutputVoltage'.$_},
    );
  }
  $self->add_perfdata(
      label => 'output_frequency',
      value => $self->{dupsOutputFrequency},
  );
}

sub dump {
  my $self = shift;
  printf "[BATTERY]\n";
  foreach (grep /^dups/, keys %{$self}) {
    printf "%s: %s\n", $_, $self->{$_};
  }
  printf "info: %s\n", $self->{info};
  printf "\n";
}
package Classes::V4;
our @ISA = qw(Classes::Device);
use strict;

sub init {
  my $self = shift;
  if ($self->mode =~ /device::hardware::health/) {
    $self->analyze_and_check_environmental_subsystem('Classes::V4::Components::EnvironmentalSubsystem');
  } elsif ($self->mode =~ /device::battery/) {
    $self->analyze_and_check_battery_subsystem('Classes::V4::Components::BatterySubsystem');
  } else {
    $self->no_such_mode();
  }
}

package Classes::MerlinGerin::Components::EnvironmentalSubsystem;
our @ISA = qw(Classes::MerlinGerin);
use strict;

sub new {
  my $class = shift;
  my $self = {};
  bless $self, $class;
  $self->init();
  return $self;
}

sub init {
  my $self = shift;
  $self->get_snmp_objects("MG-SNMP-UPS-MIB", qw(
      upsmgConfigEmergencyTestFail upsmgConfigEmergencyOnByPass
      upsmgConfigEmergencyOverload
  ));
  $self->get_snmp_objects("MG-SNMP-UPS-MIB", qw(
   upsmgTestBatterySchedule
   upsmgTestDiagnostics
   upsmgTestDiagResult
   upsmgTestBatteryCalibration
   upsmgTestLastCalibration
   upsmgTestIndicators
   upsmgTestCommandLine
   upsmgTestCommandReady
   upsmgTestResponseLine
   upsmgTestResponseReady
   upsmgTestBatteryResult 
  ));
  $self->get_snmp_tables("MG-SNMP-UPS-MIB", [
      ["environsensors", "upsmgEnvironSensorTable", "Classes::MerlinGerin::Components::EnvironmentalSubsystem::EnvironSensor"],
  ]);
  $self->get_snmp_tables("MG-SNMP-UPS-MIB", [
      ["environmentsensors", "upsmgEnvironmentSensorTable", "Classes::MerlinGerin::Components::EnvironmentalSubsystem::EnvironmentSensor"],
  ]);
  $self->get_snmp_tables("MG-SNMP-UPS-MIB", [
      ["sensorconfigs", "upsmgConfigEnvironmentTable", "Classes::MerlinGerin::Components::EnvironmentalSubsystem::SensorConfig"],
  ]);
  foreach my $es (@{$self->{environmentsensors}}) {
    foreach my $sc (@{$self->{sensorconfigs}}) {
      if ($sc->{upsmgConfigSensorIndex} == $es->{upsmgEnvironmentIndex}) {
        foreach my $k (keys %{$sc}) {
          $es->{$k} = $sc->{$k};
        }
      }
    }
  }
}

sub check {
  my $self = shift;
  $self->add_info('checking environment');
  if (defined $self->{upsmgTestDiagResult} &&
      $self->{upsmgTestDiagResult} eq "failed") {
    # manche haben kein 1.3.6.1.4.1.705.1.10
    $self->add_critical("automatic test diagnostic failed");
  }
  if (! $self->check_messages()) {
    $self->add_ok("hardware working fine");
  }
}

sub dump {
  my $self = shift;
  printf "[SENSORS]\n";
  foreach (@{$self->{environsensors}}) {
    $_->dump();
  }
  foreach (@{$self->{environmentsensors}}) {
    $_->dump();
  }
  foreach (@{$self->{sensorconfigs}}) {
    $_->dump();
  }
  foreach (qw(upsmgConfigEmergencyTestFail upsmgConfigEmergencyOnByPass
      upsmgConfigEmergencyOverload upsmgTestBatterySchedule
      upsmgTestDiagnostics upsmgTestDiagResult
      upsmgTestBatteryCalibration upsmgTestLastCalibration
      upsmgTestIndicators upsmgTestCommandLine
      upsmgTestCommandReady upsmgTestResponseLine
      upsmgTestResponseReady upsmgTestBatteryResult 
  )){
    printf "%s: %s\n", $_, $self->{$_};
  }
  printf "\n";
}


package Classes::MerlinGerin::Components::EnvironmentalSubsystem::EnvironSensor;
our @ISA = qw(Monitoring::GLPlugin::SNMP::TableItem);
use strict;

sub check {
  my $self = shift;
  return;
}


package Classes::MerlinGerin::Components::EnvironmentalSubsystem::SensorConfig;
our @ISA = qw(Monitoring::GLPlugin::SNMP::TableItem);
use strict;


package Classes::MerlinGerin::Components::EnvironmentalSubsystem::EnvironmentSensor;
our @ISA = qw(Monitoring::GLPlugin::SNMP::TableItem);
use strict;

sub check {
  my $self = shift;
  if ($self->{upsmgEnvironmentComFailure} eq "yes") {
    $self->add_info("no environment module is installed");
  } else {
    foreach my $cat (qw(Temperature Humidity)) {
      if ($cat eq "Humidity" && $self->{'upsmgEnvironment'.$cat} == 0) {
        # kein feuchtesensor verbaut
        next;
      }
      foreach my $thres (qw(High Low)) {
        if ($self->{'upsmgEnvironment'.$cat.$thres} eq "yes") {
          $self->add_critical(sprintf "%s (%.2f) is too %s",
              lc $cat, $self->{'upsmgEnvironment'.$cat}, lc $thres);
        }
      }
      $self->add_perfdata(
          label => lc $cat,
          value => $self->{'upsmgEnvironment'.$cat},
          warning => $self->{'upsmgEnvironment'.$cat.'High'} - $self->{'upsmgConfig'.$cat.'High'},
          critical => $self->{'upsmgEnvironment'.$cat.'High'},
      );
    }
  }
}


package Classes::MerlinGerin::Components::BatterySubsystem;
our @ISA = qw(Classes::MerlinGerin);
use strict;

sub new {
  my $class = shift;
  my $self = {};
  bless $self, $class;
  $self->init();
  return $self;
}

sub init {
  my $self = shift;
  $self->get_snmp_objects('MG-SNMP-UPS-MIB', (qw(
      upsmgBatteryRemainingTime upsmgBatteryLevel
      upsmgBatteryRechargeTime upsmgBatteryRechargeLevel
      upsmgBatteryVoltage upsmgBatteryCurrent
      upsmgBatteryTemperature upsmgBatteryFullRechargeTime
      upsmgBatteryFaultBattery upsmgBatteryNoBattery
      upsmgBatteryReplacement upsmgBatteryUnavailableBattery
      upsmgBatteryNotHighCharge upsmgBatteryLowBattery
      upsmgBatteryChargerFault upsmgBatteryLowCondition
      upsmgBatteryLowRecharge
      upsmgInputPhaseNum upsmgOutputPhaseNum
      upsmgInputLineFailCause)));
  $self->get_snmp_tables('MG-SNMP-UPS-MIB', [
      ['inputs', 'upsmgInputPhaseTable', 'Classes::MerlinGerin::Components::BatterySubsystem::Input'],
      ['outputs', 'upsmgOutputPhaseTable', 'Classes::MerlinGerin::Components::BatterySubsystem::Output'],
  ]);
  @{$self->{inputs}} = grep {
      defined $_->{mginputFrequency} && defined $_->{mginputVoltage}
  } @{$self->{inputs}};
  @{$self->{inputs}} = splice(@{$self->{inputs}}, 0, $self->{upsmgInputPhaseNum});
  @{$self->{outputs}} = splice(@{$self->{outputs}}, 0, $self->{upsmgOutputPhaseNum});
}

sub check {
  my $self = shift;
  $self->add_info('checking battery');
  if ($self->{upsmgBatteryNoBattery} && $self->{upsmgBatteryNoBattery} eq "yes") {
    $self->add_critical("NO battery");
  }
  if ($self->{upsmgBatteryReplacement} && $self->{upsmgBatteryReplacement} eq "yes") {
    $self->add_critical("battery needs to be replaced");
  }
  if ($self->{upsmgBatteryChargerFault} && $self->{upsmgBatteryChargerFault} eq "yes") {
    $self->add_critical("charger fault");
  }
  if ($self->{upsmgBatteryLowRecharge} && $self->{upsmgBatteryLowRecharge} eq "yes") {
    $self->add_critical("low recharge");
  }
  if ($self->{upsmgBatteryLowRecharge} && $self->{upsmgBatteryLowRecharge} eq "yes") {
    $self->add_critical("low recharge");
  }
  if ($self->{upsmgBatteryFaultBattery} && $self->{upsmgBatteryFaultBattery} eq "yes") {
    $self->add_critical("battery fault");
  }
  if (! $self->check_messages()) {
    $self->add_ok("battery ok");
  }
  $self->set_thresholds(
      metric => 'capacity', warning => '25:', critical => '10:');
  $self->add_info(sprintf "capacity is %.2f%%", $self->{upsmgBatteryLevel});
  $self->add_message(
      $self->check_thresholds(
          value => $self->{upsmgBatteryLevel},
          metric => 'capacity'));
  $self->add_perfdata(
      label => 'capacity',
      value => $self->{upsmgBatteryLevel},
      uom => '%',
  );

  if ($self->{upsmgBatteryTemperature}) {
    $self->set_thresholds(
        metric => 'battery_temperature', warning => '35', critical => '38');
    $self->add_info(sprintf 'temperature is %.2fC', $self->{upsmgBatteryTemperature});
    $self->add_message(
        $self->check_thresholds(
            value => $self->{upsmgBatteryTemperature},
            metric => 'battery_temperature'));
    $self->add_perfdata(
        label => 'battery_temperature',
        value => $self->{upsmgBatteryTemperature},
    );
  }

  $self->{upsmgBatteryRemainingTime} /= 60;
  $self->set_thresholds(
      metric => 'remaining_time', warning => '15:', critical => '10:');
  $self->add_info(sprintf 'remaining battery run time is %.2fmin', $self->{upsmgBatteryRemainingTime});
  $self->add_message(
      $self->check_thresholds(
          value => $self->{upsmgBatteryRemainingTime},
          metric => 'remaining_time'));
  $self->add_perfdata(
      label => 'remaining_time',
      value => $self->{upsmgBatteryRemainingTime},
  );

  foreach (@{$self->{inputs}}) {
    $_->check();
  }
  foreach (@{$self->{outputs}}) {
    $_->check();
  }
  if ($self->check_messages()) {
    $self->add_critical(sprintf 'input line fail cause: %s',
        $self->{upsmgInputLineFailCause});
  }
}

sub dump {
  my $self = shift;
  printf "[BATTERY]\n";
  foreach (grep /^upsmg/, keys %{$self}) {
    printf "%s: %s\n", $_, $self->{$_};
  }
  foreach (@{$self->{inputs}}) {
    $_->dump();
  }
  foreach (@{$self->{outputs}}) {
    $_->dump();
  }
  printf "info: %s\n", $self->{info};
  printf "\n";
}

package Classes::MerlinGerin::Components::BatterySubsystem::Input;
our @ISA = qw(Monitoring::GLPlugin::SNMP::TableItem);
use strict;

sub finish {
  my $self = shift;
  $self->{mginputCurrent} ||= 0; # mandatory, but sometimes missing
}

sub check {
  my $self = shift;
  $self->{mginputVoltage} /= 10;
  $self->{mginputFrequency} /= 10;
  $self->{mginputCurrent} /= 10;
  if ($self->{mginputVoltage} < 1) {
    $self->add_critical(sprintf 'input power%s outage', $self->{flat_indices});
  }
  $self->add_perfdata(
      label => 'input_voltage'.$self->{flat_indices},
      value => $self->{mginputVoltage},
  );
  $self->add_perfdata(
      label => 'input_frequency'.$self->{flat_indices},
      value => $self->{mginputFrequency},
  );
  $self->add_perfdata(
      label => 'input_current'.$self->{flat_indices},
      value => $self->{mginputCurrent},
  );
}

package Classes::MerlinGerin::Components::BatterySubsystem::Output;
our @ISA = qw(Monitoring::GLPlugin::SNMP::TableItem);
use strict;

sub check {
  my $self = shift;
  my $metric = 'output_load'.$self->{flat_indices};
  $self->set_thresholds(
      metric => $metric, warning => '75', critical => '85');
  $self->add_info(sprintf 'output load%d %.2f%%', $self->{flat_indices}, $self->{mgoutputLoadPerPhase});
  $self->add_message(
      $self->check_thresholds(
          value => $self->{mgoutputLoadPerPhase},
          metric => $metric)
  );
  $self->add_perfdata(
      label => $metric,
      value => $self->{mgoutputLoadPerPhase},
      uom => '%',
  );
  $self->{mgoutputVoltage} /= 10;
  $self->{mgoutputFrequency} /= 10;
  $self->{mgoutputCurrent} /= 10;
  $self->add_perfdata(
      label => 'output_voltage'.$self->{flat_indices},
      value => $self->{mgoutputVoltage},
  );
  $self->add_perfdata(
      label => 'output_frequency'.$self->{flat_indices},
      value => $self->{mgoutputFrequency},
  );
  $self->add_perfdata(
      label => 'output_current'.$self->{flat_indices},
      value => $self->{mgoutputCurrent},
  );
}

package Classes::MerlinGerin;
our @ISA = qw(Classes::Device);
use strict;

sub init {
  my $self = shift;
  if ($self->mode =~ /device::hardware::health/) {
    $self->analyze_and_check_environmental_subsystem('Classes::MerlinGerin::Components::EnvironmentalSubsystem');
    # xups alarm-table ist auch noch interessant...
    $self->clear_ok();
    $self->analyze_and_check_environmental_subsystem('Classes::XUPS::Components::EnvironmentalSubsystem');
  } elsif ($self->mode =~ /device::battery/) {
    $self->analyze_and_check_battery_subsystem('Classes::MerlinGerin::Components::BatterySubsystem');
  } else {
    $self->no_such_mode();
  }
}

package Classes::Device;
our @ISA = qw(Monitoring::GLPlugin::SNMP);
use strict;

sub classify {
  my $self = shift;
  if (! ($self->opts->hostname || $self->opts->snmpwalk)) {
    $self->add_unknown('either specify a hostname or a snmpwalk file');
  } else {
    $self->check_snmp_and_model();
    if (! $self->check_messages()) {
      if ($self->opts->verbose && $self->opts->verbose) {
        printf "I am a %s\n", $self->{productname};
      }
      $self->map_oid_to_class('1.3.6.1.4.1.4555.1.1.1', 'Classes::Socomec::Netvision');
      $self->map_oid_to_class('1.3.6.1.4.1.318.1.3.17.1', 'Classes::APC::Powermib');
      if ($self->opts->mode =~ /^my-/) {
        $self->load_my_extension();
      } elsif ($self->get_snmp_object('PowerNet-MIB', 'upsBasicIdentModel') ||
          $self->get_snmp_object('PowerNet-MIB', 'upsBasicIdentName')) {
        # upsBasicIdentModel kann auch "" sein, upsBasicIdentName
        # theoretisch auch (da r/w), aber hoffentlich nicht beide zusammen
        bless $self, 'Classes::APC::Powermib::UPS';
        $self->debug('using Classes::APC::Powermib::UPS');
      } elsif ($self->{productname} =~ /APC /) {
        bless $self, 'Classes::APC';
        $self->debug('using Classes::APC');
      } elsif ($self->implements_mib('MG-SNMP-UPS-MIB')) {
        # like XPPC, that's why UPS is now last
        bless $self, 'Classes::MerlinGerin';
        $self->debug('using Classes::MerlinGerin');
      } elsif ($self->implements_mib('UPSV4-MIB')) {
        bless $self, 'Classes::V4';
        $self->debug('using Classes::V4');
      } elsif ($self->implements_mib('XPPC-MIB')) {
        # before UPS-MIB because i found a Intelligent MSII6000 which implemented
        # both XPPC and UPS, but the latter only partial
        bless $self, 'Classes::XPPC';
        $self->debug('using Classes::XPPC');
      } elsif ($self->implements_mib('XUPS-MIB')) {
        bless $self, 'Classes::XUPS';
        $self->debug('using Classes::XUPS');
      } elsif ($self->{productname} =~ /Net Vision v6/) {
        bless $self, 'Classes::Socomec';
        $self->debug('using Classes::Socomec');
      } elsif ($self->implements_mib('UPS-MIB')) {
        bless $self, 'Classes::UPS';
        $self->debug('using Classes::UPS');
      } else {
        $self->map_oid_to_class('1.3.6.1.4.1.318.1.3.17.1',
            'Classes::APC::Powermib');
        $self->map_oid_to_class('1.3.6.1.4.1.4555.1.1.1',
            'Classes::Socomec::Netvision');
        if (my $class = $self->discover_suitable_class()) {
          bless $self, $class;
          $self->debug('using '.$class);
        } else {
          bless $self, 'Classes::Generic';
          $self->debug('using Classes::Generic');
        }
      }
    }
  }
  return $self;
}

sub check_snmp_and_model {
  my $self = shift;
  $self->SUPER::check_snmp_and_model();
  if ($self->check_messages() == 3 && ($self->check_messages())[1] =~ /neither sysUptime/) {
    # firmwareupdate und dann sowas:
    # .1.3.6.1.2.1.33.1.1.2.0 = STRING: "TRIMOD"
    # .1.3.6.1.2.1.33.1.1.3.0 = STRING: "3.10.1"
    # .1.3.6.1.2.1.33.1.1.4.0 = STRING: "cs141 v "
    # .1.3.6.1.2.1.33.1.1.5.0 = STRING: "CS141 SNMP/WEB Adapter"
    # kein 1.3.6.1.2.1, nix mehr, gaaar nix
    $self->establish_snmp_session();
    if ($self->implements_mib('UPS-MIB') &&
        $self->get_snmp_object('UPS-MIB', 'upsIdentModel') =~ /TRIMOD/) {
      $self->clear_messages(3);
      bless $self, 'Classes::UPS';
      $self->debug('using Classes::UPS');
      $self->debug("check for UPSMIB");
      $self->{uptime} = 3600;
      $self->{productname} = "TRIMOD-with-broken-firmware";
      $self->{sysobjectid} = "1.3.6.1.2.1.33";
    }
  }
}


package Classes::Generic;
our @ISA = qw(Classes::Device);
use strict;

sub init {
  my $self = shift;
  if ($self->mode =~ /.*/) {
    bless $self, 'Monitoring::GLPlugin::SNMP';
    $self->no_such_mode();
  }
}

package main;
#! /usr/bin/perl

use strict;
use File::Basename;

eval {
  if ( ! grep /AUTOLOAD/, keys %Monitoring::GLPlugin::) {
    require Monitoring::GLPlugin;
    require Monitoring::GLPlugin::SNMP;
  }
};
if ($@) {
  printf "UNKNOWN - module Monitoring::GLPlugin was not found. Either build a standalone version of this plugin or set PERL5LIB\n";
  printf "%s\n", $@;
  exit 3;
}

my $plugin = Classes::Device->new(
    shortname => '',
    usage => 'Usage: %s [ -v|--verbose ] [ -t <timeout> ] '.
        '--mode <what-to-do> '.
        '--hostname <network-component> --community <snmp-community>'.
        '  ...]',
    version => '$Revision: 2.7.1.2 $',
    blurb => 'This plugin checks various parameters of network components ',
    url => 'http://labs.consol.de/nagios/check_ups_health',
    timeout => 60,
);
$plugin->add_mode(
    internal => 'device::hardware::health',
    spec => 'hardware-health',
    alias => undef,
    help => 'Check the status of environmental equipment (fans, temperatures, power, selftests)',
);
$plugin->add_mode(
    internal => 'device::battery::health',
    spec => 'battery-health',
    alias => ['power-health'],
    help => 'Check the status of battery equipment (batteries, currencies)',
);
$plugin->add_snmp_modes();
$plugin->add_snmp_args();
$plugin->add_default_args();

$plugin->getopts();
$plugin->classify();
$plugin->validate_args();

if (! $plugin->check_messages()) {
  $plugin->init();
  if (! $plugin->check_messages()) {
    $plugin->add_ok($plugin->get_summary())
        if $plugin->get_summary();
    $plugin->add_ok($plugin->get_extendedinfo(" "))
        if $plugin->get_extendedinfo();
  }
}
my ($code, $message) = $plugin->opts->multiline ?
    $plugin->check_messages(join => "\n", join_all => ', ') :
    $plugin->check_messages(join => ', ', join_all => ', ');
$message .= sprintf "\n%s\n", $plugin->get_info("\n")
    if $plugin->opts->verbose >= 1;
#printf "%s\n", Data::Dumper::Dumper($plugin);
$plugin->nagios_exit($code, $message);


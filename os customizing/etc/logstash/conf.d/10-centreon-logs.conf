input {
    jdbc {
        jdbc_validate_connection => true
        jdbc_connection_string => "jdbc:mysql://localhost:3306/centreon_storage"
        jdbc_user => "backup"
        jdbc_password => "mFRiQYIuwHhCIk6s753Q"
        jdbc_driver_library => "/etc/logstash/jdbc/mysql-connector-java-5.1.39-bin.jar"
        jdbc_driver_class => "com.mysql.jdbc.Driver"
        statement => "SELECT ctime, log_id, host_id, host_name, instance_name, issue_id, msg_type, notification_cmd, notification_contact, output, retry, service_description, service_id, status, type as typ FROM logs WHERE log_id > :sql_last_value"
        last_run_metadata_path => "/tmp/logstash-centreon-logs.lastrun"
        record_last_run => true
        use_column_value => true
        tracking_column => "log_id"
        schedule => "* * * * *"
        tags => [ "jdbc", "centreon-logs", "mariadb" ]
        type => "centreon-logs"
        }
}

filter {
  if [type] == "centreon-logs" {
    date {
      match => [ "ctime", "UNIX" ]
      timezone => "Europe/Rome"
      target => "@timestamp"
    }
    translate {
      field => "[msg_type]"
      destination => "msg_description"
      dictionary => [
      "0", "Service alert",
      "1", "Host alert",
      "2", "Service notification",
      "3", "Host notification",
      "4", "Warning",
      "5", "External command",
      "6", "Current service state",
      "7", "Current host state",
      "8", "Initial service state",
      "9", "Initial host state",
      "10", "Acknowledge service problem external command",
      "11", "Acknowledge host problem external command"
      ]
    }
    
    if [msg_type] == 1 {
      translate {
        field => "[status]"
        destination => "status_description"
        dictionary => [
        "0", "Up",
        "1", "Down",
        "2", "Unreachable"
        ]
      }
    } 
    if [msg_type] == 0 {
      translate {
        field => "[status]"
        destination => "status_description"
        dictionary => [
        "0", "Ok",
        "1", "Warning",
        "2", "Critical",
        "3", "Unknown"
        ]
      }
    } 
    if [msg_type] in [ 0, 1 ] {
      translate {
        field => "[typ]"
        destination => "typ_description"
        dictionary => [
        "1", "Hard",
        "0", "Soft"
        ]
      }
    }  
  }
}

output {
  if [type] == "centreon-logs" {
    elasticsearch {
      hosts => [ "127.0.0.1:9200" ]
      index => "centreon-logs-%{+YYYY.MM.dd}"
      template_overwrite => true
      template => "/etc/logstash/templates/centreon-logs.json"
      template_name => "centreon-logs"
    }
  }
}

input {  
  file {
    path => "/var/log/sflowdata/logstash/sflow.csv"
    type => "sflow"
    tags => [ "sflow", "nfdump", "csv" ]
    start_position => "beginning"
  }
}

filter {
  if [type] == "sflow" {
    csv {
      columns => ["[sflow][time_start]", "[sflow][time_end]", "[sflow][duration]", "[sflow][ip_src]", "[sflow][ip_dst]", "[sflow][port_src]", "[sflow][port_dst]", "[sflow][protocol]", "[sflow][flags]", "[sflow][forward_status]", "[sflow][src_tos]", "[sflow][pkts_in]", "[sflow][bytes_in]", "[sflow][pkts_out]", "[sflow][bytes_out]", "[sflow][interface_in]", "[sflow][interface_out]", "[sflow][sas]", "[sflow][das]", "[sflow][netmask_src]", "[sflow][netmask_dst]", "[sflow][dst_type_of_service]", "[sflow][direction]", "[sflow][next_hop_router]", "[sflow][bgp_next_hop_router]", "[sflow][vlan_src]", "[sflow][vlan_dst]", "[sflow][mac_input_src]", "[sflow][mac_output_dst]", "[sflow][mac_input_dst]", "[sflow][mac_output_src]", "[sflow][mpls1]", "[sflow][mpls2]", "[sflow][mpls3]", "[sflow][mpls4]", "[sflow][mpls5]", "[sflow][mpls6]", "[sflow][mpls7]", "[sflow][mpls8]", "[sflow][mpls9]", "[sflow][mpls10]", "[sflow][latency_client]", "[sflow][latency_server]", "[sflow][latency_app]", "[sflow][host]", "[sflow][engine_id]", "[sflow][system_id]","[sflow][flow_timestamp]"]
      separator => ","
    }
    date {
      match => [ "[sflow][flow_timestamp]", "YYYY-MM-dd HH:mm:ss.SSS" ]
      timezone => "Europe/Rome"
      target => "@timestamp"
    }
    date {
      match => [ "[sflow][time_start]", "YYYY-MM-dd HH:mm:ss" ]
      timezone => "Europe/Rome"
      target => "[sflow][time_start]"
    }
    date {
      match => [ "[sflow][time_end]", "YYYY-MM-dd HH:mm:ss" ]
      timezone => "Europe/Rome"
      target => "[sflow][time_end]"
    }
    mutate {
      remove_field => [ "[sflow][flow_timestamp]" ]
    }
    if [sflow][ip_src]  {
      geoip {
        source => "[sflow][ip_src]"
        target => "geoip_src"
        database => "/etc/logstash/GeoLiteCity.dat"
      }
      mutate {
        convert => [ "[geoip_src][coordinates]", "float" ]
      }
    }
    if [sflow][ip_dst]  {
      geoip {
        source => "[sflow][ip_dst]"
        target => "geoip_src"
        database => "/etc/logstash/GeoLiteCity.dat"
      }
      mutate {
        convert => [ "[geoip_dst][coordinates]", "float" ]
      }
    }
    translate {
      field => "[sflow][port_src]"
      destination => "port_src"
      fallback => "no-match"
      dictionary_path => "/etc/logstash/dictionaries/iana_ports.yaml"
    }
    translate {
      field => "[sflow][port_dst]"
      destination => "port_dst"
      fallback => "no-match"
      dictionary_path => "/etc/logstash/dictionaries/iana_ports.yaml"
    }    
    if [port_src] == "no-match" {
      mutate {
        replace => [ "port_src", "%{[sflow][port_src]}" ]
      }
    }
    if [port_dst] == "no-match" {
      mutate {
        replace => [ "port_dst", "%{[sflow][port_dst]}" ]
      }
    }
  }
}

output {
  if [type] == "sflow" {
    elasticsearch {
      hosts => ["127.0.0.1:9200"]
      index => "sflow-%{+YYYY.MM.dd}"
      template_overwrite => true
      template => "/etc/logstash/templates/sflow.json"
      template_name => "sflow"
    }
  }
}